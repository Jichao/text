// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_024_000)
{
    // 22A8 0041;	
    // (⊨) TRUE	[06B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A8, 0x0041 };
    uint32_t const ces[9] = { 0x06B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_001)
{
    // 22AD 0061;	
    // (⊭) NOT TRUE	[06B6 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AD, 0x0061 };
    uint32_t const ces[11] = { 0x06B6, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_002)
{
    // 22AD 0041;	
    // (⊭) NOT TRUE	[06B6 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22AD, 0x0041 };
    uint32_t const ces[11] = { 0x06B6, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_003)
{
    // 22A8 0062;	
    // (⊨) TRUE	[06B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A8, 0x0062 };
    uint32_t const ces[9] = { 0x06B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_004)
{
    // 22AD 0062;	
    // (⊭) NOT TRUE	[06B6 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AD, 0x0062 };
    uint32_t const ces[11] = { 0x06B6, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_005)
{
    // 22A9 0338 0334;	
    // (⊮) FORCES, COMBINING LONG SOLIDUS OVERLAY	[06B7 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22A9, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06B7, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_006)
{
    // 22AE 0334;	
    // (⊮) DOES NOT FORCE	[06B7 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AE, 0x0334 };
    uint32_t const ces[10] = { 0x06B7, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_007)
{
    // 22A9 0021;	
    // (⊩) FORCES	[06B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A9, 0x0021 };
    uint32_t const ces[9] = { 0x06B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_008)
{
    // 22AE 0021;	
    // (⊮) DOES NOT FORCE	[06B7 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AE, 0x0021 };
    uint32_t const ces[11] = { 0x06B7, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_009)
{
    // 22A9 003F;	
    // (⊩) FORCES	[06B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A9, 0x003F };
    uint32_t const ces[9] = { 0x06B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_010)
{
    // 22AE 003F;	
    // (⊮) DOES NOT FORCE	[06B7 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AE, 0x003F };
    uint32_t const ces[11] = { 0x06B7, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_011)
{
    // 22A9 0061;	
    // (⊩) FORCES	[06B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A9, 0x0061 };
    uint32_t const ces[9] = { 0x06B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_012)
{
    // 22A9 0041;	
    // (⊩) FORCES	[06B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22A9, 0x0041 };
    uint32_t const ces[9] = { 0x06B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_013)
{
    // 22AE 0061;	
    // (⊮) DOES NOT FORCE	[06B7 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AE, 0x0061 };
    uint32_t const ces[11] = { 0x06B7, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_014)
{
    // 22AE 0041;	
    // (⊮) DOES NOT FORCE	[06B7 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22AE, 0x0041 };
    uint32_t const ces[11] = { 0x06B7, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_015)
{
    // 22A9 0062;	
    // (⊩) FORCES	[06B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22A9, 0x0062 };
    uint32_t const ces[9] = { 0x06B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_016)
{
    // 22AE 0062;	
    // (⊮) DOES NOT FORCE	[06B7 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AE, 0x0062 };
    uint32_t const ces[11] = { 0x06B7, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_017)
{
    // 22AA 0021;	
    // (⊪) TRIPLE VERTICAL BAR RIGHT TURNSTILE	[06B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AA, 0x0021 };
    uint32_t const ces[9] = { 0x06B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_018)
{
    // 22AA 003F;	
    // (⊪) TRIPLE VERTICAL BAR RIGHT TURNSTILE	[06B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AA, 0x003F };
    uint32_t const ces[9] = { 0x06B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_019)
{
    // 22AA 0061;	
    // (⊪) TRIPLE VERTICAL BAR RIGHT TURNSTILE	[06B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AA, 0x0061 };
    uint32_t const ces[9] = { 0x06B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_020)
{
    // 22AA 0041;	
    // (⊪) TRIPLE VERTICAL BAR RIGHT TURNSTILE	[06B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22AA, 0x0041 };
    uint32_t const ces[9] = { 0x06B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_021)
{
    // 22AA 0062;	
    // (⊪) TRIPLE VERTICAL BAR RIGHT TURNSTILE	[06B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AA, 0x0062 };
    uint32_t const ces[9] = { 0x06B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_022)
{
    // 22AB 0338 0334;	
    // (⊯) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE, COMBINING LONG SOLIDUS OVERLAY	[06B9 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22AB, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06B9, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_023)
{
    // 22AF 0334;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AF, 0x0334 };
    uint32_t const ces[10] = { 0x06B9, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_024)
{
    // 22AB 0021;	
    // (⊫) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AB, 0x0021 };
    uint32_t const ces[9] = { 0x06B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_025)
{
    // 22AF 0021;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AF, 0x0021 };
    uint32_t const ces[11] = { 0x06B9, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_026)
{
    // 22AB 003F;	
    // (⊫) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AB, 0x003F };
    uint32_t const ces[9] = { 0x06B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_027)
{
    // 22AF 003F;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AF, 0x003F };
    uint32_t const ces[11] = { 0x06B9, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_028)
{
    // 22AB 0061;	
    // (⊫) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AB, 0x0061 };
    uint32_t const ces[9] = { 0x06B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_029)
{
    // 22AB 0041;	
    // (⊫) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22AB, 0x0041 };
    uint32_t const ces[9] = { 0x06B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_030)
{
    // 22AF 0061;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AF, 0x0061 };
    uint32_t const ces[11] = { 0x06B9, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_031)
{
    // 22AF 0041;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22AF, 0x0041 };
    uint32_t const ces[11] = { 0x06B9, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_032)
{
    // 22AB 0062;	
    // (⊫) DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22AB, 0x0062 };
    uint32_t const ces[9] = { 0x06B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_033)
{
    // 22AF 0062;	
    // (⊯) NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE	[06B9 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22AF, 0x0062 };
    uint32_t const ces[11] = { 0x06B9, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_034)
{
    // 22B0 0021;	
    // (⊰) PRECEDES UNDER RELATION	[06BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B0, 0x0021 };
    uint32_t const ces[9] = { 0x06BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_035)
{
    // 22B0 003F;	
    // (⊰) PRECEDES UNDER RELATION	[06BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B0, 0x003F };
    uint32_t const ces[9] = { 0x06BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_036)
{
    // 22B0 0061;	
    // (⊰) PRECEDES UNDER RELATION	[06BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B0, 0x0061 };
    uint32_t const ces[9] = { 0x06BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_037)
{
    // 22B0 0041;	
    // (⊰) PRECEDES UNDER RELATION	[06BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B0, 0x0041 };
    uint32_t const ces[9] = { 0x06BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_038)
{
    // 22B0 0062;	
    // (⊰) PRECEDES UNDER RELATION	[06BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B0, 0x0062 };
    uint32_t const ces[9] = { 0x06BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_039)
{
    // 22B1 0021;	
    // (⊱) SUCCEEDS UNDER RELATION	[06BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B1, 0x0021 };
    uint32_t const ces[9] = { 0x06BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_040)
{
    // 22B1 003F;	
    // (⊱) SUCCEEDS UNDER RELATION	[06BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B1, 0x003F };
    uint32_t const ces[9] = { 0x06BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_041)
{
    // 22B1 0061;	
    // (⊱) SUCCEEDS UNDER RELATION	[06BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B1, 0x0061 };
    uint32_t const ces[9] = { 0x06BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_042)
{
    // 22B1 0041;	
    // (⊱) SUCCEEDS UNDER RELATION	[06BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B1, 0x0041 };
    uint32_t const ces[9] = { 0x06BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_043)
{
    // 22B1 0062;	
    // (⊱) SUCCEEDS UNDER RELATION	[06BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B1, 0x0062 };
    uint32_t const ces[9] = { 0x06BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_044)
{
    // 22B2 0338 0334;	
    // (⋪) NORMAL SUBGROUP OF, COMBINING LONG SOLIDUS OVERLAY	[06BC | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22B2, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06BC, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_045)
{
    // 22EA 0334;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EA, 0x0334 };
    uint32_t const ces[10] = { 0x06BC, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_046)
{
    // 22B2 0021;	
    // (⊲) NORMAL SUBGROUP OF	[06BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B2, 0x0021 };
    uint32_t const ces[9] = { 0x06BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_047)
{
    // 22EA 0021;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EA, 0x0021 };
    uint32_t const ces[11] = { 0x06BC, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_048)
{
    // 22B2 003F;	
    // (⊲) NORMAL SUBGROUP OF	[06BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B2, 0x003F };
    uint32_t const ces[9] = { 0x06BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_049)
{
    // 22EA 003F;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EA, 0x003F };
    uint32_t const ces[11] = { 0x06BC, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_050)
{
    // 22B2 0061;	
    // (⊲) NORMAL SUBGROUP OF	[06BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B2, 0x0061 };
    uint32_t const ces[9] = { 0x06BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_051)
{
    // 22B2 0041;	
    // (⊲) NORMAL SUBGROUP OF	[06BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B2, 0x0041 };
    uint32_t const ces[9] = { 0x06BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_052)
{
    // 22EA 0061;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EA, 0x0061 };
    uint32_t const ces[11] = { 0x06BC, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_053)
{
    // 22EA 0041;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22EA, 0x0041 };
    uint32_t const ces[11] = { 0x06BC, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_054)
{
    // 22B2 0062;	
    // (⊲) NORMAL SUBGROUP OF	[06BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B2, 0x0062 };
    uint32_t const ces[9] = { 0x06BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_055)
{
    // 22EA 0062;	
    // (⋪) NOT NORMAL SUBGROUP OF	[06BC 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EA, 0x0062 };
    uint32_t const ces[11] = { 0x06BC, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_056)
{
    // 22B3 0338 0334;	
    // (⋫) CONTAINS AS NORMAL SUBGROUP, COMBINING LONG SOLIDUS OVERLAY	[06BD | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22B3, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06BD, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_057)
{
    // 22EB 0334;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EB, 0x0334 };
    uint32_t const ces[10] = { 0x06BD, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_058)
{
    // 22B3 0021;	
    // (⊳) CONTAINS AS NORMAL SUBGROUP	[06BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B3, 0x0021 };
    uint32_t const ces[9] = { 0x06BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_059)
{
    // 22EB 0021;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EB, 0x0021 };
    uint32_t const ces[11] = { 0x06BD, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_060)
{
    // 22B3 003F;	
    // (⊳) CONTAINS AS NORMAL SUBGROUP	[06BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B3, 0x003F };
    uint32_t const ces[9] = { 0x06BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_061)
{
    // 22EB 003F;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EB, 0x003F };
    uint32_t const ces[11] = { 0x06BD, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_062)
{
    // 22B3 0061;	
    // (⊳) CONTAINS AS NORMAL SUBGROUP	[06BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B3, 0x0061 };
    uint32_t const ces[9] = { 0x06BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_063)
{
    // 22B3 0041;	
    // (⊳) CONTAINS AS NORMAL SUBGROUP	[06BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B3, 0x0041 };
    uint32_t const ces[9] = { 0x06BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_064)
{
    // 22EB 0061;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EB, 0x0061 };
    uint32_t const ces[11] = { 0x06BD, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_065)
{
    // 22EB 0041;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22EB, 0x0041 };
    uint32_t const ces[11] = { 0x06BD, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_066)
{
    // 22B3 0062;	
    // (⊳) CONTAINS AS NORMAL SUBGROUP	[06BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B3, 0x0062 };
    uint32_t const ces[9] = { 0x06BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_067)
{
    // 22EB 0062;	
    // (⋫) DOES NOT CONTAIN AS NORMAL SUBGROUP	[06BD 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EB, 0x0062 };
    uint32_t const ces[11] = { 0x06BD, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_068)
{
    // 22B4 0338 0334;	
    // (⋬) NORMAL SUBGROUP OF OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[06BE | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22B4, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06BE, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_069)
{
    // 22EC 0334;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EC, 0x0334 };
    uint32_t const ces[10] = { 0x06BE, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_070)
{
    // 22B4 0021;	
    // (⊴) NORMAL SUBGROUP OF OR EQUAL TO	[06BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B4, 0x0021 };
    uint32_t const ces[9] = { 0x06BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_071)
{
    // 22EC 0021;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EC, 0x0021 };
    uint32_t const ces[11] = { 0x06BE, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_072)
{
    // 22B4 003F;	
    // (⊴) NORMAL SUBGROUP OF OR EQUAL TO	[06BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B4, 0x003F };
    uint32_t const ces[9] = { 0x06BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_073)
{
    // 22EC 003F;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EC, 0x003F };
    uint32_t const ces[11] = { 0x06BE, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_074)
{
    // 22B4 0061;	
    // (⊴) NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B4, 0x0061 };
    uint32_t const ces[9] = { 0x06BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_075)
{
    // 22B4 0041;	
    // (⊴) NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B4, 0x0041 };
    uint32_t const ces[9] = { 0x06BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_076)
{
    // 22EC 0061;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EC, 0x0061 };
    uint32_t const ces[11] = { 0x06BE, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_077)
{
    // 22EC 0041;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22EC, 0x0041 };
    uint32_t const ces[11] = { 0x06BE, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_078)
{
    // 22B4 0062;	
    // (⊴) NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B4, 0x0062 };
    uint32_t const ces[9] = { 0x06BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_079)
{
    // 22EC 0062;	
    // (⋬) NOT NORMAL SUBGROUP OF OR EQUAL TO	[06BE 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22EC, 0x0062 };
    uint32_t const ces[11] = { 0x06BE, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_080)
{
    // 22B5 0338 0334;	
    // (⋭) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO, COMBINING LONG SOLIDUS OVERLAY	[06BF | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x22B5, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x06BF, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_081)
{
    // 22ED 0334;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22ED, 0x0334 };
    uint32_t const ces[10] = { 0x06BF, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_082)
{
    // 22B5 0021;	
    // (⊵) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO	[06BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B5, 0x0021 };
    uint32_t const ces[9] = { 0x06BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_083)
{
    // 22ED 0021;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22ED, 0x0021 };
    uint32_t const ces[11] = { 0x06BF, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_084)
{
    // 22B5 003F;	
    // (⊵) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO	[06BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B5, 0x003F };
    uint32_t const ces[9] = { 0x06BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_085)
{
    // 22ED 003F;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22ED, 0x003F };
    uint32_t const ces[11] = { 0x06BF, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_086)
{
    // 22B5 0061;	
    // (⊵) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO	[06BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B5, 0x0061 };
    uint32_t const ces[9] = { 0x06BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_087)
{
    // 22B5 0041;	
    // (⊵) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO	[06BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B5, 0x0041 };
    uint32_t const ces[9] = { 0x06BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_088)
{
    // 22ED 0061;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22ED, 0x0061 };
    uint32_t const ces[11] = { 0x06BF, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_089)
{
    // 22ED 0041;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x22ED, 0x0041 };
    uint32_t const ces[11] = { 0x06BF, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_090)
{
    // 22B5 0062;	
    // (⊵) CONTAINS AS NORMAL SUBGROUP OR EQUAL TO	[06BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B5, 0x0062 };
    uint32_t const ces[9] = { 0x06BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_091)
{
    // 22ED 0062;	
    // (⋭) DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL	[06BF 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x22ED, 0x0062 };
    uint32_t const ces[11] = { 0x06BF, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_092)
{
    // 22B6 0021;	
    // (⊶) ORIGINAL OF	[06C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B6, 0x0021 };
    uint32_t const ces[9] = { 0x06C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_093)
{
    // 22B6 003F;	
    // (⊶) ORIGINAL OF	[06C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B6, 0x003F };
    uint32_t const ces[9] = { 0x06C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_094)
{
    // 22B6 0061;	
    // (⊶) ORIGINAL OF	[06C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B6, 0x0061 };
    uint32_t const ces[9] = { 0x06C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_095)
{
    // 22B6 0041;	
    // (⊶) ORIGINAL OF	[06C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B6, 0x0041 };
    uint32_t const ces[9] = { 0x06C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_096)
{
    // 22B6 0062;	
    // (⊶) ORIGINAL OF	[06C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B6, 0x0062 };
    uint32_t const ces[9] = { 0x06C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_097)
{
    // 22B7 0021;	
    // (⊷) IMAGE OF	[06C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B7, 0x0021 };
    uint32_t const ces[9] = { 0x06C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_098)
{
    // 22B7 003F;	
    // (⊷) IMAGE OF	[06C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B7, 0x003F };
    uint32_t const ces[9] = { 0x06C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_099)
{
    // 22B7 0061;	
    // (⊷) IMAGE OF	[06C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B7, 0x0061 };
    uint32_t const ces[9] = { 0x06C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_100)
{
    // 22B7 0041;	
    // (⊷) IMAGE OF	[06C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B7, 0x0041 };
    uint32_t const ces[9] = { 0x06C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_101)
{
    // 22B7 0062;	
    // (⊷) IMAGE OF	[06C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B7, 0x0062 };
    uint32_t const ces[9] = { 0x06C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_102)
{
    // 22B8 0021;	
    // (⊸) MULTIMAP	[06C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B8, 0x0021 };
    uint32_t const ces[9] = { 0x06C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_103)
{
    // 22B8 003F;	
    // (⊸) MULTIMAP	[06C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B8, 0x003F };
    uint32_t const ces[9] = { 0x06C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_104)
{
    // 22B8 0061;	
    // (⊸) MULTIMAP	[06C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B8, 0x0061 };
    uint32_t const ces[9] = { 0x06C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_105)
{
    // 22B8 0041;	
    // (⊸) MULTIMAP	[06C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B8, 0x0041 };
    uint32_t const ces[9] = { 0x06C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_106)
{
    // 22B8 0062;	
    // (⊸) MULTIMAP	[06C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B8, 0x0062 };
    uint32_t const ces[9] = { 0x06C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_107)
{
    // 22B9 0021;	
    // (⊹) HERMITIAN CONJUGATE MATRIX	[06C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B9, 0x0021 };
    uint32_t const ces[9] = { 0x06C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_108)
{
    // 22B9 003F;	
    // (⊹) HERMITIAN CONJUGATE MATRIX	[06C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B9, 0x003F };
    uint32_t const ces[9] = { 0x06C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_109)
{
    // 22B9 0061;	
    // (⊹) HERMITIAN CONJUGATE MATRIX	[06C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B9, 0x0061 };
    uint32_t const ces[9] = { 0x06C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_110)
{
    // 22B9 0041;	
    // (⊹) HERMITIAN CONJUGATE MATRIX	[06C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22B9, 0x0041 };
    uint32_t const ces[9] = { 0x06C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_111)
{
    // 22B9 0062;	
    // (⊹) HERMITIAN CONJUGATE MATRIX	[06C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22B9, 0x0062 };
    uint32_t const ces[9] = { 0x06C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_112)
{
    // 22BA 0021;	
    // (⊺) INTERCALATE	[06C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BA, 0x0021 };
    uint32_t const ces[9] = { 0x06C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_113)
{
    // 22BA 003F;	
    // (⊺) INTERCALATE	[06C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BA, 0x003F };
    uint32_t const ces[9] = { 0x06C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_114)
{
    // 22BA 0061;	
    // (⊺) INTERCALATE	[06C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BA, 0x0061 };
    uint32_t const ces[9] = { 0x06C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_115)
{
    // 22BA 0041;	
    // (⊺) INTERCALATE	[06C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BA, 0x0041 };
    uint32_t const ces[9] = { 0x06C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_116)
{
    // 22BA 0062;	
    // (⊺) INTERCALATE	[06C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BA, 0x0062 };
    uint32_t const ces[9] = { 0x06C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_117)
{
    // 22BB 0021;	
    // (⊻) XOR	[06C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BB, 0x0021 };
    uint32_t const ces[9] = { 0x06C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_118)
{
    // 22BB 003F;	
    // (⊻) XOR	[06C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BB, 0x003F };
    uint32_t const ces[9] = { 0x06C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_119)
{
    // 22BB 0061;	
    // (⊻) XOR	[06C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BB, 0x0061 };
    uint32_t const ces[9] = { 0x06C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_120)
{
    // 22BB 0041;	
    // (⊻) XOR	[06C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BB, 0x0041 };
    uint32_t const ces[9] = { 0x06C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_121)
{
    // 22BB 0062;	
    // (⊻) XOR	[06C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BB, 0x0062 };
    uint32_t const ces[9] = { 0x06C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_122)
{
    // 22BC 0021;	
    // (⊼) NAND	[06C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BC, 0x0021 };
    uint32_t const ces[9] = { 0x06C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_123)
{
    // 22BC 003F;	
    // (⊼) NAND	[06C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BC, 0x003F };
    uint32_t const ces[9] = { 0x06C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_124)
{
    // 22BC 0061;	
    // (⊼) NAND	[06C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BC, 0x0061 };
    uint32_t const ces[9] = { 0x06C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_125)
{
    // 22BC 0041;	
    // (⊼) NAND	[06C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BC, 0x0041 };
    uint32_t const ces[9] = { 0x06C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_126)
{
    // 22BC 0062;	
    // (⊼) NAND	[06C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BC, 0x0062 };
    uint32_t const ces[9] = { 0x06C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_127)
{
    // 214B 0021;	
    // (⅋) TURNED AMPERSAND	[06C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214B, 0x0021 };
    uint32_t const ces[9] = { 0x06C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_128)
{
    // 214B 003F;	
    // (⅋) TURNED AMPERSAND	[06C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214B, 0x003F };
    uint32_t const ces[9] = { 0x06C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_129)
{
    // 214B 0061;	
    // (⅋) TURNED AMPERSAND	[06C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214B, 0x0061 };
    uint32_t const ces[9] = { 0x06C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_130)
{
    // 214B 0041;	
    // (⅋) TURNED AMPERSAND	[06C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x214B, 0x0041 };
    uint32_t const ces[9] = { 0x06C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_131)
{
    // 214B 0062;	
    // (⅋) TURNED AMPERSAND	[06C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214B, 0x0062 };
    uint32_t const ces[9] = { 0x06C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_132)
{
    // 22BD 0021;	
    // (⊽) NOR	[06C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BD, 0x0021 };
    uint32_t const ces[9] = { 0x06C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_133)
{
    // 22BD 003F;	
    // (⊽) NOR	[06C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BD, 0x003F };
    uint32_t const ces[9] = { 0x06C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_134)
{
    // 22BD 0061;	
    // (⊽) NOR	[06C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BD, 0x0061 };
    uint32_t const ces[9] = { 0x06C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_135)
{
    // 22BD 0041;	
    // (⊽) NOR	[06C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BD, 0x0041 };
    uint32_t const ces[9] = { 0x06C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_136)
{
    // 22BD 0062;	
    // (⊽) NOR	[06C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BD, 0x0062 };
    uint32_t const ces[9] = { 0x06C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_137)
{
    // 22BE 0021;	
    // (⊾) RIGHT ANGLE WITH ARC	[06C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BE, 0x0021 };
    uint32_t const ces[9] = { 0x06C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_138)
{
    // 22BE 003F;	
    // (⊾) RIGHT ANGLE WITH ARC	[06C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BE, 0x003F };
    uint32_t const ces[9] = { 0x06C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_139)
{
    // 22BE 0061;	
    // (⊾) RIGHT ANGLE WITH ARC	[06C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BE, 0x0061 };
    uint32_t const ces[9] = { 0x06C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_140)
{
    // 22BE 0041;	
    // (⊾) RIGHT ANGLE WITH ARC	[06C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BE, 0x0041 };
    uint32_t const ces[9] = { 0x06C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_141)
{
    // 22BE 0062;	
    // (⊾) RIGHT ANGLE WITH ARC	[06C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BE, 0x0062 };
    uint32_t const ces[9] = { 0x06C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_142)
{
    // 22BF 0021;	
    // (⊿) RIGHT TRIANGLE	[06CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BF, 0x0021 };
    uint32_t const ces[9] = { 0x06CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_143)
{
    // 22BF 003F;	
    // (⊿) RIGHT TRIANGLE	[06CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BF, 0x003F };
    uint32_t const ces[9] = { 0x06CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_144)
{
    // 22BF 0061;	
    // (⊿) RIGHT TRIANGLE	[06CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BF, 0x0061 };
    uint32_t const ces[9] = { 0x06CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_145)
{
    // 22BF 0041;	
    // (⊿) RIGHT TRIANGLE	[06CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22BF, 0x0041 };
    uint32_t const ces[9] = { 0x06CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_146)
{
    // 22BF 0062;	
    // (⊿) RIGHT TRIANGLE	[06CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22BF, 0x0062 };
    uint32_t const ces[9] = { 0x06CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_147)
{
    // 22C0 0021;	
    // (⋀) N-ARY LOGICAL AND	[06CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C0, 0x0021 };
    uint32_t const ces[9] = { 0x06CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_148)
{
    // 22C0 003F;	
    // (⋀) N-ARY LOGICAL AND	[06CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C0, 0x003F };
    uint32_t const ces[9] = { 0x06CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_149)
{
    // 22C0 0061;	
    // (⋀) N-ARY LOGICAL AND	[06CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C0, 0x0061 };
    uint32_t const ces[9] = { 0x06CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_150)
{
    // 22C0 0041;	
    // (⋀) N-ARY LOGICAL AND	[06CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C0, 0x0041 };
    uint32_t const ces[9] = { 0x06CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_151)
{
    // 22C0 0062;	
    // (⋀) N-ARY LOGICAL AND	[06CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C0, 0x0062 };
    uint32_t const ces[9] = { 0x06CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_152)
{
    // 22C1 0021;	
    // (⋁) N-ARY LOGICAL OR	[06CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C1, 0x0021 };
    uint32_t const ces[9] = { 0x06CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_153)
{
    // 22C1 003F;	
    // (⋁) N-ARY LOGICAL OR	[06CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C1, 0x003F };
    uint32_t const ces[9] = { 0x06CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_154)
{
    // 22C1 0061;	
    // (⋁) N-ARY LOGICAL OR	[06CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C1, 0x0061 };
    uint32_t const ces[9] = { 0x06CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_155)
{
    // 22C1 0041;	
    // (⋁) N-ARY LOGICAL OR	[06CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C1, 0x0041 };
    uint32_t const ces[9] = { 0x06CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_156)
{
    // 22C1 0062;	
    // (⋁) N-ARY LOGICAL OR	[06CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C1, 0x0062 };
    uint32_t const ces[9] = { 0x06CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_157)
{
    // 22C2 0021;	
    // (⋂) N-ARY INTERSECTION	[06CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C2, 0x0021 };
    uint32_t const ces[9] = { 0x06CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_158)
{
    // 22C2 003F;	
    // (⋂) N-ARY INTERSECTION	[06CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C2, 0x003F };
    uint32_t const ces[9] = { 0x06CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_159)
{
    // 22C2 0061;	
    // (⋂) N-ARY INTERSECTION	[06CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C2, 0x0061 };
    uint32_t const ces[9] = { 0x06CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_160)
{
    // 22C2 0041;	
    // (⋂) N-ARY INTERSECTION	[06CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C2, 0x0041 };
    uint32_t const ces[9] = { 0x06CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_161)
{
    // 22C2 0062;	
    // (⋂) N-ARY INTERSECTION	[06CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C2, 0x0062 };
    uint32_t const ces[9] = { 0x06CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_162)
{
    // 22C3 0021;	
    // (⋃) N-ARY UNION	[06CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C3, 0x0021 };
    uint32_t const ces[9] = { 0x06CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_163)
{
    // 22C3 003F;	
    // (⋃) N-ARY UNION	[06CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C3, 0x003F };
    uint32_t const ces[9] = { 0x06CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_164)
{
    // 22C3 0061;	
    // (⋃) N-ARY UNION	[06CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C3, 0x0061 };
    uint32_t const ces[9] = { 0x06CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_165)
{
    // 22C3 0041;	
    // (⋃) N-ARY UNION	[06CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C3, 0x0041 };
    uint32_t const ces[9] = { 0x06CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_166)
{
    // 22C3 0062;	
    // (⋃) N-ARY UNION	[06CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C3, 0x0062 };
    uint32_t const ces[9] = { 0x06CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_167)
{
    // 22C4 0021;	
    // (⋄) DIAMOND OPERATOR	[06CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C4, 0x0021 };
    uint32_t const ces[9] = { 0x06CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_168)
{
    // 22C4 003F;	
    // (⋄) DIAMOND OPERATOR	[06CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C4, 0x003F };
    uint32_t const ces[9] = { 0x06CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_169)
{
    // 22C4 0061;	
    // (⋄) DIAMOND OPERATOR	[06CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C4, 0x0061 };
    uint32_t const ces[9] = { 0x06CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_170)
{
    // 22C4 0041;	
    // (⋄) DIAMOND OPERATOR	[06CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C4, 0x0041 };
    uint32_t const ces[9] = { 0x06CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_171)
{
    // 22C4 0062;	
    // (⋄) DIAMOND OPERATOR	[06CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C4, 0x0062 };
    uint32_t const ces[9] = { 0x06CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_172)
{
    // 22C5 0021;	
    // (⋅) DOT OPERATOR	[06D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C5, 0x0021 };
    uint32_t const ces[9] = { 0x06D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_173)
{
    // 22C5 003F;	
    // (⋅) DOT OPERATOR	[06D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C5, 0x003F };
    uint32_t const ces[9] = { 0x06D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_174)
{
    // 22C5 0061;	
    // (⋅) DOT OPERATOR	[06D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C5, 0x0061 };
    uint32_t const ces[9] = { 0x06D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_175)
{
    // 22C5 0041;	
    // (⋅) DOT OPERATOR	[06D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C5, 0x0041 };
    uint32_t const ces[9] = { 0x06D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_176)
{
    // 22C5 0062;	
    // (⋅) DOT OPERATOR	[06D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C5, 0x0062 };
    uint32_t const ces[9] = { 0x06D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_177)
{
    // 22C6 0021;	
    // (⋆) STAR OPERATOR	[06D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C6, 0x0021 };
    uint32_t const ces[9] = { 0x06D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_178)
{
    // 22C6 003F;	
    // (⋆) STAR OPERATOR	[06D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C6, 0x003F };
    uint32_t const ces[9] = { 0x06D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_179)
{
    // 22C6 0061;	
    // (⋆) STAR OPERATOR	[06D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C6, 0x0061 };
    uint32_t const ces[9] = { 0x06D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_180)
{
    // 22C6 0041;	
    // (⋆) STAR OPERATOR	[06D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C6, 0x0041 };
    uint32_t const ces[9] = { 0x06D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_181)
{
    // 22C6 0062;	
    // (⋆) STAR OPERATOR	[06D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C6, 0x0062 };
    uint32_t const ces[9] = { 0x06D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_182)
{
    // 22C7 0021;	
    // (⋇) DIVISION TIMES	[06D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C7, 0x0021 };
    uint32_t const ces[9] = { 0x06D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_183)
{
    // 22C7 003F;	
    // (⋇) DIVISION TIMES	[06D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C7, 0x003F };
    uint32_t const ces[9] = { 0x06D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_184)
{
    // 22C7 0061;	
    // (⋇) DIVISION TIMES	[06D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C7, 0x0061 };
    uint32_t const ces[9] = { 0x06D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_185)
{
    // 22C7 0041;	
    // (⋇) DIVISION TIMES	[06D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C7, 0x0041 };
    uint32_t const ces[9] = { 0x06D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_186)
{
    // 22C7 0062;	
    // (⋇) DIVISION TIMES	[06D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C7, 0x0062 };
    uint32_t const ces[9] = { 0x06D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_187)
{
    // 22C8 0021;	
    // (⋈) BOWTIE	[06D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C8, 0x0021 };
    uint32_t const ces[9] = { 0x06D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_188)
{
    // 22C8 003F;	
    // (⋈) BOWTIE	[06D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C8, 0x003F };
    uint32_t const ces[9] = { 0x06D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_189)
{
    // 22C8 0061;	
    // (⋈) BOWTIE	[06D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C8, 0x0061 };
    uint32_t const ces[9] = { 0x06D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_190)
{
    // 22C8 0041;	
    // (⋈) BOWTIE	[06D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C8, 0x0041 };
    uint32_t const ces[9] = { 0x06D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_191)
{
    // 22C8 0062;	
    // (⋈) BOWTIE	[06D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C8, 0x0062 };
    uint32_t const ces[9] = { 0x06D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_192)
{
    // 22C9 0021;	
    // (⋉) LEFT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C9, 0x0021 };
    uint32_t const ces[9] = { 0x06D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_193)
{
    // 22C9 003F;	
    // (⋉) LEFT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C9, 0x003F };
    uint32_t const ces[9] = { 0x06D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_194)
{
    // 22C9 0061;	
    // (⋉) LEFT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C9, 0x0061 };
    uint32_t const ces[9] = { 0x06D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_195)
{
    // 22C9 0041;	
    // (⋉) LEFT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22C9, 0x0041 };
    uint32_t const ces[9] = { 0x06D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_196)
{
    // 22C9 0062;	
    // (⋉) LEFT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22C9, 0x0062 };
    uint32_t const ces[9] = { 0x06D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_197)
{
    // 22CA 0021;	
    // (⋊) RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CA, 0x0021 };
    uint32_t const ces[9] = { 0x06D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_198)
{
    // 22CA 003F;	
    // (⋊) RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CA, 0x003F };
    uint32_t const ces[9] = { 0x06D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_199)
{
    // 22CA 0061;	
    // (⋊) RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CA, 0x0061 };
    uint32_t const ces[9] = { 0x06D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_200)
{
    // 22CA 0041;	
    // (⋊) RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CA, 0x0041 };
    uint32_t const ces[9] = { 0x06D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_201)
{
    // 22CA 0062;	
    // (⋊) RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT	[06D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CA, 0x0062 };
    uint32_t const ces[9] = { 0x06D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_202)
{
    // 22CB 0021;	
    // (⋋) LEFT SEMIDIRECT PRODUCT	[06D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CB, 0x0021 };
    uint32_t const ces[9] = { 0x06D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_203)
{
    // 22CB 003F;	
    // (⋋) LEFT SEMIDIRECT PRODUCT	[06D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CB, 0x003F };
    uint32_t const ces[9] = { 0x06D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_204)
{
    // 22CB 0061;	
    // (⋋) LEFT SEMIDIRECT PRODUCT	[06D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CB, 0x0061 };
    uint32_t const ces[9] = { 0x06D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_205)
{
    // 22CB 0041;	
    // (⋋) LEFT SEMIDIRECT PRODUCT	[06D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CB, 0x0041 };
    uint32_t const ces[9] = { 0x06D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_206)
{
    // 22CB 0062;	
    // (⋋) LEFT SEMIDIRECT PRODUCT	[06D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CB, 0x0062 };
    uint32_t const ces[9] = { 0x06D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_207)
{
    // 22CC 0021;	
    // (⋌) RIGHT SEMIDIRECT PRODUCT	[06D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CC, 0x0021 };
    uint32_t const ces[9] = { 0x06D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_208)
{
    // 22CC 003F;	
    // (⋌) RIGHT SEMIDIRECT PRODUCT	[06D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CC, 0x003F };
    uint32_t const ces[9] = { 0x06D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_209)
{
    // 22CC 0061;	
    // (⋌) RIGHT SEMIDIRECT PRODUCT	[06D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CC, 0x0061 };
    uint32_t const ces[9] = { 0x06D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_210)
{
    // 22CC 0041;	
    // (⋌) RIGHT SEMIDIRECT PRODUCT	[06D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CC, 0x0041 };
    uint32_t const ces[9] = { 0x06D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_211)
{
    // 22CC 0062;	
    // (⋌) RIGHT SEMIDIRECT PRODUCT	[06D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CC, 0x0062 };
    uint32_t const ces[9] = { 0x06D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_212)
{
    // 22CD 0021;	
    // (⋍) REVERSED TILDE EQUALS	[06D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CD, 0x0021 };
    uint32_t const ces[9] = { 0x06D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_213)
{
    // 22CD 003F;	
    // (⋍) REVERSED TILDE EQUALS	[06D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CD, 0x003F };
    uint32_t const ces[9] = { 0x06D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_214)
{
    // 22CD 0061;	
    // (⋍) REVERSED TILDE EQUALS	[06D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CD, 0x0061 };
    uint32_t const ces[9] = { 0x06D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_215)
{
    // 22CD 0041;	
    // (⋍) REVERSED TILDE EQUALS	[06D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CD, 0x0041 };
    uint32_t const ces[9] = { 0x06D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_216)
{
    // 22CD 0062;	
    // (⋍) REVERSED TILDE EQUALS	[06D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CD, 0x0062 };
    uint32_t const ces[9] = { 0x06D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_217)
{
    // 22CE 0021;	
    // (⋎) CURLY LOGICAL OR	[06D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CE, 0x0021 };
    uint32_t const ces[9] = { 0x06D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_218)
{
    // 22CE 003F;	
    // (⋎) CURLY LOGICAL OR	[06D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CE, 0x003F };
    uint32_t const ces[9] = { 0x06D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_219)
{
    // 22CE 0061;	
    // (⋎) CURLY LOGICAL OR	[06D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CE, 0x0061 };
    uint32_t const ces[9] = { 0x06D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_220)
{
    // 22CE 0041;	
    // (⋎) CURLY LOGICAL OR	[06D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CE, 0x0041 };
    uint32_t const ces[9] = { 0x06D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_221)
{
    // 22CE 0062;	
    // (⋎) CURLY LOGICAL OR	[06D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CE, 0x0062 };
    uint32_t const ces[9] = { 0x06D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_222)
{
    // 22CF 0021;	
    // (⋏) CURLY LOGICAL AND	[06DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CF, 0x0021 };
    uint32_t const ces[9] = { 0x06DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_223)
{
    // 22CF 003F;	
    // (⋏) CURLY LOGICAL AND	[06DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CF, 0x003F };
    uint32_t const ces[9] = { 0x06DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_224)
{
    // 22CF 0061;	
    // (⋏) CURLY LOGICAL AND	[06DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CF, 0x0061 };
    uint32_t const ces[9] = { 0x06DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_225)
{
    // 22CF 0041;	
    // (⋏) CURLY LOGICAL AND	[06DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22CF, 0x0041 };
    uint32_t const ces[9] = { 0x06DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_226)
{
    // 22CF 0062;	
    // (⋏) CURLY LOGICAL AND	[06DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22CF, 0x0062 };
    uint32_t const ces[9] = { 0x06DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_227)
{
    // 22D0 0021;	
    // (⋐) DOUBLE SUBSET	[06DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D0, 0x0021 };
    uint32_t const ces[9] = { 0x06DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_228)
{
    // 22D0 003F;	
    // (⋐) DOUBLE SUBSET	[06DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D0, 0x003F };
    uint32_t const ces[9] = { 0x06DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_229)
{
    // 22D0 0061;	
    // (⋐) DOUBLE SUBSET	[06DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D0, 0x0061 };
    uint32_t const ces[9] = { 0x06DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_230)
{
    // 22D0 0041;	
    // (⋐) DOUBLE SUBSET	[06DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D0, 0x0041 };
    uint32_t const ces[9] = { 0x06DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_231)
{
    // 22D0 0062;	
    // (⋐) DOUBLE SUBSET	[06DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D0, 0x0062 };
    uint32_t const ces[9] = { 0x06DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_232)
{
    // 22D1 0021;	
    // (⋑) DOUBLE SUPERSET	[06DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D1, 0x0021 };
    uint32_t const ces[9] = { 0x06DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_233)
{
    // 22D1 003F;	
    // (⋑) DOUBLE SUPERSET	[06DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D1, 0x003F };
    uint32_t const ces[9] = { 0x06DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_234)
{
    // 22D1 0061;	
    // (⋑) DOUBLE SUPERSET	[06DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D1, 0x0061 };
    uint32_t const ces[9] = { 0x06DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_235)
{
    // 22D1 0041;	
    // (⋑) DOUBLE SUPERSET	[06DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D1, 0x0041 };
    uint32_t const ces[9] = { 0x06DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_236)
{
    // 22D1 0062;	
    // (⋑) DOUBLE SUPERSET	[06DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D1, 0x0062 };
    uint32_t const ces[9] = { 0x06DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_237)
{
    // 22D2 0021;	
    // (⋒) DOUBLE INTERSECTION	[06DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D2, 0x0021 };
    uint32_t const ces[9] = { 0x06DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_238)
{
    // 22D2 003F;	
    // (⋒) DOUBLE INTERSECTION	[06DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D2, 0x003F };
    uint32_t const ces[9] = { 0x06DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_239)
{
    // 22D2 0061;	
    // (⋒) DOUBLE INTERSECTION	[06DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D2, 0x0061 };
    uint32_t const ces[9] = { 0x06DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_240)
{
    // 22D2 0041;	
    // (⋒) DOUBLE INTERSECTION	[06DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D2, 0x0041 };
    uint32_t const ces[9] = { 0x06DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_241)
{
    // 22D2 0062;	
    // (⋒) DOUBLE INTERSECTION	[06DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D2, 0x0062 };
    uint32_t const ces[9] = { 0x06DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_242)
{
    // 22D3 0021;	
    // (⋓) DOUBLE UNION	[06DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D3, 0x0021 };
    uint32_t const ces[9] = { 0x06DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_243)
{
    // 22D3 003F;	
    // (⋓) DOUBLE UNION	[06DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D3, 0x003F };
    uint32_t const ces[9] = { 0x06DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_244)
{
    // 22D3 0061;	
    // (⋓) DOUBLE UNION	[06DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D3, 0x0061 };
    uint32_t const ces[9] = { 0x06DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_245)
{
    // 22D3 0041;	
    // (⋓) DOUBLE UNION	[06DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D3, 0x0041 };
    uint32_t const ces[9] = { 0x06DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_246)
{
    // 22D3 0062;	
    // (⋓) DOUBLE UNION	[06DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D3, 0x0062 };
    uint32_t const ces[9] = { 0x06DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_247)
{
    // 22D4 0021;	
    // (⋔) PITCHFORK	[06DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D4, 0x0021 };
    uint32_t const ces[9] = { 0x06DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_248)
{
    // 22D4 003F;	
    // (⋔) PITCHFORK	[06DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D4, 0x003F };
    uint32_t const ces[9] = { 0x06DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_249)
{
    // 22D4 0061;	
    // (⋔) PITCHFORK	[06DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D4, 0x0061 };
    uint32_t const ces[9] = { 0x06DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_250)
{
    // 22D4 0041;	
    // (⋔) PITCHFORK	[06DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D4, 0x0041 };
    uint32_t const ces[9] = { 0x06DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_251)
{
    // 22D4 0062;	
    // (⋔) PITCHFORK	[06DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D4, 0x0062 };
    uint32_t const ces[9] = { 0x06DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_252)
{
    // 22D5 0021;	
    // (⋕) EQUAL AND PARALLEL TO	[06E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D5, 0x0021 };
    uint32_t const ces[9] = { 0x06E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_253)
{
    // 22D5 003F;	
    // (⋕) EQUAL AND PARALLEL TO	[06E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D5, 0x003F };
    uint32_t const ces[9] = { 0x06E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_254)
{
    // 22D5 0061;	
    // (⋕) EQUAL AND PARALLEL TO	[06E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D5, 0x0061 };
    uint32_t const ces[9] = { 0x06E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_255)
{
    // 22D5 0041;	
    // (⋕) EQUAL AND PARALLEL TO	[06E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D5, 0x0041 };
    uint32_t const ces[9] = { 0x06E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_256)
{
    // 22D5 0062;	
    // (⋕) EQUAL AND PARALLEL TO	[06E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D5, 0x0062 };
    uint32_t const ces[9] = { 0x06E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_257)
{
    // 22D6 0021;	
    // (⋖) LESS-THAN WITH DOT	[06E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D6, 0x0021 };
    uint32_t const ces[9] = { 0x06E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_258)
{
    // 22D6 003F;	
    // (⋖) LESS-THAN WITH DOT	[06E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D6, 0x003F };
    uint32_t const ces[9] = { 0x06E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_259)
{
    // 22D6 0061;	
    // (⋖) LESS-THAN WITH DOT	[06E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D6, 0x0061 };
    uint32_t const ces[9] = { 0x06E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_260)
{
    // 22D6 0041;	
    // (⋖) LESS-THAN WITH DOT	[06E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D6, 0x0041 };
    uint32_t const ces[9] = { 0x06E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_261)
{
    // 22D6 0062;	
    // (⋖) LESS-THAN WITH DOT	[06E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D6, 0x0062 };
    uint32_t const ces[9] = { 0x06E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_262)
{
    // 22D7 0021;	
    // (⋗) GREATER-THAN WITH DOT	[06E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D7, 0x0021 };
    uint32_t const ces[9] = { 0x06E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_263)
{
    // 22D7 003F;	
    // (⋗) GREATER-THAN WITH DOT	[06E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D7, 0x003F };
    uint32_t const ces[9] = { 0x06E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_264)
{
    // 22D7 0061;	
    // (⋗) GREATER-THAN WITH DOT	[06E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D7, 0x0061 };
    uint32_t const ces[9] = { 0x06E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_265)
{
    // 22D7 0041;	
    // (⋗) GREATER-THAN WITH DOT	[06E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D7, 0x0041 };
    uint32_t const ces[9] = { 0x06E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_266)
{
    // 22D7 0062;	
    // (⋗) GREATER-THAN WITH DOT	[06E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D7, 0x0062 };
    uint32_t const ces[9] = { 0x06E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_267)
{
    // 22D8 0021;	
    // (⋘) VERY MUCH LESS-THAN	[06E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D8, 0x0021 };
    uint32_t const ces[9] = { 0x06E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_268)
{
    // 22D8 003F;	
    // (⋘) VERY MUCH LESS-THAN	[06E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D8, 0x003F };
    uint32_t const ces[9] = { 0x06E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_269)
{
    // 22D8 0061;	
    // (⋘) VERY MUCH LESS-THAN	[06E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D8, 0x0061 };
    uint32_t const ces[9] = { 0x06E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_270)
{
    // 22D8 0041;	
    // (⋘) VERY MUCH LESS-THAN	[06E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D8, 0x0041 };
    uint32_t const ces[9] = { 0x06E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_271)
{
    // 22D8 0062;	
    // (⋘) VERY MUCH LESS-THAN	[06E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D8, 0x0062 };
    uint32_t const ces[9] = { 0x06E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_272)
{
    // 22D9 0021;	
    // (⋙) VERY MUCH GREATER-THAN	[06E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D9, 0x0021 };
    uint32_t const ces[9] = { 0x06E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_273)
{
    // 22D9 003F;	
    // (⋙) VERY MUCH GREATER-THAN	[06E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D9, 0x003F };
    uint32_t const ces[9] = { 0x06E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_274)
{
    // 22D9 0061;	
    // (⋙) VERY MUCH GREATER-THAN	[06E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D9, 0x0061 };
    uint32_t const ces[9] = { 0x06E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_275)
{
    // 22D9 0041;	
    // (⋙) VERY MUCH GREATER-THAN	[06E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22D9, 0x0041 };
    uint32_t const ces[9] = { 0x06E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_276)
{
    // 22D9 0062;	
    // (⋙) VERY MUCH GREATER-THAN	[06E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22D9, 0x0062 };
    uint32_t const ces[9] = { 0x06E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_277)
{
    // 22DA 0021;	
    // (⋚) LESS-THAN EQUAL TO OR GREATER-THAN	[06E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DA, 0x0021 };
    uint32_t const ces[9] = { 0x06E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_278)
{
    // 22DA 003F;	
    // (⋚) LESS-THAN EQUAL TO OR GREATER-THAN	[06E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DA, 0x003F };
    uint32_t const ces[9] = { 0x06E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_279)
{
    // 22DA 0061;	
    // (⋚) LESS-THAN EQUAL TO OR GREATER-THAN	[06E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DA, 0x0061 };
    uint32_t const ces[9] = { 0x06E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_280)
{
    // 22DA 0041;	
    // (⋚) LESS-THAN EQUAL TO OR GREATER-THAN	[06E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DA, 0x0041 };
    uint32_t const ces[9] = { 0x06E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_281)
{
    // 22DA 0062;	
    // (⋚) LESS-THAN EQUAL TO OR GREATER-THAN	[06E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DA, 0x0062 };
    uint32_t const ces[9] = { 0x06E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_282)
{
    // 22DB 0021;	
    // (⋛) GREATER-THAN EQUAL TO OR LESS-THAN	[06E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DB, 0x0021 };
    uint32_t const ces[9] = { 0x06E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_283)
{
    // 22DB 003F;	
    // (⋛) GREATER-THAN EQUAL TO OR LESS-THAN	[06E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DB, 0x003F };
    uint32_t const ces[9] = { 0x06E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_284)
{
    // 22DB 0061;	
    // (⋛) GREATER-THAN EQUAL TO OR LESS-THAN	[06E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DB, 0x0061 };
    uint32_t const ces[9] = { 0x06E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_285)
{
    // 22DB 0041;	
    // (⋛) GREATER-THAN EQUAL TO OR LESS-THAN	[06E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DB, 0x0041 };
    uint32_t const ces[9] = { 0x06E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_286)
{
    // 22DB 0062;	
    // (⋛) GREATER-THAN EQUAL TO OR LESS-THAN	[06E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DB, 0x0062 };
    uint32_t const ces[9] = { 0x06E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_287)
{
    // 22DC 0021;	
    // (⋜) EQUAL TO OR LESS-THAN	[06E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DC, 0x0021 };
    uint32_t const ces[9] = { 0x06E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_288)
{
    // 22DC 003F;	
    // (⋜) EQUAL TO OR LESS-THAN	[06E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DC, 0x003F };
    uint32_t const ces[9] = { 0x06E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_289)
{
    // 22DC 0061;	
    // (⋜) EQUAL TO OR LESS-THAN	[06E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DC, 0x0061 };
    uint32_t const ces[9] = { 0x06E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_290)
{
    // 22DC 0041;	
    // (⋜) EQUAL TO OR LESS-THAN	[06E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DC, 0x0041 };
    uint32_t const ces[9] = { 0x06E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_291)
{
    // 22DC 0062;	
    // (⋜) EQUAL TO OR LESS-THAN	[06E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DC, 0x0062 };
    uint32_t const ces[9] = { 0x06E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_292)
{
    // 22DD 0021;	
    // (⋝) EQUAL TO OR GREATER-THAN	[06E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DD, 0x0021 };
    uint32_t const ces[9] = { 0x06E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_293)
{
    // 22DD 003F;	
    // (⋝) EQUAL TO OR GREATER-THAN	[06E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DD, 0x003F };
    uint32_t const ces[9] = { 0x06E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_294)
{
    // 22DD 0061;	
    // (⋝) EQUAL TO OR GREATER-THAN	[06E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DD, 0x0061 };
    uint32_t const ces[9] = { 0x06E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_295)
{
    // 22DD 0041;	
    // (⋝) EQUAL TO OR GREATER-THAN	[06E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DD, 0x0041 };
    uint32_t const ces[9] = { 0x06E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_296)
{
    // 22DD 0062;	
    // (⋝) EQUAL TO OR GREATER-THAN	[06E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DD, 0x0062 };
    uint32_t const ces[9] = { 0x06E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_297)
{
    // 22DE 0021;	
    // (⋞) EQUAL TO OR PRECEDES	[06E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DE, 0x0021 };
    uint32_t const ces[9] = { 0x06E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_298)
{
    // 22DE 003F;	
    // (⋞) EQUAL TO OR PRECEDES	[06E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DE, 0x003F };
    uint32_t const ces[9] = { 0x06E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_299)
{
    // 22DE 0061;	
    // (⋞) EQUAL TO OR PRECEDES	[06E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DE, 0x0061 };
    uint32_t const ces[9] = { 0x06E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_300)
{
    // 22DE 0041;	
    // (⋞) EQUAL TO OR PRECEDES	[06E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DE, 0x0041 };
    uint32_t const ces[9] = { 0x06E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_301)
{
    // 22DE 0062;	
    // (⋞) EQUAL TO OR PRECEDES	[06E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DE, 0x0062 };
    uint32_t const ces[9] = { 0x06E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_302)
{
    // 22DF 0021;	
    // (⋟) EQUAL TO OR SUCCEEDS	[06EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DF, 0x0021 };
    uint32_t const ces[9] = { 0x06EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_303)
{
    // 22DF 003F;	
    // (⋟) EQUAL TO OR SUCCEEDS	[06EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DF, 0x003F };
    uint32_t const ces[9] = { 0x06EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_304)
{
    // 22DF 0061;	
    // (⋟) EQUAL TO OR SUCCEEDS	[06EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DF, 0x0061 };
    uint32_t const ces[9] = { 0x06EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_305)
{
    // 22DF 0041;	
    // (⋟) EQUAL TO OR SUCCEEDS	[06EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22DF, 0x0041 };
    uint32_t const ces[9] = { 0x06EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_306)
{
    // 22DF 0062;	
    // (⋟) EQUAL TO OR SUCCEEDS	[06EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22DF, 0x0062 };
    uint32_t const ces[9] = { 0x06EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_307)
{
    // 22E4 0021;	
    // (⋤) SQUARE IMAGE OF OR NOT EQUAL TO	[06EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E4, 0x0021 };
    uint32_t const ces[9] = { 0x06EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_308)
{
    // 22E4 003F;	
    // (⋤) SQUARE IMAGE OF OR NOT EQUAL TO	[06EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E4, 0x003F };
    uint32_t const ces[9] = { 0x06EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_309)
{
    // 22E4 0061;	
    // (⋤) SQUARE IMAGE OF OR NOT EQUAL TO	[06EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E4, 0x0061 };
    uint32_t const ces[9] = { 0x06EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_310)
{
    // 22E4 0041;	
    // (⋤) SQUARE IMAGE OF OR NOT EQUAL TO	[06EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E4, 0x0041 };
    uint32_t const ces[9] = { 0x06EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_311)
{
    // 22E4 0062;	
    // (⋤) SQUARE IMAGE OF OR NOT EQUAL TO	[06EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E4, 0x0062 };
    uint32_t const ces[9] = { 0x06EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_312)
{
    // 22E5 0021;	
    // (⋥) SQUARE ORIGINAL OF OR NOT EQUAL TO	[06EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E5, 0x0021 };
    uint32_t const ces[9] = { 0x06EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_313)
{
    // 22E5 003F;	
    // (⋥) SQUARE ORIGINAL OF OR NOT EQUAL TO	[06EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E5, 0x003F };
    uint32_t const ces[9] = { 0x06EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_314)
{
    // 22E5 0061;	
    // (⋥) SQUARE ORIGINAL OF OR NOT EQUAL TO	[06EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E5, 0x0061 };
    uint32_t const ces[9] = { 0x06EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_315)
{
    // 22E5 0041;	
    // (⋥) SQUARE ORIGINAL OF OR NOT EQUAL TO	[06EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E5, 0x0041 };
    uint32_t const ces[9] = { 0x06EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_316)
{
    // 22E5 0062;	
    // (⋥) SQUARE ORIGINAL OF OR NOT EQUAL TO	[06EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E5, 0x0062 };
    uint32_t const ces[9] = { 0x06EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_317)
{
    // 22E6 0021;	
    // (⋦) LESS-THAN BUT NOT EQUIVALENT TO	[06ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E6, 0x0021 };
    uint32_t const ces[9] = { 0x06ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_318)
{
    // 22E6 003F;	
    // (⋦) LESS-THAN BUT NOT EQUIVALENT TO	[06ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E6, 0x003F };
    uint32_t const ces[9] = { 0x06ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_319)
{
    // 22E6 0061;	
    // (⋦) LESS-THAN BUT NOT EQUIVALENT TO	[06ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E6, 0x0061 };
    uint32_t const ces[9] = { 0x06ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_320)
{
    // 22E6 0041;	
    // (⋦) LESS-THAN BUT NOT EQUIVALENT TO	[06ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E6, 0x0041 };
    uint32_t const ces[9] = { 0x06ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_321)
{
    // 22E6 0062;	
    // (⋦) LESS-THAN BUT NOT EQUIVALENT TO	[06ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E6, 0x0062 };
    uint32_t const ces[9] = { 0x06ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_322)
{
    // 22E7 0021;	
    // (⋧) GREATER-THAN BUT NOT EQUIVALENT TO	[06EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E7, 0x0021 };
    uint32_t const ces[9] = { 0x06EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_323)
{
    // 22E7 003F;	
    // (⋧) GREATER-THAN BUT NOT EQUIVALENT TO	[06EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E7, 0x003F };
    uint32_t const ces[9] = { 0x06EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_324)
{
    // 22E7 0061;	
    // (⋧) GREATER-THAN BUT NOT EQUIVALENT TO	[06EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E7, 0x0061 };
    uint32_t const ces[9] = { 0x06EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_325)
{
    // 22E7 0041;	
    // (⋧) GREATER-THAN BUT NOT EQUIVALENT TO	[06EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E7, 0x0041 };
    uint32_t const ces[9] = { 0x06EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_326)
{
    // 22E7 0062;	
    // (⋧) GREATER-THAN BUT NOT EQUIVALENT TO	[06EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E7, 0x0062 };
    uint32_t const ces[9] = { 0x06EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_327)
{
    // 22E8 0021;	
    // (⋨) PRECEDES BUT NOT EQUIVALENT TO	[06EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E8, 0x0021 };
    uint32_t const ces[9] = { 0x06EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_328)
{
    // 22E8 003F;	
    // (⋨) PRECEDES BUT NOT EQUIVALENT TO	[06EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E8, 0x003F };
    uint32_t const ces[9] = { 0x06EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_329)
{
    // 22E8 0061;	
    // (⋨) PRECEDES BUT NOT EQUIVALENT TO	[06EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E8, 0x0061 };
    uint32_t const ces[9] = { 0x06EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_330)
{
    // 22E8 0041;	
    // (⋨) PRECEDES BUT NOT EQUIVALENT TO	[06EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E8, 0x0041 };
    uint32_t const ces[9] = { 0x06EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_331)
{
    // 22E8 0062;	
    // (⋨) PRECEDES BUT NOT EQUIVALENT TO	[06EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E8, 0x0062 };
    uint32_t const ces[9] = { 0x06EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_332)
{
    // 22E9 0021;	
    // (⋩) SUCCEEDS BUT NOT EQUIVALENT TO	[06F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E9, 0x0021 };
    uint32_t const ces[9] = { 0x06F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_333)
{
    // 22E9 003F;	
    // (⋩) SUCCEEDS BUT NOT EQUIVALENT TO	[06F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E9, 0x003F };
    uint32_t const ces[9] = { 0x06F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_334)
{
    // 22E9 0061;	
    // (⋩) SUCCEEDS BUT NOT EQUIVALENT TO	[06F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E9, 0x0061 };
    uint32_t const ces[9] = { 0x06F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_335)
{
    // 22E9 0041;	
    // (⋩) SUCCEEDS BUT NOT EQUIVALENT TO	[06F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22E9, 0x0041 };
    uint32_t const ces[9] = { 0x06F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_336)
{
    // 22E9 0062;	
    // (⋩) SUCCEEDS BUT NOT EQUIVALENT TO	[06F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22E9, 0x0062 };
    uint32_t const ces[9] = { 0x06F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_337)
{
    // 22EE 0021;	
    // (⋮) VERTICAL ELLIPSIS	[06F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EE, 0x0021 };
    uint32_t const ces[9] = { 0x06F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_338)
{
    // 22EE 003F;	
    // (⋮) VERTICAL ELLIPSIS	[06F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EE, 0x003F };
    uint32_t const ces[9] = { 0x06F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_339)
{
    // 22EE 0061;	
    // (⋮) VERTICAL ELLIPSIS	[06F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EE, 0x0061 };
    uint32_t const ces[9] = { 0x06F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_340)
{
    // 22EE 0041;	
    // (⋮) VERTICAL ELLIPSIS	[06F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22EE, 0x0041 };
    uint32_t const ces[9] = { 0x06F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_341)
{
    // 22EE 0062;	
    // (⋮) VERTICAL ELLIPSIS	[06F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EE, 0x0062 };
    uint32_t const ces[9] = { 0x06F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_342)
{
    // 22EF 0021;	
    // (⋯) MIDLINE HORIZONTAL ELLIPSIS	[06F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EF, 0x0021 };
    uint32_t const ces[9] = { 0x06F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_343)
{
    // 22EF 003F;	
    // (⋯) MIDLINE HORIZONTAL ELLIPSIS	[06F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EF, 0x003F };
    uint32_t const ces[9] = { 0x06F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_344)
{
    // 22EF 0061;	
    // (⋯) MIDLINE HORIZONTAL ELLIPSIS	[06F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EF, 0x0061 };
    uint32_t const ces[9] = { 0x06F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_345)
{
    // 22EF 0041;	
    // (⋯) MIDLINE HORIZONTAL ELLIPSIS	[06F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22EF, 0x0041 };
    uint32_t const ces[9] = { 0x06F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_346)
{
    // 22EF 0062;	
    // (⋯) MIDLINE HORIZONTAL ELLIPSIS	[06F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22EF, 0x0062 };
    uint32_t const ces[9] = { 0x06F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_347)
{
    // 22F0 0021;	
    // (⋰) UP RIGHT DIAGONAL ELLIPSIS	[06F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F0, 0x0021 };
    uint32_t const ces[9] = { 0x06F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_348)
{
    // 22F0 003F;	
    // (⋰) UP RIGHT DIAGONAL ELLIPSIS	[06F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F0, 0x003F };
    uint32_t const ces[9] = { 0x06F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_349)
{
    // 22F0 0061;	
    // (⋰) UP RIGHT DIAGONAL ELLIPSIS	[06F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F0, 0x0061 };
    uint32_t const ces[9] = { 0x06F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_350)
{
    // 22F0 0041;	
    // (⋰) UP RIGHT DIAGONAL ELLIPSIS	[06F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F0, 0x0041 };
    uint32_t const ces[9] = { 0x06F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_351)
{
    // 22F0 0062;	
    // (⋰) UP RIGHT DIAGONAL ELLIPSIS	[06F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F0, 0x0062 };
    uint32_t const ces[9] = { 0x06F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_352)
{
    // 22F1 0021;	
    // (⋱) DOWN RIGHT DIAGONAL ELLIPSIS	[06F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F1, 0x0021 };
    uint32_t const ces[9] = { 0x06F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_353)
{
    // 22F1 003F;	
    // (⋱) DOWN RIGHT DIAGONAL ELLIPSIS	[06F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F1, 0x003F };
    uint32_t const ces[9] = { 0x06F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_354)
{
    // 22F1 0061;	
    // (⋱) DOWN RIGHT DIAGONAL ELLIPSIS	[06F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F1, 0x0061 };
    uint32_t const ces[9] = { 0x06F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_355)
{
    // 22F1 0041;	
    // (⋱) DOWN RIGHT DIAGONAL ELLIPSIS	[06F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F1, 0x0041 };
    uint32_t const ces[9] = { 0x06F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_356)
{
    // 22F1 0062;	
    // (⋱) DOWN RIGHT DIAGONAL ELLIPSIS	[06F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F1, 0x0062 };
    uint32_t const ces[9] = { 0x06F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_357)
{
    // 22F2 0021;	
    // (⋲) ELEMENT OF WITH LONG HORIZONTAL STROKE	[06F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F2, 0x0021 };
    uint32_t const ces[9] = { 0x06F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_358)
{
    // 22F2 003F;	
    // (⋲) ELEMENT OF WITH LONG HORIZONTAL STROKE	[06F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F2, 0x003F };
    uint32_t const ces[9] = { 0x06F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_359)
{
    // 22F2 0061;	
    // (⋲) ELEMENT OF WITH LONG HORIZONTAL STROKE	[06F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F2, 0x0061 };
    uint32_t const ces[9] = { 0x06F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_360)
{
    // 22F2 0041;	
    // (⋲) ELEMENT OF WITH LONG HORIZONTAL STROKE	[06F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F2, 0x0041 };
    uint32_t const ces[9] = { 0x06F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_361)
{
    // 22F2 0062;	
    // (⋲) ELEMENT OF WITH LONG HORIZONTAL STROKE	[06F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F2, 0x0062 };
    uint32_t const ces[9] = { 0x06F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_362)
{
    // 22F3 0021;	
    // (⋳) ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F3, 0x0021 };
    uint32_t const ces[9] = { 0x06F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_363)
{
    // 22F3 003F;	
    // (⋳) ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F3, 0x003F };
    uint32_t const ces[9] = { 0x06F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_364)
{
    // 22F3 0061;	
    // (⋳) ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F3, 0x0061 };
    uint32_t const ces[9] = { 0x06F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_365)
{
    // 22F3 0041;	
    // (⋳) ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F3, 0x0041 };
    uint32_t const ces[9] = { 0x06F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_366)
{
    // 22F3 0062;	
    // (⋳) ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F3, 0x0062 };
    uint32_t const ces[9] = { 0x06F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_367)
{
    // 22F4 0021;	
    // (⋴) SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F4, 0x0021 };
    uint32_t const ces[9] = { 0x06F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_368)
{
    // 22F4 003F;	
    // (⋴) SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F4, 0x003F };
    uint32_t const ces[9] = { 0x06F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_369)
{
    // 22F4 0061;	
    // (⋴) SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F4, 0x0061 };
    uint32_t const ces[9] = { 0x06F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_370)
{
    // 22F4 0041;	
    // (⋴) SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F4, 0x0041 };
    uint32_t const ces[9] = { 0x06F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_371)
{
    // 22F4 0062;	
    // (⋴) SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F4, 0x0062 };
    uint32_t const ces[9] = { 0x06F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_372)
{
    // 22F5 0021;	
    // (⋵) ELEMENT OF WITH DOT ABOVE	[06F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F5, 0x0021 };
    uint32_t const ces[9] = { 0x06F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_373)
{
    // 22F5 003F;	
    // (⋵) ELEMENT OF WITH DOT ABOVE	[06F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F5, 0x003F };
    uint32_t const ces[9] = { 0x06F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_374)
{
    // 22F5 0061;	
    // (⋵) ELEMENT OF WITH DOT ABOVE	[06F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F5, 0x0061 };
    uint32_t const ces[9] = { 0x06F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_375)
{
    // 22F5 0041;	
    // (⋵) ELEMENT OF WITH DOT ABOVE	[06F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F5, 0x0041 };
    uint32_t const ces[9] = { 0x06F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_376)
{
    // 22F5 0062;	
    // (⋵) ELEMENT OF WITH DOT ABOVE	[06F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F5, 0x0062 };
    uint32_t const ces[9] = { 0x06F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_377)
{
    // 22F6 0021;	
    // (⋶) ELEMENT OF WITH OVERBAR	[06F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F6, 0x0021 };
    uint32_t const ces[9] = { 0x06F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_378)
{
    // 22F6 003F;	
    // (⋶) ELEMENT OF WITH OVERBAR	[06F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F6, 0x003F };
    uint32_t const ces[9] = { 0x06F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_379)
{
    // 22F6 0061;	
    // (⋶) ELEMENT OF WITH OVERBAR	[06F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F6, 0x0061 };
    uint32_t const ces[9] = { 0x06F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_380)
{
    // 22F6 0041;	
    // (⋶) ELEMENT OF WITH OVERBAR	[06F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F6, 0x0041 };
    uint32_t const ces[9] = { 0x06F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_381)
{
    // 22F6 0062;	
    // (⋶) ELEMENT OF WITH OVERBAR	[06F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F6, 0x0062 };
    uint32_t const ces[9] = { 0x06F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_382)
{
    // 22F7 0021;	
    // (⋷) SMALL ELEMENT OF WITH OVERBAR	[06FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F7, 0x0021 };
    uint32_t const ces[9] = { 0x06FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_383)
{
    // 22F7 003F;	
    // (⋷) SMALL ELEMENT OF WITH OVERBAR	[06FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F7, 0x003F };
    uint32_t const ces[9] = { 0x06FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_384)
{
    // 22F7 0061;	
    // (⋷) SMALL ELEMENT OF WITH OVERBAR	[06FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F7, 0x0061 };
    uint32_t const ces[9] = { 0x06FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_385)
{
    // 22F7 0041;	
    // (⋷) SMALL ELEMENT OF WITH OVERBAR	[06FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F7, 0x0041 };
    uint32_t const ces[9] = { 0x06FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_386)
{
    // 22F7 0062;	
    // (⋷) SMALL ELEMENT OF WITH OVERBAR	[06FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F7, 0x0062 };
    uint32_t const ces[9] = { 0x06FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_387)
{
    // 22F8 0021;	
    // (⋸) ELEMENT OF WITH UNDERBAR	[06FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F8, 0x0021 };
    uint32_t const ces[9] = { 0x06FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_388)
{
    // 22F8 003F;	
    // (⋸) ELEMENT OF WITH UNDERBAR	[06FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F8, 0x003F };
    uint32_t const ces[9] = { 0x06FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_389)
{
    // 22F8 0061;	
    // (⋸) ELEMENT OF WITH UNDERBAR	[06FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F8, 0x0061 };
    uint32_t const ces[9] = { 0x06FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_390)
{
    // 22F8 0041;	
    // (⋸) ELEMENT OF WITH UNDERBAR	[06FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F8, 0x0041 };
    uint32_t const ces[9] = { 0x06FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_391)
{
    // 22F8 0062;	
    // (⋸) ELEMENT OF WITH UNDERBAR	[06FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F8, 0x0062 };
    uint32_t const ces[9] = { 0x06FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_392)
{
    // 22F9 0021;	
    // (⋹) ELEMENT OF WITH TWO HORIZONTAL STROKES	[06FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F9, 0x0021 };
    uint32_t const ces[9] = { 0x06FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_393)
{
    // 22F9 003F;	
    // (⋹) ELEMENT OF WITH TWO HORIZONTAL STROKES	[06FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F9, 0x003F };
    uint32_t const ces[9] = { 0x06FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_394)
{
    // 22F9 0061;	
    // (⋹) ELEMENT OF WITH TWO HORIZONTAL STROKES	[06FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F9, 0x0061 };
    uint32_t const ces[9] = { 0x06FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_395)
{
    // 22F9 0041;	
    // (⋹) ELEMENT OF WITH TWO HORIZONTAL STROKES	[06FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22F9, 0x0041 };
    uint32_t const ces[9] = { 0x06FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_396)
{
    // 22F9 0062;	
    // (⋹) ELEMENT OF WITH TWO HORIZONTAL STROKES	[06FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22F9, 0x0062 };
    uint32_t const ces[9] = { 0x06FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_397)
{
    // 22FA 0021;	
    // (⋺) CONTAINS WITH LONG HORIZONTAL STROKE	[06FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FA, 0x0021 };
    uint32_t const ces[9] = { 0x06FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_398)
{
    // 22FA 003F;	
    // (⋺) CONTAINS WITH LONG HORIZONTAL STROKE	[06FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FA, 0x003F };
    uint32_t const ces[9] = { 0x06FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_399)
{
    // 22FA 0061;	
    // (⋺) CONTAINS WITH LONG HORIZONTAL STROKE	[06FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FA, 0x0061 };
    uint32_t const ces[9] = { 0x06FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_400)
{
    // 22FA 0041;	
    // (⋺) CONTAINS WITH LONG HORIZONTAL STROKE	[06FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FA, 0x0041 };
    uint32_t const ces[9] = { 0x06FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_401)
{
    // 22FA 0062;	
    // (⋺) CONTAINS WITH LONG HORIZONTAL STROKE	[06FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FA, 0x0062 };
    uint32_t const ces[9] = { 0x06FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_402)
{
    // 22FB 0021;	
    // (⋻) CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FB, 0x0021 };
    uint32_t const ces[9] = { 0x06FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_403)
{
    // 22FB 003F;	
    // (⋻) CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FB, 0x003F };
    uint32_t const ces[9] = { 0x06FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_404)
{
    // 22FB 0061;	
    // (⋻) CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FB, 0x0061 };
    uint32_t const ces[9] = { 0x06FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_405)
{
    // 22FB 0041;	
    // (⋻) CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FB, 0x0041 };
    uint32_t const ces[9] = { 0x06FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_406)
{
    // 22FB 0062;	
    // (⋻) CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FB, 0x0062 };
    uint32_t const ces[9] = { 0x06FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_407)
{
    // 22FC 0021;	
    // (⋼) SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FC, 0x0021 };
    uint32_t const ces[9] = { 0x06FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_408)
{
    // 22FC 003F;	
    // (⋼) SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FC, 0x003F };
    uint32_t const ces[9] = { 0x06FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_409)
{
    // 22FC 0061;	
    // (⋼) SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FC, 0x0061 };
    uint32_t const ces[9] = { 0x06FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_410)
{
    // 22FC 0041;	
    // (⋼) SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FC, 0x0041 };
    uint32_t const ces[9] = { 0x06FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_411)
{
    // 22FC 0062;	
    // (⋼) SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE	[06FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FC, 0x0062 };
    uint32_t const ces[9] = { 0x06FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_412)
{
    // 22FD 0021;	
    // (⋽) CONTAINS WITH OVERBAR	[0700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FD, 0x0021 };
    uint32_t const ces[9] = { 0x0700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_413)
{
    // 22FD 003F;	
    // (⋽) CONTAINS WITH OVERBAR	[0700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FD, 0x003F };
    uint32_t const ces[9] = { 0x0700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_414)
{
    // 22FD 0061;	
    // (⋽) CONTAINS WITH OVERBAR	[0700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FD, 0x0061 };
    uint32_t const ces[9] = { 0x0700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_415)
{
    // 22FD 0041;	
    // (⋽) CONTAINS WITH OVERBAR	[0700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FD, 0x0041 };
    uint32_t const ces[9] = { 0x0700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_416)
{
    // 22FD 0062;	
    // (⋽) CONTAINS WITH OVERBAR	[0700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FD, 0x0062 };
    uint32_t const ces[9] = { 0x0700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_417)
{
    // 22FE 0021;	
    // (⋾) SMALL CONTAINS WITH OVERBAR	[0701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FE, 0x0021 };
    uint32_t const ces[9] = { 0x0701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_418)
{
    // 22FE 003F;	
    // (⋾) SMALL CONTAINS WITH OVERBAR	[0701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FE, 0x003F };
    uint32_t const ces[9] = { 0x0701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_419)
{
    // 22FE 0061;	
    // (⋾) SMALL CONTAINS WITH OVERBAR	[0701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FE, 0x0061 };
    uint32_t const ces[9] = { 0x0701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_420)
{
    // 22FE 0041;	
    // (⋾) SMALL CONTAINS WITH OVERBAR	[0701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FE, 0x0041 };
    uint32_t const ces[9] = { 0x0701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_421)
{
    // 22FE 0062;	
    // (⋾) SMALL CONTAINS WITH OVERBAR	[0701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FE, 0x0062 };
    uint32_t const ces[9] = { 0x0701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_422)
{
    // 22FF 0021;	
    // (⋿) Z NOTATION BAG MEMBERSHIP	[0702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FF, 0x0021 };
    uint32_t const ces[9] = { 0x0702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_423)
{
    // 22FF 003F;	
    // (⋿) Z NOTATION BAG MEMBERSHIP	[0702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FF, 0x003F };
    uint32_t const ces[9] = { 0x0702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_424)
{
    // 22FF 0061;	
    // (⋿) Z NOTATION BAG MEMBERSHIP	[0702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FF, 0x0061 };
    uint32_t const ces[9] = { 0x0702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_425)
{
    // 22FF 0041;	
    // (⋿) Z NOTATION BAG MEMBERSHIP	[0702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x22FF, 0x0041 };
    uint32_t const ces[9] = { 0x0702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_426)
{
    // 22FF 0062;	
    // (⋿) Z NOTATION BAG MEMBERSHIP	[0702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x22FF, 0x0062 };
    uint32_t const ces[9] = { 0x0702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_427)
{
    // 2300 0021;	
    // (⌀) DIAMETER SIGN	[0703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2300, 0x0021 };
    uint32_t const ces[9] = { 0x0703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_428)
{
    // 2300 003F;	
    // (⌀) DIAMETER SIGN	[0703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2300, 0x003F };
    uint32_t const ces[9] = { 0x0703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_429)
{
    // 2300 0061;	
    // (⌀) DIAMETER SIGN	[0703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2300, 0x0061 };
    uint32_t const ces[9] = { 0x0703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_430)
{
    // 2300 0041;	
    // (⌀) DIAMETER SIGN	[0703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2300, 0x0041 };
    uint32_t const ces[9] = { 0x0703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_431)
{
    // 2300 0062;	
    // (⌀) DIAMETER SIGN	[0703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2300, 0x0062 };
    uint32_t const ces[9] = { 0x0703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_432)
{
    // 2301 0021;	
    // (⌁) ELECTRIC ARROW	[0704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2301, 0x0021 };
    uint32_t const ces[9] = { 0x0704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_433)
{
    // 2301 003F;	
    // (⌁) ELECTRIC ARROW	[0704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2301, 0x003F };
    uint32_t const ces[9] = { 0x0704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_434)
{
    // 2301 0061;	
    // (⌁) ELECTRIC ARROW	[0704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2301, 0x0061 };
    uint32_t const ces[9] = { 0x0704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_435)
{
    // 2301 0041;	
    // (⌁) ELECTRIC ARROW	[0704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2301, 0x0041 };
    uint32_t const ces[9] = { 0x0704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_436)
{
    // 2301 0062;	
    // (⌁) ELECTRIC ARROW	[0704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2301, 0x0062 };
    uint32_t const ces[9] = { 0x0704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_437)
{
    // 2302 0021;	
    // (⌂) HOUSE	[0705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2302, 0x0021 };
    uint32_t const ces[9] = { 0x0705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_438)
{
    // 2302 003F;	
    // (⌂) HOUSE	[0705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2302, 0x003F };
    uint32_t const ces[9] = { 0x0705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_439)
{
    // 2302 0061;	
    // (⌂) HOUSE	[0705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2302, 0x0061 };
    uint32_t const ces[9] = { 0x0705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_440)
{
    // 2302 0041;	
    // (⌂) HOUSE	[0705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2302, 0x0041 };
    uint32_t const ces[9] = { 0x0705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_441)
{
    // 2302 0062;	
    // (⌂) HOUSE	[0705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2302, 0x0062 };
    uint32_t const ces[9] = { 0x0705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_442)
{
    // 2303 0021;	
    // (⌃) UP ARROWHEAD	[0706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2303, 0x0021 };
    uint32_t const ces[9] = { 0x0706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_443)
{
    // 2303 003F;	
    // (⌃) UP ARROWHEAD	[0706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2303, 0x003F };
    uint32_t const ces[9] = { 0x0706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_444)
{
    // 2303 0061;	
    // (⌃) UP ARROWHEAD	[0706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2303, 0x0061 };
    uint32_t const ces[9] = { 0x0706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_445)
{
    // 2303 0041;	
    // (⌃) UP ARROWHEAD	[0706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2303, 0x0041 };
    uint32_t const ces[9] = { 0x0706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_446)
{
    // 2303 0062;	
    // (⌃) UP ARROWHEAD	[0706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2303, 0x0062 };
    uint32_t const ces[9] = { 0x0706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_447)
{
    // 2304 0021;	
    // (⌄) DOWN ARROWHEAD	[0707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2304, 0x0021 };
    uint32_t const ces[9] = { 0x0707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_448)
{
    // 2304 003F;	
    // (⌄) DOWN ARROWHEAD	[0707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2304, 0x003F };
    uint32_t const ces[9] = { 0x0707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_449)
{
    // 2304 0061;	
    // (⌄) DOWN ARROWHEAD	[0707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2304, 0x0061 };
    uint32_t const ces[9] = { 0x0707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_450)
{
    // 2304 0041;	
    // (⌄) DOWN ARROWHEAD	[0707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2304, 0x0041 };
    uint32_t const ces[9] = { 0x0707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_451)
{
    // 2304 0062;	
    // (⌄) DOWN ARROWHEAD	[0707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2304, 0x0062 };
    uint32_t const ces[9] = { 0x0707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_452)
{
    // 2305 0021;	
    // (⌅) PROJECTIVE	[0708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2305, 0x0021 };
    uint32_t const ces[9] = { 0x0708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_453)
{
    // 2305 003F;	
    // (⌅) PROJECTIVE	[0708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2305, 0x003F };
    uint32_t const ces[9] = { 0x0708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_454)
{
    // 2305 0061;	
    // (⌅) PROJECTIVE	[0708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2305, 0x0061 };
    uint32_t const ces[9] = { 0x0708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_455)
{
    // 2305 0041;	
    // (⌅) PROJECTIVE	[0708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2305, 0x0041 };
    uint32_t const ces[9] = { 0x0708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_456)
{
    // 2305 0062;	
    // (⌅) PROJECTIVE	[0708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2305, 0x0062 };
    uint32_t const ces[9] = { 0x0708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_457)
{
    // 2306 0021;	
    // (⌆) PERSPECTIVE	[0709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2306, 0x0021 };
    uint32_t const ces[9] = { 0x0709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_458)
{
    // 2306 003F;	
    // (⌆) PERSPECTIVE	[0709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2306, 0x003F };
    uint32_t const ces[9] = { 0x0709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_459)
{
    // 2306 0061;	
    // (⌆) PERSPECTIVE	[0709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2306, 0x0061 };
    uint32_t const ces[9] = { 0x0709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_460)
{
    // 2306 0041;	
    // (⌆) PERSPECTIVE	[0709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2306, 0x0041 };
    uint32_t const ces[9] = { 0x0709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_461)
{
    // 2306 0062;	
    // (⌆) PERSPECTIVE	[0709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2306, 0x0062 };
    uint32_t const ces[9] = { 0x0709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_462)
{
    // 2307 0021;	
    // (⌇) WAVY LINE	[070A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2307, 0x0021 };
    uint32_t const ces[9] = { 0x070A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_463)
{
    // 2307 003F;	
    // (⌇) WAVY LINE	[070A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2307, 0x003F };
    uint32_t const ces[9] = { 0x070A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_464)
{
    // 2307 0061;	
    // (⌇) WAVY LINE	[070A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2307, 0x0061 };
    uint32_t const ces[9] = { 0x070A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_465)
{
    // 2307 0041;	
    // (⌇) WAVY LINE	[070A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2307, 0x0041 };
    uint32_t const ces[9] = { 0x070A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_466)
{
    // 2307 0062;	
    // (⌇) WAVY LINE	[070A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2307, 0x0062 };
    uint32_t const ces[9] = { 0x070A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_467)
{
    // 230C 0021;	
    // (⌌) BOTTOM RIGHT CROP	[070B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230C, 0x0021 };
    uint32_t const ces[9] = { 0x070B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_468)
{
    // 230C 003F;	
    // (⌌) BOTTOM RIGHT CROP	[070B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230C, 0x003F };
    uint32_t const ces[9] = { 0x070B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_469)
{
    // 230C 0061;	
    // (⌌) BOTTOM RIGHT CROP	[070B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230C, 0x0061 };
    uint32_t const ces[9] = { 0x070B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_470)
{
    // 230C 0041;	
    // (⌌) BOTTOM RIGHT CROP	[070B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230C, 0x0041 };
    uint32_t const ces[9] = { 0x070B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_471)
{
    // 230C 0062;	
    // (⌌) BOTTOM RIGHT CROP	[070B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230C, 0x0062 };
    uint32_t const ces[9] = { 0x070B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_472)
{
    // 230D 0021;	
    // (⌍) BOTTOM LEFT CROP	[070C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230D, 0x0021 };
    uint32_t const ces[9] = { 0x070C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_473)
{
    // 230D 003F;	
    // (⌍) BOTTOM LEFT CROP	[070C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230D, 0x003F };
    uint32_t const ces[9] = { 0x070C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_474)
{
    // 230D 0061;	
    // (⌍) BOTTOM LEFT CROP	[070C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230D, 0x0061 };
    uint32_t const ces[9] = { 0x070C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_475)
{
    // 230D 0041;	
    // (⌍) BOTTOM LEFT CROP	[070C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230D, 0x0041 };
    uint32_t const ces[9] = { 0x070C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_476)
{
    // 230D 0062;	
    // (⌍) BOTTOM LEFT CROP	[070C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230D, 0x0062 };
    uint32_t const ces[9] = { 0x070C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_477)
{
    // 230E 0021;	
    // (⌎) TOP RIGHT CROP	[070D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230E, 0x0021 };
    uint32_t const ces[9] = { 0x070D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_478)
{
    // 230E 003F;	
    // (⌎) TOP RIGHT CROP	[070D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230E, 0x003F };
    uint32_t const ces[9] = { 0x070D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_479)
{
    // 230E 0061;	
    // (⌎) TOP RIGHT CROP	[070D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230E, 0x0061 };
    uint32_t const ces[9] = { 0x070D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_480)
{
    // 230E 0041;	
    // (⌎) TOP RIGHT CROP	[070D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230E, 0x0041 };
    uint32_t const ces[9] = { 0x070D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_481)
{
    // 230E 0062;	
    // (⌎) TOP RIGHT CROP	[070D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230E, 0x0062 };
    uint32_t const ces[9] = { 0x070D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_482)
{
    // 230F 0021;	
    // (⌏) TOP LEFT CROP	[070E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230F, 0x0021 };
    uint32_t const ces[9] = { 0x070E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_483)
{
    // 230F 003F;	
    // (⌏) TOP LEFT CROP	[070E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230F, 0x003F };
    uint32_t const ces[9] = { 0x070E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_484)
{
    // 230F 0061;	
    // (⌏) TOP LEFT CROP	[070E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230F, 0x0061 };
    uint32_t const ces[9] = { 0x070E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_485)
{
    // 230F 0041;	
    // (⌏) TOP LEFT CROP	[070E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230F, 0x0041 };
    uint32_t const ces[9] = { 0x070E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_486)
{
    // 230F 0062;	
    // (⌏) TOP LEFT CROP	[070E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230F, 0x0062 };
    uint32_t const ces[9] = { 0x070E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_487)
{
    // 2310 0021;	
    // (⌐) REVERSED NOT SIGN	[070F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2310, 0x0021 };
    uint32_t const ces[9] = { 0x070F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_488)
{
    // 2310 003F;	
    // (⌐) REVERSED NOT SIGN	[070F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2310, 0x003F };
    uint32_t const ces[9] = { 0x070F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_489)
{
    // 2310 0061;	
    // (⌐) REVERSED NOT SIGN	[070F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2310, 0x0061 };
    uint32_t const ces[9] = { 0x070F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_490)
{
    // 2310 0041;	
    // (⌐) REVERSED NOT SIGN	[070F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2310, 0x0041 };
    uint32_t const ces[9] = { 0x070F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_491)
{
    // 2310 0062;	
    // (⌐) REVERSED NOT SIGN	[070F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2310, 0x0062 };
    uint32_t const ces[9] = { 0x070F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_492)
{
    // 2311 0021;	
    // (⌑) SQUARE LOZENGE	[0710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2311, 0x0021 };
    uint32_t const ces[9] = { 0x0710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_493)
{
    // 2311 003F;	
    // (⌑) SQUARE LOZENGE	[0710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2311, 0x003F };
    uint32_t const ces[9] = { 0x0710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_494)
{
    // 2311 0061;	
    // (⌑) SQUARE LOZENGE	[0710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2311, 0x0061 };
    uint32_t const ces[9] = { 0x0710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_495)
{
    // 2311 0041;	
    // (⌑) SQUARE LOZENGE	[0710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2311, 0x0041 };
    uint32_t const ces[9] = { 0x0710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_496)
{
    // 2311 0062;	
    // (⌑) SQUARE LOZENGE	[0710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2311, 0x0062 };
    uint32_t const ces[9] = { 0x0710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_497)
{
    // 2312 0021;	
    // (⌒) ARC	[0711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2312, 0x0021 };
    uint32_t const ces[9] = { 0x0711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_498)
{
    // 2312 003F;	
    // (⌒) ARC	[0711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2312, 0x003F };
    uint32_t const ces[9] = { 0x0711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_024_499)
{
    // 2312 0061;	
    // (⌒) ARC	[0711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2312, 0x0061 };
    uint32_t const ces[9] = { 0x0711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

