// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_186_000)
{
    // 1DA60 ; [.0000.0000.0000] 
    // SIGNWRITING TONGUE CENTRE INSIDE MOUTH

    uint32_t const cps[1] = { 0x1da60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_001)
{
    // 1DA61 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH

    uint32_t const cps[1] = { 0x1da61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_002)
{
    // 1DA62 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH MOVEMENT

    uint32_t const cps[1] = { 0x1da62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_003)
{
    // 1DA63 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH ON TONGUE

    uint32_t const cps[1] = { 0x1da63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_004)
{
    // 1DA64 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH ON TONGUE MOVEMENT

    uint32_t const cps[1] = { 0x1da64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_005)
{
    // 1DA65 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH ON LIPS

    uint32_t const cps[1] = { 0x1da65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_006)
{
    // 1DA66 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH ON LIPS MOVEMENT

    uint32_t const cps[1] = { 0x1da66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_007)
{
    // 1DA67 ; [.0000.0000.0000] 
    // SIGNWRITING TEETH BITE LIPS

    uint32_t const cps[1] = { 0x1da67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_008)
{
    // 1DA68 ; [.0000.0000.0000] 
    // SIGNWRITING MOVEMENT-WALLPLANE JAW

    uint32_t const cps[1] = { 0x1da68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_009)
{
    // 1DA69 ; [.0000.0000.0000] 
    // SIGNWRITING MOVEMENT-FLOORPLANE JAW

    uint32_t const cps[1] = { 0x1da69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_010)
{
    // 1DA6A ; [.0000.0000.0000] 
    // SIGNWRITING NECK

    uint32_t const cps[1] = { 0x1da6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_011)
{
    // 1DA6B ; [.0000.0000.0000] 
    // SIGNWRITING HAIR

    uint32_t const cps[1] = { 0x1da6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_012)
{
    // 1DA6C ; [.0000.0000.0000] 
    // SIGNWRITING EXCITEMENT

    uint32_t const cps[1] = { 0x1da6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_013)
{
    // 1DA6D ; [*1AA7.0020.0002] 
    // SIGNWRITING SHOULDER HIP SPINE

    uint32_t const cps[1] = { 0x1da6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aa7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_014)
{
    // 1DA6E ; [*1AA8.0020.0002] 
    // SIGNWRITING SHOULDER HIP POSITIONS

    uint32_t const cps[1] = { 0x1da6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aa8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_015)
{
    // 1DA6F ; [*1AA9.0020.0002] 
    // SIGNWRITING WALLPLANE SHOULDER HIP MOVE

    uint32_t const cps[1] = { 0x1da6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aa9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_016)
{
    // 1DA70 ; [*1AAA.0020.0002] 
    // SIGNWRITING FLOORPLANE SHOULDER HIP MOVE

    uint32_t const cps[1] = { 0x1da70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_017)
{
    // 1DA71 ; [*1AAB.0020.0002] 
    // SIGNWRITING SHOULDER TILTING FROM WAIST

    uint32_t const cps[1] = { 0x1da71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_018)
{
    // 1DA72 ; [*1AAC.0020.0002] 
    // SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH

    uint32_t const cps[1] = { 0x1da72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_019)
{
    // 1DA73 ; [*1AAD.0020.0002] 
    // SIGNWRITING TORSO-WALLPLANE CURVED BEND

    uint32_t const cps[1] = { 0x1da73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_020)
{
    // 1DA74 ; [*1AAE.0020.0002] 
    // SIGNWRITING TORSO-FLOORPLANE TWISTING

    uint32_t const cps[1] = { 0x1da74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_021)
{
    // 1DA75 ; [.0000.0000.0000] 
    // SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS

    uint32_t const cps[1] = { 0x1da75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_022)
{
    // 1DA76 ; [*1AAF.0020.0002] 
    // SIGNWRITING LIMB COMBINATION

    uint32_t const cps[1] = { 0x1da76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_023)
{
    // 1DA77 ; [*1AB0.0020.0002] 
    // SIGNWRITING LIMB LENGTH-1

    uint32_t const cps[1] = { 0x1da77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_024)
{
    // 1DA78 ; [*1AB1.0020.0002] 
    // SIGNWRITING LIMB LENGTH-2

    uint32_t const cps[1] = { 0x1da78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_025)
{
    // 1DA79 ; [*1AB2.0020.0002] 
    // SIGNWRITING LIMB LENGTH-3

    uint32_t const cps[1] = { 0x1da79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_026)
{
    // 1DA7A ; [*1AB3.0020.0002] 
    // SIGNWRITING LIMB LENGTH-4

    uint32_t const cps[1] = { 0x1da7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_027)
{
    // 1DA7B ; [*1AB4.0020.0002] 
    // SIGNWRITING LIMB LENGTH-5

    uint32_t const cps[1] = { 0x1da7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_028)
{
    // 1DA7C ; [*1AB5.0020.0002] 
    // SIGNWRITING LIMB LENGTH-6

    uint32_t const cps[1] = { 0x1da7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_029)
{
    // 1DA7D ; [*1AB6.0020.0002] 
    // SIGNWRITING LIMB LENGTH-7

    uint32_t const cps[1] = { 0x1da7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_030)
{
    // 1DA7E ; [*1AB7.0020.0002] 
    // SIGNWRITING FINGER

    uint32_t const cps[1] = { 0x1da7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_031)
{
    // 1DA7F ; [*1AB8.0020.0002] 
    // SIGNWRITING LOCATION-WALLPLANE SPACE

    uint32_t const cps[1] = { 0x1da7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_032)
{
    // 1DA80 ; [*1AB9.0020.0002] 
    // SIGNWRITING LOCATION-FLOORPLANE SPACE

    uint32_t const cps[1] = { 0x1da80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ab9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_033)
{
    // 1DA81 ; [*1ABA.0020.0002] 
    // SIGNWRITING LOCATION HEIGHT

    uint32_t const cps[1] = { 0x1da81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_034)
{
    // 1DA82 ; [*1ABB.0020.0002] 
    // SIGNWRITING LOCATION WIDTH

    uint32_t const cps[1] = { 0x1da82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1abb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_035)
{
    // 1DA83 ; [*1ABC.0020.0002] 
    // SIGNWRITING LOCATION DEPTH

    uint32_t const cps[1] = { 0x1da83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1abc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_036)
{
    // 1DA84 ; [.0000.0000.0000] 
    // SIGNWRITING LOCATION HEAD NECK

    uint32_t const cps[1] = { 0x1da84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_037)
{
    // 1DA85 ; [*1ABD.0020.0002] 
    // SIGNWRITING LOCATION TORSO

    uint32_t const cps[1] = { 0x1da85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1abd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_038)
{
    // 1DA86 ; [*1ABE.0020.0002] 
    // SIGNWRITING LOCATION LIMBS DIGITS

    uint32_t const cps[1] = { 0x1da86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1abe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_039)
{
    // 1DA87 ; [*0493.0020.0002] 
    // SIGNWRITING COMMA

    uint32_t const cps[1] = { 0x1da87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x493), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_040)
{
    // 1DA88 ; [*0494.0020.0002] 
    // SIGNWRITING FULL STOP

    uint32_t const cps[1] = { 0x1da88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x494), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_041)
{
    // 1DA89 ; [*0495.0020.0002] 
    // SIGNWRITING SEMICOLON

    uint32_t const cps[1] = { 0x1da89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x495), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_042)
{
    // 1DA8A ; [*0496.0020.0002] 
    // SIGNWRITING COLON

    uint32_t const cps[1] = { 0x1da8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x496), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_043)
{
    // 1DA8B ; [*0497.0020.0002] 
    // SIGNWRITING PARENTHESIS

    uint32_t const cps[1] = { 0x1da8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x497), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_044)
{
    // 1DA9B ; [.0000.0000.0000] 
    // SIGNWRITING FILL MODIFIER-2

    uint32_t const cps[1] = { 0x1da9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_045)
{
    // 1DA9C ; [.0000.0000.0000] 
    // SIGNWRITING FILL MODIFIER-3

    uint32_t const cps[1] = { 0x1da9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_046)
{
    // 1DA9D ; [.0000.0000.0000] 
    // SIGNWRITING FILL MODIFIER-4

    uint32_t const cps[1] = { 0x1da9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_047)
{
    // 1DA9E ; [.0000.0000.0000] 
    // SIGNWRITING FILL MODIFIER-5

    uint32_t const cps[1] = { 0x1da9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_048)
{
    // 1DA9F ; [.0000.0000.0000] 
    // SIGNWRITING FILL MODIFIER-6

    uint32_t const cps[1] = { 0x1da9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_049)
{
    // 1DAA1 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-2

    uint32_t const cps[1] = { 0x1daa1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_050)
{
    // 1DAA2 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-3

    uint32_t const cps[1] = { 0x1daa2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_051)
{
    // 1DAA3 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-4

    uint32_t const cps[1] = { 0x1daa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_052)
{
    // 1DAA4 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-5

    uint32_t const cps[1] = { 0x1daa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_053)
{
    // 1DAA5 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-6

    uint32_t const cps[1] = { 0x1daa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_054)
{
    // 1DAA6 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-7

    uint32_t const cps[1] = { 0x1daa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_055)
{
    // 1DAA7 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-8

    uint32_t const cps[1] = { 0x1daa7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_056)
{
    // 1DAA8 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-9

    uint32_t const cps[1] = { 0x1daa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_057)
{
    // 1DAA9 ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-10

    uint32_t const cps[1] = { 0x1daa9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_058)
{
    // 1DAAA ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-11

    uint32_t const cps[1] = { 0x1daaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_059)
{
    // 1DAAB ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-12

    uint32_t const cps[1] = { 0x1daab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_060)
{
    // 1DAAC ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-13

    uint32_t const cps[1] = { 0x1daac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_061)
{
    // 1DAAD ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-14

    uint32_t const cps[1] = { 0x1daad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_062)
{
    // 1DAAE ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-15

    uint32_t const cps[1] = { 0x1daae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_063)
{
    // 1DAAF ; [.0000.0000.0000] 
    // SIGNWRITING ROTATION MODIFIER-16

    uint32_t const cps[1] = { 0x1daaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_064)
{
    // 1E000 ; [.224B.0020.0004] 
    // COMBINING GLAGOLITIC LETTER AZU

    uint32_t const cps[1] = { 0x1e000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x224b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_065)
{
    // 1E001 ; [.224C.0020.0004] 
    // COMBINING GLAGOLITIC LETTER BUKY

    uint32_t const cps[1] = { 0x1e001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x224c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_066)
{
    // 1E002 ; [.224D.0020.0004] 
    // COMBINING GLAGOLITIC LETTER VEDE

    uint32_t const cps[1] = { 0x1e002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x224d), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_067)
{
    // 1E003 ; [.224E.0020.0004] 
    // COMBINING GLAGOLITIC LETTER GLAGOLI

    uint32_t const cps[1] = { 0x1e003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x224e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_068)
{
    // 1E004 ; [.224F.0020.0004] 
    // COMBINING GLAGOLITIC LETTER DOBRO

    uint32_t const cps[1] = { 0x1e004 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x224f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_069)
{
    // 1E005 ; [.2250.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YESTU

    uint32_t const cps[1] = { 0x1e005 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2250), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_070)
{
    // 1E006 ; [.2251.0020.0004] 
    // COMBINING GLAGOLITIC LETTER ZHIVETE

    uint32_t const cps[1] = { 0x1e006 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2251), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_071)
{
    // 1E008 ; [.2253.0020.0004] 
    // COMBINING GLAGOLITIC LETTER ZEMLJA

    uint32_t const cps[1] = { 0x1e008 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2253), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_072)
{
    // 1E009 ; [.2254.0020.0004] 
    // COMBINING GLAGOLITIC LETTER IZHE

    uint32_t const cps[1] = { 0x1e009 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2254), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_073)
{
    // 1E00A ; [.2255.0020.0004] 
    // COMBINING GLAGOLITIC LETTER INITIAL IZHE

    uint32_t const cps[1] = { 0x1e00a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2255), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_074)
{
    // 1E00B ; [.2256.0020.0004] 
    // COMBINING GLAGOLITIC LETTER I

    uint32_t const cps[1] = { 0x1e00b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2256), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_075)
{
    // 1E00C ; [.2257.0020.0004] 
    // COMBINING GLAGOLITIC LETTER DJERVI

    uint32_t const cps[1] = { 0x1e00c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2257), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_076)
{
    // 1E00D ; [.2258.0020.0004] 
    // COMBINING GLAGOLITIC LETTER KAKO

    uint32_t const cps[1] = { 0x1e00d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2258), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_077)
{
    // 1E00E ; [.2259.0020.0004] 
    // COMBINING GLAGOLITIC LETTER LJUDIJE

    uint32_t const cps[1] = { 0x1e00e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2259), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_078)
{
    // 1E00F ; [.225A.0020.0004] 
    // COMBINING GLAGOLITIC LETTER MYSLITE

    uint32_t const cps[1] = { 0x1e00f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_079)
{
    // 1E010 ; [.225B.0020.0004] 
    // COMBINING GLAGOLITIC LETTER NASHI

    uint32_t const cps[1] = { 0x1e010 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_080)
{
    // 1E011 ; [.225C.0020.0004] 
    // COMBINING GLAGOLITIC LETTER ONU

    uint32_t const cps[1] = { 0x1e011 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_081)
{
    // 1E012 ; [.225D.0020.0004] 
    // COMBINING GLAGOLITIC LETTER POKOJI

    uint32_t const cps[1] = { 0x1e012 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225d), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_082)
{
    // 1E013 ; [.225E.0020.0004] 
    // COMBINING GLAGOLITIC LETTER RITSI

    uint32_t const cps[1] = { 0x1e013 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_083)
{
    // 1E014 ; [.225F.0020.0004] 
    // COMBINING GLAGOLITIC LETTER SLOVO

    uint32_t const cps[1] = { 0x1e014 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_084)
{
    // 1E015 ; [.2260.0020.0004] 
    // COMBINING GLAGOLITIC LETTER TVRIDO

    uint32_t const cps[1] = { 0x1e015 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2260), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_085)
{
    // 1E016 ; [.2261.0020.0004] 
    // COMBINING GLAGOLITIC LETTER UKU

    uint32_t const cps[1] = { 0x1e016 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2261), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_086)
{
    // 1E017 ; [.2262.0020.0004] 
    // COMBINING GLAGOLITIC LETTER FRITU

    uint32_t const cps[1] = { 0x1e017 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2262), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_087)
{
    // 1E018 ; [.2263.0020.0004] 
    // COMBINING GLAGOLITIC LETTER HERU

    uint32_t const cps[1] = { 0x1e018 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2263), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_088)
{
    // 1E01B ; [.2266.0020.0004] 
    // COMBINING GLAGOLITIC LETTER SHTA

    uint32_t const cps[1] = { 0x1e01b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2266), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_089)
{
    // 1E01C ; [.2267.0020.0004] 
    // COMBINING GLAGOLITIC LETTER TSI

    uint32_t const cps[1] = { 0x1e01c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2267), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_090)
{
    // 1E01D ; [.2268.0020.0004] 
    // COMBINING GLAGOLITIC LETTER CHRIVI

    uint32_t const cps[1] = { 0x1e01d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2268), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_091)
{
    // 1E01E ; [.2269.0020.0004] 
    // COMBINING GLAGOLITIC LETTER SHA

    uint32_t const cps[1] = { 0x1e01e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2269), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_092)
{
    // 1E01F ; [.226A.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YERU

    uint32_t const cps[1] = { 0x1e01f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_093)
{
    // 1E020 ; [.226B.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YERI

    uint32_t const cps[1] = { 0x1e020 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_094)
{
    // 1E021 ; [.226C.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YATI

    uint32_t const cps[1] = { 0x1e021 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_095)
{
    // 1E023 ; [.226E.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YU

    uint32_t const cps[1] = { 0x1e023 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_096)
{
    // 1E024 ; [.226F.0020.0004] 
    // COMBINING GLAGOLITIC LETTER SMALL YUS

    uint32_t const cps[1] = { 0x1e024 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_097)
{
    // 1E026 ; [.2271.0020.0004] 
    // COMBINING GLAGOLITIC LETTER YO

    uint32_t const cps[1] = { 0x1e026 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2271), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_098)
{
    // 1E027 ; [.2272.0020.0004] 
    // COMBINING GLAGOLITIC LETTER IOTATED SMALL YUS

    uint32_t const cps[1] = { 0x1e027 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2272), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_099)
{
    // 1E028 ; [.2273.0020.0004] 
    // COMBINING GLAGOLITIC LETTER BIG YUS

    uint32_t const cps[1] = { 0x1e028 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2273), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_100)
{
    // 1E029 ; [.2274.0020.0004] 
    // COMBINING GLAGOLITIC LETTER IOTATED BIG YUS

    uint32_t const cps[1] = { 0x1e029 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2274), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_101)
{
    // 1E02A ; [.2275.0020.0004] 
    // COMBINING GLAGOLITIC LETTER FITA

    uint32_t const cps[1] = { 0x1e02a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2275), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_102)
{
    // 1E800 ; [.3C25.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M001 KI

    uint32_t const cps[1] = { 0x1e800 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_103)
{
    // 1E801 ; [.3C26.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M002 KA

    uint32_t const cps[1] = { 0x1e801 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_104)
{
    // 1E802 ; [.3C27.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M003 KU

    uint32_t const cps[1] = { 0x1e802 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_105)
{
    // 1E803 ; [.3C28.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M065 KEE

    uint32_t const cps[1] = { 0x1e803 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_106)
{
    // 1E804 ; [.3C29.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M095 KE

    uint32_t const cps[1] = { 0x1e804 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_107)
{
    // 1E805 ; [.3C2A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M076 KOO

    uint32_t const cps[1] = { 0x1e805 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_108)
{
    // 1E806 ; [.3C2B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M048 KO

    uint32_t const cps[1] = { 0x1e806 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_109)
{
    // 1E807 ; [.3C2C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M179 KUA

    uint32_t const cps[1] = { 0x1e807 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_110)
{
    // 1E808 ; [.3C2D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M004 WI

    uint32_t const cps[1] = { 0x1e808 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_111)
{
    // 1E809 ; [.3C2E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M005 WA

    uint32_t const cps[1] = { 0x1e809 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_112)
{
    // 1E80A ; [.3C2F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M006 WU

    uint32_t const cps[1] = { 0x1e80a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_113)
{
    // 1E80B ; [.3C30.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M126 WEE

    uint32_t const cps[1] = { 0x1e80b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_114)
{
    // 1E80C ; [.3C31.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M118 WE

    uint32_t const cps[1] = { 0x1e80c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_115)
{
    // 1E80D ; [.3C32.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M114 WOO

    uint32_t const cps[1] = { 0x1e80d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_116)
{
    // 1E80E ; [.3C33.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M045 WO

    uint32_t const cps[1] = { 0x1e80e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_117)
{
    // 1E80F ; [.3C34.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M194 WUI

    uint32_t const cps[1] = { 0x1e80f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_118)
{
    // 1E810 ; [.3C35.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M143 WEI

    uint32_t const cps[1] = { 0x1e810 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_119)
{
    // 1E811 ; [.3C36.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M061 WVI

    uint32_t const cps[1] = { 0x1e811 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_120)
{
    // 1E812 ; [.3C37.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M049 WVA

    uint32_t const cps[1] = { 0x1e812 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_121)
{
    // 1E813 ; [.3C38.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M139 WVE

    uint32_t const cps[1] = { 0x1e813 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_122)
{
    // 1E814 ; [.3C39.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M007 MIN

    uint32_t const cps[1] = { 0x1e814 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_123)
{
    // 1E815 ; [.3C3A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M008 MAN

    uint32_t const cps[1] = { 0x1e815 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_124)
{
    // 1E816 ; [.3C3B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M009 MUN

    uint32_t const cps[1] = { 0x1e816 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_125)
{
    // 1E817 ; [.3C3C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M059 MEN

    uint32_t const cps[1] = { 0x1e817 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_126)
{
    // 1E818 ; [.3C3D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M094 MON

    uint32_t const cps[1] = { 0x1e818 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_127)
{
    // 1E819 ; [.3C3E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M154 MUAN

    uint32_t const cps[1] = { 0x1e819 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_128)
{
    // 1E81A ; [.3C3F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M189 MUEN

    uint32_t const cps[1] = { 0x1e81a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_129)
{
    // 1E81B ; [.3C40.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M010 BI

    uint32_t const cps[1] = { 0x1e81b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_130)
{
    // 1E81C ; [.3C41.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M011 BA

    uint32_t const cps[1] = { 0x1e81c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_131)
{
    // 1E81D ; [.3C42.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M012 BU

    uint32_t const cps[1] = { 0x1e81d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_132)
{
    // 1E81E ; [.3C43.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M150 BEE

    uint32_t const cps[1] = { 0x1e81e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_133)
{
    // 1E81F ; [.3C44.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M097 BE

    uint32_t const cps[1] = { 0x1e81f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_134)
{
    // 1E820 ; [.3C45.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M103 BOO

    uint32_t const cps[1] = { 0x1e820 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_135)
{
    // 1E821 ; [.3C46.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M138 BO

    uint32_t const cps[1] = { 0x1e821 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_136)
{
    // 1E822 ; [.3C47.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M013 I

    uint32_t const cps[1] = { 0x1e822 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_137)
{
    // 1E823 ; [.3C48.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M014 A

    uint32_t const cps[1] = { 0x1e823 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_138)
{
    // 1E824 ; [.3C49.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M015 U

    uint32_t const cps[1] = { 0x1e824 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_139)
{
    // 1E825 ; [.3C4A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M163 EE

    uint32_t const cps[1] = { 0x1e825 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_140)
{
    // 1E826 ; [.3C4B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M100 E

    uint32_t const cps[1] = { 0x1e826 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_141)
{
    // 1E827 ; [.3C4C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M165 OO

    uint32_t const cps[1] = { 0x1e827 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_142)
{
    // 1E828 ; [.3C4D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M147 O

    uint32_t const cps[1] = { 0x1e828 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_143)
{
    // 1E829 ; [.3C4E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M137 EI

    uint32_t const cps[1] = { 0x1e829 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_144)
{
    // 1E82A ; [.3C4F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M131 IN

    uint32_t const cps[1] = { 0x1e82a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_145)
{
    // 1E82B ; [.3C50.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M135 IN

    uint32_t const cps[1] = { 0x1e82b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_146)
{
    // 1E82C ; [.3C51.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M195 AN

    uint32_t const cps[1] = { 0x1e82c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_147)
{
    // 1E82D ; [.3C52.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M178 EN

    uint32_t const cps[1] = { 0x1e82d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_148)
{
    // 1E82E ; [.3C53.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M019 SI

    uint32_t const cps[1] = { 0x1e82e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_186_149)
{
    // 1E82F ; [.3C54.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M020 SA

    uint32_t const cps[1] = { 0x1e82f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3c54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

