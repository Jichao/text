// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_236_000)
{
    // 169A2 0041;	
    // (𖦢) BAMUM LETTER PHASE-E GHAAMAE	[3B70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A2, 0x0041 };
    uint32_t const ces[9] = { 0x3B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_001)
{
    // 169A2 0062;	
    // (𖦢) BAMUM LETTER PHASE-E GHAAMAE	[3B70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A2, 0x0062 };
    uint32_t const ces[9] = { 0x3B70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_002)
{
    // 169A3 0021;	
    // (𖦣) BAMUM LETTER PHASE-E NGEUREUT	[3B71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A3, 0x0021 };
    uint32_t const ces[9] = { 0x3B71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_003)
{
    // 169A3 003F;	
    // (𖦣) BAMUM LETTER PHASE-E NGEUREUT	[3B71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A3, 0x003F };
    uint32_t const ces[9] = { 0x3B71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_004)
{
    // 169A3 0061;	
    // (𖦣) BAMUM LETTER PHASE-E NGEUREUT	[3B71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A3, 0x0061 };
    uint32_t const ces[9] = { 0x3B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_005)
{
    // 169A3 0041;	
    // (𖦣) BAMUM LETTER PHASE-E NGEUREUT	[3B71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A3, 0x0041 };
    uint32_t const ces[9] = { 0x3B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_006)
{
    // 169A3 0062;	
    // (𖦣) BAMUM LETTER PHASE-E NGEUREUT	[3B71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A3, 0x0062 };
    uint32_t const ces[9] = { 0x3B71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_007)
{
    // 169A4 0021;	
    // (𖦤) BAMUM LETTER PHASE-E SHEUAEQ	[3B72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A4, 0x0021 };
    uint32_t const ces[9] = { 0x3B72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_008)
{
    // 169A4 003F;	
    // (𖦤) BAMUM LETTER PHASE-E SHEUAEQ	[3B72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A4, 0x003F };
    uint32_t const ces[9] = { 0x3B72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_009)
{
    // 169A4 0061;	
    // (𖦤) BAMUM LETTER PHASE-E SHEUAEQ	[3B72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A4, 0x0061 };
    uint32_t const ces[9] = { 0x3B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_010)
{
    // 169A4 0041;	
    // (𖦤) BAMUM LETTER PHASE-E SHEUAEQ	[3B72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A4, 0x0041 };
    uint32_t const ces[9] = { 0x3B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_011)
{
    // 169A4 0062;	
    // (𖦤) BAMUM LETTER PHASE-E SHEUAEQ	[3B72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A4, 0x0062 };
    uint32_t const ces[9] = { 0x3B72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_012)
{
    // 169A5 0021;	
    // (𖦥) BAMUM LETTER PHASE-E MGBEN	[3B73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A5, 0x0021 };
    uint32_t const ces[9] = { 0x3B73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_013)
{
    // 169A5 003F;	
    // (𖦥) BAMUM LETTER PHASE-E MGBEN	[3B73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A5, 0x003F };
    uint32_t const ces[9] = { 0x3B73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_014)
{
    // 169A5 0061;	
    // (𖦥) BAMUM LETTER PHASE-E MGBEN	[3B73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A5, 0x0061 };
    uint32_t const ces[9] = { 0x3B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_015)
{
    // 169A5 0041;	
    // (𖦥) BAMUM LETTER PHASE-E MGBEN	[3B73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A5, 0x0041 };
    uint32_t const ces[9] = { 0x3B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_016)
{
    // 169A5 0062;	
    // (𖦥) BAMUM LETTER PHASE-E MGBEN	[3B73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A5, 0x0062 };
    uint32_t const ces[9] = { 0x3B73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_017)
{
    // 169A6 0021;	
    // (𖦦) BAMUM LETTER PHASE-E MBEE	[3B74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A6, 0x0021 };
    uint32_t const ces[9] = { 0x3B74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_018)
{
    // 169A6 003F;	
    // (𖦦) BAMUM LETTER PHASE-E MBEE	[3B74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A6, 0x003F };
    uint32_t const ces[9] = { 0x3B74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_019)
{
    // 169A6 0061;	
    // (𖦦) BAMUM LETTER PHASE-E MBEE	[3B74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A6, 0x0061 };
    uint32_t const ces[9] = { 0x3B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_020)
{
    // 169A6 0041;	
    // (𖦦) BAMUM LETTER PHASE-E MBEE	[3B74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A6, 0x0041 };
    uint32_t const ces[9] = { 0x3B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_021)
{
    // 169A6 0062;	
    // (𖦦) BAMUM LETTER PHASE-E MBEE	[3B74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A6, 0x0062 };
    uint32_t const ces[9] = { 0x3B74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_022)
{
    // 169A7 0021;	
    // (𖦧) BAMUM LETTER PHASE-E NZAQ	[3B75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A7, 0x0021 };
    uint32_t const ces[9] = { 0x3B75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_023)
{
    // 169A7 003F;	
    // (𖦧) BAMUM LETTER PHASE-E NZAQ	[3B75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A7, 0x003F };
    uint32_t const ces[9] = { 0x3B75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_024)
{
    // 169A7 0061;	
    // (𖦧) BAMUM LETTER PHASE-E NZAQ	[3B75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A7, 0x0061 };
    uint32_t const ces[9] = { 0x3B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_025)
{
    // 169A7 0041;	
    // (𖦧) BAMUM LETTER PHASE-E NZAQ	[3B75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A7, 0x0041 };
    uint32_t const ces[9] = { 0x3B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_026)
{
    // 169A7 0062;	
    // (𖦧) BAMUM LETTER PHASE-E NZAQ	[3B75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A7, 0x0062 };
    uint32_t const ces[9] = { 0x3B75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_027)
{
    // 169A8 0021;	
    // (𖦨) BAMUM LETTER PHASE-E NKOM	[3B76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A8, 0x0021 };
    uint32_t const ces[9] = { 0x3B76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_028)
{
    // 169A8 003F;	
    // (𖦨) BAMUM LETTER PHASE-E NKOM	[3B76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A8, 0x003F };
    uint32_t const ces[9] = { 0x3B76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_029)
{
    // 169A8 0061;	
    // (𖦨) BAMUM LETTER PHASE-E NKOM	[3B76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A8, 0x0061 };
    uint32_t const ces[9] = { 0x3B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_030)
{
    // 169A8 0041;	
    // (𖦨) BAMUM LETTER PHASE-E NKOM	[3B76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A8, 0x0041 };
    uint32_t const ces[9] = { 0x3B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_031)
{
    // 169A8 0062;	
    // (𖦨) BAMUM LETTER PHASE-E NKOM	[3B76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A8, 0x0062 };
    uint32_t const ces[9] = { 0x3B76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_032)
{
    // 169A9 0021;	
    // (𖦩) BAMUM LETTER PHASE-E GBET	[3B77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A9, 0x0021 };
    uint32_t const ces[9] = { 0x3B77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_033)
{
    // 169A9 003F;	
    // (𖦩) BAMUM LETTER PHASE-E GBET	[3B77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A9, 0x003F };
    uint32_t const ces[9] = { 0x3B77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_034)
{
    // 169A9 0061;	
    // (𖦩) BAMUM LETTER PHASE-E GBET	[3B77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A9, 0x0061 };
    uint32_t const ces[9] = { 0x3B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_035)
{
    // 169A9 0041;	
    // (𖦩) BAMUM LETTER PHASE-E GBET	[3B77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169A9, 0x0041 };
    uint32_t const ces[9] = { 0x3B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_036)
{
    // 169A9 0062;	
    // (𖦩) BAMUM LETTER PHASE-E GBET	[3B77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169A9, 0x0062 };
    uint32_t const ces[9] = { 0x3B77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_037)
{
    // 169AA 0021;	
    // (𖦪) BAMUM LETTER PHASE-E TUM	[3B78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AA, 0x0021 };
    uint32_t const ces[9] = { 0x3B78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_038)
{
    // 169AA 003F;	
    // (𖦪) BAMUM LETTER PHASE-E TUM	[3B78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AA, 0x003F };
    uint32_t const ces[9] = { 0x3B78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_039)
{
    // 169AA 0061;	
    // (𖦪) BAMUM LETTER PHASE-E TUM	[3B78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AA, 0x0061 };
    uint32_t const ces[9] = { 0x3B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_040)
{
    // 169AA 0041;	
    // (𖦪) BAMUM LETTER PHASE-E TUM	[3B78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AA, 0x0041 };
    uint32_t const ces[9] = { 0x3B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_041)
{
    // 169AA 0062;	
    // (𖦪) BAMUM LETTER PHASE-E TUM	[3B78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AA, 0x0062 };
    uint32_t const ces[9] = { 0x3B78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_042)
{
    // 169AB 0021;	
    // (𖦫) BAMUM LETTER PHASE-E KUET	[3B79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AB, 0x0021 };
    uint32_t const ces[9] = { 0x3B79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_043)
{
    // 169AB 003F;	
    // (𖦫) BAMUM LETTER PHASE-E KUET	[3B79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AB, 0x003F };
    uint32_t const ces[9] = { 0x3B79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_044)
{
    // 169AB 0061;	
    // (𖦫) BAMUM LETTER PHASE-E KUET	[3B79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AB, 0x0061 };
    uint32_t const ces[9] = { 0x3B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_045)
{
    // 169AB 0041;	
    // (𖦫) BAMUM LETTER PHASE-E KUET	[3B79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AB, 0x0041 };
    uint32_t const ces[9] = { 0x3B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_046)
{
    // 169AB 0062;	
    // (𖦫) BAMUM LETTER PHASE-E KUET	[3B79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AB, 0x0062 };
    uint32_t const ces[9] = { 0x3B79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_047)
{
    // 169AC 0021;	
    // (𖦬) BAMUM LETTER PHASE-E YAP	[3B7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AC, 0x0021 };
    uint32_t const ces[9] = { 0x3B7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_048)
{
    // 169AC 003F;	
    // (𖦬) BAMUM LETTER PHASE-E YAP	[3B7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AC, 0x003F };
    uint32_t const ces[9] = { 0x3B7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_049)
{
    // 169AC 0061;	
    // (𖦬) BAMUM LETTER PHASE-E YAP	[3B7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AC, 0x0061 };
    uint32_t const ces[9] = { 0x3B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_050)
{
    // 169AC 0041;	
    // (𖦬) BAMUM LETTER PHASE-E YAP	[3B7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AC, 0x0041 };
    uint32_t const ces[9] = { 0x3B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_051)
{
    // 169AC 0062;	
    // (𖦬) BAMUM LETTER PHASE-E YAP	[3B7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AC, 0x0062 };
    uint32_t const ces[9] = { 0x3B7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_052)
{
    // 169AD 0021;	
    // (𖦭) BAMUM LETTER PHASE-E NYI CLEAVER	[3B7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AD, 0x0021 };
    uint32_t const ces[9] = { 0x3B7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_053)
{
    // 169AD 003F;	
    // (𖦭) BAMUM LETTER PHASE-E NYI CLEAVER	[3B7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AD, 0x003F };
    uint32_t const ces[9] = { 0x3B7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_054)
{
    // 169AD 0061;	
    // (𖦭) BAMUM LETTER PHASE-E NYI CLEAVER	[3B7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AD, 0x0061 };
    uint32_t const ces[9] = { 0x3B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_055)
{
    // 169AD 0041;	
    // (𖦭) BAMUM LETTER PHASE-E NYI CLEAVER	[3B7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AD, 0x0041 };
    uint32_t const ces[9] = { 0x3B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_056)
{
    // 169AD 0062;	
    // (𖦭) BAMUM LETTER PHASE-E NYI CLEAVER	[3B7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AD, 0x0062 };
    uint32_t const ces[9] = { 0x3B7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_057)
{
    // 169AE 0021;	
    // (𖦮) BAMUM LETTER PHASE-E YIT	[3B7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AE, 0x0021 };
    uint32_t const ces[9] = { 0x3B7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_058)
{
    // 169AE 003F;	
    // (𖦮) BAMUM LETTER PHASE-E YIT	[3B7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AE, 0x003F };
    uint32_t const ces[9] = { 0x3B7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_059)
{
    // 169AE 0061;	
    // (𖦮) BAMUM LETTER PHASE-E YIT	[3B7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AE, 0x0061 };
    uint32_t const ces[9] = { 0x3B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_060)
{
    // 169AE 0041;	
    // (𖦮) BAMUM LETTER PHASE-E YIT	[3B7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AE, 0x0041 };
    uint32_t const ces[9] = { 0x3B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_061)
{
    // 169AE 0062;	
    // (𖦮) BAMUM LETTER PHASE-E YIT	[3B7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AE, 0x0062 };
    uint32_t const ces[9] = { 0x3B7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_062)
{
    // 169AF 0021;	
    // (𖦯) BAMUM LETTER PHASE-E MFEUQ	[3B7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AF, 0x0021 };
    uint32_t const ces[9] = { 0x3B7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_063)
{
    // 169AF 003F;	
    // (𖦯) BAMUM LETTER PHASE-E MFEUQ	[3B7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AF, 0x003F };
    uint32_t const ces[9] = { 0x3B7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_064)
{
    // 169AF 0061;	
    // (𖦯) BAMUM LETTER PHASE-E MFEUQ	[3B7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AF, 0x0061 };
    uint32_t const ces[9] = { 0x3B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_065)
{
    // 169AF 0041;	
    // (𖦯) BAMUM LETTER PHASE-E MFEUQ	[3B7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169AF, 0x0041 };
    uint32_t const ces[9] = { 0x3B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_066)
{
    // 169AF 0062;	
    // (𖦯) BAMUM LETTER PHASE-E MFEUQ	[3B7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169AF, 0x0062 };
    uint32_t const ces[9] = { 0x3B7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_067)
{
    // 169B0 0021;	
    // (𖦰) BAMUM LETTER PHASE-E NDIAQ	[3B7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B0, 0x0021 };
    uint32_t const ces[9] = { 0x3B7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_068)
{
    // 169B0 003F;	
    // (𖦰) BAMUM LETTER PHASE-E NDIAQ	[3B7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B0, 0x003F };
    uint32_t const ces[9] = { 0x3B7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_069)
{
    // 169B0 0061;	
    // (𖦰) BAMUM LETTER PHASE-E NDIAQ	[3B7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B0, 0x0061 };
    uint32_t const ces[9] = { 0x3B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_070)
{
    // 169B0 0041;	
    // (𖦰) BAMUM LETTER PHASE-E NDIAQ	[3B7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B0, 0x0041 };
    uint32_t const ces[9] = { 0x3B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_071)
{
    // 169B0 0062;	
    // (𖦰) BAMUM LETTER PHASE-E NDIAQ	[3B7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B0, 0x0062 };
    uint32_t const ces[9] = { 0x3B7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_072)
{
    // 169B1 0021;	
    // (𖦱) BAMUM LETTER PHASE-E PIEEQ	[3B7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B1, 0x0021 };
    uint32_t const ces[9] = { 0x3B7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_073)
{
    // 169B1 003F;	
    // (𖦱) BAMUM LETTER PHASE-E PIEEQ	[3B7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B1, 0x003F };
    uint32_t const ces[9] = { 0x3B7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_074)
{
    // 169B1 0061;	
    // (𖦱) BAMUM LETTER PHASE-E PIEEQ	[3B7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B1, 0x0061 };
    uint32_t const ces[9] = { 0x3B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_075)
{
    // 169B1 0041;	
    // (𖦱) BAMUM LETTER PHASE-E PIEEQ	[3B7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B1, 0x0041 };
    uint32_t const ces[9] = { 0x3B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_076)
{
    // 169B1 0062;	
    // (𖦱) BAMUM LETTER PHASE-E PIEEQ	[3B7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B1, 0x0062 };
    uint32_t const ces[9] = { 0x3B7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_077)
{
    // 169B2 0021;	
    // (𖦲) BAMUM LETTER PHASE-E YUEQ	[3B80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B2, 0x0021 };
    uint32_t const ces[9] = { 0x3B80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_078)
{
    // 169B2 003F;	
    // (𖦲) BAMUM LETTER PHASE-E YUEQ	[3B80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B2, 0x003F };
    uint32_t const ces[9] = { 0x3B80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_079)
{
    // 169B2 0061;	
    // (𖦲) BAMUM LETTER PHASE-E YUEQ	[3B80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B2, 0x0061 };
    uint32_t const ces[9] = { 0x3B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_080)
{
    // 169B2 0041;	
    // (𖦲) BAMUM LETTER PHASE-E YUEQ	[3B80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B2, 0x0041 };
    uint32_t const ces[9] = { 0x3B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_081)
{
    // 169B2 0062;	
    // (𖦲) BAMUM LETTER PHASE-E YUEQ	[3B80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B2, 0x0062 };
    uint32_t const ces[9] = { 0x3B80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_082)
{
    // 169B3 0021;	
    // (𖦳) BAMUM LETTER PHASE-E LEUAEM	[3B81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B3, 0x0021 };
    uint32_t const ces[9] = { 0x3B81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_083)
{
    // 169B3 003F;	
    // (𖦳) BAMUM LETTER PHASE-E LEUAEM	[3B81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B3, 0x003F };
    uint32_t const ces[9] = { 0x3B81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_084)
{
    // 169B3 0061;	
    // (𖦳) BAMUM LETTER PHASE-E LEUAEM	[3B81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B3, 0x0061 };
    uint32_t const ces[9] = { 0x3B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_085)
{
    // 169B3 0041;	
    // (𖦳) BAMUM LETTER PHASE-E LEUAEM	[3B81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B3, 0x0041 };
    uint32_t const ces[9] = { 0x3B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_086)
{
    // 169B3 0062;	
    // (𖦳) BAMUM LETTER PHASE-E LEUAEM	[3B81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B3, 0x0062 };
    uint32_t const ces[9] = { 0x3B81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_087)
{
    // 169B4 0021;	
    // (𖦴) BAMUM LETTER PHASE-E FUE	[3B82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B4, 0x0021 };
    uint32_t const ces[9] = { 0x3B82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_088)
{
    // 169B4 003F;	
    // (𖦴) BAMUM LETTER PHASE-E FUE	[3B82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B4, 0x003F };
    uint32_t const ces[9] = { 0x3B82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_089)
{
    // 169B4 0061;	
    // (𖦴) BAMUM LETTER PHASE-E FUE	[3B82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B4, 0x0061 };
    uint32_t const ces[9] = { 0x3B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_090)
{
    // 169B4 0041;	
    // (𖦴) BAMUM LETTER PHASE-E FUE	[3B82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B4, 0x0041 };
    uint32_t const ces[9] = { 0x3B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_091)
{
    // 169B4 0062;	
    // (𖦴) BAMUM LETTER PHASE-E FUE	[3B82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B4, 0x0062 };
    uint32_t const ces[9] = { 0x3B82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_092)
{
    // 169B5 0021;	
    // (𖦵) BAMUM LETTER PHASE-E GBEUX	[3B83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B5, 0x0021 };
    uint32_t const ces[9] = { 0x3B83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_093)
{
    // 169B5 003F;	
    // (𖦵) BAMUM LETTER PHASE-E GBEUX	[3B83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B5, 0x003F };
    uint32_t const ces[9] = { 0x3B83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_094)
{
    // 169B5 0061;	
    // (𖦵) BAMUM LETTER PHASE-E GBEUX	[3B83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B5, 0x0061 };
    uint32_t const ces[9] = { 0x3B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_095)
{
    // 169B5 0041;	
    // (𖦵) BAMUM LETTER PHASE-E GBEUX	[3B83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B5, 0x0041 };
    uint32_t const ces[9] = { 0x3B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_096)
{
    // 169B5 0062;	
    // (𖦵) BAMUM LETTER PHASE-E GBEUX	[3B83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B5, 0x0062 };
    uint32_t const ces[9] = { 0x3B83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_097)
{
    // 169B6 0021;	
    // (𖦶) BAMUM LETTER PHASE-E NGKUP	[3B84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B6, 0x0021 };
    uint32_t const ces[9] = { 0x3B84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_098)
{
    // 169B6 003F;	
    // (𖦶) BAMUM LETTER PHASE-E NGKUP	[3B84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B6, 0x003F };
    uint32_t const ces[9] = { 0x3B84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_099)
{
    // 169B6 0061;	
    // (𖦶) BAMUM LETTER PHASE-E NGKUP	[3B84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B6, 0x0061 };
    uint32_t const ces[9] = { 0x3B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_100)
{
    // 169B6 0041;	
    // (𖦶) BAMUM LETTER PHASE-E NGKUP	[3B84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B6, 0x0041 };
    uint32_t const ces[9] = { 0x3B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_101)
{
    // 169B6 0062;	
    // (𖦶) BAMUM LETTER PHASE-E NGKUP	[3B84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B6, 0x0062 };
    uint32_t const ces[9] = { 0x3B84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_102)
{
    // 169B7 0021;	
    // (𖦷) BAMUM LETTER PHASE-E KET	[3B85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B7, 0x0021 };
    uint32_t const ces[9] = { 0x3B85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_103)
{
    // 169B7 003F;	
    // (𖦷) BAMUM LETTER PHASE-E KET	[3B85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B7, 0x003F };
    uint32_t const ces[9] = { 0x3B85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_104)
{
    // 169B7 0061;	
    // (𖦷) BAMUM LETTER PHASE-E KET	[3B85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B7, 0x0061 };
    uint32_t const ces[9] = { 0x3B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_105)
{
    // 169B7 0041;	
    // (𖦷) BAMUM LETTER PHASE-E KET	[3B85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B7, 0x0041 };
    uint32_t const ces[9] = { 0x3B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_106)
{
    // 169B7 0062;	
    // (𖦷) BAMUM LETTER PHASE-E KET	[3B85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B7, 0x0062 };
    uint32_t const ces[9] = { 0x3B85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_107)
{
    // 169B8 0021;	
    // (𖦸) BAMUM LETTER PHASE-E MAE	[3B86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B8, 0x0021 };
    uint32_t const ces[9] = { 0x3B86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_108)
{
    // 169B8 003F;	
    // (𖦸) BAMUM LETTER PHASE-E MAE	[3B86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B8, 0x003F };
    uint32_t const ces[9] = { 0x3B86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_109)
{
    // 169B8 0061;	
    // (𖦸) BAMUM LETTER PHASE-E MAE	[3B86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B8, 0x0061 };
    uint32_t const ces[9] = { 0x3B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_110)
{
    // 169B8 0041;	
    // (𖦸) BAMUM LETTER PHASE-E MAE	[3B86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B8, 0x0041 };
    uint32_t const ces[9] = { 0x3B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_111)
{
    // 169B8 0062;	
    // (𖦸) BAMUM LETTER PHASE-E MAE	[3B86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B8, 0x0062 };
    uint32_t const ces[9] = { 0x3B86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_112)
{
    // 169B9 0021;	
    // (𖦹) BAMUM LETTER PHASE-E NGKAAMI	[3B87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B9, 0x0021 };
    uint32_t const ces[9] = { 0x3B87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_113)
{
    // 169B9 003F;	
    // (𖦹) BAMUM LETTER PHASE-E NGKAAMI	[3B87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B9, 0x003F };
    uint32_t const ces[9] = { 0x3B87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_114)
{
    // 169B9 0061;	
    // (𖦹) BAMUM LETTER PHASE-E NGKAAMI	[3B87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B9, 0x0061 };
    uint32_t const ces[9] = { 0x3B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_115)
{
    // 169B9 0041;	
    // (𖦹) BAMUM LETTER PHASE-E NGKAAMI	[3B87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B9, 0x0041 };
    uint32_t const ces[9] = { 0x3B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_116)
{
    // 169B9 0062;	
    // (𖦹) BAMUM LETTER PHASE-E NGKAAMI	[3B87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B9, 0x0062 };
    uint32_t const ces[9] = { 0x3B87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_117)
{
    // 169BA 0021;	
    // (𖦺) BAMUM LETTER PHASE-E GHET	[3B88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BA, 0x0021 };
    uint32_t const ces[9] = { 0x3B88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_118)
{
    // 169BA 003F;	
    // (𖦺) BAMUM LETTER PHASE-E GHET	[3B88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BA, 0x003F };
    uint32_t const ces[9] = { 0x3B88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_119)
{
    // 169BA 0061;	
    // (𖦺) BAMUM LETTER PHASE-E GHET	[3B88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BA, 0x0061 };
    uint32_t const ces[9] = { 0x3B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_120)
{
    // 169BA 0041;	
    // (𖦺) BAMUM LETTER PHASE-E GHET	[3B88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BA, 0x0041 };
    uint32_t const ces[9] = { 0x3B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_121)
{
    // 169BA 0062;	
    // (𖦺) BAMUM LETTER PHASE-E GHET	[3B88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BA, 0x0062 };
    uint32_t const ces[9] = { 0x3B88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_122)
{
    // 169BB 0021;	
    // (𖦻) BAMUM LETTER PHASE-E FA	[3B89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BB, 0x0021 };
    uint32_t const ces[9] = { 0x3B89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_123)
{
    // 169BB 003F;	
    // (𖦻) BAMUM LETTER PHASE-E FA	[3B89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BB, 0x003F };
    uint32_t const ces[9] = { 0x3B89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_124)
{
    // 169BB 0061;	
    // (𖦻) BAMUM LETTER PHASE-E FA	[3B89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BB, 0x0061 };
    uint32_t const ces[9] = { 0x3B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_125)
{
    // 169BB 0041;	
    // (𖦻) BAMUM LETTER PHASE-E FA	[3B89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BB, 0x0041 };
    uint32_t const ces[9] = { 0x3B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_126)
{
    // 169BB 0062;	
    // (𖦻) BAMUM LETTER PHASE-E FA	[3B89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BB, 0x0062 };
    uint32_t const ces[9] = { 0x3B89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_127)
{
    // 169BC 0021;	
    // (𖦼) BAMUM LETTER PHASE-E NTUM	[3B8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BC, 0x0021 };
    uint32_t const ces[9] = { 0x3B8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_128)
{
    // 169BC 003F;	
    // (𖦼) BAMUM LETTER PHASE-E NTUM	[3B8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BC, 0x003F };
    uint32_t const ces[9] = { 0x3B8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_129)
{
    // 169BC 0061;	
    // (𖦼) BAMUM LETTER PHASE-E NTUM	[3B8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BC, 0x0061 };
    uint32_t const ces[9] = { 0x3B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_130)
{
    // 169BC 0041;	
    // (𖦼) BAMUM LETTER PHASE-E NTUM	[3B8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BC, 0x0041 };
    uint32_t const ces[9] = { 0x3B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_131)
{
    // 169BC 0062;	
    // (𖦼) BAMUM LETTER PHASE-E NTUM	[3B8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BC, 0x0062 };
    uint32_t const ces[9] = { 0x3B8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_132)
{
    // 169BD 0021;	
    // (𖦽) BAMUM LETTER PHASE-E PEUT	[3B8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BD, 0x0021 };
    uint32_t const ces[9] = { 0x3B8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_133)
{
    // 169BD 003F;	
    // (𖦽) BAMUM LETTER PHASE-E PEUT	[3B8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BD, 0x003F };
    uint32_t const ces[9] = { 0x3B8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_134)
{
    // 169BD 0061;	
    // (𖦽) BAMUM LETTER PHASE-E PEUT	[3B8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BD, 0x0061 };
    uint32_t const ces[9] = { 0x3B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_135)
{
    // 169BD 0041;	
    // (𖦽) BAMUM LETTER PHASE-E PEUT	[3B8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BD, 0x0041 };
    uint32_t const ces[9] = { 0x3B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_136)
{
    // 169BD 0062;	
    // (𖦽) BAMUM LETTER PHASE-E PEUT	[3B8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BD, 0x0062 };
    uint32_t const ces[9] = { 0x3B8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_137)
{
    // 169BE 0021;	
    // (𖦾) BAMUM LETTER PHASE-E YEUM	[3B8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BE, 0x0021 };
    uint32_t const ces[9] = { 0x3B8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_138)
{
    // 169BE 003F;	
    // (𖦾) BAMUM LETTER PHASE-E YEUM	[3B8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BE, 0x003F };
    uint32_t const ces[9] = { 0x3B8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_139)
{
    // 169BE 0061;	
    // (𖦾) BAMUM LETTER PHASE-E YEUM	[3B8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BE, 0x0061 };
    uint32_t const ces[9] = { 0x3B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_140)
{
    // 169BE 0041;	
    // (𖦾) BAMUM LETTER PHASE-E YEUM	[3B8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BE, 0x0041 };
    uint32_t const ces[9] = { 0x3B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_141)
{
    // 169BE 0062;	
    // (𖦾) BAMUM LETTER PHASE-E YEUM	[3B8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BE, 0x0062 };
    uint32_t const ces[9] = { 0x3B8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_142)
{
    // 169BF 0021;	
    // (𖦿) BAMUM LETTER PHASE-E NGGEUAE	[3B8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BF, 0x0021 };
    uint32_t const ces[9] = { 0x3B8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_143)
{
    // 169BF 003F;	
    // (𖦿) BAMUM LETTER PHASE-E NGGEUAE	[3B8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BF, 0x003F };
    uint32_t const ces[9] = { 0x3B8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_144)
{
    // 169BF 0061;	
    // (𖦿) BAMUM LETTER PHASE-E NGGEUAE	[3B8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BF, 0x0061 };
    uint32_t const ces[9] = { 0x3B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_145)
{
    // 169BF 0041;	
    // (𖦿) BAMUM LETTER PHASE-E NGGEUAE	[3B8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169BF, 0x0041 };
    uint32_t const ces[9] = { 0x3B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_146)
{
    // 169BF 0062;	
    // (𖦿) BAMUM LETTER PHASE-E NGGEUAE	[3B8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169BF, 0x0062 };
    uint32_t const ces[9] = { 0x3B8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_147)
{
    // 169C0 0021;	
    // (𖧀) BAMUM LETTER PHASE-E NYI BETWEEN	[3B8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C0, 0x0021 };
    uint32_t const ces[9] = { 0x3B8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_148)
{
    // 169C0 003F;	
    // (𖧀) BAMUM LETTER PHASE-E NYI BETWEEN	[3B8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C0, 0x003F };
    uint32_t const ces[9] = { 0x3B8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_149)
{
    // 169C0 0061;	
    // (𖧀) BAMUM LETTER PHASE-E NYI BETWEEN	[3B8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C0, 0x0061 };
    uint32_t const ces[9] = { 0x3B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_150)
{
    // 169C0 0041;	
    // (𖧀) BAMUM LETTER PHASE-E NYI BETWEEN	[3B8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C0, 0x0041 };
    uint32_t const ces[9] = { 0x3B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_151)
{
    // 169C0 0062;	
    // (𖧀) BAMUM LETTER PHASE-E NYI BETWEEN	[3B8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C0, 0x0062 };
    uint32_t const ces[9] = { 0x3B8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_152)
{
    // 169C1 0021;	
    // (𖧁) BAMUM LETTER PHASE-E NZUQ	[3B8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C1, 0x0021 };
    uint32_t const ces[9] = { 0x3B8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_153)
{
    // 169C1 003F;	
    // (𖧁) BAMUM LETTER PHASE-E NZUQ	[3B8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C1, 0x003F };
    uint32_t const ces[9] = { 0x3B8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_154)
{
    // 169C1 0061;	
    // (𖧁) BAMUM LETTER PHASE-E NZUQ	[3B8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C1, 0x0061 };
    uint32_t const ces[9] = { 0x3B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_155)
{
    // 169C1 0041;	
    // (𖧁) BAMUM LETTER PHASE-E NZUQ	[3B8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C1, 0x0041 };
    uint32_t const ces[9] = { 0x3B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_156)
{
    // 169C1 0062;	
    // (𖧁) BAMUM LETTER PHASE-E NZUQ	[3B8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C1, 0x0062 };
    uint32_t const ces[9] = { 0x3B8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_157)
{
    // 169C2 0021;	
    // (𖧂) BAMUM LETTER PHASE-E POON	[3B90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C2, 0x0021 };
    uint32_t const ces[9] = { 0x3B90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_158)
{
    // 169C2 003F;	
    // (𖧂) BAMUM LETTER PHASE-E POON	[3B90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C2, 0x003F };
    uint32_t const ces[9] = { 0x3B90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_159)
{
    // 169C2 0061;	
    // (𖧂) BAMUM LETTER PHASE-E POON	[3B90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C2, 0x0061 };
    uint32_t const ces[9] = { 0x3B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_160)
{
    // 169C2 0041;	
    // (𖧂) BAMUM LETTER PHASE-E POON	[3B90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C2, 0x0041 };
    uint32_t const ces[9] = { 0x3B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_161)
{
    // 169C2 0062;	
    // (𖧂) BAMUM LETTER PHASE-E POON	[3B90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C2, 0x0062 };
    uint32_t const ces[9] = { 0x3B90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_162)
{
    // 169C3 0021;	
    // (𖧃) BAMUM LETTER PHASE-E MIEE	[3B91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C3, 0x0021 };
    uint32_t const ces[9] = { 0x3B91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_163)
{
    // 169C3 003F;	
    // (𖧃) BAMUM LETTER PHASE-E MIEE	[3B91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C3, 0x003F };
    uint32_t const ces[9] = { 0x3B91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_164)
{
    // 169C3 0061;	
    // (𖧃) BAMUM LETTER PHASE-E MIEE	[3B91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C3, 0x0061 };
    uint32_t const ces[9] = { 0x3B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_165)
{
    // 169C3 0041;	
    // (𖧃) BAMUM LETTER PHASE-E MIEE	[3B91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C3, 0x0041 };
    uint32_t const ces[9] = { 0x3B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_166)
{
    // 169C3 0062;	
    // (𖧃) BAMUM LETTER PHASE-E MIEE	[3B91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C3, 0x0062 };
    uint32_t const ces[9] = { 0x3B91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_167)
{
    // 169C4 0021;	
    // (𖧄) BAMUM LETTER PHASE-E FUET	[3B92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C4, 0x0021 };
    uint32_t const ces[9] = { 0x3B92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_168)
{
    // 169C4 003F;	
    // (𖧄) BAMUM LETTER PHASE-E FUET	[3B92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C4, 0x003F };
    uint32_t const ces[9] = { 0x3B92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_169)
{
    // 169C4 0061;	
    // (𖧄) BAMUM LETTER PHASE-E FUET	[3B92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C4, 0x0061 };
    uint32_t const ces[9] = { 0x3B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_170)
{
    // 169C4 0041;	
    // (𖧄) BAMUM LETTER PHASE-E FUET	[3B92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C4, 0x0041 };
    uint32_t const ces[9] = { 0x3B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_171)
{
    // 169C4 0062;	
    // (𖧄) BAMUM LETTER PHASE-E FUET	[3B92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C4, 0x0062 };
    uint32_t const ces[9] = { 0x3B92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_172)
{
    // 169C5 0021;	
    // (𖧅) BAMUM LETTER PHASE-E NAE	[3B93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C5, 0x0021 };
    uint32_t const ces[9] = { 0x3B93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_173)
{
    // 169C5 003F;	
    // (𖧅) BAMUM LETTER PHASE-E NAE	[3B93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C5, 0x003F };
    uint32_t const ces[9] = { 0x3B93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_174)
{
    // 169C5 0061;	
    // (𖧅) BAMUM LETTER PHASE-E NAE	[3B93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C5, 0x0061 };
    uint32_t const ces[9] = { 0x3B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_175)
{
    // 169C5 0041;	
    // (𖧅) BAMUM LETTER PHASE-E NAE	[3B93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C5, 0x0041 };
    uint32_t const ces[9] = { 0x3B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_176)
{
    // 169C5 0062;	
    // (𖧅) BAMUM LETTER PHASE-E NAE	[3B93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C5, 0x0062 };
    uint32_t const ces[9] = { 0x3B93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_177)
{
    // 169C6 0021;	
    // (𖧆) BAMUM LETTER PHASE-E MUAE	[3B94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C6, 0x0021 };
    uint32_t const ces[9] = { 0x3B94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_178)
{
    // 169C6 003F;	
    // (𖧆) BAMUM LETTER PHASE-E MUAE	[3B94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C6, 0x003F };
    uint32_t const ces[9] = { 0x3B94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_179)
{
    // 169C6 0061;	
    // (𖧆) BAMUM LETTER PHASE-E MUAE	[3B94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C6, 0x0061 };
    uint32_t const ces[9] = { 0x3B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_180)
{
    // 169C6 0041;	
    // (𖧆) BAMUM LETTER PHASE-E MUAE	[3B94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C6, 0x0041 };
    uint32_t const ces[9] = { 0x3B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_181)
{
    // 169C6 0062;	
    // (𖧆) BAMUM LETTER PHASE-E MUAE	[3B94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C6, 0x0062 };
    uint32_t const ces[9] = { 0x3B94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_182)
{
    // 169C7 0021;	
    // (𖧇) BAMUM LETTER PHASE-E GHEUAE	[3B95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C7, 0x0021 };
    uint32_t const ces[9] = { 0x3B95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_183)
{
    // 169C7 003F;	
    // (𖧇) BAMUM LETTER PHASE-E GHEUAE	[3B95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C7, 0x003F };
    uint32_t const ces[9] = { 0x3B95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_184)
{
    // 169C7 0061;	
    // (𖧇) BAMUM LETTER PHASE-E GHEUAE	[3B95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C7, 0x0061 };
    uint32_t const ces[9] = { 0x3B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_185)
{
    // 169C7 0041;	
    // (𖧇) BAMUM LETTER PHASE-E GHEUAE	[3B95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C7, 0x0041 };
    uint32_t const ces[9] = { 0x3B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_186)
{
    // 169C7 0062;	
    // (𖧇) BAMUM LETTER PHASE-E GHEUAE	[3B95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C7, 0x0062 };
    uint32_t const ces[9] = { 0x3B95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_187)
{
    // 169C8 0021;	
    // (𖧈) BAMUM LETTER PHASE-E FU I	[3B96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C8, 0x0021 };
    uint32_t const ces[9] = { 0x3B96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_188)
{
    // 169C8 003F;	
    // (𖧈) BAMUM LETTER PHASE-E FU I	[3B96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C8, 0x003F };
    uint32_t const ces[9] = { 0x3B96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_189)
{
    // 169C8 0061;	
    // (𖧈) BAMUM LETTER PHASE-E FU I	[3B96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C8, 0x0061 };
    uint32_t const ces[9] = { 0x3B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_190)
{
    // 169C8 0041;	
    // (𖧈) BAMUM LETTER PHASE-E FU I	[3B96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C8, 0x0041 };
    uint32_t const ces[9] = { 0x3B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_191)
{
    // 169C8 0062;	
    // (𖧈) BAMUM LETTER PHASE-E FU I	[3B96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C8, 0x0062 };
    uint32_t const ces[9] = { 0x3B96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_192)
{
    // 169C9 0021;	
    // (𖧉) BAMUM LETTER PHASE-E MVI	[3B97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C9, 0x0021 };
    uint32_t const ces[9] = { 0x3B97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_193)
{
    // 169C9 003F;	
    // (𖧉) BAMUM LETTER PHASE-E MVI	[3B97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C9, 0x003F };
    uint32_t const ces[9] = { 0x3B97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_194)
{
    // 169C9 0061;	
    // (𖧉) BAMUM LETTER PHASE-E MVI	[3B97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C9, 0x0061 };
    uint32_t const ces[9] = { 0x3B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_195)
{
    // 169C9 0041;	
    // (𖧉) BAMUM LETTER PHASE-E MVI	[3B97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C9, 0x0041 };
    uint32_t const ces[9] = { 0x3B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_196)
{
    // 169C9 0062;	
    // (𖧉) BAMUM LETTER PHASE-E MVI	[3B97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C9, 0x0062 };
    uint32_t const ces[9] = { 0x3B97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_197)
{
    // 169CA 0021;	
    // (𖧊) BAMUM LETTER PHASE-E PUAQ	[3B98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CA, 0x0021 };
    uint32_t const ces[9] = { 0x3B98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_198)
{
    // 169CA 003F;	
    // (𖧊) BAMUM LETTER PHASE-E PUAQ	[3B98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CA, 0x003F };
    uint32_t const ces[9] = { 0x3B98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_199)
{
    // 169CA 0061;	
    // (𖧊) BAMUM LETTER PHASE-E PUAQ	[3B98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CA, 0x0061 };
    uint32_t const ces[9] = { 0x3B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_200)
{
    // 169CA 0041;	
    // (𖧊) BAMUM LETTER PHASE-E PUAQ	[3B98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CA, 0x0041 };
    uint32_t const ces[9] = { 0x3B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_201)
{
    // 169CA 0062;	
    // (𖧊) BAMUM LETTER PHASE-E PUAQ	[3B98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CA, 0x0062 };
    uint32_t const ces[9] = { 0x3B98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_202)
{
    // 169CB 0021;	
    // (𖧋) BAMUM LETTER PHASE-E NGKUM	[3B99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CB, 0x0021 };
    uint32_t const ces[9] = { 0x3B99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_203)
{
    // 169CB 003F;	
    // (𖧋) BAMUM LETTER PHASE-E NGKUM	[3B99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CB, 0x003F };
    uint32_t const ces[9] = { 0x3B99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_204)
{
    // 169CB 0061;	
    // (𖧋) BAMUM LETTER PHASE-E NGKUM	[3B99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CB, 0x0061 };
    uint32_t const ces[9] = { 0x3B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_205)
{
    // 169CB 0041;	
    // (𖧋) BAMUM LETTER PHASE-E NGKUM	[3B99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CB, 0x0041 };
    uint32_t const ces[9] = { 0x3B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_206)
{
    // 169CB 0062;	
    // (𖧋) BAMUM LETTER PHASE-E NGKUM	[3B99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CB, 0x0062 };
    uint32_t const ces[9] = { 0x3B99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_207)
{
    // 169CC 0021;	
    // (𖧌) BAMUM LETTER PHASE-E KUT	[3B9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CC, 0x0021 };
    uint32_t const ces[9] = { 0x3B9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_208)
{
    // 169CC 003F;	
    // (𖧌) BAMUM LETTER PHASE-E KUT	[3B9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CC, 0x003F };
    uint32_t const ces[9] = { 0x3B9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_209)
{
    // 169CC 0061;	
    // (𖧌) BAMUM LETTER PHASE-E KUT	[3B9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CC, 0x0061 };
    uint32_t const ces[9] = { 0x3B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_210)
{
    // 169CC 0041;	
    // (𖧌) BAMUM LETTER PHASE-E KUT	[3B9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CC, 0x0041 };
    uint32_t const ces[9] = { 0x3B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_211)
{
    // 169CC 0062;	
    // (𖧌) BAMUM LETTER PHASE-E KUT	[3B9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CC, 0x0062 };
    uint32_t const ces[9] = { 0x3B9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_212)
{
    // 169CD 0021;	
    // (𖧍) BAMUM LETTER PHASE-E PIET	[3B9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CD, 0x0021 };
    uint32_t const ces[9] = { 0x3B9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_213)
{
    // 169CD 003F;	
    // (𖧍) BAMUM LETTER PHASE-E PIET	[3B9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CD, 0x003F };
    uint32_t const ces[9] = { 0x3B9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_214)
{
    // 169CD 0061;	
    // (𖧍) BAMUM LETTER PHASE-E PIET	[3B9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CD, 0x0061 };
    uint32_t const ces[9] = { 0x3B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_215)
{
    // 169CD 0041;	
    // (𖧍) BAMUM LETTER PHASE-E PIET	[3B9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CD, 0x0041 };
    uint32_t const ces[9] = { 0x3B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_216)
{
    // 169CD 0062;	
    // (𖧍) BAMUM LETTER PHASE-E PIET	[3B9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CD, 0x0062 };
    uint32_t const ces[9] = { 0x3B9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_217)
{
    // 169CE 0021;	
    // (𖧎) BAMUM LETTER PHASE-E NTAP	[3B9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CE, 0x0021 };
    uint32_t const ces[9] = { 0x3B9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_218)
{
    // 169CE 003F;	
    // (𖧎) BAMUM LETTER PHASE-E NTAP	[3B9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CE, 0x003F };
    uint32_t const ces[9] = { 0x3B9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_219)
{
    // 169CE 0061;	
    // (𖧎) BAMUM LETTER PHASE-E NTAP	[3B9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CE, 0x0061 };
    uint32_t const ces[9] = { 0x3B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_220)
{
    // 169CE 0041;	
    // (𖧎) BAMUM LETTER PHASE-E NTAP	[3B9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CE, 0x0041 };
    uint32_t const ces[9] = { 0x3B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_221)
{
    // 169CE 0062;	
    // (𖧎) BAMUM LETTER PHASE-E NTAP	[3B9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CE, 0x0062 };
    uint32_t const ces[9] = { 0x3B9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_222)
{
    // 169CF 0021;	
    // (𖧏) BAMUM LETTER PHASE-E YEUAET	[3B9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CF, 0x0021 };
    uint32_t const ces[9] = { 0x3B9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_223)
{
    // 169CF 003F;	
    // (𖧏) BAMUM LETTER PHASE-E YEUAET	[3B9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CF, 0x003F };
    uint32_t const ces[9] = { 0x3B9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_224)
{
    // 169CF 0061;	
    // (𖧏) BAMUM LETTER PHASE-E YEUAET	[3B9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CF, 0x0061 };
    uint32_t const ces[9] = { 0x3B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_225)
{
    // 169CF 0041;	
    // (𖧏) BAMUM LETTER PHASE-E YEUAET	[3B9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169CF, 0x0041 };
    uint32_t const ces[9] = { 0x3B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_226)
{
    // 169CF 0062;	
    // (𖧏) BAMUM LETTER PHASE-E YEUAET	[3B9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169CF, 0x0062 };
    uint32_t const ces[9] = { 0x3B9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_227)
{
    // 169D0 0021;	
    // (𖧐) BAMUM LETTER PHASE-E NGGUP	[3B9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D0, 0x0021 };
    uint32_t const ces[9] = { 0x3B9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_228)
{
    // 169D0 003F;	
    // (𖧐) BAMUM LETTER PHASE-E NGGUP	[3B9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D0, 0x003F };
    uint32_t const ces[9] = { 0x3B9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_229)
{
    // 169D0 0061;	
    // (𖧐) BAMUM LETTER PHASE-E NGGUP	[3B9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D0, 0x0061 };
    uint32_t const ces[9] = { 0x3B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_230)
{
    // 169D0 0041;	
    // (𖧐) BAMUM LETTER PHASE-E NGGUP	[3B9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D0, 0x0041 };
    uint32_t const ces[9] = { 0x3B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_231)
{
    // 169D0 0062;	
    // (𖧐) BAMUM LETTER PHASE-E NGGUP	[3B9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D0, 0x0062 };
    uint32_t const ces[9] = { 0x3B9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_232)
{
    // 169D1 0021;	
    // (𖧑) BAMUM LETTER PHASE-E PA PEOPLE	[3B9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D1, 0x0021 };
    uint32_t const ces[9] = { 0x3B9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_233)
{
    // 169D1 003F;	
    // (𖧑) BAMUM LETTER PHASE-E PA PEOPLE	[3B9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D1, 0x003F };
    uint32_t const ces[9] = { 0x3B9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_234)
{
    // 169D1 0061;	
    // (𖧑) BAMUM LETTER PHASE-E PA PEOPLE	[3B9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D1, 0x0061 };
    uint32_t const ces[9] = { 0x3B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_235)
{
    // 169D1 0041;	
    // (𖧑) BAMUM LETTER PHASE-E PA PEOPLE	[3B9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D1, 0x0041 };
    uint32_t const ces[9] = { 0x3B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_236)
{
    // 169D1 0062;	
    // (𖧑) BAMUM LETTER PHASE-E PA PEOPLE	[3B9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D1, 0x0062 };
    uint32_t const ces[9] = { 0x3B9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_237)
{
    // 169D2 0021;	
    // (𖧒) BAMUM LETTER PHASE-E FU CALL	[3BA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D2, 0x0021 };
    uint32_t const ces[9] = { 0x3BA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_238)
{
    // 169D2 003F;	
    // (𖧒) BAMUM LETTER PHASE-E FU CALL	[3BA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D2, 0x003F };
    uint32_t const ces[9] = { 0x3BA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_239)
{
    // 169D2 0061;	
    // (𖧒) BAMUM LETTER PHASE-E FU CALL	[3BA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D2, 0x0061 };
    uint32_t const ces[9] = { 0x3BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_240)
{
    // 169D2 0041;	
    // (𖧒) BAMUM LETTER PHASE-E FU CALL	[3BA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D2, 0x0041 };
    uint32_t const ces[9] = { 0x3BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_241)
{
    // 169D2 0062;	
    // (𖧒) BAMUM LETTER PHASE-E FU CALL	[3BA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D2, 0x0062 };
    uint32_t const ces[9] = { 0x3BA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_242)
{
    // 169D3 0021;	
    // (𖧓) BAMUM LETTER PHASE-E FOM	[3BA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D3, 0x0021 };
    uint32_t const ces[9] = { 0x3BA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_243)
{
    // 169D3 003F;	
    // (𖧓) BAMUM LETTER PHASE-E FOM	[3BA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D3, 0x003F };
    uint32_t const ces[9] = { 0x3BA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_244)
{
    // 169D3 0061;	
    // (𖧓) BAMUM LETTER PHASE-E FOM	[3BA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D3, 0x0061 };
    uint32_t const ces[9] = { 0x3BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_245)
{
    // 169D3 0041;	
    // (𖧓) BAMUM LETTER PHASE-E FOM	[3BA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D3, 0x0041 };
    uint32_t const ces[9] = { 0x3BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_246)
{
    // 169D3 0062;	
    // (𖧓) BAMUM LETTER PHASE-E FOM	[3BA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D3, 0x0062 };
    uint32_t const ces[9] = { 0x3BA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_247)
{
    // 169D4 0021;	
    // (𖧔) BAMUM LETTER PHASE-E NJEE	[3BA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D4, 0x0021 };
    uint32_t const ces[9] = { 0x3BA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_248)
{
    // 169D4 003F;	
    // (𖧔) BAMUM LETTER PHASE-E NJEE	[3BA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D4, 0x003F };
    uint32_t const ces[9] = { 0x3BA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_249)
{
    // 169D4 0061;	
    // (𖧔) BAMUM LETTER PHASE-E NJEE	[3BA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D4, 0x0061 };
    uint32_t const ces[9] = { 0x3BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_250)
{
    // 169D4 0041;	
    // (𖧔) BAMUM LETTER PHASE-E NJEE	[3BA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D4, 0x0041 };
    uint32_t const ces[9] = { 0x3BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_251)
{
    // 169D4 0062;	
    // (𖧔) BAMUM LETTER PHASE-E NJEE	[3BA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D4, 0x0062 };
    uint32_t const ces[9] = { 0x3BA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_252)
{
    // 169D5 0021;	
    // (𖧕) BAMUM LETTER PHASE-E A	[3BA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D5, 0x0021 };
    uint32_t const ces[9] = { 0x3BA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_253)
{
    // 169D5 003F;	
    // (𖧕) BAMUM LETTER PHASE-E A	[3BA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D5, 0x003F };
    uint32_t const ces[9] = { 0x3BA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_254)
{
    // 169D5 0061;	
    // (𖧕) BAMUM LETTER PHASE-E A	[3BA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D5, 0x0061 };
    uint32_t const ces[9] = { 0x3BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_255)
{
    // 169D5 0041;	
    // (𖧕) BAMUM LETTER PHASE-E A	[3BA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D5, 0x0041 };
    uint32_t const ces[9] = { 0x3BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_256)
{
    // 169D5 0062;	
    // (𖧕) BAMUM LETTER PHASE-E A	[3BA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D5, 0x0062 };
    uint32_t const ces[9] = { 0x3BA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_257)
{
    // 169D6 0021;	
    // (𖧖) BAMUM LETTER PHASE-E TOQ	[3BA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D6, 0x0021 };
    uint32_t const ces[9] = { 0x3BA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_258)
{
    // 169D6 003F;	
    // (𖧖) BAMUM LETTER PHASE-E TOQ	[3BA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D6, 0x003F };
    uint32_t const ces[9] = { 0x3BA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_259)
{
    // 169D6 0061;	
    // (𖧖) BAMUM LETTER PHASE-E TOQ	[3BA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D6, 0x0061 };
    uint32_t const ces[9] = { 0x3BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_260)
{
    // 169D6 0041;	
    // (𖧖) BAMUM LETTER PHASE-E TOQ	[3BA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D6, 0x0041 };
    uint32_t const ces[9] = { 0x3BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_261)
{
    // 169D6 0062;	
    // (𖧖) BAMUM LETTER PHASE-E TOQ	[3BA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D6, 0x0062 };
    uint32_t const ces[9] = { 0x3BA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_262)
{
    // 169D7 0021;	
    // (𖧗) BAMUM LETTER PHASE-E O	[3BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D7, 0x0021 };
    uint32_t const ces[9] = { 0x3BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_263)
{
    // 169D7 003F;	
    // (𖧗) BAMUM LETTER PHASE-E O	[3BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D7, 0x003F };
    uint32_t const ces[9] = { 0x3BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_264)
{
    // 169D7 0061;	
    // (𖧗) BAMUM LETTER PHASE-E O	[3BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D7, 0x0061 };
    uint32_t const ces[9] = { 0x3BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_265)
{
    // 169D7 0041;	
    // (𖧗) BAMUM LETTER PHASE-E O	[3BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D7, 0x0041 };
    uint32_t const ces[9] = { 0x3BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_266)
{
    // 169D7 0062;	
    // (𖧗) BAMUM LETTER PHASE-E O	[3BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D7, 0x0062 };
    uint32_t const ces[9] = { 0x3BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_267)
{
    // 169D8 0021;	
    // (𖧘) BAMUM LETTER PHASE-E I	[3BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D8, 0x0021 };
    uint32_t const ces[9] = { 0x3BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_268)
{
    // 169D8 003F;	
    // (𖧘) BAMUM LETTER PHASE-E I	[3BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D8, 0x003F };
    uint32_t const ces[9] = { 0x3BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_269)
{
    // 169D8 0061;	
    // (𖧘) BAMUM LETTER PHASE-E I	[3BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D8, 0x0061 };
    uint32_t const ces[9] = { 0x3BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_270)
{
    // 169D8 0041;	
    // (𖧘) BAMUM LETTER PHASE-E I	[3BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D8, 0x0041 };
    uint32_t const ces[9] = { 0x3BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_271)
{
    // 169D8 0062;	
    // (𖧘) BAMUM LETTER PHASE-E I	[3BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D8, 0x0062 };
    uint32_t const ces[9] = { 0x3BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_272)
{
    // 169D9 0021;	
    // (𖧙) BAMUM LETTER PHASE-E LAQ	[3BA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D9, 0x0021 };
    uint32_t const ces[9] = { 0x3BA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_273)
{
    // 169D9 003F;	
    // (𖧙) BAMUM LETTER PHASE-E LAQ	[3BA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D9, 0x003F };
    uint32_t const ces[9] = { 0x3BA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_274)
{
    // 169D9 0061;	
    // (𖧙) BAMUM LETTER PHASE-E LAQ	[3BA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D9, 0x0061 };
    uint32_t const ces[9] = { 0x3BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_275)
{
    // 169D9 0041;	
    // (𖧙) BAMUM LETTER PHASE-E LAQ	[3BA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169D9, 0x0041 };
    uint32_t const ces[9] = { 0x3BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_276)
{
    // 169D9 0062;	
    // (𖧙) BAMUM LETTER PHASE-E LAQ	[3BA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169D9, 0x0062 };
    uint32_t const ces[9] = { 0x3BA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_277)
{
    // 169DA 0021;	
    // (𖧚) BAMUM LETTER PHASE-E PA PLURAL	[3BA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DA, 0x0021 };
    uint32_t const ces[9] = { 0x3BA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_278)
{
    // 169DA 003F;	
    // (𖧚) BAMUM LETTER PHASE-E PA PLURAL	[3BA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DA, 0x003F };
    uint32_t const ces[9] = { 0x3BA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_279)
{
    // 169DA 0061;	
    // (𖧚) BAMUM LETTER PHASE-E PA PLURAL	[3BA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DA, 0x0061 };
    uint32_t const ces[9] = { 0x3BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_280)
{
    // 169DA 0041;	
    // (𖧚) BAMUM LETTER PHASE-E PA PLURAL	[3BA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DA, 0x0041 };
    uint32_t const ces[9] = { 0x3BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_281)
{
    // 169DA 0062;	
    // (𖧚) BAMUM LETTER PHASE-E PA PLURAL	[3BA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DA, 0x0062 };
    uint32_t const ces[9] = { 0x3BA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_282)
{
    // 169DB 0021;	
    // (𖧛) BAMUM LETTER PHASE-E TAA	[3BA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DB, 0x0021 };
    uint32_t const ces[9] = { 0x3BA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_283)
{
    // 169DB 003F;	
    // (𖧛) BAMUM LETTER PHASE-E TAA	[3BA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DB, 0x003F };
    uint32_t const ces[9] = { 0x3BA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_284)
{
    // 169DB 0061;	
    // (𖧛) BAMUM LETTER PHASE-E TAA	[3BA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DB, 0x0061 };
    uint32_t const ces[9] = { 0x3BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_285)
{
    // 169DB 0041;	
    // (𖧛) BAMUM LETTER PHASE-E TAA	[3BA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DB, 0x0041 };
    uint32_t const ces[9] = { 0x3BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_286)
{
    // 169DB 0062;	
    // (𖧛) BAMUM LETTER PHASE-E TAA	[3BA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DB, 0x0062 };
    uint32_t const ces[9] = { 0x3BA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_287)
{
    // 169DC 0021;	
    // (𖧜) BAMUM LETTER PHASE-E TAQ	[3BAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DC, 0x0021 };
    uint32_t const ces[9] = { 0x3BAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_288)
{
    // 169DC 003F;	
    // (𖧜) BAMUM LETTER PHASE-E TAQ	[3BAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DC, 0x003F };
    uint32_t const ces[9] = { 0x3BAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_289)
{
    // 169DC 0061;	
    // (𖧜) BAMUM LETTER PHASE-E TAQ	[3BAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DC, 0x0061 };
    uint32_t const ces[9] = { 0x3BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_290)
{
    // 169DC 0041;	
    // (𖧜) BAMUM LETTER PHASE-E TAQ	[3BAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DC, 0x0041 };
    uint32_t const ces[9] = { 0x3BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_291)
{
    // 169DC 0062;	
    // (𖧜) BAMUM LETTER PHASE-E TAQ	[3BAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DC, 0x0062 };
    uint32_t const ces[9] = { 0x3BAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_292)
{
    // 169DD 0021;	
    // (𖧝) BAMUM LETTER PHASE-E NDAA MY HOUSE	[3BAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DD, 0x0021 };
    uint32_t const ces[9] = { 0x3BAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_293)
{
    // 169DD 003F;	
    // (𖧝) BAMUM LETTER PHASE-E NDAA MY HOUSE	[3BAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DD, 0x003F };
    uint32_t const ces[9] = { 0x3BAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_294)
{
    // 169DD 0061;	
    // (𖧝) BAMUM LETTER PHASE-E NDAA MY HOUSE	[3BAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DD, 0x0061 };
    uint32_t const ces[9] = { 0x3BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_295)
{
    // 169DD 0041;	
    // (𖧝) BAMUM LETTER PHASE-E NDAA MY HOUSE	[3BAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DD, 0x0041 };
    uint32_t const ces[9] = { 0x3BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_296)
{
    // 169DD 0062;	
    // (𖧝) BAMUM LETTER PHASE-E NDAA MY HOUSE	[3BAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DD, 0x0062 };
    uint32_t const ces[9] = { 0x3BAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_297)
{
    // 169DE 0021;	
    // (𖧞) BAMUM LETTER PHASE-E SHIQ	[3BAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DE, 0x0021 };
    uint32_t const ces[9] = { 0x3BAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_298)
{
    // 169DE 003F;	
    // (𖧞) BAMUM LETTER PHASE-E SHIQ	[3BAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DE, 0x003F };
    uint32_t const ces[9] = { 0x3BAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_299)
{
    // 169DE 0061;	
    // (𖧞) BAMUM LETTER PHASE-E SHIQ	[3BAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DE, 0x0061 };
    uint32_t const ces[9] = { 0x3BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_300)
{
    // 169DE 0041;	
    // (𖧞) BAMUM LETTER PHASE-E SHIQ	[3BAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DE, 0x0041 };
    uint32_t const ces[9] = { 0x3BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_301)
{
    // 169DE 0062;	
    // (𖧞) BAMUM LETTER PHASE-E SHIQ	[3BAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DE, 0x0062 };
    uint32_t const ces[9] = { 0x3BAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_302)
{
    // 169DF 0021;	
    // (𖧟) BAMUM LETTER PHASE-E YEUX	[3BAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DF, 0x0021 };
    uint32_t const ces[9] = { 0x3BAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_303)
{
    // 169DF 003F;	
    // (𖧟) BAMUM LETTER PHASE-E YEUX	[3BAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DF, 0x003F };
    uint32_t const ces[9] = { 0x3BAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_304)
{
    // 169DF 0061;	
    // (𖧟) BAMUM LETTER PHASE-E YEUX	[3BAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DF, 0x0061 };
    uint32_t const ces[9] = { 0x3BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_305)
{
    // 169DF 0041;	
    // (𖧟) BAMUM LETTER PHASE-E YEUX	[3BAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169DF, 0x0041 };
    uint32_t const ces[9] = { 0x3BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_306)
{
    // 169DF 0062;	
    // (𖧟) BAMUM LETTER PHASE-E YEUX	[3BAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169DF, 0x0062 };
    uint32_t const ces[9] = { 0x3BAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_307)
{
    // 169E0 0021;	
    // (𖧠) BAMUM LETTER PHASE-E NGUAE	[3BAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E0, 0x0021 };
    uint32_t const ces[9] = { 0x3BAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_308)
{
    // 169E0 003F;	
    // (𖧠) BAMUM LETTER PHASE-E NGUAE	[3BAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E0, 0x003F };
    uint32_t const ces[9] = { 0x3BAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_309)
{
    // 169E0 0061;	
    // (𖧠) BAMUM LETTER PHASE-E NGUAE	[3BAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E0, 0x0061 };
    uint32_t const ces[9] = { 0x3BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_310)
{
    // 169E0 0041;	
    // (𖧠) BAMUM LETTER PHASE-E NGUAE	[3BAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E0, 0x0041 };
    uint32_t const ces[9] = { 0x3BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_311)
{
    // 169E0 0062;	
    // (𖧠) BAMUM LETTER PHASE-E NGUAE	[3BAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E0, 0x0062 };
    uint32_t const ces[9] = { 0x3BAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_312)
{
    // 169E1 0021;	
    // (𖧡) BAMUM LETTER PHASE-E YUAEN	[3BAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E1, 0x0021 };
    uint32_t const ces[9] = { 0x3BAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_313)
{
    // 169E1 003F;	
    // (𖧡) BAMUM LETTER PHASE-E YUAEN	[3BAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E1, 0x003F };
    uint32_t const ces[9] = { 0x3BAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_314)
{
    // 169E1 0061;	
    // (𖧡) BAMUM LETTER PHASE-E YUAEN	[3BAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E1, 0x0061 };
    uint32_t const ces[9] = { 0x3BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_315)
{
    // 169E1 0041;	
    // (𖧡) BAMUM LETTER PHASE-E YUAEN	[3BAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E1, 0x0041 };
    uint32_t const ces[9] = { 0x3BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_316)
{
    // 169E1 0062;	
    // (𖧡) BAMUM LETTER PHASE-E YUAEN	[3BAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E1, 0x0062 };
    uint32_t const ces[9] = { 0x3BAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_317)
{
    // 169E2 0021;	
    // (𖧢) BAMUM LETTER PHASE-E YOQ SWIMMING	[3BB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E2, 0x0021 };
    uint32_t const ces[9] = { 0x3BB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_318)
{
    // 169E2 003F;	
    // (𖧢) BAMUM LETTER PHASE-E YOQ SWIMMING	[3BB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E2, 0x003F };
    uint32_t const ces[9] = { 0x3BB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_319)
{
    // 169E2 0061;	
    // (𖧢) BAMUM LETTER PHASE-E YOQ SWIMMING	[3BB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E2, 0x0061 };
    uint32_t const ces[9] = { 0x3BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_320)
{
    // 169E2 0041;	
    // (𖧢) BAMUM LETTER PHASE-E YOQ SWIMMING	[3BB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E2, 0x0041 };
    uint32_t const ces[9] = { 0x3BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_321)
{
    // 169E2 0062;	
    // (𖧢) BAMUM LETTER PHASE-E YOQ SWIMMING	[3BB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E2, 0x0062 };
    uint32_t const ces[9] = { 0x3BB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_322)
{
    // 169E3 0021;	
    // (𖧣) BAMUM LETTER PHASE-E YOQ COVER	[3BB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E3, 0x0021 };
    uint32_t const ces[9] = { 0x3BB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_323)
{
    // 169E3 003F;	
    // (𖧣) BAMUM LETTER PHASE-E YOQ COVER	[3BB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E3, 0x003F };
    uint32_t const ces[9] = { 0x3BB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_324)
{
    // 169E3 0061;	
    // (𖧣) BAMUM LETTER PHASE-E YOQ COVER	[3BB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E3, 0x0061 };
    uint32_t const ces[9] = { 0x3BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_325)
{
    // 169E3 0041;	
    // (𖧣) BAMUM LETTER PHASE-E YOQ COVER	[3BB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E3, 0x0041 };
    uint32_t const ces[9] = { 0x3BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_326)
{
    // 169E3 0062;	
    // (𖧣) BAMUM LETTER PHASE-E YOQ COVER	[3BB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E3, 0x0062 };
    uint32_t const ces[9] = { 0x3BB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_327)
{
    // 169E4 0021;	
    // (𖧤) BAMUM LETTER PHASE-E YUQ	[3BB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E4, 0x0021 };
    uint32_t const ces[9] = { 0x3BB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_328)
{
    // 169E4 003F;	
    // (𖧤) BAMUM LETTER PHASE-E YUQ	[3BB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E4, 0x003F };
    uint32_t const ces[9] = { 0x3BB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_329)
{
    // 169E4 0061;	
    // (𖧤) BAMUM LETTER PHASE-E YUQ	[3BB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E4, 0x0061 };
    uint32_t const ces[9] = { 0x3BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_330)
{
    // 169E4 0041;	
    // (𖧤) BAMUM LETTER PHASE-E YUQ	[3BB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E4, 0x0041 };
    uint32_t const ces[9] = { 0x3BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_331)
{
    // 169E4 0062;	
    // (𖧤) BAMUM LETTER PHASE-E YUQ	[3BB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E4, 0x0062 };
    uint32_t const ces[9] = { 0x3BB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_332)
{
    // 169E5 0021;	
    // (𖧥) BAMUM LETTER PHASE-E YUN	[3BB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E5, 0x0021 };
    uint32_t const ces[9] = { 0x3BB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_333)
{
    // 169E5 003F;	
    // (𖧥) BAMUM LETTER PHASE-E YUN	[3BB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E5, 0x003F };
    uint32_t const ces[9] = { 0x3BB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_334)
{
    // 169E5 0061;	
    // (𖧥) BAMUM LETTER PHASE-E YUN	[3BB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E5, 0x0061 };
    uint32_t const ces[9] = { 0x3BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_335)
{
    // 169E5 0041;	
    // (𖧥) BAMUM LETTER PHASE-E YUN	[3BB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E5, 0x0041 };
    uint32_t const ces[9] = { 0x3BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_336)
{
    // 169E5 0062;	
    // (𖧥) BAMUM LETTER PHASE-E YUN	[3BB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E5, 0x0062 };
    uint32_t const ces[9] = { 0x3BB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_337)
{
    // 169E6 0021;	
    // (𖧦) BAMUM LETTER PHASE-E KEUX	[3BB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E6, 0x0021 };
    uint32_t const ces[9] = { 0x3BB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_338)
{
    // 169E6 003F;	
    // (𖧦) BAMUM LETTER PHASE-E KEUX	[3BB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E6, 0x003F };
    uint32_t const ces[9] = { 0x3BB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_339)
{
    // 169E6 0061;	
    // (𖧦) BAMUM LETTER PHASE-E KEUX	[3BB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E6, 0x0061 };
    uint32_t const ces[9] = { 0x3BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_340)
{
    // 169E6 0041;	
    // (𖧦) BAMUM LETTER PHASE-E KEUX	[3BB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E6, 0x0041 };
    uint32_t const ces[9] = { 0x3BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_341)
{
    // 169E6 0062;	
    // (𖧦) BAMUM LETTER PHASE-E KEUX	[3BB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E6, 0x0062 };
    uint32_t const ces[9] = { 0x3BB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_342)
{
    // 169E7 0021;	
    // (𖧧) BAMUM LETTER PHASE-E PEUX	[3BB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E7, 0x0021 };
    uint32_t const ces[9] = { 0x3BB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_343)
{
    // 169E7 003F;	
    // (𖧧) BAMUM LETTER PHASE-E PEUX	[3BB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E7, 0x003F };
    uint32_t const ces[9] = { 0x3BB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_344)
{
    // 169E7 0061;	
    // (𖧧) BAMUM LETTER PHASE-E PEUX	[3BB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E7, 0x0061 };
    uint32_t const ces[9] = { 0x3BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_345)
{
    // 169E7 0041;	
    // (𖧧) BAMUM LETTER PHASE-E PEUX	[3BB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E7, 0x0041 };
    uint32_t const ces[9] = { 0x3BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_346)
{
    // 169E7 0062;	
    // (𖧧) BAMUM LETTER PHASE-E PEUX	[3BB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E7, 0x0062 };
    uint32_t const ces[9] = { 0x3BB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_347)
{
    // 169E8 0021;	
    // (𖧨) BAMUM LETTER PHASE-E NJEE EPOCH	[3BB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E8, 0x0021 };
    uint32_t const ces[9] = { 0x3BB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_348)
{
    // 169E8 003F;	
    // (𖧨) BAMUM LETTER PHASE-E NJEE EPOCH	[3BB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E8, 0x003F };
    uint32_t const ces[9] = { 0x3BB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_349)
{
    // 169E8 0061;	
    // (𖧨) BAMUM LETTER PHASE-E NJEE EPOCH	[3BB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E8, 0x0061 };
    uint32_t const ces[9] = { 0x3BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_350)
{
    // 169E8 0041;	
    // (𖧨) BAMUM LETTER PHASE-E NJEE EPOCH	[3BB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E8, 0x0041 };
    uint32_t const ces[9] = { 0x3BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_351)
{
    // 169E8 0062;	
    // (𖧨) BAMUM LETTER PHASE-E NJEE EPOCH	[3BB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E8, 0x0062 };
    uint32_t const ces[9] = { 0x3BB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_352)
{
    // 169E9 0021;	
    // (𖧩) BAMUM LETTER PHASE-E PUE	[3BB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E9, 0x0021 };
    uint32_t const ces[9] = { 0x3BB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_353)
{
    // 169E9 003F;	
    // (𖧩) BAMUM LETTER PHASE-E PUE	[3BB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E9, 0x003F };
    uint32_t const ces[9] = { 0x3BB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_354)
{
    // 169E9 0061;	
    // (𖧩) BAMUM LETTER PHASE-E PUE	[3BB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E9, 0x0061 };
    uint32_t const ces[9] = { 0x3BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_355)
{
    // 169E9 0041;	
    // (𖧩) BAMUM LETTER PHASE-E PUE	[3BB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169E9, 0x0041 };
    uint32_t const ces[9] = { 0x3BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_356)
{
    // 169E9 0062;	
    // (𖧩) BAMUM LETTER PHASE-E PUE	[3BB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169E9, 0x0062 };
    uint32_t const ces[9] = { 0x3BB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_357)
{
    // 169EA 0021;	
    // (𖧪) BAMUM LETTER PHASE-E WUE	[3BB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EA, 0x0021 };
    uint32_t const ces[9] = { 0x3BB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_358)
{
    // 169EA 003F;	
    // (𖧪) BAMUM LETTER PHASE-E WUE	[3BB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EA, 0x003F };
    uint32_t const ces[9] = { 0x3BB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_359)
{
    // 169EA 0061;	
    // (𖧪) BAMUM LETTER PHASE-E WUE	[3BB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EA, 0x0061 };
    uint32_t const ces[9] = { 0x3BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_360)
{
    // 169EA 0041;	
    // (𖧪) BAMUM LETTER PHASE-E WUE	[3BB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169EA, 0x0041 };
    uint32_t const ces[9] = { 0x3BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_361)
{
    // 169EA 0062;	
    // (𖧪) BAMUM LETTER PHASE-E WUE	[3BB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EA, 0x0062 };
    uint32_t const ces[9] = { 0x3BB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_362)
{
    // 169EB 0021;	
    // (𖧫) BAMUM LETTER PHASE-E FEE	[3BB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EB, 0x0021 };
    uint32_t const ces[9] = { 0x3BB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_363)
{
    // 169EB 003F;	
    // (𖧫) BAMUM LETTER PHASE-E FEE	[3BB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EB, 0x003F };
    uint32_t const ces[9] = { 0x3BB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_364)
{
    // 169EB 0061;	
    // (𖧫) BAMUM LETTER PHASE-E FEE	[3BB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EB, 0x0061 };
    uint32_t const ces[9] = { 0x3BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_365)
{
    // 169EB 0041;	
    // (𖧫) BAMUM LETTER PHASE-E FEE	[3BB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169EB, 0x0041 };
    uint32_t const ces[9] = { 0x3BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_366)
{
    // 169EB 0062;	
    // (𖧫) BAMUM LETTER PHASE-E FEE	[3BB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EB, 0x0062 };
    uint32_t const ces[9] = { 0x3BB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_367)
{
    // 169EC 0021;	
    // (𖧬) BAMUM LETTER PHASE-E VEE	[3BBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EC, 0x0021 };
    uint32_t const ces[9] = { 0x3BBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_368)
{
    // 169EC 003F;	
    // (𖧬) BAMUM LETTER PHASE-E VEE	[3BBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EC, 0x003F };
    uint32_t const ces[9] = { 0x3BBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_369)
{
    // 169EC 0061;	
    // (𖧬) BAMUM LETTER PHASE-E VEE	[3BBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EC, 0x0061 };
    uint32_t const ces[9] = { 0x3BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_370)
{
    // 169EC 0041;	
    // (𖧬) BAMUM LETTER PHASE-E VEE	[3BBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169EC, 0x0041 };
    uint32_t const ces[9] = { 0x3BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_371)
{
    // 169EC 0062;	
    // (𖧬) BAMUM LETTER PHASE-E VEE	[3BBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EC, 0x0062 };
    uint32_t const ces[9] = { 0x3BBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_372)
{
    // 169ED 0021;	
    // (𖧭) BAMUM LETTER PHASE-E LU	[3BBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169ED, 0x0021 };
    uint32_t const ces[9] = { 0x3BBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_373)
{
    // 169ED 003F;	
    // (𖧭) BAMUM LETTER PHASE-E LU	[3BBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169ED, 0x003F };
    uint32_t const ces[9] = { 0x3BBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_374)
{
    // 169ED 0061;	
    // (𖧭) BAMUM LETTER PHASE-E LU	[3BBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169ED, 0x0061 };
    uint32_t const ces[9] = { 0x3BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_375)
{
    // 169ED 0041;	
    // (𖧭) BAMUM LETTER PHASE-E LU	[3BBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169ED, 0x0041 };
    uint32_t const ces[9] = { 0x3BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_376)
{
    // 169ED 0062;	
    // (𖧭) BAMUM LETTER PHASE-E LU	[3BBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169ED, 0x0062 };
    uint32_t const ces[9] = { 0x3BBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_377)
{
    // 169EE 0021;	
    // (𖧮) BAMUM LETTER PHASE-E MI	[3BBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EE, 0x0021 };
    uint32_t const ces[9] = { 0x3BBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_378)
{
    // 169EE 003F;	
    // (𖧮) BAMUM LETTER PHASE-E MI	[3BBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EE, 0x003F };
    uint32_t const ces[9] = { 0x3BBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_379)
{
    // 169EE 0061;	
    // (𖧮) BAMUM LETTER PHASE-E MI	[3BBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EE, 0x0061 };
    uint32_t const ces[9] = { 0x3BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_380)
{
    // 169EE 0041;	
    // (𖧮) BAMUM LETTER PHASE-E MI	[3BBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169EE, 0x0041 };
    uint32_t const ces[9] = { 0x3BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_381)
{
    // 169EE 0062;	
    // (𖧮) BAMUM LETTER PHASE-E MI	[3BBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EE, 0x0062 };
    uint32_t const ces[9] = { 0x3BBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_382)
{
    // 169EF 0021;	
    // (𖧯) BAMUM LETTER PHASE-E REUX	[3BBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EF, 0x0021 };
    uint32_t const ces[9] = { 0x3BBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_383)
{
    // 169EF 003F;	
    // (𖧯) BAMUM LETTER PHASE-E REUX	[3BBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EF, 0x003F };
    uint32_t const ces[9] = { 0x3BBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_384)
{
    // 169EF 0061;	
    // (𖧯) BAMUM LETTER PHASE-E REUX	[3BBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EF, 0x0061 };
    uint32_t const ces[9] = { 0x3BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_385)
{
    // 169EF 0041;	
    // (𖧯) BAMUM LETTER PHASE-E REUX	[3BBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169EF, 0x0041 };
    uint32_t const ces[9] = { 0x3BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_386)
{
    // 169EF 0062;	
    // (𖧯) BAMUM LETTER PHASE-E REUX	[3BBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169EF, 0x0062 };
    uint32_t const ces[9] = { 0x3BBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_387)
{
    // 169F0 0021;	
    // (𖧰) BAMUM LETTER PHASE-E RAE	[3BBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F0, 0x0021 };
    uint32_t const ces[9] = { 0x3BBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_388)
{
    // 169F0 003F;	
    // (𖧰) BAMUM LETTER PHASE-E RAE	[3BBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F0, 0x003F };
    uint32_t const ces[9] = { 0x3BBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_389)
{
    // 169F0 0061;	
    // (𖧰) BAMUM LETTER PHASE-E RAE	[3BBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F0, 0x0061 };
    uint32_t const ces[9] = { 0x3BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_390)
{
    // 169F0 0041;	
    // (𖧰) BAMUM LETTER PHASE-E RAE	[3BBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F0, 0x0041 };
    uint32_t const ces[9] = { 0x3BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_391)
{
    // 169F0 0062;	
    // (𖧰) BAMUM LETTER PHASE-E RAE	[3BBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F0, 0x0062 };
    uint32_t const ces[9] = { 0x3BBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_392)
{
    // 169F1 0021;	
    // (𖧱) BAMUM LETTER PHASE-E NGUAET	[3BBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F1, 0x0021 };
    uint32_t const ces[9] = { 0x3BBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_393)
{
    // 169F1 003F;	
    // (𖧱) BAMUM LETTER PHASE-E NGUAET	[3BBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F1, 0x003F };
    uint32_t const ces[9] = { 0x3BBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_394)
{
    // 169F1 0061;	
    // (𖧱) BAMUM LETTER PHASE-E NGUAET	[3BBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F1, 0x0061 };
    uint32_t const ces[9] = { 0x3BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_395)
{
    // 169F1 0041;	
    // (𖧱) BAMUM LETTER PHASE-E NGUAET	[3BBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F1, 0x0041 };
    uint32_t const ces[9] = { 0x3BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_396)
{
    // 169F1 0062;	
    // (𖧱) BAMUM LETTER PHASE-E NGUAET	[3BBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F1, 0x0062 };
    uint32_t const ces[9] = { 0x3BBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_397)
{
    // 169F2 0021;	
    // (𖧲) BAMUM LETTER PHASE-E NGA	[3BC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F2, 0x0021 };
    uint32_t const ces[9] = { 0x3BC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_398)
{
    // 169F2 003F;	
    // (𖧲) BAMUM LETTER PHASE-E NGA	[3BC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F2, 0x003F };
    uint32_t const ces[9] = { 0x3BC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_399)
{
    // 169F2 0061;	
    // (𖧲) BAMUM LETTER PHASE-E NGA	[3BC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F2, 0x0061 };
    uint32_t const ces[9] = { 0x3BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_400)
{
    // 169F2 0041;	
    // (𖧲) BAMUM LETTER PHASE-E NGA	[3BC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F2, 0x0041 };
    uint32_t const ces[9] = { 0x3BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_401)
{
    // 169F2 0062;	
    // (𖧲) BAMUM LETTER PHASE-E NGA	[3BC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F2, 0x0062 };
    uint32_t const ces[9] = { 0x3BC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_402)
{
    // 169F3 0021;	
    // (𖧳) BAMUM LETTER PHASE-E SHO	[3BC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F3, 0x0021 };
    uint32_t const ces[9] = { 0x3BC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_403)
{
    // 169F3 003F;	
    // (𖧳) BAMUM LETTER PHASE-E SHO	[3BC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F3, 0x003F };
    uint32_t const ces[9] = { 0x3BC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_404)
{
    // 169F3 0061;	
    // (𖧳) BAMUM LETTER PHASE-E SHO	[3BC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F3, 0x0061 };
    uint32_t const ces[9] = { 0x3BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_405)
{
    // 169F3 0041;	
    // (𖧳) BAMUM LETTER PHASE-E SHO	[3BC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F3, 0x0041 };
    uint32_t const ces[9] = { 0x3BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_406)
{
    // 169F3 0062;	
    // (𖧳) BAMUM LETTER PHASE-E SHO	[3BC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F3, 0x0062 };
    uint32_t const ces[9] = { 0x3BC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_407)
{
    // 169F4 0021;	
    // (𖧴) BAMUM LETTER PHASE-E SHOQ	[3BC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F4, 0x0021 };
    uint32_t const ces[9] = { 0x3BC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_408)
{
    // 169F4 003F;	
    // (𖧴) BAMUM LETTER PHASE-E SHOQ	[3BC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F4, 0x003F };
    uint32_t const ces[9] = { 0x3BC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_409)
{
    // 169F4 0061;	
    // (𖧴) BAMUM LETTER PHASE-E SHOQ	[3BC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F4, 0x0061 };
    uint32_t const ces[9] = { 0x3BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_410)
{
    // 169F4 0041;	
    // (𖧴) BAMUM LETTER PHASE-E SHOQ	[3BC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F4, 0x0041 };
    uint32_t const ces[9] = { 0x3BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_411)
{
    // 169F4 0062;	
    // (𖧴) BAMUM LETTER PHASE-E SHOQ	[3BC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F4, 0x0062 };
    uint32_t const ces[9] = { 0x3BC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_412)
{
    // 169F5 0021;	
    // (𖧵) BAMUM LETTER PHASE-E FU REMEDY	[3BC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F5, 0x0021 };
    uint32_t const ces[9] = { 0x3BC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_413)
{
    // 169F5 003F;	
    // (𖧵) BAMUM LETTER PHASE-E FU REMEDY	[3BC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F5, 0x003F };
    uint32_t const ces[9] = { 0x3BC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_414)
{
    // 169F5 0061;	
    // (𖧵) BAMUM LETTER PHASE-E FU REMEDY	[3BC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F5, 0x0061 };
    uint32_t const ces[9] = { 0x3BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_415)
{
    // 169F5 0041;	
    // (𖧵) BAMUM LETTER PHASE-E FU REMEDY	[3BC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F5, 0x0041 };
    uint32_t const ces[9] = { 0x3BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_416)
{
    // 169F5 0062;	
    // (𖧵) BAMUM LETTER PHASE-E FU REMEDY	[3BC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F5, 0x0062 };
    uint32_t const ces[9] = { 0x3BC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_417)
{
    // 169F6 0021;	
    // (𖧶) BAMUM LETTER PHASE-E NA	[3BC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F6, 0x0021 };
    uint32_t const ces[9] = { 0x3BC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_418)
{
    // 169F6 003F;	
    // (𖧶) BAMUM LETTER PHASE-E NA	[3BC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F6, 0x003F };
    uint32_t const ces[9] = { 0x3BC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_419)
{
    // 169F6 0061;	
    // (𖧶) BAMUM LETTER PHASE-E NA	[3BC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F6, 0x0061 };
    uint32_t const ces[9] = { 0x3BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_420)
{
    // 169F6 0041;	
    // (𖧶) BAMUM LETTER PHASE-E NA	[3BC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F6, 0x0041 };
    uint32_t const ces[9] = { 0x3BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_421)
{
    // 169F6 0062;	
    // (𖧶) BAMUM LETTER PHASE-E NA	[3BC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F6, 0x0062 };
    uint32_t const ces[9] = { 0x3BC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_422)
{
    // 169F7 0021;	
    // (𖧷) BAMUM LETTER PHASE-E PI	[3BC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F7, 0x0021 };
    uint32_t const ces[9] = { 0x3BC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_423)
{
    // 169F7 003F;	
    // (𖧷) BAMUM LETTER PHASE-E PI	[3BC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F7, 0x003F };
    uint32_t const ces[9] = { 0x3BC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_424)
{
    // 169F7 0061;	
    // (𖧷) BAMUM LETTER PHASE-E PI	[3BC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F7, 0x0061 };
    uint32_t const ces[9] = { 0x3BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_425)
{
    // 169F7 0041;	
    // (𖧷) BAMUM LETTER PHASE-E PI	[3BC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F7, 0x0041 };
    uint32_t const ces[9] = { 0x3BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_426)
{
    // 169F7 0062;	
    // (𖧷) BAMUM LETTER PHASE-E PI	[3BC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F7, 0x0062 };
    uint32_t const ces[9] = { 0x3BC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_427)
{
    // 169F8 0021;	
    // (𖧸) BAMUM LETTER PHASE-E LOQ	[3BC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F8, 0x0021 };
    uint32_t const ces[9] = { 0x3BC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_428)
{
    // 169F8 003F;	
    // (𖧸) BAMUM LETTER PHASE-E LOQ	[3BC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F8, 0x003F };
    uint32_t const ces[9] = { 0x3BC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_429)
{
    // 169F8 0061;	
    // (𖧸) BAMUM LETTER PHASE-E LOQ	[3BC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F8, 0x0061 };
    uint32_t const ces[9] = { 0x3BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_430)
{
    // 169F8 0041;	
    // (𖧸) BAMUM LETTER PHASE-E LOQ	[3BC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F8, 0x0041 };
    uint32_t const ces[9] = { 0x3BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_431)
{
    // 169F8 0062;	
    // (𖧸) BAMUM LETTER PHASE-E LOQ	[3BC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F8, 0x0062 };
    uint32_t const ces[9] = { 0x3BC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_432)
{
    // 169F9 0021;	
    // (𖧹) BAMUM LETTER PHASE-E KO	[3BC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F9, 0x0021 };
    uint32_t const ces[9] = { 0x3BC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_433)
{
    // 169F9 003F;	
    // (𖧹) BAMUM LETTER PHASE-E KO	[3BC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F9, 0x003F };
    uint32_t const ces[9] = { 0x3BC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_434)
{
    // 169F9 0061;	
    // (𖧹) BAMUM LETTER PHASE-E KO	[3BC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F9, 0x0061 };
    uint32_t const ces[9] = { 0x3BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_435)
{
    // 169F9 0041;	
    // (𖧹) BAMUM LETTER PHASE-E KO	[3BC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169F9, 0x0041 };
    uint32_t const ces[9] = { 0x3BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_436)
{
    // 169F9 0062;	
    // (𖧹) BAMUM LETTER PHASE-E KO	[3BC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169F9, 0x0062 };
    uint32_t const ces[9] = { 0x3BC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_437)
{
    // 169FA 0021;	
    // (𖧺) BAMUM LETTER PHASE-E MEN	[3BC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FA, 0x0021 };
    uint32_t const ces[9] = { 0x3BC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_438)
{
    // 169FA 003F;	
    // (𖧺) BAMUM LETTER PHASE-E MEN	[3BC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FA, 0x003F };
    uint32_t const ces[9] = { 0x3BC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_439)
{
    // 169FA 0061;	
    // (𖧺) BAMUM LETTER PHASE-E MEN	[3BC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FA, 0x0061 };
    uint32_t const ces[9] = { 0x3BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_440)
{
    // 169FA 0041;	
    // (𖧺) BAMUM LETTER PHASE-E MEN	[3BC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FA, 0x0041 };
    uint32_t const ces[9] = { 0x3BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_441)
{
    // 169FA 0062;	
    // (𖧺) BAMUM LETTER PHASE-E MEN	[3BC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FA, 0x0062 };
    uint32_t const ces[9] = { 0x3BC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_442)
{
    // 169FB 0021;	
    // (𖧻) BAMUM LETTER PHASE-E MA	[3BC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FB, 0x0021 };
    uint32_t const ces[9] = { 0x3BC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_443)
{
    // 169FB 003F;	
    // (𖧻) BAMUM LETTER PHASE-E MA	[3BC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FB, 0x003F };
    uint32_t const ces[9] = { 0x3BC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_444)
{
    // 169FB 0061;	
    // (𖧻) BAMUM LETTER PHASE-E MA	[3BC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FB, 0x0061 };
    uint32_t const ces[9] = { 0x3BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_445)
{
    // 169FB 0041;	
    // (𖧻) BAMUM LETTER PHASE-E MA	[3BC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FB, 0x0041 };
    uint32_t const ces[9] = { 0x3BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_446)
{
    // 169FB 0062;	
    // (𖧻) BAMUM LETTER PHASE-E MA	[3BC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FB, 0x0062 };
    uint32_t const ces[9] = { 0x3BC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_447)
{
    // 169FC 0021;	
    // (𖧼) BAMUM LETTER PHASE-E MAQ	[3BCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FC, 0x0021 };
    uint32_t const ces[9] = { 0x3BCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_448)
{
    // 169FC 003F;	
    // (𖧼) BAMUM LETTER PHASE-E MAQ	[3BCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FC, 0x003F };
    uint32_t const ces[9] = { 0x3BCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_449)
{
    // 169FC 0061;	
    // (𖧼) BAMUM LETTER PHASE-E MAQ	[3BCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FC, 0x0061 };
    uint32_t const ces[9] = { 0x3BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_450)
{
    // 169FC 0041;	
    // (𖧼) BAMUM LETTER PHASE-E MAQ	[3BCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FC, 0x0041 };
    uint32_t const ces[9] = { 0x3BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_451)
{
    // 169FC 0062;	
    // (𖧼) BAMUM LETTER PHASE-E MAQ	[3BCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FC, 0x0062 };
    uint32_t const ces[9] = { 0x3BCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_452)
{
    // 169FD 0021;	
    // (𖧽) BAMUM LETTER PHASE-E TEU	[3BCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FD, 0x0021 };
    uint32_t const ces[9] = { 0x3BCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_453)
{
    // 169FD 003F;	
    // (𖧽) BAMUM LETTER PHASE-E TEU	[3BCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FD, 0x003F };
    uint32_t const ces[9] = { 0x3BCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_454)
{
    // 169FD 0061;	
    // (𖧽) BAMUM LETTER PHASE-E TEU	[3BCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FD, 0x0061 };
    uint32_t const ces[9] = { 0x3BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_455)
{
    // 169FD 0041;	
    // (𖧽) BAMUM LETTER PHASE-E TEU	[3BCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FD, 0x0041 };
    uint32_t const ces[9] = { 0x3BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_456)
{
    // 169FD 0062;	
    // (𖧽) BAMUM LETTER PHASE-E TEU	[3BCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FD, 0x0062 };
    uint32_t const ces[9] = { 0x3BCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_457)
{
    // 169FE 0021;	
    // (𖧾) BAMUM LETTER PHASE-E KI	[3BCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FE, 0x0021 };
    uint32_t const ces[9] = { 0x3BCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_458)
{
    // 169FE 003F;	
    // (𖧾) BAMUM LETTER PHASE-E KI	[3BCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FE, 0x003F };
    uint32_t const ces[9] = { 0x3BCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_459)
{
    // 169FE 0061;	
    // (𖧾) BAMUM LETTER PHASE-E KI	[3BCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FE, 0x0061 };
    uint32_t const ces[9] = { 0x3BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_460)
{
    // 169FE 0041;	
    // (𖧾) BAMUM LETTER PHASE-E KI	[3BCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FE, 0x0041 };
    uint32_t const ces[9] = { 0x3BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_461)
{
    // 169FE 0062;	
    // (𖧾) BAMUM LETTER PHASE-E KI	[3BCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FE, 0x0062 };
    uint32_t const ces[9] = { 0x3BCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_462)
{
    // 169FF 0021;	
    // (𖧿) BAMUM LETTER PHASE-E MON	[3BCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FF, 0x0021 };
    uint32_t const ces[9] = { 0x3BCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_463)
{
    // 169FF 003F;	
    // (𖧿) BAMUM LETTER PHASE-E MON	[3BCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FF, 0x003F };
    uint32_t const ces[9] = { 0x3BCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_464)
{
    // 169FF 0061;	
    // (𖧿) BAMUM LETTER PHASE-E MON	[3BCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FF, 0x0061 };
    uint32_t const ces[9] = { 0x3BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_465)
{
    // 169FF 0041;	
    // (𖧿) BAMUM LETTER PHASE-E MON	[3BCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169FF, 0x0041 };
    uint32_t const ces[9] = { 0x3BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_466)
{
    // 169FF 0062;	
    // (𖧿) BAMUM LETTER PHASE-E MON	[3BCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169FF, 0x0062 };
    uint32_t const ces[9] = { 0x3BCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_467)
{
    // 16A00 0021;	
    // (𖨀) BAMUM LETTER PHASE-E TEN	[3BCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A00, 0x0021 };
    uint32_t const ces[9] = { 0x3BCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_468)
{
    // 16A00 003F;	
    // (𖨀) BAMUM LETTER PHASE-E TEN	[3BCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A00, 0x003F };
    uint32_t const ces[9] = { 0x3BCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_469)
{
    // 16A00 0061;	
    // (𖨀) BAMUM LETTER PHASE-E TEN	[3BCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A00, 0x0061 };
    uint32_t const ces[9] = { 0x3BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_470)
{
    // 16A00 0041;	
    // (𖨀) BAMUM LETTER PHASE-E TEN	[3BCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A00, 0x0041 };
    uint32_t const ces[9] = { 0x3BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_471)
{
    // 16A00 0062;	
    // (𖨀) BAMUM LETTER PHASE-E TEN	[3BCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A00, 0x0062 };
    uint32_t const ces[9] = { 0x3BCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_472)
{
    // 16A01 0021;	
    // (𖨁) BAMUM LETTER PHASE-E FAQ	[3BCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A01, 0x0021 };
    uint32_t const ces[9] = { 0x3BCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_473)
{
    // 16A01 003F;	
    // (𖨁) BAMUM LETTER PHASE-E FAQ	[3BCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A01, 0x003F };
    uint32_t const ces[9] = { 0x3BCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_474)
{
    // 16A01 0061;	
    // (𖨁) BAMUM LETTER PHASE-E FAQ	[3BCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A01, 0x0061 };
    uint32_t const ces[9] = { 0x3BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_475)
{
    // 16A01 0041;	
    // (𖨁) BAMUM LETTER PHASE-E FAQ	[3BCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A01, 0x0041 };
    uint32_t const ces[9] = { 0x3BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_476)
{
    // 16A01 0062;	
    // (𖨁) BAMUM LETTER PHASE-E FAQ	[3BCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A01, 0x0062 };
    uint32_t const ces[9] = { 0x3BCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_477)
{
    // 16A02 0021;	
    // (𖨂) BAMUM LETTER PHASE-E GHOM	[3BD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A02, 0x0021 };
    uint32_t const ces[9] = { 0x3BD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_478)
{
    // 16A02 003F;	
    // (𖨂) BAMUM LETTER PHASE-E GHOM	[3BD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A02, 0x003F };
    uint32_t const ces[9] = { 0x3BD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_479)
{
    // 16A02 0061;	
    // (𖨂) BAMUM LETTER PHASE-E GHOM	[3BD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A02, 0x0061 };
    uint32_t const ces[9] = { 0x3BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_480)
{
    // 16A02 0041;	
    // (𖨂) BAMUM LETTER PHASE-E GHOM	[3BD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A02, 0x0041 };
    uint32_t const ces[9] = { 0x3BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_481)
{
    // 16A02 0062;	
    // (𖨂) BAMUM LETTER PHASE-E GHOM	[3BD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A02, 0x0062 };
    uint32_t const ces[9] = { 0x3BD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_482)
{
    // 16A03 0021;	
    // (𖨃) BAMUM LETTER PHASE-F KA	[3BD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A03, 0x0021 };
    uint32_t const ces[9] = { 0x3BD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_483)
{
    // 16A03 003F;	
    // (𖨃) BAMUM LETTER PHASE-F KA	[3BD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A03, 0x003F };
    uint32_t const ces[9] = { 0x3BD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_484)
{
    // 16A03 0061;	
    // (𖨃) BAMUM LETTER PHASE-F KA	[3BD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A03, 0x0061 };
    uint32_t const ces[9] = { 0x3BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_485)
{
    // 16A03 0041;	
    // (𖨃) BAMUM LETTER PHASE-F KA	[3BD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A03, 0x0041 };
    uint32_t const ces[9] = { 0x3BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_486)
{
    // 16A03 0062;	
    // (𖨃) BAMUM LETTER PHASE-F KA	[3BD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A03, 0x0062 };
    uint32_t const ces[9] = { 0x3BD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_487)
{
    // 16A04 0021;	
    // (𖨄) BAMUM LETTER PHASE-F U	[3BD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A04, 0x0021 };
    uint32_t const ces[9] = { 0x3BD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_488)
{
    // 16A04 003F;	
    // (𖨄) BAMUM LETTER PHASE-F U	[3BD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A04, 0x003F };
    uint32_t const ces[9] = { 0x3BD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_489)
{
    // 16A04 0061;	
    // (𖨄) BAMUM LETTER PHASE-F U	[3BD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A04, 0x0061 };
    uint32_t const ces[9] = { 0x3BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_490)
{
    // 16A04 0041;	
    // (𖨄) BAMUM LETTER PHASE-F U	[3BD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A04, 0x0041 };
    uint32_t const ces[9] = { 0x3BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_491)
{
    // 16A04 0062;	
    // (𖨄) BAMUM LETTER PHASE-F U	[3BD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A04, 0x0062 };
    uint32_t const ces[9] = { 0x3BD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_492)
{
    // 16A05 0021;	
    // (𖨅) BAMUM LETTER PHASE-F KU	[3BD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A05, 0x0021 };
    uint32_t const ces[9] = { 0x3BD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_493)
{
    // 16A05 003F;	
    // (𖨅) BAMUM LETTER PHASE-F KU	[3BD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A05, 0x003F };
    uint32_t const ces[9] = { 0x3BD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_494)
{
    // 16A05 0061;	
    // (𖨅) BAMUM LETTER PHASE-F KU	[3BD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A05, 0x0061 };
    uint32_t const ces[9] = { 0x3BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_495)
{
    // 16A05 0041;	
    // (𖨅) BAMUM LETTER PHASE-F KU	[3BD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A05, 0x0041 };
    uint32_t const ces[9] = { 0x3BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_496)
{
    // 16A05 0062;	
    // (𖨅) BAMUM LETTER PHASE-F KU	[3BD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A05, 0x0062 };
    uint32_t const ces[9] = { 0x3BD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_497)
{
    // 16A06 0021;	
    // (𖨆) BAMUM LETTER PHASE-F EE	[3BD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A06, 0x0021 };
    uint32_t const ces[9] = { 0x3BD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_498)
{
    // 16A06 003F;	
    // (𖨆) BAMUM LETTER PHASE-F EE	[3BD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A06, 0x003F };
    uint32_t const ces[9] = { 0x3BD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_236_499)
{
    // 16A06 0061;	
    // (𖨆) BAMUM LETTER PHASE-F EE	[3BD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A06, 0x0061 };
    uint32_t const ces[9] = { 0x3BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

