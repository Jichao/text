// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_358_000)
{
    // 4016 003F;	
    // (䀖) CJK UNIFIED IDEOGRAPH-4016	[FB80 C016 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4016, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC016, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_001)
{
    // 4016 0061;	
    // (䀖) CJK UNIFIED IDEOGRAPH-4016	[FB80 C016 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4016, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_002)
{
    // 4016 0041;	
    // (䀖) CJK UNIFIED IDEOGRAPH-4016	[FB80 C016 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4016, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_003)
{
    // 4016 0062;	
    // (䀖) CJK UNIFIED IDEOGRAPH-4016	[FB80 C016 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4016, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC016, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_004)
{
    // 4017 0021;	
    // (䀗) CJK UNIFIED IDEOGRAPH-4017	[FB80 C017 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4017, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC017, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_005)
{
    // 4017 003F;	
    // (䀗) CJK UNIFIED IDEOGRAPH-4017	[FB80 C017 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4017, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC017, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_006)
{
    // 4017 0061;	
    // (䀗) CJK UNIFIED IDEOGRAPH-4017	[FB80 C017 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4017, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_007)
{
    // 4017 0041;	
    // (䀗) CJK UNIFIED IDEOGRAPH-4017	[FB80 C017 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4017, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_008)
{
    // 4017 0062;	
    // (䀗) CJK UNIFIED IDEOGRAPH-4017	[FB80 C017 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4017, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC017, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_009)
{
    // 4018 0021;	
    // (䀘) CJK UNIFIED IDEOGRAPH-4018	[FB80 C018 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4018, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_010)
{
    // FAD3 0021;	
    // (䀘) CJK COMPATIBILITY IDEOGRAPH-FAD3	[FB80 C018 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_011)
{
    // 4018 003F;	
    // (䀘) CJK UNIFIED IDEOGRAPH-4018	[FB80 C018 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4018, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_012)
{
    // FAD3 003F;	
    // (䀘) CJK COMPATIBILITY IDEOGRAPH-FAD3	[FB80 C018 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_013)
{
    // 4018 0061;	
    // (䀘) CJK UNIFIED IDEOGRAPH-4018	[FB80 C018 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4018, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_014)
{
    // FAD3 0061;	
    // (䀘) CJK COMPATIBILITY IDEOGRAPH-FAD3	[FB80 C018 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_015)
{
    // 4018 0041;	
    // (䀘) CJK UNIFIED IDEOGRAPH-4018	[FB80 C018 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4018, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_016)
{
    // FAD3 0041;	
    // (䀘) CJK COMPATIBILITY IDEOGRAPH-FAD3	[FB80 C018 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_017)
{
    // 4018 0062;	
    // (䀘) CJK UNIFIED IDEOGRAPH-4018	[FB80 C018 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4018, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_018)
{
    // FAD3 0062;	
    // (䀘) CJK COMPATIBILITY IDEOGRAPH-FAD3	[FB80 C018 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC018, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_019)
{
    // 4019 0021;	
    // (䀙) CJK UNIFIED IDEOGRAPH-4019	[FB80 C019 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4019, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC019, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_020)
{
    // 4019 003F;	
    // (䀙) CJK UNIFIED IDEOGRAPH-4019	[FB80 C019 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4019, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC019, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_021)
{
    // 4019 0061;	
    // (䀙) CJK UNIFIED IDEOGRAPH-4019	[FB80 C019 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4019, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_022)
{
    // 4019 0041;	
    // (䀙) CJK UNIFIED IDEOGRAPH-4019	[FB80 C019 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4019, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_023)
{
    // 4019 0062;	
    // (䀙) CJK UNIFIED IDEOGRAPH-4019	[FB80 C019 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4019, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC019, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_024)
{
    // 401A 0021;	
    // (䀚) CJK UNIFIED IDEOGRAPH-401A	[FB80 C01A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_025)
{
    // 401A 003F;	
    // (䀚) CJK UNIFIED IDEOGRAPH-401A	[FB80 C01A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_026)
{
    // 401A 0061;	
    // (䀚) CJK UNIFIED IDEOGRAPH-401A	[FB80 C01A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_027)
{
    // 401A 0041;	
    // (䀚) CJK UNIFIED IDEOGRAPH-401A	[FB80 C01A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_028)
{
    // 401A 0062;	
    // (䀚) CJK UNIFIED IDEOGRAPH-401A	[FB80 C01A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_029)
{
    // 401B 0021;	
    // (䀛) CJK UNIFIED IDEOGRAPH-401B	[FB80 C01B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_030)
{
    // 401B 003F;	
    // (䀛) CJK UNIFIED IDEOGRAPH-401B	[FB80 C01B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_031)
{
    // 401B 0061;	
    // (䀛) CJK UNIFIED IDEOGRAPH-401B	[FB80 C01B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_032)
{
    // 401B 0041;	
    // (䀛) CJK UNIFIED IDEOGRAPH-401B	[FB80 C01B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_033)
{
    // 401B 0062;	
    // (䀛) CJK UNIFIED IDEOGRAPH-401B	[FB80 C01B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_034)
{
    // 401C 0021;	
    // (䀜) CJK UNIFIED IDEOGRAPH-401C	[FB80 C01C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_035)
{
    // 401C 003F;	
    // (䀜) CJK UNIFIED IDEOGRAPH-401C	[FB80 C01C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_036)
{
    // 401C 0061;	
    // (䀜) CJK UNIFIED IDEOGRAPH-401C	[FB80 C01C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_037)
{
    // 401C 0041;	
    // (䀜) CJK UNIFIED IDEOGRAPH-401C	[FB80 C01C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_038)
{
    // 401C 0062;	
    // (䀜) CJK UNIFIED IDEOGRAPH-401C	[FB80 C01C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_039)
{
    // 401D 0021;	
    // (䀝) CJK UNIFIED IDEOGRAPH-401D	[FB80 C01D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_040)
{
    // 401D 003F;	
    // (䀝) CJK UNIFIED IDEOGRAPH-401D	[FB80 C01D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_041)
{
    // 401D 0061;	
    // (䀝) CJK UNIFIED IDEOGRAPH-401D	[FB80 C01D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_042)
{
    // 401D 0041;	
    // (䀝) CJK UNIFIED IDEOGRAPH-401D	[FB80 C01D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_043)
{
    // 401D 0062;	
    // (䀝) CJK UNIFIED IDEOGRAPH-401D	[FB80 C01D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_044)
{
    // 401E 0021;	
    // (䀞) CJK UNIFIED IDEOGRAPH-401E	[FB80 C01E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_045)
{
    // 401E 003F;	
    // (䀞) CJK UNIFIED IDEOGRAPH-401E	[FB80 C01E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_046)
{
    // 401E 0061;	
    // (䀞) CJK UNIFIED IDEOGRAPH-401E	[FB80 C01E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_047)
{
    // 401E 0041;	
    // (䀞) CJK UNIFIED IDEOGRAPH-401E	[FB80 C01E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_048)
{
    // 401E 0062;	
    // (䀞) CJK UNIFIED IDEOGRAPH-401E	[FB80 C01E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_049)
{
    // 401F 0021;	
    // (䀟) CJK UNIFIED IDEOGRAPH-401F	[FB80 C01F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC01F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_050)
{
    // 401F 003F;	
    // (䀟) CJK UNIFIED IDEOGRAPH-401F	[FB80 C01F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC01F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_051)
{
    // 401F 0061;	
    // (䀟) CJK UNIFIED IDEOGRAPH-401F	[FB80 C01F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC01F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_052)
{
    // 401F 0041;	
    // (䀟) CJK UNIFIED IDEOGRAPH-401F	[FB80 C01F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x401F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC01F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_053)
{
    // 401F 0062;	
    // (䀟) CJK UNIFIED IDEOGRAPH-401F	[FB80 C01F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x401F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC01F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_054)
{
    // 4020 0021;	
    // (䀠) CJK UNIFIED IDEOGRAPH-4020	[FB80 C020 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4020, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC020, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_055)
{
    // 4020 003F;	
    // (䀠) CJK UNIFIED IDEOGRAPH-4020	[FB80 C020 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4020, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC020, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_056)
{
    // 4020 0061;	
    // (䀠) CJK UNIFIED IDEOGRAPH-4020	[FB80 C020 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4020, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_057)
{
    // 4020 0041;	
    // (䀠) CJK UNIFIED IDEOGRAPH-4020	[FB80 C020 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4020, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_058)
{
    // 4020 0062;	
    // (䀠) CJK UNIFIED IDEOGRAPH-4020	[FB80 C020 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4020, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC020, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_059)
{
    // 4021 0021;	
    // (䀡) CJK UNIFIED IDEOGRAPH-4021	[FB80 C021 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4021, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC021, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_060)
{
    // 4021 003F;	
    // (䀡) CJK UNIFIED IDEOGRAPH-4021	[FB80 C021 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4021, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC021, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_061)
{
    // 4021 0061;	
    // (䀡) CJK UNIFIED IDEOGRAPH-4021	[FB80 C021 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4021, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_062)
{
    // 4021 0041;	
    // (䀡) CJK UNIFIED IDEOGRAPH-4021	[FB80 C021 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4021, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_063)
{
    // 4021 0062;	
    // (䀡) CJK UNIFIED IDEOGRAPH-4021	[FB80 C021 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4021, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC021, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_064)
{
    // 4022 0021;	
    // (䀢) CJK UNIFIED IDEOGRAPH-4022	[FB80 C022 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4022, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC022, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_065)
{
    // 4022 003F;	
    // (䀢) CJK UNIFIED IDEOGRAPH-4022	[FB80 C022 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4022, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC022, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_066)
{
    // 4022 0061;	
    // (䀢) CJK UNIFIED IDEOGRAPH-4022	[FB80 C022 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4022, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_067)
{
    // 4022 0041;	
    // (䀢) CJK UNIFIED IDEOGRAPH-4022	[FB80 C022 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4022, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_068)
{
    // 4022 0062;	
    // (䀢) CJK UNIFIED IDEOGRAPH-4022	[FB80 C022 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4022, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC022, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_069)
{
    // 4023 0021;	
    // (䀣) CJK UNIFIED IDEOGRAPH-4023	[FB80 C023 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4023, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC023, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_070)
{
    // 4023 003F;	
    // (䀣) CJK UNIFIED IDEOGRAPH-4023	[FB80 C023 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4023, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC023, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_071)
{
    // 4023 0061;	
    // (䀣) CJK UNIFIED IDEOGRAPH-4023	[FB80 C023 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4023, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_072)
{
    // 4023 0041;	
    // (䀣) CJK UNIFIED IDEOGRAPH-4023	[FB80 C023 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4023, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_073)
{
    // 4023 0062;	
    // (䀣) CJK UNIFIED IDEOGRAPH-4023	[FB80 C023 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4023, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC023, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_074)
{
    // 4024 0021;	
    // (䀤) CJK UNIFIED IDEOGRAPH-4024	[FB80 C024 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4024, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC024, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_075)
{
    // 4024 003F;	
    // (䀤) CJK UNIFIED IDEOGRAPH-4024	[FB80 C024 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4024, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC024, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_076)
{
    // 4024 0061;	
    // (䀤) CJK UNIFIED IDEOGRAPH-4024	[FB80 C024 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4024, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_077)
{
    // 4024 0041;	
    // (䀤) CJK UNIFIED IDEOGRAPH-4024	[FB80 C024 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4024, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_078)
{
    // 4024 0062;	
    // (䀤) CJK UNIFIED IDEOGRAPH-4024	[FB80 C024 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4024, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC024, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_079)
{
    // 4025 0021;	
    // (䀥) CJK UNIFIED IDEOGRAPH-4025	[FB80 C025 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4025, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC025, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_080)
{
    // 4025 003F;	
    // (䀥) CJK UNIFIED IDEOGRAPH-4025	[FB80 C025 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4025, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC025, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_081)
{
    // 4025 0061;	
    // (䀥) CJK UNIFIED IDEOGRAPH-4025	[FB80 C025 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4025, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_082)
{
    // 4025 0041;	
    // (䀥) CJK UNIFIED IDEOGRAPH-4025	[FB80 C025 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4025, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_083)
{
    // 4025 0062;	
    // (䀥) CJK UNIFIED IDEOGRAPH-4025	[FB80 C025 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4025, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC025, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_084)
{
    // 4026 0021;	
    // (䀦) CJK UNIFIED IDEOGRAPH-4026	[FB80 C026 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4026, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC026, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_085)
{
    // 4026 003F;	
    // (䀦) CJK UNIFIED IDEOGRAPH-4026	[FB80 C026 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4026, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC026, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_086)
{
    // 4026 0061;	
    // (䀦) CJK UNIFIED IDEOGRAPH-4026	[FB80 C026 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4026, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_087)
{
    // 4026 0041;	
    // (䀦) CJK UNIFIED IDEOGRAPH-4026	[FB80 C026 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4026, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_088)
{
    // 4026 0062;	
    // (䀦) CJK UNIFIED IDEOGRAPH-4026	[FB80 C026 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4026, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC026, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_089)
{
    // 4027 0021;	
    // (䀧) CJK UNIFIED IDEOGRAPH-4027	[FB80 C027 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4027, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC027, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_090)
{
    // 4027 003F;	
    // (䀧) CJK UNIFIED IDEOGRAPH-4027	[FB80 C027 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4027, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC027, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_091)
{
    // 4027 0061;	
    // (䀧) CJK UNIFIED IDEOGRAPH-4027	[FB80 C027 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4027, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_092)
{
    // 4027 0041;	
    // (䀧) CJK UNIFIED IDEOGRAPH-4027	[FB80 C027 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4027, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_093)
{
    // 4027 0062;	
    // (䀧) CJK UNIFIED IDEOGRAPH-4027	[FB80 C027 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4027, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC027, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_094)
{
    // 4028 0021;	
    // (䀨) CJK UNIFIED IDEOGRAPH-4028	[FB80 C028 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4028, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC028, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_095)
{
    // 4028 003F;	
    // (䀨) CJK UNIFIED IDEOGRAPH-4028	[FB80 C028 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4028, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC028, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_096)
{
    // 4028 0061;	
    // (䀨) CJK UNIFIED IDEOGRAPH-4028	[FB80 C028 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4028, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_097)
{
    // 4028 0041;	
    // (䀨) CJK UNIFIED IDEOGRAPH-4028	[FB80 C028 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4028, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_098)
{
    // 4028 0062;	
    // (䀨) CJK UNIFIED IDEOGRAPH-4028	[FB80 C028 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4028, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC028, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_099)
{
    // 4029 0021;	
    // (䀩) CJK UNIFIED IDEOGRAPH-4029	[FB80 C029 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4029, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC029, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_100)
{
    // 4029 003F;	
    // (䀩) CJK UNIFIED IDEOGRAPH-4029	[FB80 C029 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4029, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC029, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_101)
{
    // 4029 0061;	
    // (䀩) CJK UNIFIED IDEOGRAPH-4029	[FB80 C029 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4029, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_102)
{
    // 4029 0041;	
    // (䀩) CJK UNIFIED IDEOGRAPH-4029	[FB80 C029 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4029, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_103)
{
    // 4029 0062;	
    // (䀩) CJK UNIFIED IDEOGRAPH-4029	[FB80 C029 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4029, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC029, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_104)
{
    // 402A 0021;	
    // (䀪) CJK UNIFIED IDEOGRAPH-402A	[FB80 C02A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_105)
{
    // 402A 003F;	
    // (䀪) CJK UNIFIED IDEOGRAPH-402A	[FB80 C02A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_106)
{
    // 402A 0061;	
    // (䀪) CJK UNIFIED IDEOGRAPH-402A	[FB80 C02A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_107)
{
    // 402A 0041;	
    // (䀪) CJK UNIFIED IDEOGRAPH-402A	[FB80 C02A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_108)
{
    // 402A 0062;	
    // (䀪) CJK UNIFIED IDEOGRAPH-402A	[FB80 C02A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_109)
{
    // 402B 0021;	
    // (䀫) CJK UNIFIED IDEOGRAPH-402B	[FB80 C02B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_110)
{
    // 402B 003F;	
    // (䀫) CJK UNIFIED IDEOGRAPH-402B	[FB80 C02B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_111)
{
    // 402B 0061;	
    // (䀫) CJK UNIFIED IDEOGRAPH-402B	[FB80 C02B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_112)
{
    // 402B 0041;	
    // (䀫) CJK UNIFIED IDEOGRAPH-402B	[FB80 C02B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_113)
{
    // 402B 0062;	
    // (䀫) CJK UNIFIED IDEOGRAPH-402B	[FB80 C02B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_114)
{
    // 402C 0021;	
    // (䀬) CJK UNIFIED IDEOGRAPH-402C	[FB80 C02C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_115)
{
    // 402C 003F;	
    // (䀬) CJK UNIFIED IDEOGRAPH-402C	[FB80 C02C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_116)
{
    // 402C 0061;	
    // (䀬) CJK UNIFIED IDEOGRAPH-402C	[FB80 C02C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_117)
{
    // 402C 0041;	
    // (䀬) CJK UNIFIED IDEOGRAPH-402C	[FB80 C02C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_118)
{
    // 402C 0062;	
    // (䀬) CJK UNIFIED IDEOGRAPH-402C	[FB80 C02C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_119)
{
    // 402D 0021;	
    // (䀭) CJK UNIFIED IDEOGRAPH-402D	[FB80 C02D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_120)
{
    // 402D 003F;	
    // (䀭) CJK UNIFIED IDEOGRAPH-402D	[FB80 C02D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_121)
{
    // 402D 0061;	
    // (䀭) CJK UNIFIED IDEOGRAPH-402D	[FB80 C02D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_122)
{
    // 402D 0041;	
    // (䀭) CJK UNIFIED IDEOGRAPH-402D	[FB80 C02D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_123)
{
    // 402D 0062;	
    // (䀭) CJK UNIFIED IDEOGRAPH-402D	[FB80 C02D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_124)
{
    // 402E 0021;	
    // (䀮) CJK UNIFIED IDEOGRAPH-402E	[FB80 C02E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_125)
{
    // 402E 003F;	
    // (䀮) CJK UNIFIED IDEOGRAPH-402E	[FB80 C02E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_126)
{
    // 402E 0061;	
    // (䀮) CJK UNIFIED IDEOGRAPH-402E	[FB80 C02E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_127)
{
    // 402E 0041;	
    // (䀮) CJK UNIFIED IDEOGRAPH-402E	[FB80 C02E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_128)
{
    // 402E 0062;	
    // (䀮) CJK UNIFIED IDEOGRAPH-402E	[FB80 C02E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_129)
{
    // 402F 0021;	
    // (䀯) CJK UNIFIED IDEOGRAPH-402F	[FB80 C02F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC02F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_130)
{
    // 402F 003F;	
    // (䀯) CJK UNIFIED IDEOGRAPH-402F	[FB80 C02F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC02F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_131)
{
    // 402F 0061;	
    // (䀯) CJK UNIFIED IDEOGRAPH-402F	[FB80 C02F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC02F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_132)
{
    // 402F 0041;	
    // (䀯) CJK UNIFIED IDEOGRAPH-402F	[FB80 C02F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x402F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC02F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_133)
{
    // 402F 0062;	
    // (䀯) CJK UNIFIED IDEOGRAPH-402F	[FB80 C02F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x402F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC02F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_134)
{
    // 4030 0021;	
    // (䀰) CJK UNIFIED IDEOGRAPH-4030	[FB80 C030 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4030, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC030, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_135)
{
    // 4030 003F;	
    // (䀰) CJK UNIFIED IDEOGRAPH-4030	[FB80 C030 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4030, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC030, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_136)
{
    // 4030 0061;	
    // (䀰) CJK UNIFIED IDEOGRAPH-4030	[FB80 C030 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4030, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_137)
{
    // 4030 0041;	
    // (䀰) CJK UNIFIED IDEOGRAPH-4030	[FB80 C030 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4030, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_138)
{
    // 4030 0062;	
    // (䀰) CJK UNIFIED IDEOGRAPH-4030	[FB80 C030 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4030, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC030, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_139)
{
    // 4031 0021;	
    // (䀱) CJK UNIFIED IDEOGRAPH-4031	[FB80 C031 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4031, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_140)
{
    // 4031 003F;	
    // (䀱) CJK UNIFIED IDEOGRAPH-4031	[FB80 C031 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4031, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_141)
{
    // 4031 0061;	
    // (䀱) CJK UNIFIED IDEOGRAPH-4031	[FB80 C031 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4031, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_142)
{
    // 4031 0041;	
    // (䀱) CJK UNIFIED IDEOGRAPH-4031	[FB80 C031 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4031, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_143)
{
    // 4031 0062;	
    // (䀱) CJK UNIFIED IDEOGRAPH-4031	[FB80 C031 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4031, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_144)
{
    // 4032 0021;	
    // (䀲) CJK UNIFIED IDEOGRAPH-4032	[FB80 C032 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4032, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_145)
{
    // 4032 003F;	
    // (䀲) CJK UNIFIED IDEOGRAPH-4032	[FB80 C032 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4032, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_146)
{
    // 4032 0061;	
    // (䀲) CJK UNIFIED IDEOGRAPH-4032	[FB80 C032 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4032, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_147)
{
    // 4032 0041;	
    // (䀲) CJK UNIFIED IDEOGRAPH-4032	[FB80 C032 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4032, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_148)
{
    // 4032 0062;	
    // (䀲) CJK UNIFIED IDEOGRAPH-4032	[FB80 C032 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4032, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_149)
{
    // 4033 0021;	
    // (䀳) CJK UNIFIED IDEOGRAPH-4033	[FB80 C033 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4033, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_150)
{
    // 4033 003F;	
    // (䀳) CJK UNIFIED IDEOGRAPH-4033	[FB80 C033 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4033, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_151)
{
    // 4033 0061;	
    // (䀳) CJK UNIFIED IDEOGRAPH-4033	[FB80 C033 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4033, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_152)
{
    // 4033 0041;	
    // (䀳) CJK UNIFIED IDEOGRAPH-4033	[FB80 C033 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4033, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_153)
{
    // 4033 0062;	
    // (䀳) CJK UNIFIED IDEOGRAPH-4033	[FB80 C033 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4033, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_154)
{
    // 4034 0021;	
    // (䀴) CJK UNIFIED IDEOGRAPH-4034	[FB80 C034 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4034, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_155)
{
    // 4034 003F;	
    // (䀴) CJK UNIFIED IDEOGRAPH-4034	[FB80 C034 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4034, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_156)
{
    // 4034 0061;	
    // (䀴) CJK UNIFIED IDEOGRAPH-4034	[FB80 C034 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4034, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_157)
{
    // 4034 0041;	
    // (䀴) CJK UNIFIED IDEOGRAPH-4034	[FB80 C034 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4034, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_158)
{
    // 4034 0062;	
    // (䀴) CJK UNIFIED IDEOGRAPH-4034	[FB80 C034 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4034, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_159)
{
    // 4035 0021;	
    // (䀵) CJK UNIFIED IDEOGRAPH-4035	[FB80 C035 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4035, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_160)
{
    // 4035 003F;	
    // (䀵) CJK UNIFIED IDEOGRAPH-4035	[FB80 C035 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4035, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_161)
{
    // 4035 0061;	
    // (䀵) CJK UNIFIED IDEOGRAPH-4035	[FB80 C035 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4035, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_162)
{
    // 4035 0041;	
    // (䀵) CJK UNIFIED IDEOGRAPH-4035	[FB80 C035 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4035, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_163)
{
    // 4035 0062;	
    // (䀵) CJK UNIFIED IDEOGRAPH-4035	[FB80 C035 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4035, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_164)
{
    // 4036 0021;	
    // (䀶) CJK UNIFIED IDEOGRAPH-4036	[FB80 C036 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4036, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC036, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_165)
{
    // 4036 003F;	
    // (䀶) CJK UNIFIED IDEOGRAPH-4036	[FB80 C036 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4036, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC036, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_166)
{
    // 4036 0061;	
    // (䀶) CJK UNIFIED IDEOGRAPH-4036	[FB80 C036 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4036, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_167)
{
    // 4036 0041;	
    // (䀶) CJK UNIFIED IDEOGRAPH-4036	[FB80 C036 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4036, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_168)
{
    // 4036 0062;	
    // (䀶) CJK UNIFIED IDEOGRAPH-4036	[FB80 C036 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4036, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC036, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_169)
{
    // 4037 0021;	
    // (䀷) CJK UNIFIED IDEOGRAPH-4037	[FB80 C037 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4037, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC037, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_170)
{
    // 4037 003F;	
    // (䀷) CJK UNIFIED IDEOGRAPH-4037	[FB80 C037 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4037, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC037, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_171)
{
    // 4037 0061;	
    // (䀷) CJK UNIFIED IDEOGRAPH-4037	[FB80 C037 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4037, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_172)
{
    // 4037 0041;	
    // (䀷) CJK UNIFIED IDEOGRAPH-4037	[FB80 C037 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4037, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_173)
{
    // 4037 0062;	
    // (䀷) CJK UNIFIED IDEOGRAPH-4037	[FB80 C037 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4037, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC037, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_174)
{
    // 4038 0021;	
    // (䀸) CJK UNIFIED IDEOGRAPH-4038	[FB80 C038 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4038, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC038, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_175)
{
    // 4038 003F;	
    // (䀸) CJK UNIFIED IDEOGRAPH-4038	[FB80 C038 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4038, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC038, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_176)
{
    // 4038 0061;	
    // (䀸) CJK UNIFIED IDEOGRAPH-4038	[FB80 C038 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4038, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_177)
{
    // 4038 0041;	
    // (䀸) CJK UNIFIED IDEOGRAPH-4038	[FB80 C038 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4038, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_178)
{
    // 4038 0062;	
    // (䀸) CJK UNIFIED IDEOGRAPH-4038	[FB80 C038 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4038, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC038, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_179)
{
    // 4039 0021;	
    // (䀹) CJK UNIFIED IDEOGRAPH-4039	[FB80 C039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4039, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_180)
{
    // FAD4 0021;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-FAD4	[FB80 C039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_181)
{
    // 2F949 0021;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-2F949	[FB80 C039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F949, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_182)
{
    // 4039 003F;	
    // (䀹) CJK UNIFIED IDEOGRAPH-4039	[FB80 C039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4039, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_183)
{
    // FAD4 003F;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-FAD4	[FB80 C039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_184)
{
    // 2F949 003F;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-2F949	[FB80 C039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F949, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_185)
{
    // 4039 0061;	
    // (䀹) CJK UNIFIED IDEOGRAPH-4039	[FB80 C039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4039, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_186)
{
    // FAD4 0061;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-FAD4	[FB80 C039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_187)
{
    // 2F949 0061;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-2F949	[FB80 C039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F949, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_188)
{
    // 4039 0041;	
    // (䀹) CJK UNIFIED IDEOGRAPH-4039	[FB80 C039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4039, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_189)
{
    // FAD4 0041;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-FAD4	[FB80 C039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_190)
{
    // 2F949 0041;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-2F949	[FB80 C039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F949, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_191)
{
    // 4039 0062;	
    // (䀹) CJK UNIFIED IDEOGRAPH-4039	[FB80 C039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4039, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_192)
{
    // FAD4 0062;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-FAD4	[FB80 C039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_193)
{
    // 2F949 0062;	
    // (䀹) CJK COMPATIBILITY IDEOGRAPH-2F949	[FB80 C039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F949, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_194)
{
    // 403A 0021;	
    // (䀺) CJK UNIFIED IDEOGRAPH-403A	[FB80 C03A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_195)
{
    // 403A 003F;	
    // (䀺) CJK UNIFIED IDEOGRAPH-403A	[FB80 C03A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_196)
{
    // 403A 0061;	
    // (䀺) CJK UNIFIED IDEOGRAPH-403A	[FB80 C03A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_197)
{
    // 403A 0041;	
    // (䀺) CJK UNIFIED IDEOGRAPH-403A	[FB80 C03A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_198)
{
    // 403A 0062;	
    // (䀺) CJK UNIFIED IDEOGRAPH-403A	[FB80 C03A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_199)
{
    // 403B 0021;	
    // (䀻) CJK UNIFIED IDEOGRAPH-403B	[FB80 C03B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_200)
{
    // 403B 003F;	
    // (䀻) CJK UNIFIED IDEOGRAPH-403B	[FB80 C03B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_201)
{
    // 403B 0061;	
    // (䀻) CJK UNIFIED IDEOGRAPH-403B	[FB80 C03B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_202)
{
    // 403B 0041;	
    // (䀻) CJK UNIFIED IDEOGRAPH-403B	[FB80 C03B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_203)
{
    // 403B 0062;	
    // (䀻) CJK UNIFIED IDEOGRAPH-403B	[FB80 C03B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_204)
{
    // 403C 0021;	
    // (䀼) CJK UNIFIED IDEOGRAPH-403C	[FB80 C03C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_205)
{
    // 403C 003F;	
    // (䀼) CJK UNIFIED IDEOGRAPH-403C	[FB80 C03C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_206)
{
    // 403C 0061;	
    // (䀼) CJK UNIFIED IDEOGRAPH-403C	[FB80 C03C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_207)
{
    // 403C 0041;	
    // (䀼) CJK UNIFIED IDEOGRAPH-403C	[FB80 C03C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_208)
{
    // 403C 0062;	
    // (䀼) CJK UNIFIED IDEOGRAPH-403C	[FB80 C03C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_209)
{
    // 403D 0021;	
    // (䀽) CJK UNIFIED IDEOGRAPH-403D	[FB80 C03D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_210)
{
    // 403D 003F;	
    // (䀽) CJK UNIFIED IDEOGRAPH-403D	[FB80 C03D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_211)
{
    // 403D 0061;	
    // (䀽) CJK UNIFIED IDEOGRAPH-403D	[FB80 C03D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_212)
{
    // 403D 0041;	
    // (䀽) CJK UNIFIED IDEOGRAPH-403D	[FB80 C03D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_213)
{
    // 403D 0062;	
    // (䀽) CJK UNIFIED IDEOGRAPH-403D	[FB80 C03D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_214)
{
    // 403E 0021;	
    // (䀾) CJK UNIFIED IDEOGRAPH-403E	[FB80 C03E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_215)
{
    // 403E 003F;	
    // (䀾) CJK UNIFIED IDEOGRAPH-403E	[FB80 C03E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_216)
{
    // 403E 0061;	
    // (䀾) CJK UNIFIED IDEOGRAPH-403E	[FB80 C03E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_217)
{
    // 403E 0041;	
    // (䀾) CJK UNIFIED IDEOGRAPH-403E	[FB80 C03E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_218)
{
    // 403E 0062;	
    // (䀾) CJK UNIFIED IDEOGRAPH-403E	[FB80 C03E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_219)
{
    // 403F 0021;	
    // (䀿) CJK UNIFIED IDEOGRAPH-403F	[FB80 C03F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC03F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_220)
{
    // 403F 003F;	
    // (䀿) CJK UNIFIED IDEOGRAPH-403F	[FB80 C03F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC03F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_221)
{
    // 403F 0061;	
    // (䀿) CJK UNIFIED IDEOGRAPH-403F	[FB80 C03F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC03F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_222)
{
    // 403F 0041;	
    // (䀿) CJK UNIFIED IDEOGRAPH-403F	[FB80 C03F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x403F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC03F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_223)
{
    // 403F 0062;	
    // (䀿) CJK UNIFIED IDEOGRAPH-403F	[FB80 C03F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x403F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC03F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_224)
{
    // 4040 0021;	
    // (䁀) CJK UNIFIED IDEOGRAPH-4040	[FB80 C040 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4040, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC040, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_225)
{
    // 4040 003F;	
    // (䁀) CJK UNIFIED IDEOGRAPH-4040	[FB80 C040 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4040, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC040, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_226)
{
    // 4040 0061;	
    // (䁀) CJK UNIFIED IDEOGRAPH-4040	[FB80 C040 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4040, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_227)
{
    // 4040 0041;	
    // (䁀) CJK UNIFIED IDEOGRAPH-4040	[FB80 C040 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4040, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_228)
{
    // 4040 0062;	
    // (䁀) CJK UNIFIED IDEOGRAPH-4040	[FB80 C040 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4040, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC040, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_229)
{
    // 4041 0021;	
    // (䁁) CJK UNIFIED IDEOGRAPH-4041	[FB80 C041 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4041, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_230)
{
    // 4041 003F;	
    // (䁁) CJK UNIFIED IDEOGRAPH-4041	[FB80 C041 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4041, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_231)
{
    // 4041 0061;	
    // (䁁) CJK UNIFIED IDEOGRAPH-4041	[FB80 C041 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4041, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_232)
{
    // 4041 0041;	
    // (䁁) CJK UNIFIED IDEOGRAPH-4041	[FB80 C041 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4041, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_233)
{
    // 4041 0062;	
    // (䁁) CJK UNIFIED IDEOGRAPH-4041	[FB80 C041 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4041, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_234)
{
    // 4042 0021;	
    // (䁂) CJK UNIFIED IDEOGRAPH-4042	[FB80 C042 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4042, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_235)
{
    // 4042 003F;	
    // (䁂) CJK UNIFIED IDEOGRAPH-4042	[FB80 C042 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4042, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_236)
{
    // 4042 0061;	
    // (䁂) CJK UNIFIED IDEOGRAPH-4042	[FB80 C042 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4042, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_237)
{
    // 4042 0041;	
    // (䁂) CJK UNIFIED IDEOGRAPH-4042	[FB80 C042 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4042, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_238)
{
    // 4042 0062;	
    // (䁂) CJK UNIFIED IDEOGRAPH-4042	[FB80 C042 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4042, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_239)
{
    // 4043 0021;	
    // (䁃) CJK UNIFIED IDEOGRAPH-4043	[FB80 C043 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4043, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_240)
{
    // 4043 003F;	
    // (䁃) CJK UNIFIED IDEOGRAPH-4043	[FB80 C043 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4043, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_241)
{
    // 4043 0061;	
    // (䁃) CJK UNIFIED IDEOGRAPH-4043	[FB80 C043 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4043, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_242)
{
    // 4043 0041;	
    // (䁃) CJK UNIFIED IDEOGRAPH-4043	[FB80 C043 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4043, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_243)
{
    // 4043 0062;	
    // (䁃) CJK UNIFIED IDEOGRAPH-4043	[FB80 C043 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4043, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_244)
{
    // 4044 0021;	
    // (䁄) CJK UNIFIED IDEOGRAPH-4044	[FB80 C044 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4044, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_245)
{
    // 4044 003F;	
    // (䁄) CJK UNIFIED IDEOGRAPH-4044	[FB80 C044 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4044, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_246)
{
    // 4044 0061;	
    // (䁄) CJK UNIFIED IDEOGRAPH-4044	[FB80 C044 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4044, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_247)
{
    // 4044 0041;	
    // (䁄) CJK UNIFIED IDEOGRAPH-4044	[FB80 C044 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4044, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_248)
{
    // 4044 0062;	
    // (䁄) CJK UNIFIED IDEOGRAPH-4044	[FB80 C044 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4044, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_249)
{
    // 4045 0021;	
    // (䁅) CJK UNIFIED IDEOGRAPH-4045	[FB80 C045 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4045, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_250)
{
    // 4045 003F;	
    // (䁅) CJK UNIFIED IDEOGRAPH-4045	[FB80 C045 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4045, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_251)
{
    // 4045 0061;	
    // (䁅) CJK UNIFIED IDEOGRAPH-4045	[FB80 C045 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4045, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_252)
{
    // 4045 0041;	
    // (䁅) CJK UNIFIED IDEOGRAPH-4045	[FB80 C045 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4045, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_253)
{
    // 4045 0062;	
    // (䁅) CJK UNIFIED IDEOGRAPH-4045	[FB80 C045 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4045, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_254)
{
    // 4046 0021;	
    // (䁆) CJK UNIFIED IDEOGRAPH-4046	[FB80 C046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4046, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_255)
{
    // 2F94B 0021;	
    // (䁆) CJK COMPATIBILITY IDEOGRAPH-2F94B	[FB80 C046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_256)
{
    // 4046 003F;	
    // (䁆) CJK UNIFIED IDEOGRAPH-4046	[FB80 C046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4046, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_257)
{
    // 2F94B 003F;	
    // (䁆) CJK COMPATIBILITY IDEOGRAPH-2F94B	[FB80 C046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_258)
{
    // 4046 0061;	
    // (䁆) CJK UNIFIED IDEOGRAPH-4046	[FB80 C046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4046, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_259)
{
    // 2F94B 0061;	
    // (䁆) CJK COMPATIBILITY IDEOGRAPH-2F94B	[FB80 C046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_260)
{
    // 4046 0041;	
    // (䁆) CJK UNIFIED IDEOGRAPH-4046	[FB80 C046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4046, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_261)
{
    // 2F94B 0041;	
    // (䁆) CJK COMPATIBILITY IDEOGRAPH-2F94B	[FB80 C046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F94B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_262)
{
    // 4046 0062;	
    // (䁆) CJK UNIFIED IDEOGRAPH-4046	[FB80 C046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4046, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_263)
{
    // 2F94B 0062;	
    // (䁆) CJK COMPATIBILITY IDEOGRAPH-2F94B	[FB80 C046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_264)
{
    // 4047 0021;	
    // (䁇) CJK UNIFIED IDEOGRAPH-4047	[FB80 C047 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4047, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_265)
{
    // 4047 003F;	
    // (䁇) CJK UNIFIED IDEOGRAPH-4047	[FB80 C047 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4047, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_266)
{
    // 4047 0061;	
    // (䁇) CJK UNIFIED IDEOGRAPH-4047	[FB80 C047 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4047, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_267)
{
    // 4047 0041;	
    // (䁇) CJK UNIFIED IDEOGRAPH-4047	[FB80 C047 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4047, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_268)
{
    // 4047 0062;	
    // (䁇) CJK UNIFIED IDEOGRAPH-4047	[FB80 C047 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4047, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_269)
{
    // 4048 0021;	
    // (䁈) CJK UNIFIED IDEOGRAPH-4048	[FB80 C048 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4048, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC048, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_270)
{
    // 4048 003F;	
    // (䁈) CJK UNIFIED IDEOGRAPH-4048	[FB80 C048 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4048, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC048, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_271)
{
    // 4048 0061;	
    // (䁈) CJK UNIFIED IDEOGRAPH-4048	[FB80 C048 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4048, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_272)
{
    // 4048 0041;	
    // (䁈) CJK UNIFIED IDEOGRAPH-4048	[FB80 C048 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4048, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_273)
{
    // 4048 0062;	
    // (䁈) CJK UNIFIED IDEOGRAPH-4048	[FB80 C048 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4048, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC048, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_274)
{
    // 4049 0021;	
    // (䁉) CJK UNIFIED IDEOGRAPH-4049	[FB80 C049 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4049, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC049, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_275)
{
    // 4049 003F;	
    // (䁉) CJK UNIFIED IDEOGRAPH-4049	[FB80 C049 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4049, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC049, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_276)
{
    // 4049 0061;	
    // (䁉) CJK UNIFIED IDEOGRAPH-4049	[FB80 C049 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4049, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_277)
{
    // 4049 0041;	
    // (䁉) CJK UNIFIED IDEOGRAPH-4049	[FB80 C049 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4049, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_278)
{
    // 4049 0062;	
    // (䁉) CJK UNIFIED IDEOGRAPH-4049	[FB80 C049 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4049, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC049, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_279)
{
    // 404A 0021;	
    // (䁊) CJK UNIFIED IDEOGRAPH-404A	[FB80 C04A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_280)
{
    // 404A 003F;	
    // (䁊) CJK UNIFIED IDEOGRAPH-404A	[FB80 C04A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_281)
{
    // 404A 0061;	
    // (䁊) CJK UNIFIED IDEOGRAPH-404A	[FB80 C04A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_282)
{
    // 404A 0041;	
    // (䁊) CJK UNIFIED IDEOGRAPH-404A	[FB80 C04A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_283)
{
    // 404A 0062;	
    // (䁊) CJK UNIFIED IDEOGRAPH-404A	[FB80 C04A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_284)
{
    // 404B 0021;	
    // (䁋) CJK UNIFIED IDEOGRAPH-404B	[FB80 C04B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_285)
{
    // 404B 003F;	
    // (䁋) CJK UNIFIED IDEOGRAPH-404B	[FB80 C04B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_286)
{
    // 404B 0061;	
    // (䁋) CJK UNIFIED IDEOGRAPH-404B	[FB80 C04B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_287)
{
    // 404B 0041;	
    // (䁋) CJK UNIFIED IDEOGRAPH-404B	[FB80 C04B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_288)
{
    // 404B 0062;	
    // (䁋) CJK UNIFIED IDEOGRAPH-404B	[FB80 C04B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_289)
{
    // 404C 0021;	
    // (䁌) CJK UNIFIED IDEOGRAPH-404C	[FB80 C04C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_290)
{
    // 404C 003F;	
    // (䁌) CJK UNIFIED IDEOGRAPH-404C	[FB80 C04C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_291)
{
    // 404C 0061;	
    // (䁌) CJK UNIFIED IDEOGRAPH-404C	[FB80 C04C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_292)
{
    // 404C 0041;	
    // (䁌) CJK UNIFIED IDEOGRAPH-404C	[FB80 C04C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_293)
{
    // 404C 0062;	
    // (䁌) CJK UNIFIED IDEOGRAPH-404C	[FB80 C04C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_294)
{
    // 404D 0021;	
    // (䁍) CJK UNIFIED IDEOGRAPH-404D	[FB80 C04D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_295)
{
    // 404D 003F;	
    // (䁍) CJK UNIFIED IDEOGRAPH-404D	[FB80 C04D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_296)
{
    // 404D 0061;	
    // (䁍) CJK UNIFIED IDEOGRAPH-404D	[FB80 C04D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_297)
{
    // 404D 0041;	
    // (䁍) CJK UNIFIED IDEOGRAPH-404D	[FB80 C04D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_298)
{
    // 404D 0062;	
    // (䁍) CJK UNIFIED IDEOGRAPH-404D	[FB80 C04D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_299)
{
    // 404E 0021;	
    // (䁎) CJK UNIFIED IDEOGRAPH-404E	[FB80 C04E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_300)
{
    // 404E 003F;	
    // (䁎) CJK UNIFIED IDEOGRAPH-404E	[FB80 C04E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_301)
{
    // 404E 0061;	
    // (䁎) CJK UNIFIED IDEOGRAPH-404E	[FB80 C04E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_302)
{
    // 404E 0041;	
    // (䁎) CJK UNIFIED IDEOGRAPH-404E	[FB80 C04E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_303)
{
    // 404E 0062;	
    // (䁎) CJK UNIFIED IDEOGRAPH-404E	[FB80 C04E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_304)
{
    // 404F 0021;	
    // (䁏) CJK UNIFIED IDEOGRAPH-404F	[FB80 C04F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC04F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_305)
{
    // 404F 003F;	
    // (䁏) CJK UNIFIED IDEOGRAPH-404F	[FB80 C04F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC04F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_306)
{
    // 404F 0061;	
    // (䁏) CJK UNIFIED IDEOGRAPH-404F	[FB80 C04F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC04F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_307)
{
    // 404F 0041;	
    // (䁏) CJK UNIFIED IDEOGRAPH-404F	[FB80 C04F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x404F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC04F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_308)
{
    // 404F 0062;	
    // (䁏) CJK UNIFIED IDEOGRAPH-404F	[FB80 C04F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x404F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC04F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_309)
{
    // 4050 0021;	
    // (䁐) CJK UNIFIED IDEOGRAPH-4050	[FB80 C050 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4050, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC050, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_310)
{
    // 4050 003F;	
    // (䁐) CJK UNIFIED IDEOGRAPH-4050	[FB80 C050 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4050, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC050, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_311)
{
    // 4050 0061;	
    // (䁐) CJK UNIFIED IDEOGRAPH-4050	[FB80 C050 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4050, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_312)
{
    // 4050 0041;	
    // (䁐) CJK UNIFIED IDEOGRAPH-4050	[FB80 C050 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4050, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_313)
{
    // 4050 0062;	
    // (䁐) CJK UNIFIED IDEOGRAPH-4050	[FB80 C050 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4050, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC050, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_314)
{
    // 4051 0021;	
    // (䁑) CJK UNIFIED IDEOGRAPH-4051	[FB80 C051 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4051, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC051, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_315)
{
    // 4051 003F;	
    // (䁑) CJK UNIFIED IDEOGRAPH-4051	[FB80 C051 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4051, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC051, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_316)
{
    // 4051 0061;	
    // (䁑) CJK UNIFIED IDEOGRAPH-4051	[FB80 C051 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4051, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_317)
{
    // 4051 0041;	
    // (䁑) CJK UNIFIED IDEOGRAPH-4051	[FB80 C051 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4051, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_318)
{
    // 4051 0062;	
    // (䁑) CJK UNIFIED IDEOGRAPH-4051	[FB80 C051 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4051, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC051, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_319)
{
    // 4052 0021;	
    // (䁒) CJK UNIFIED IDEOGRAPH-4052	[FB80 C052 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4052, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC052, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_320)
{
    // 4052 003F;	
    // (䁒) CJK UNIFIED IDEOGRAPH-4052	[FB80 C052 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4052, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC052, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_321)
{
    // 4052 0061;	
    // (䁒) CJK UNIFIED IDEOGRAPH-4052	[FB80 C052 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4052, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_322)
{
    // 4052 0041;	
    // (䁒) CJK UNIFIED IDEOGRAPH-4052	[FB80 C052 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4052, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_323)
{
    // 4052 0062;	
    // (䁒) CJK UNIFIED IDEOGRAPH-4052	[FB80 C052 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4052, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC052, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_324)
{
    // 4053 0021;	
    // (䁓) CJK UNIFIED IDEOGRAPH-4053	[FB80 C053 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4053, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC053, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_325)
{
    // 4053 003F;	
    // (䁓) CJK UNIFIED IDEOGRAPH-4053	[FB80 C053 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4053, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC053, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_326)
{
    // 4053 0061;	
    // (䁓) CJK UNIFIED IDEOGRAPH-4053	[FB80 C053 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4053, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_327)
{
    // 4053 0041;	
    // (䁓) CJK UNIFIED IDEOGRAPH-4053	[FB80 C053 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4053, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_328)
{
    // 4053 0062;	
    // (䁓) CJK UNIFIED IDEOGRAPH-4053	[FB80 C053 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4053, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC053, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_329)
{
    // 4054 0021;	
    // (䁔) CJK UNIFIED IDEOGRAPH-4054	[FB80 C054 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4054, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC054, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_330)
{
    // 4054 003F;	
    // (䁔) CJK UNIFIED IDEOGRAPH-4054	[FB80 C054 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4054, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC054, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_331)
{
    // 4054 0061;	
    // (䁔) CJK UNIFIED IDEOGRAPH-4054	[FB80 C054 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4054, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_332)
{
    // 4054 0041;	
    // (䁔) CJK UNIFIED IDEOGRAPH-4054	[FB80 C054 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4054, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_333)
{
    // 4054 0062;	
    // (䁔) CJK UNIFIED IDEOGRAPH-4054	[FB80 C054 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4054, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC054, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_334)
{
    // 4055 0021;	
    // (䁕) CJK UNIFIED IDEOGRAPH-4055	[FB80 C055 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4055, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC055, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_335)
{
    // 4055 003F;	
    // (䁕) CJK UNIFIED IDEOGRAPH-4055	[FB80 C055 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4055, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC055, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_336)
{
    // 4055 0061;	
    // (䁕) CJK UNIFIED IDEOGRAPH-4055	[FB80 C055 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4055, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_337)
{
    // 4055 0041;	
    // (䁕) CJK UNIFIED IDEOGRAPH-4055	[FB80 C055 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4055, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_338)
{
    // 4055 0062;	
    // (䁕) CJK UNIFIED IDEOGRAPH-4055	[FB80 C055 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4055, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC055, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_339)
{
    // 4056 0021;	
    // (䁖) CJK UNIFIED IDEOGRAPH-4056	[FB80 C056 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4056, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_340)
{
    // 4056 003F;	
    // (䁖) CJK UNIFIED IDEOGRAPH-4056	[FB80 C056 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4056, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_341)
{
    // 4056 0061;	
    // (䁖) CJK UNIFIED IDEOGRAPH-4056	[FB80 C056 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4056, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_342)
{
    // 4056 0041;	
    // (䁖) CJK UNIFIED IDEOGRAPH-4056	[FB80 C056 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4056, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_343)
{
    // 4056 0062;	
    // (䁖) CJK UNIFIED IDEOGRAPH-4056	[FB80 C056 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4056, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_344)
{
    // 4057 0021;	
    // (䁗) CJK UNIFIED IDEOGRAPH-4057	[FB80 C057 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4057, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC057, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_345)
{
    // 4057 003F;	
    // (䁗) CJK UNIFIED IDEOGRAPH-4057	[FB80 C057 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4057, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC057, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_346)
{
    // 4057 0061;	
    // (䁗) CJK UNIFIED IDEOGRAPH-4057	[FB80 C057 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4057, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_347)
{
    // 4057 0041;	
    // (䁗) CJK UNIFIED IDEOGRAPH-4057	[FB80 C057 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4057, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_348)
{
    // 4057 0062;	
    // (䁗) CJK UNIFIED IDEOGRAPH-4057	[FB80 C057 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4057, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC057, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_349)
{
    // 4058 0021;	
    // (䁘) CJK UNIFIED IDEOGRAPH-4058	[FB80 C058 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4058, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC058, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_350)
{
    // 4058 003F;	
    // (䁘) CJK UNIFIED IDEOGRAPH-4058	[FB80 C058 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4058, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC058, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_351)
{
    // 4058 0061;	
    // (䁘) CJK UNIFIED IDEOGRAPH-4058	[FB80 C058 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4058, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_352)
{
    // 4058 0041;	
    // (䁘) CJK UNIFIED IDEOGRAPH-4058	[FB80 C058 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4058, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_353)
{
    // 4058 0062;	
    // (䁘) CJK UNIFIED IDEOGRAPH-4058	[FB80 C058 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4058, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC058, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_354)
{
    // 4059 0021;	
    // (䁙) CJK UNIFIED IDEOGRAPH-4059	[FB80 C059 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4059, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC059, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_355)
{
    // 4059 003F;	
    // (䁙) CJK UNIFIED IDEOGRAPH-4059	[FB80 C059 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4059, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC059, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_356)
{
    // 4059 0061;	
    // (䁙) CJK UNIFIED IDEOGRAPH-4059	[FB80 C059 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4059, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_357)
{
    // 4059 0041;	
    // (䁙) CJK UNIFIED IDEOGRAPH-4059	[FB80 C059 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4059, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_358)
{
    // 4059 0062;	
    // (䁙) CJK UNIFIED IDEOGRAPH-4059	[FB80 C059 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4059, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC059, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_359)
{
    // 405A 0021;	
    // (䁚) CJK UNIFIED IDEOGRAPH-405A	[FB80 C05A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_360)
{
    // 405A 003F;	
    // (䁚) CJK UNIFIED IDEOGRAPH-405A	[FB80 C05A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_361)
{
    // 405A 0061;	
    // (䁚) CJK UNIFIED IDEOGRAPH-405A	[FB80 C05A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_362)
{
    // 405A 0041;	
    // (䁚) CJK UNIFIED IDEOGRAPH-405A	[FB80 C05A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_363)
{
    // 405A 0062;	
    // (䁚) CJK UNIFIED IDEOGRAPH-405A	[FB80 C05A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_364)
{
    // 405B 0021;	
    // (䁛) CJK UNIFIED IDEOGRAPH-405B	[FB80 C05B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_365)
{
    // 405B 003F;	
    // (䁛) CJK UNIFIED IDEOGRAPH-405B	[FB80 C05B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_366)
{
    // 405B 0061;	
    // (䁛) CJK UNIFIED IDEOGRAPH-405B	[FB80 C05B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_367)
{
    // 405B 0041;	
    // (䁛) CJK UNIFIED IDEOGRAPH-405B	[FB80 C05B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_368)
{
    // 405B 0062;	
    // (䁛) CJK UNIFIED IDEOGRAPH-405B	[FB80 C05B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_369)
{
    // 405C 0021;	
    // (䁜) CJK UNIFIED IDEOGRAPH-405C	[FB80 C05C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_370)
{
    // 405C 003F;	
    // (䁜) CJK UNIFIED IDEOGRAPH-405C	[FB80 C05C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_371)
{
    // 405C 0061;	
    // (䁜) CJK UNIFIED IDEOGRAPH-405C	[FB80 C05C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_372)
{
    // 405C 0041;	
    // (䁜) CJK UNIFIED IDEOGRAPH-405C	[FB80 C05C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_373)
{
    // 405C 0062;	
    // (䁜) CJK UNIFIED IDEOGRAPH-405C	[FB80 C05C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_374)
{
    // 405D 0021;	
    // (䁝) CJK UNIFIED IDEOGRAPH-405D	[FB80 C05D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_375)
{
    // 405D 003F;	
    // (䁝) CJK UNIFIED IDEOGRAPH-405D	[FB80 C05D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_376)
{
    // 405D 0061;	
    // (䁝) CJK UNIFIED IDEOGRAPH-405D	[FB80 C05D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_377)
{
    // 405D 0041;	
    // (䁝) CJK UNIFIED IDEOGRAPH-405D	[FB80 C05D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_378)
{
    // 405D 0062;	
    // (䁝) CJK UNIFIED IDEOGRAPH-405D	[FB80 C05D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_379)
{
    // 405E 0021;	
    // (䁞) CJK UNIFIED IDEOGRAPH-405E	[FB80 C05E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_380)
{
    // 405E 003F;	
    // (䁞) CJK UNIFIED IDEOGRAPH-405E	[FB80 C05E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_381)
{
    // 405E 0061;	
    // (䁞) CJK UNIFIED IDEOGRAPH-405E	[FB80 C05E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_382)
{
    // 405E 0041;	
    // (䁞) CJK UNIFIED IDEOGRAPH-405E	[FB80 C05E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_383)
{
    // 405E 0062;	
    // (䁞) CJK UNIFIED IDEOGRAPH-405E	[FB80 C05E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_384)
{
    // 405F 0021;	
    // (䁟) CJK UNIFIED IDEOGRAPH-405F	[FB80 C05F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC05F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_385)
{
    // 405F 003F;	
    // (䁟) CJK UNIFIED IDEOGRAPH-405F	[FB80 C05F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC05F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_386)
{
    // 405F 0061;	
    // (䁟) CJK UNIFIED IDEOGRAPH-405F	[FB80 C05F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC05F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_387)
{
    // 405F 0041;	
    // (䁟) CJK UNIFIED IDEOGRAPH-405F	[FB80 C05F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x405F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC05F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_388)
{
    // 405F 0062;	
    // (䁟) CJK UNIFIED IDEOGRAPH-405F	[FB80 C05F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x405F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC05F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_389)
{
    // 4060 0021;	
    // (䁠) CJK UNIFIED IDEOGRAPH-4060	[FB80 C060 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4060, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC060, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_390)
{
    // 4060 003F;	
    // (䁠) CJK UNIFIED IDEOGRAPH-4060	[FB80 C060 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4060, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC060, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_391)
{
    // 4060 0061;	
    // (䁠) CJK UNIFIED IDEOGRAPH-4060	[FB80 C060 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4060, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_392)
{
    // 4060 0041;	
    // (䁠) CJK UNIFIED IDEOGRAPH-4060	[FB80 C060 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4060, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_393)
{
    // 4060 0062;	
    // (䁠) CJK UNIFIED IDEOGRAPH-4060	[FB80 C060 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4060, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC060, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_394)
{
    // 4061 0021;	
    // (䁡) CJK UNIFIED IDEOGRAPH-4061	[FB80 C061 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4061, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC061, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_395)
{
    // 4061 003F;	
    // (䁡) CJK UNIFIED IDEOGRAPH-4061	[FB80 C061 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4061, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC061, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_396)
{
    // 4061 0061;	
    // (䁡) CJK UNIFIED IDEOGRAPH-4061	[FB80 C061 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4061, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_397)
{
    // 4061 0041;	
    // (䁡) CJK UNIFIED IDEOGRAPH-4061	[FB80 C061 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4061, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_398)
{
    // 4061 0062;	
    // (䁡) CJK UNIFIED IDEOGRAPH-4061	[FB80 C061 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4061, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC061, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_399)
{
    // 4062 0021;	
    // (䁢) CJK UNIFIED IDEOGRAPH-4062	[FB80 C062 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4062, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC062, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_400)
{
    // 4062 003F;	
    // (䁢) CJK UNIFIED IDEOGRAPH-4062	[FB80 C062 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4062, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC062, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_401)
{
    // 4062 0061;	
    // (䁢) CJK UNIFIED IDEOGRAPH-4062	[FB80 C062 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4062, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_402)
{
    // 4062 0041;	
    // (䁢) CJK UNIFIED IDEOGRAPH-4062	[FB80 C062 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4062, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_403)
{
    // 4062 0062;	
    // (䁢) CJK UNIFIED IDEOGRAPH-4062	[FB80 C062 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4062, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC062, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_404)
{
    // 4063 0021;	
    // (䁣) CJK UNIFIED IDEOGRAPH-4063	[FB80 C063 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4063, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC063, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_405)
{
    // 4063 003F;	
    // (䁣) CJK UNIFIED IDEOGRAPH-4063	[FB80 C063 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4063, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC063, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_406)
{
    // 4063 0061;	
    // (䁣) CJK UNIFIED IDEOGRAPH-4063	[FB80 C063 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4063, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_407)
{
    // 4063 0041;	
    // (䁣) CJK UNIFIED IDEOGRAPH-4063	[FB80 C063 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4063, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_408)
{
    // 4063 0062;	
    // (䁣) CJK UNIFIED IDEOGRAPH-4063	[FB80 C063 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4063, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC063, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_409)
{
    // 4064 0021;	
    // (䁤) CJK UNIFIED IDEOGRAPH-4064	[FB80 C064 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4064, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC064, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_410)
{
    // 4064 003F;	
    // (䁤) CJK UNIFIED IDEOGRAPH-4064	[FB80 C064 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4064, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC064, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_411)
{
    // 4064 0061;	
    // (䁤) CJK UNIFIED IDEOGRAPH-4064	[FB80 C064 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4064, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_412)
{
    // 4064 0041;	
    // (䁤) CJK UNIFIED IDEOGRAPH-4064	[FB80 C064 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4064, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_413)
{
    // 4064 0062;	
    // (䁤) CJK UNIFIED IDEOGRAPH-4064	[FB80 C064 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4064, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC064, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_414)
{
    // 4065 0021;	
    // (䁥) CJK UNIFIED IDEOGRAPH-4065	[FB80 C065 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4065, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC065, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_415)
{
    // 4065 003F;	
    // (䁥) CJK UNIFIED IDEOGRAPH-4065	[FB80 C065 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4065, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC065, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_416)
{
    // 4065 0061;	
    // (䁥) CJK UNIFIED IDEOGRAPH-4065	[FB80 C065 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4065, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_417)
{
    // 4065 0041;	
    // (䁥) CJK UNIFIED IDEOGRAPH-4065	[FB80 C065 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4065, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_418)
{
    // 4065 0062;	
    // (䁥) CJK UNIFIED IDEOGRAPH-4065	[FB80 C065 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4065, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC065, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_419)
{
    // 4066 0021;	
    // (䁦) CJK UNIFIED IDEOGRAPH-4066	[FB80 C066 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4066, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC066, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_420)
{
    // 4066 003F;	
    // (䁦) CJK UNIFIED IDEOGRAPH-4066	[FB80 C066 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4066, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC066, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_421)
{
    // 4066 0061;	
    // (䁦) CJK UNIFIED IDEOGRAPH-4066	[FB80 C066 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4066, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_422)
{
    // 4066 0041;	
    // (䁦) CJK UNIFIED IDEOGRAPH-4066	[FB80 C066 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4066, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_423)
{
    // 4066 0062;	
    // (䁦) CJK UNIFIED IDEOGRAPH-4066	[FB80 C066 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4066, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC066, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_424)
{
    // 4067 0021;	
    // (䁧) CJK UNIFIED IDEOGRAPH-4067	[FB80 C067 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4067, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC067, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_425)
{
    // 4067 003F;	
    // (䁧) CJK UNIFIED IDEOGRAPH-4067	[FB80 C067 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4067, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC067, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_426)
{
    // 4067 0061;	
    // (䁧) CJK UNIFIED IDEOGRAPH-4067	[FB80 C067 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4067, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC067, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_427)
{
    // 4067 0041;	
    // (䁧) CJK UNIFIED IDEOGRAPH-4067	[FB80 C067 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4067, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC067, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_428)
{
    // 4067 0062;	
    // (䁧) CJK UNIFIED IDEOGRAPH-4067	[FB80 C067 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4067, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC067, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_429)
{
    // 4068 0021;	
    // (䁨) CJK UNIFIED IDEOGRAPH-4068	[FB80 C068 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4068, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC068, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_430)
{
    // 4068 003F;	
    // (䁨) CJK UNIFIED IDEOGRAPH-4068	[FB80 C068 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4068, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC068, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_431)
{
    // 4068 0061;	
    // (䁨) CJK UNIFIED IDEOGRAPH-4068	[FB80 C068 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4068, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC068, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_432)
{
    // 4068 0041;	
    // (䁨) CJK UNIFIED IDEOGRAPH-4068	[FB80 C068 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4068, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC068, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_433)
{
    // 4068 0062;	
    // (䁨) CJK UNIFIED IDEOGRAPH-4068	[FB80 C068 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4068, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC068, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_434)
{
    // 4069 0021;	
    // (䁩) CJK UNIFIED IDEOGRAPH-4069	[FB80 C069 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4069, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC069, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_435)
{
    // 4069 003F;	
    // (䁩) CJK UNIFIED IDEOGRAPH-4069	[FB80 C069 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4069, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC069, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_436)
{
    // 4069 0061;	
    // (䁩) CJK UNIFIED IDEOGRAPH-4069	[FB80 C069 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4069, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC069, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_437)
{
    // 4069 0041;	
    // (䁩) CJK UNIFIED IDEOGRAPH-4069	[FB80 C069 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4069, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC069, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_438)
{
    // 4069 0062;	
    // (䁩) CJK UNIFIED IDEOGRAPH-4069	[FB80 C069 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4069, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC069, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_439)
{
    // 406A 0021;	
    // (䁪) CJK UNIFIED IDEOGRAPH-406A	[FB80 C06A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_440)
{
    // 406A 003F;	
    // (䁪) CJK UNIFIED IDEOGRAPH-406A	[FB80 C06A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_441)
{
    // 406A 0061;	
    // (䁪) CJK UNIFIED IDEOGRAPH-406A	[FB80 C06A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_442)
{
    // 406A 0041;	
    // (䁪) CJK UNIFIED IDEOGRAPH-406A	[FB80 C06A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_443)
{
    // 406A 0062;	
    // (䁪) CJK UNIFIED IDEOGRAPH-406A	[FB80 C06A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_444)
{
    // 406B 0021;	
    // (䁫) CJK UNIFIED IDEOGRAPH-406B	[FB80 C06B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_445)
{
    // 406B 003F;	
    // (䁫) CJK UNIFIED IDEOGRAPH-406B	[FB80 C06B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_446)
{
    // 406B 0061;	
    // (䁫) CJK UNIFIED IDEOGRAPH-406B	[FB80 C06B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_447)
{
    // 406B 0041;	
    // (䁫) CJK UNIFIED IDEOGRAPH-406B	[FB80 C06B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_448)
{
    // 406B 0062;	
    // (䁫) CJK UNIFIED IDEOGRAPH-406B	[FB80 C06B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_449)
{
    // 406C 0021;	
    // (䁬) CJK UNIFIED IDEOGRAPH-406C	[FB80 C06C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_450)
{
    // 406C 003F;	
    // (䁬) CJK UNIFIED IDEOGRAPH-406C	[FB80 C06C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_451)
{
    // 406C 0061;	
    // (䁬) CJK UNIFIED IDEOGRAPH-406C	[FB80 C06C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_452)
{
    // 406C 0041;	
    // (䁬) CJK UNIFIED IDEOGRAPH-406C	[FB80 C06C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_453)
{
    // 406C 0062;	
    // (䁬) CJK UNIFIED IDEOGRAPH-406C	[FB80 C06C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_454)
{
    // 406D 0021;	
    // (䁭) CJK UNIFIED IDEOGRAPH-406D	[FB80 C06D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_455)
{
    // 406D 003F;	
    // (䁭) CJK UNIFIED IDEOGRAPH-406D	[FB80 C06D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_456)
{
    // 406D 0061;	
    // (䁭) CJK UNIFIED IDEOGRAPH-406D	[FB80 C06D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_457)
{
    // 406D 0041;	
    // (䁭) CJK UNIFIED IDEOGRAPH-406D	[FB80 C06D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_458)
{
    // 406D 0062;	
    // (䁭) CJK UNIFIED IDEOGRAPH-406D	[FB80 C06D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_459)
{
    // 406E 0021;	
    // (䁮) CJK UNIFIED IDEOGRAPH-406E	[FB80 C06E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_460)
{
    // 406E 003F;	
    // (䁮) CJK UNIFIED IDEOGRAPH-406E	[FB80 C06E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_461)
{
    // 406E 0061;	
    // (䁮) CJK UNIFIED IDEOGRAPH-406E	[FB80 C06E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_462)
{
    // 406E 0041;	
    // (䁮) CJK UNIFIED IDEOGRAPH-406E	[FB80 C06E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_463)
{
    // 406E 0062;	
    // (䁮) CJK UNIFIED IDEOGRAPH-406E	[FB80 C06E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_464)
{
    // 406F 0021;	
    // (䁯) CJK UNIFIED IDEOGRAPH-406F	[FB80 C06F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC06F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_465)
{
    // 406F 003F;	
    // (䁯) CJK UNIFIED IDEOGRAPH-406F	[FB80 C06F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC06F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_466)
{
    // 406F 0061;	
    // (䁯) CJK UNIFIED IDEOGRAPH-406F	[FB80 C06F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC06F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_467)
{
    // 406F 0041;	
    // (䁯) CJK UNIFIED IDEOGRAPH-406F	[FB80 C06F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x406F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC06F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_468)
{
    // 406F 0062;	
    // (䁯) CJK UNIFIED IDEOGRAPH-406F	[FB80 C06F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x406F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC06F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_469)
{
    // 4070 0021;	
    // (䁰) CJK UNIFIED IDEOGRAPH-4070	[FB80 C070 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4070, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC070, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_470)
{
    // 4070 003F;	
    // (䁰) CJK UNIFIED IDEOGRAPH-4070	[FB80 C070 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4070, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC070, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_471)
{
    // 4070 0061;	
    // (䁰) CJK UNIFIED IDEOGRAPH-4070	[FB80 C070 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4070, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_472)
{
    // 4070 0041;	
    // (䁰) CJK UNIFIED IDEOGRAPH-4070	[FB80 C070 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4070, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_473)
{
    // 4070 0062;	
    // (䁰) CJK UNIFIED IDEOGRAPH-4070	[FB80 C070 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4070, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC070, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_474)
{
    // 4071 0021;	
    // (䁱) CJK UNIFIED IDEOGRAPH-4071	[FB80 C071 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4071, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC071, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_475)
{
    // 4071 003F;	
    // (䁱) CJK UNIFIED IDEOGRAPH-4071	[FB80 C071 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4071, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC071, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_476)
{
    // 4071 0061;	
    // (䁱) CJK UNIFIED IDEOGRAPH-4071	[FB80 C071 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4071, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC071, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_477)
{
    // 4071 0041;	
    // (䁱) CJK UNIFIED IDEOGRAPH-4071	[FB80 C071 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4071, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC071, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_478)
{
    // 4071 0062;	
    // (䁱) CJK UNIFIED IDEOGRAPH-4071	[FB80 C071 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4071, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC071, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_479)
{
    // 4072 0021;	
    // (䁲) CJK UNIFIED IDEOGRAPH-4072	[FB80 C072 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4072, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC072, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_480)
{
    // 4072 003F;	
    // (䁲) CJK UNIFIED IDEOGRAPH-4072	[FB80 C072 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4072, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC072, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_481)
{
    // 4072 0061;	
    // (䁲) CJK UNIFIED IDEOGRAPH-4072	[FB80 C072 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4072, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC072, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_482)
{
    // 4072 0041;	
    // (䁲) CJK UNIFIED IDEOGRAPH-4072	[FB80 C072 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4072, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC072, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_483)
{
    // 4072 0062;	
    // (䁲) CJK UNIFIED IDEOGRAPH-4072	[FB80 C072 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4072, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC072, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_484)
{
    // 4073 0021;	
    // (䁳) CJK UNIFIED IDEOGRAPH-4073	[FB80 C073 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4073, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC073, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_485)
{
    // 4073 003F;	
    // (䁳) CJK UNIFIED IDEOGRAPH-4073	[FB80 C073 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4073, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC073, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_486)
{
    // 4073 0061;	
    // (䁳) CJK UNIFIED IDEOGRAPH-4073	[FB80 C073 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4073, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC073, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_487)
{
    // 4073 0041;	
    // (䁳) CJK UNIFIED IDEOGRAPH-4073	[FB80 C073 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4073, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC073, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_488)
{
    // 4073 0062;	
    // (䁳) CJK UNIFIED IDEOGRAPH-4073	[FB80 C073 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4073, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC073, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_489)
{
    // 4074 0021;	
    // (䁴) CJK UNIFIED IDEOGRAPH-4074	[FB80 C074 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4074, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC074, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_490)
{
    // 4074 003F;	
    // (䁴) CJK UNIFIED IDEOGRAPH-4074	[FB80 C074 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4074, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC074, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_491)
{
    // 4074 0061;	
    // (䁴) CJK UNIFIED IDEOGRAPH-4074	[FB80 C074 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4074, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC074, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_492)
{
    // 4074 0041;	
    // (䁴) CJK UNIFIED IDEOGRAPH-4074	[FB80 C074 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4074, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC074, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_493)
{
    // 4074 0062;	
    // (䁴) CJK UNIFIED IDEOGRAPH-4074	[FB80 C074 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4074, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC074, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_494)
{
    // 4075 0021;	
    // (䁵) CJK UNIFIED IDEOGRAPH-4075	[FB80 C075 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4075, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC075, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_495)
{
    // 4075 003F;	
    // (䁵) CJK UNIFIED IDEOGRAPH-4075	[FB80 C075 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4075, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC075, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_496)
{
    // 4075 0061;	
    // (䁵) CJK UNIFIED IDEOGRAPH-4075	[FB80 C075 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4075, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_497)
{
    // 4075 0041;	
    // (䁵) CJK UNIFIED IDEOGRAPH-4075	[FB80 C075 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4075, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_498)
{
    // 4075 0062;	
    // (䁵) CJK UNIFIED IDEOGRAPH-4075	[FB80 C075 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4075, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC075, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_358_499)
{
    // 4076 0021;	
    // (䁶) CJK UNIFIED IDEOGRAPH-4076	[FB80 C076 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4076, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC076, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

