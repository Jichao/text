// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_044_000)
{
    // 28C5 003F;	
    // (⣅) BRAILLE PATTERN DOTS-1378	[0E79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C5, 0x003F };
    uint32_t const ces[9] = { 0x0E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_001)
{
    // 28C5 0061;	
    // (⣅) BRAILLE PATTERN DOTS-1378	[0E79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C5, 0x0061 };
    uint32_t const ces[9] = { 0x0E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_002)
{
    // 28C5 0041;	
    // (⣅) BRAILLE PATTERN DOTS-1378	[0E79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C5, 0x0041 };
    uint32_t const ces[9] = { 0x0E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_003)
{
    // 28C5 0062;	
    // (⣅) BRAILLE PATTERN DOTS-1378	[0E79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C5, 0x0062 };
    uint32_t const ces[9] = { 0x0E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_004)
{
    // 28C6 0021;	
    // (⣆) BRAILLE PATTERN DOTS-2378	[0E7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C6, 0x0021 };
    uint32_t const ces[9] = { 0x0E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_005)
{
    // 28C6 003F;	
    // (⣆) BRAILLE PATTERN DOTS-2378	[0E7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C6, 0x003F };
    uint32_t const ces[9] = { 0x0E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_006)
{
    // 28C6 0061;	
    // (⣆) BRAILLE PATTERN DOTS-2378	[0E7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C6, 0x0061 };
    uint32_t const ces[9] = { 0x0E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_007)
{
    // 28C6 0041;	
    // (⣆) BRAILLE PATTERN DOTS-2378	[0E7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C6, 0x0041 };
    uint32_t const ces[9] = { 0x0E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_008)
{
    // 28C6 0062;	
    // (⣆) BRAILLE PATTERN DOTS-2378	[0E7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C6, 0x0062 };
    uint32_t const ces[9] = { 0x0E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_009)
{
    // 28C7 0021;	
    // (⣇) BRAILLE PATTERN DOTS-12378	[0E7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C7, 0x0021 };
    uint32_t const ces[9] = { 0x0E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_010)
{
    // 28C7 003F;	
    // (⣇) BRAILLE PATTERN DOTS-12378	[0E7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C7, 0x003F };
    uint32_t const ces[9] = { 0x0E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_011)
{
    // 28C7 0061;	
    // (⣇) BRAILLE PATTERN DOTS-12378	[0E7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C7, 0x0061 };
    uint32_t const ces[9] = { 0x0E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_012)
{
    // 28C7 0041;	
    // (⣇) BRAILLE PATTERN DOTS-12378	[0E7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C7, 0x0041 };
    uint32_t const ces[9] = { 0x0E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_013)
{
    // 28C7 0062;	
    // (⣇) BRAILLE PATTERN DOTS-12378	[0E7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C7, 0x0062 };
    uint32_t const ces[9] = { 0x0E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_014)
{
    // 28C8 0021;	
    // (⣈) BRAILLE PATTERN DOTS-478	[0E7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C8, 0x0021 };
    uint32_t const ces[9] = { 0x0E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_015)
{
    // 28C8 003F;	
    // (⣈) BRAILLE PATTERN DOTS-478	[0E7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C8, 0x003F };
    uint32_t const ces[9] = { 0x0E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_016)
{
    // 28C8 0061;	
    // (⣈) BRAILLE PATTERN DOTS-478	[0E7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C8, 0x0061 };
    uint32_t const ces[9] = { 0x0E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_017)
{
    // 28C8 0041;	
    // (⣈) BRAILLE PATTERN DOTS-478	[0E7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C8, 0x0041 };
    uint32_t const ces[9] = { 0x0E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_018)
{
    // 28C8 0062;	
    // (⣈) BRAILLE PATTERN DOTS-478	[0E7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C8, 0x0062 };
    uint32_t const ces[9] = { 0x0E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_019)
{
    // 28C9 0021;	
    // (⣉) BRAILLE PATTERN DOTS-1478	[0E7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C9, 0x0021 };
    uint32_t const ces[9] = { 0x0E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_020)
{
    // 28C9 003F;	
    // (⣉) BRAILLE PATTERN DOTS-1478	[0E7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C9, 0x003F };
    uint32_t const ces[9] = { 0x0E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_021)
{
    // 28C9 0061;	
    // (⣉) BRAILLE PATTERN DOTS-1478	[0E7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C9, 0x0061 };
    uint32_t const ces[9] = { 0x0E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_022)
{
    // 28C9 0041;	
    // (⣉) BRAILLE PATTERN DOTS-1478	[0E7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C9, 0x0041 };
    uint32_t const ces[9] = { 0x0E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_023)
{
    // 28C9 0062;	
    // (⣉) BRAILLE PATTERN DOTS-1478	[0E7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C9, 0x0062 };
    uint32_t const ces[9] = { 0x0E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_024)
{
    // 28CA 0021;	
    // (⣊) BRAILLE PATTERN DOTS-2478	[0E7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CA, 0x0021 };
    uint32_t const ces[9] = { 0x0E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_025)
{
    // 28CA 003F;	
    // (⣊) BRAILLE PATTERN DOTS-2478	[0E7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CA, 0x003F };
    uint32_t const ces[9] = { 0x0E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_026)
{
    // 28CA 0061;	
    // (⣊) BRAILLE PATTERN DOTS-2478	[0E7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CA, 0x0061 };
    uint32_t const ces[9] = { 0x0E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_027)
{
    // 28CA 0041;	
    // (⣊) BRAILLE PATTERN DOTS-2478	[0E7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CA, 0x0041 };
    uint32_t const ces[9] = { 0x0E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_028)
{
    // 28CA 0062;	
    // (⣊) BRAILLE PATTERN DOTS-2478	[0E7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CA, 0x0062 };
    uint32_t const ces[9] = { 0x0E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_029)
{
    // 28CB 0021;	
    // (⣋) BRAILLE PATTERN DOTS-12478	[0E7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CB, 0x0021 };
    uint32_t const ces[9] = { 0x0E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_030)
{
    // 28CB 003F;	
    // (⣋) BRAILLE PATTERN DOTS-12478	[0E7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CB, 0x003F };
    uint32_t const ces[9] = { 0x0E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_031)
{
    // 28CB 0061;	
    // (⣋) BRAILLE PATTERN DOTS-12478	[0E7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CB, 0x0061 };
    uint32_t const ces[9] = { 0x0E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_032)
{
    // 28CB 0041;	
    // (⣋) BRAILLE PATTERN DOTS-12478	[0E7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CB, 0x0041 };
    uint32_t const ces[9] = { 0x0E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_033)
{
    // 28CB 0062;	
    // (⣋) BRAILLE PATTERN DOTS-12478	[0E7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CB, 0x0062 };
    uint32_t const ces[9] = { 0x0E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_034)
{
    // 28CC 0021;	
    // (⣌) BRAILLE PATTERN DOTS-3478	[0E80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CC, 0x0021 };
    uint32_t const ces[9] = { 0x0E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_035)
{
    // 28CC 003F;	
    // (⣌) BRAILLE PATTERN DOTS-3478	[0E80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CC, 0x003F };
    uint32_t const ces[9] = { 0x0E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_036)
{
    // 28CC 0061;	
    // (⣌) BRAILLE PATTERN DOTS-3478	[0E80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CC, 0x0061 };
    uint32_t const ces[9] = { 0x0E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_037)
{
    // 28CC 0041;	
    // (⣌) BRAILLE PATTERN DOTS-3478	[0E80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CC, 0x0041 };
    uint32_t const ces[9] = { 0x0E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_038)
{
    // 28CC 0062;	
    // (⣌) BRAILLE PATTERN DOTS-3478	[0E80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CC, 0x0062 };
    uint32_t const ces[9] = { 0x0E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_039)
{
    // 28CD 0021;	
    // (⣍) BRAILLE PATTERN DOTS-13478	[0E81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CD, 0x0021 };
    uint32_t const ces[9] = { 0x0E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_040)
{
    // 28CD 003F;	
    // (⣍) BRAILLE PATTERN DOTS-13478	[0E81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CD, 0x003F };
    uint32_t const ces[9] = { 0x0E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_041)
{
    // 28CD 0061;	
    // (⣍) BRAILLE PATTERN DOTS-13478	[0E81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CD, 0x0061 };
    uint32_t const ces[9] = { 0x0E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_042)
{
    // 28CD 0041;	
    // (⣍) BRAILLE PATTERN DOTS-13478	[0E81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CD, 0x0041 };
    uint32_t const ces[9] = { 0x0E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_043)
{
    // 28CD 0062;	
    // (⣍) BRAILLE PATTERN DOTS-13478	[0E81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CD, 0x0062 };
    uint32_t const ces[9] = { 0x0E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_044)
{
    // 28CE 0021;	
    // (⣎) BRAILLE PATTERN DOTS-23478	[0E82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CE, 0x0021 };
    uint32_t const ces[9] = { 0x0E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_045)
{
    // 28CE 003F;	
    // (⣎) BRAILLE PATTERN DOTS-23478	[0E82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CE, 0x003F };
    uint32_t const ces[9] = { 0x0E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_046)
{
    // 28CE 0061;	
    // (⣎) BRAILLE PATTERN DOTS-23478	[0E82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CE, 0x0061 };
    uint32_t const ces[9] = { 0x0E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_047)
{
    // 28CE 0041;	
    // (⣎) BRAILLE PATTERN DOTS-23478	[0E82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CE, 0x0041 };
    uint32_t const ces[9] = { 0x0E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_048)
{
    // 28CE 0062;	
    // (⣎) BRAILLE PATTERN DOTS-23478	[0E82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CE, 0x0062 };
    uint32_t const ces[9] = { 0x0E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_049)
{
    // 28CF 0021;	
    // (⣏) BRAILLE PATTERN DOTS-123478	[0E83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CF, 0x0021 };
    uint32_t const ces[9] = { 0x0E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_050)
{
    // 28CF 003F;	
    // (⣏) BRAILLE PATTERN DOTS-123478	[0E83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CF, 0x003F };
    uint32_t const ces[9] = { 0x0E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_051)
{
    // 28CF 0061;	
    // (⣏) BRAILLE PATTERN DOTS-123478	[0E83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CF, 0x0061 };
    uint32_t const ces[9] = { 0x0E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_052)
{
    // 28CF 0041;	
    // (⣏) BRAILLE PATTERN DOTS-123478	[0E83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28CF, 0x0041 };
    uint32_t const ces[9] = { 0x0E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_053)
{
    // 28CF 0062;	
    // (⣏) BRAILLE PATTERN DOTS-123478	[0E83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28CF, 0x0062 };
    uint32_t const ces[9] = { 0x0E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_054)
{
    // 28D0 0021;	
    // (⣐) BRAILLE PATTERN DOTS-578	[0E84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D0, 0x0021 };
    uint32_t const ces[9] = { 0x0E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_055)
{
    // 28D0 003F;	
    // (⣐) BRAILLE PATTERN DOTS-578	[0E84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D0, 0x003F };
    uint32_t const ces[9] = { 0x0E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_056)
{
    // 28D0 0061;	
    // (⣐) BRAILLE PATTERN DOTS-578	[0E84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D0, 0x0061 };
    uint32_t const ces[9] = { 0x0E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_057)
{
    // 28D0 0041;	
    // (⣐) BRAILLE PATTERN DOTS-578	[0E84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D0, 0x0041 };
    uint32_t const ces[9] = { 0x0E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_058)
{
    // 28D0 0062;	
    // (⣐) BRAILLE PATTERN DOTS-578	[0E84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D0, 0x0062 };
    uint32_t const ces[9] = { 0x0E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_059)
{
    // 28D1 0021;	
    // (⣑) BRAILLE PATTERN DOTS-1578	[0E85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D1, 0x0021 };
    uint32_t const ces[9] = { 0x0E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_060)
{
    // 28D1 003F;	
    // (⣑) BRAILLE PATTERN DOTS-1578	[0E85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D1, 0x003F };
    uint32_t const ces[9] = { 0x0E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_061)
{
    // 28D1 0061;	
    // (⣑) BRAILLE PATTERN DOTS-1578	[0E85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D1, 0x0061 };
    uint32_t const ces[9] = { 0x0E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_062)
{
    // 28D1 0041;	
    // (⣑) BRAILLE PATTERN DOTS-1578	[0E85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D1, 0x0041 };
    uint32_t const ces[9] = { 0x0E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_063)
{
    // 28D1 0062;	
    // (⣑) BRAILLE PATTERN DOTS-1578	[0E85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D1, 0x0062 };
    uint32_t const ces[9] = { 0x0E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_064)
{
    // 28D2 0021;	
    // (⣒) BRAILLE PATTERN DOTS-2578	[0E86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D2, 0x0021 };
    uint32_t const ces[9] = { 0x0E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_065)
{
    // 28D2 003F;	
    // (⣒) BRAILLE PATTERN DOTS-2578	[0E86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D2, 0x003F };
    uint32_t const ces[9] = { 0x0E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_066)
{
    // 28D2 0061;	
    // (⣒) BRAILLE PATTERN DOTS-2578	[0E86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D2, 0x0061 };
    uint32_t const ces[9] = { 0x0E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_067)
{
    // 28D2 0041;	
    // (⣒) BRAILLE PATTERN DOTS-2578	[0E86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D2, 0x0041 };
    uint32_t const ces[9] = { 0x0E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_068)
{
    // 28D2 0062;	
    // (⣒) BRAILLE PATTERN DOTS-2578	[0E86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D2, 0x0062 };
    uint32_t const ces[9] = { 0x0E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_069)
{
    // 28D3 0021;	
    // (⣓) BRAILLE PATTERN DOTS-12578	[0E87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D3, 0x0021 };
    uint32_t const ces[9] = { 0x0E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_070)
{
    // 28D3 003F;	
    // (⣓) BRAILLE PATTERN DOTS-12578	[0E87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D3, 0x003F };
    uint32_t const ces[9] = { 0x0E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_071)
{
    // 28D3 0061;	
    // (⣓) BRAILLE PATTERN DOTS-12578	[0E87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D3, 0x0061 };
    uint32_t const ces[9] = { 0x0E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_072)
{
    // 28D3 0041;	
    // (⣓) BRAILLE PATTERN DOTS-12578	[0E87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D3, 0x0041 };
    uint32_t const ces[9] = { 0x0E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_073)
{
    // 28D3 0062;	
    // (⣓) BRAILLE PATTERN DOTS-12578	[0E87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D3, 0x0062 };
    uint32_t const ces[9] = { 0x0E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_074)
{
    // 28D4 0021;	
    // (⣔) BRAILLE PATTERN DOTS-3578	[0E88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D4, 0x0021 };
    uint32_t const ces[9] = { 0x0E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_075)
{
    // 28D4 003F;	
    // (⣔) BRAILLE PATTERN DOTS-3578	[0E88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D4, 0x003F };
    uint32_t const ces[9] = { 0x0E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_076)
{
    // 28D4 0061;	
    // (⣔) BRAILLE PATTERN DOTS-3578	[0E88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D4, 0x0061 };
    uint32_t const ces[9] = { 0x0E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_077)
{
    // 28D4 0041;	
    // (⣔) BRAILLE PATTERN DOTS-3578	[0E88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D4, 0x0041 };
    uint32_t const ces[9] = { 0x0E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_078)
{
    // 28D4 0062;	
    // (⣔) BRAILLE PATTERN DOTS-3578	[0E88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D4, 0x0062 };
    uint32_t const ces[9] = { 0x0E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_079)
{
    // 28D5 0021;	
    // (⣕) BRAILLE PATTERN DOTS-13578	[0E89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D5, 0x0021 };
    uint32_t const ces[9] = { 0x0E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_080)
{
    // 28D5 003F;	
    // (⣕) BRAILLE PATTERN DOTS-13578	[0E89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D5, 0x003F };
    uint32_t const ces[9] = { 0x0E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_081)
{
    // 28D5 0061;	
    // (⣕) BRAILLE PATTERN DOTS-13578	[0E89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D5, 0x0061 };
    uint32_t const ces[9] = { 0x0E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_082)
{
    // 28D5 0041;	
    // (⣕) BRAILLE PATTERN DOTS-13578	[0E89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D5, 0x0041 };
    uint32_t const ces[9] = { 0x0E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_083)
{
    // 28D5 0062;	
    // (⣕) BRAILLE PATTERN DOTS-13578	[0E89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D5, 0x0062 };
    uint32_t const ces[9] = { 0x0E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_084)
{
    // 28D6 0021;	
    // (⣖) BRAILLE PATTERN DOTS-23578	[0E8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D6, 0x0021 };
    uint32_t const ces[9] = { 0x0E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_085)
{
    // 28D6 003F;	
    // (⣖) BRAILLE PATTERN DOTS-23578	[0E8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D6, 0x003F };
    uint32_t const ces[9] = { 0x0E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_086)
{
    // 28D6 0061;	
    // (⣖) BRAILLE PATTERN DOTS-23578	[0E8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D6, 0x0061 };
    uint32_t const ces[9] = { 0x0E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_087)
{
    // 28D6 0041;	
    // (⣖) BRAILLE PATTERN DOTS-23578	[0E8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D6, 0x0041 };
    uint32_t const ces[9] = { 0x0E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_088)
{
    // 28D6 0062;	
    // (⣖) BRAILLE PATTERN DOTS-23578	[0E8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D6, 0x0062 };
    uint32_t const ces[9] = { 0x0E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_089)
{
    // 28D7 0021;	
    // (⣗) BRAILLE PATTERN DOTS-123578	[0E8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D7, 0x0021 };
    uint32_t const ces[9] = { 0x0E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_090)
{
    // 28D7 003F;	
    // (⣗) BRAILLE PATTERN DOTS-123578	[0E8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D7, 0x003F };
    uint32_t const ces[9] = { 0x0E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_091)
{
    // 28D7 0061;	
    // (⣗) BRAILLE PATTERN DOTS-123578	[0E8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D7, 0x0061 };
    uint32_t const ces[9] = { 0x0E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_092)
{
    // 28D7 0041;	
    // (⣗) BRAILLE PATTERN DOTS-123578	[0E8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D7, 0x0041 };
    uint32_t const ces[9] = { 0x0E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_093)
{
    // 28D7 0062;	
    // (⣗) BRAILLE PATTERN DOTS-123578	[0E8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D7, 0x0062 };
    uint32_t const ces[9] = { 0x0E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_094)
{
    // 28D8 0021;	
    // (⣘) BRAILLE PATTERN DOTS-4578	[0E8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D8, 0x0021 };
    uint32_t const ces[9] = { 0x0E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_095)
{
    // 28D8 003F;	
    // (⣘) BRAILLE PATTERN DOTS-4578	[0E8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D8, 0x003F };
    uint32_t const ces[9] = { 0x0E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_096)
{
    // 28D8 0061;	
    // (⣘) BRAILLE PATTERN DOTS-4578	[0E8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D8, 0x0061 };
    uint32_t const ces[9] = { 0x0E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_097)
{
    // 28D8 0041;	
    // (⣘) BRAILLE PATTERN DOTS-4578	[0E8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D8, 0x0041 };
    uint32_t const ces[9] = { 0x0E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_098)
{
    // 28D8 0062;	
    // (⣘) BRAILLE PATTERN DOTS-4578	[0E8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D8, 0x0062 };
    uint32_t const ces[9] = { 0x0E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_099)
{
    // 28D9 0021;	
    // (⣙) BRAILLE PATTERN DOTS-14578	[0E8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D9, 0x0021 };
    uint32_t const ces[9] = { 0x0E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_100)
{
    // 28D9 003F;	
    // (⣙) BRAILLE PATTERN DOTS-14578	[0E8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D9, 0x003F };
    uint32_t const ces[9] = { 0x0E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_101)
{
    // 28D9 0061;	
    // (⣙) BRAILLE PATTERN DOTS-14578	[0E8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D9, 0x0061 };
    uint32_t const ces[9] = { 0x0E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_102)
{
    // 28D9 0041;	
    // (⣙) BRAILLE PATTERN DOTS-14578	[0E8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28D9, 0x0041 };
    uint32_t const ces[9] = { 0x0E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_103)
{
    // 28D9 0062;	
    // (⣙) BRAILLE PATTERN DOTS-14578	[0E8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28D9, 0x0062 };
    uint32_t const ces[9] = { 0x0E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_104)
{
    // 28DA 0021;	
    // (⣚) BRAILLE PATTERN DOTS-24578	[0E8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DA, 0x0021 };
    uint32_t const ces[9] = { 0x0E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_105)
{
    // 28DA 003F;	
    // (⣚) BRAILLE PATTERN DOTS-24578	[0E8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DA, 0x003F };
    uint32_t const ces[9] = { 0x0E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_106)
{
    // 28DA 0061;	
    // (⣚) BRAILLE PATTERN DOTS-24578	[0E8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DA, 0x0061 };
    uint32_t const ces[9] = { 0x0E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_107)
{
    // 28DA 0041;	
    // (⣚) BRAILLE PATTERN DOTS-24578	[0E8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DA, 0x0041 };
    uint32_t const ces[9] = { 0x0E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_108)
{
    // 28DA 0062;	
    // (⣚) BRAILLE PATTERN DOTS-24578	[0E8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DA, 0x0062 };
    uint32_t const ces[9] = { 0x0E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_109)
{
    // 28DB 0021;	
    // (⣛) BRAILLE PATTERN DOTS-124578	[0E8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DB, 0x0021 };
    uint32_t const ces[9] = { 0x0E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_110)
{
    // 28DB 003F;	
    // (⣛) BRAILLE PATTERN DOTS-124578	[0E8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DB, 0x003F };
    uint32_t const ces[9] = { 0x0E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_111)
{
    // 28DB 0061;	
    // (⣛) BRAILLE PATTERN DOTS-124578	[0E8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DB, 0x0061 };
    uint32_t const ces[9] = { 0x0E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_112)
{
    // 28DB 0041;	
    // (⣛) BRAILLE PATTERN DOTS-124578	[0E8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DB, 0x0041 };
    uint32_t const ces[9] = { 0x0E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_113)
{
    // 28DB 0062;	
    // (⣛) BRAILLE PATTERN DOTS-124578	[0E8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DB, 0x0062 };
    uint32_t const ces[9] = { 0x0E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_114)
{
    // 28DC 0021;	
    // (⣜) BRAILLE PATTERN DOTS-34578	[0E90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DC, 0x0021 };
    uint32_t const ces[9] = { 0x0E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_115)
{
    // 28DC 003F;	
    // (⣜) BRAILLE PATTERN DOTS-34578	[0E90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DC, 0x003F };
    uint32_t const ces[9] = { 0x0E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_116)
{
    // 28DC 0061;	
    // (⣜) BRAILLE PATTERN DOTS-34578	[0E90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DC, 0x0061 };
    uint32_t const ces[9] = { 0x0E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_117)
{
    // 28DC 0041;	
    // (⣜) BRAILLE PATTERN DOTS-34578	[0E90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DC, 0x0041 };
    uint32_t const ces[9] = { 0x0E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_118)
{
    // 28DC 0062;	
    // (⣜) BRAILLE PATTERN DOTS-34578	[0E90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DC, 0x0062 };
    uint32_t const ces[9] = { 0x0E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_119)
{
    // 28DD 0021;	
    // (⣝) BRAILLE PATTERN DOTS-134578	[0E91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DD, 0x0021 };
    uint32_t const ces[9] = { 0x0E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_120)
{
    // 28DD 003F;	
    // (⣝) BRAILLE PATTERN DOTS-134578	[0E91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DD, 0x003F };
    uint32_t const ces[9] = { 0x0E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_121)
{
    // 28DD 0061;	
    // (⣝) BRAILLE PATTERN DOTS-134578	[0E91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DD, 0x0061 };
    uint32_t const ces[9] = { 0x0E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_122)
{
    // 28DD 0041;	
    // (⣝) BRAILLE PATTERN DOTS-134578	[0E91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DD, 0x0041 };
    uint32_t const ces[9] = { 0x0E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_123)
{
    // 28DD 0062;	
    // (⣝) BRAILLE PATTERN DOTS-134578	[0E91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DD, 0x0062 };
    uint32_t const ces[9] = { 0x0E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_124)
{
    // 28DE 0021;	
    // (⣞) BRAILLE PATTERN DOTS-234578	[0E92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DE, 0x0021 };
    uint32_t const ces[9] = { 0x0E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_125)
{
    // 28DE 003F;	
    // (⣞) BRAILLE PATTERN DOTS-234578	[0E92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DE, 0x003F };
    uint32_t const ces[9] = { 0x0E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_126)
{
    // 28DE 0061;	
    // (⣞) BRAILLE PATTERN DOTS-234578	[0E92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DE, 0x0061 };
    uint32_t const ces[9] = { 0x0E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_127)
{
    // 28DE 0041;	
    // (⣞) BRAILLE PATTERN DOTS-234578	[0E92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DE, 0x0041 };
    uint32_t const ces[9] = { 0x0E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_128)
{
    // 28DE 0062;	
    // (⣞) BRAILLE PATTERN DOTS-234578	[0E92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DE, 0x0062 };
    uint32_t const ces[9] = { 0x0E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_129)
{
    // 28DF 0021;	
    // (⣟) BRAILLE PATTERN DOTS-1234578	[0E93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DF, 0x0021 };
    uint32_t const ces[9] = { 0x0E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_130)
{
    // 28DF 003F;	
    // (⣟) BRAILLE PATTERN DOTS-1234578	[0E93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DF, 0x003F };
    uint32_t const ces[9] = { 0x0E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_131)
{
    // 28DF 0061;	
    // (⣟) BRAILLE PATTERN DOTS-1234578	[0E93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DF, 0x0061 };
    uint32_t const ces[9] = { 0x0E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_132)
{
    // 28DF 0041;	
    // (⣟) BRAILLE PATTERN DOTS-1234578	[0E93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28DF, 0x0041 };
    uint32_t const ces[9] = { 0x0E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_133)
{
    // 28DF 0062;	
    // (⣟) BRAILLE PATTERN DOTS-1234578	[0E93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28DF, 0x0062 };
    uint32_t const ces[9] = { 0x0E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_134)
{
    // 28E0 0021;	
    // (⣠) BRAILLE PATTERN DOTS-678	[0E94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E0, 0x0021 };
    uint32_t const ces[9] = { 0x0E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_135)
{
    // 28E0 003F;	
    // (⣠) BRAILLE PATTERN DOTS-678	[0E94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E0, 0x003F };
    uint32_t const ces[9] = { 0x0E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_136)
{
    // 28E0 0061;	
    // (⣠) BRAILLE PATTERN DOTS-678	[0E94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E0, 0x0061 };
    uint32_t const ces[9] = { 0x0E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_137)
{
    // 28E0 0041;	
    // (⣠) BRAILLE PATTERN DOTS-678	[0E94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E0, 0x0041 };
    uint32_t const ces[9] = { 0x0E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_138)
{
    // 28E0 0062;	
    // (⣠) BRAILLE PATTERN DOTS-678	[0E94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E0, 0x0062 };
    uint32_t const ces[9] = { 0x0E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_139)
{
    // 28E1 0021;	
    // (⣡) BRAILLE PATTERN DOTS-1678	[0E95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E1, 0x0021 };
    uint32_t const ces[9] = { 0x0E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_140)
{
    // 28E1 003F;	
    // (⣡) BRAILLE PATTERN DOTS-1678	[0E95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E1, 0x003F };
    uint32_t const ces[9] = { 0x0E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_141)
{
    // 28E1 0061;	
    // (⣡) BRAILLE PATTERN DOTS-1678	[0E95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E1, 0x0061 };
    uint32_t const ces[9] = { 0x0E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_142)
{
    // 28E1 0041;	
    // (⣡) BRAILLE PATTERN DOTS-1678	[0E95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E1, 0x0041 };
    uint32_t const ces[9] = { 0x0E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_143)
{
    // 28E1 0062;	
    // (⣡) BRAILLE PATTERN DOTS-1678	[0E95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E1, 0x0062 };
    uint32_t const ces[9] = { 0x0E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_144)
{
    // 28E2 0021;	
    // (⣢) BRAILLE PATTERN DOTS-2678	[0E96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E2, 0x0021 };
    uint32_t const ces[9] = { 0x0E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_145)
{
    // 28E2 003F;	
    // (⣢) BRAILLE PATTERN DOTS-2678	[0E96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E2, 0x003F };
    uint32_t const ces[9] = { 0x0E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_146)
{
    // 28E2 0061;	
    // (⣢) BRAILLE PATTERN DOTS-2678	[0E96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E2, 0x0061 };
    uint32_t const ces[9] = { 0x0E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_147)
{
    // 28E2 0041;	
    // (⣢) BRAILLE PATTERN DOTS-2678	[0E96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E2, 0x0041 };
    uint32_t const ces[9] = { 0x0E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_148)
{
    // 28E2 0062;	
    // (⣢) BRAILLE PATTERN DOTS-2678	[0E96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E2, 0x0062 };
    uint32_t const ces[9] = { 0x0E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_149)
{
    // 28E3 0021;	
    // (⣣) BRAILLE PATTERN DOTS-12678	[0E97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E3, 0x0021 };
    uint32_t const ces[9] = { 0x0E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_150)
{
    // 28E3 003F;	
    // (⣣) BRAILLE PATTERN DOTS-12678	[0E97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E3, 0x003F };
    uint32_t const ces[9] = { 0x0E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_151)
{
    // 28E3 0061;	
    // (⣣) BRAILLE PATTERN DOTS-12678	[0E97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E3, 0x0061 };
    uint32_t const ces[9] = { 0x0E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_152)
{
    // 28E3 0041;	
    // (⣣) BRAILLE PATTERN DOTS-12678	[0E97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E3, 0x0041 };
    uint32_t const ces[9] = { 0x0E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_153)
{
    // 28E3 0062;	
    // (⣣) BRAILLE PATTERN DOTS-12678	[0E97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E3, 0x0062 };
    uint32_t const ces[9] = { 0x0E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_154)
{
    // 28E4 0021;	
    // (⣤) BRAILLE PATTERN DOTS-3678	[0E98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E4, 0x0021 };
    uint32_t const ces[9] = { 0x0E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_155)
{
    // 28E4 003F;	
    // (⣤) BRAILLE PATTERN DOTS-3678	[0E98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E4, 0x003F };
    uint32_t const ces[9] = { 0x0E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_156)
{
    // 28E4 0061;	
    // (⣤) BRAILLE PATTERN DOTS-3678	[0E98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E4, 0x0061 };
    uint32_t const ces[9] = { 0x0E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_157)
{
    // 28E4 0041;	
    // (⣤) BRAILLE PATTERN DOTS-3678	[0E98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E4, 0x0041 };
    uint32_t const ces[9] = { 0x0E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_158)
{
    // 28E4 0062;	
    // (⣤) BRAILLE PATTERN DOTS-3678	[0E98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E4, 0x0062 };
    uint32_t const ces[9] = { 0x0E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_159)
{
    // 28E5 0021;	
    // (⣥) BRAILLE PATTERN DOTS-13678	[0E99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E5, 0x0021 };
    uint32_t const ces[9] = { 0x0E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_160)
{
    // 28E5 003F;	
    // (⣥) BRAILLE PATTERN DOTS-13678	[0E99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E5, 0x003F };
    uint32_t const ces[9] = { 0x0E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_161)
{
    // 28E5 0061;	
    // (⣥) BRAILLE PATTERN DOTS-13678	[0E99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E5, 0x0061 };
    uint32_t const ces[9] = { 0x0E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_162)
{
    // 28E5 0041;	
    // (⣥) BRAILLE PATTERN DOTS-13678	[0E99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E5, 0x0041 };
    uint32_t const ces[9] = { 0x0E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_163)
{
    // 28E5 0062;	
    // (⣥) BRAILLE PATTERN DOTS-13678	[0E99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E5, 0x0062 };
    uint32_t const ces[9] = { 0x0E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_164)
{
    // 28E6 0021;	
    // (⣦) BRAILLE PATTERN DOTS-23678	[0E9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E6, 0x0021 };
    uint32_t const ces[9] = { 0x0E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_165)
{
    // 28E6 003F;	
    // (⣦) BRAILLE PATTERN DOTS-23678	[0E9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E6, 0x003F };
    uint32_t const ces[9] = { 0x0E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_166)
{
    // 28E6 0061;	
    // (⣦) BRAILLE PATTERN DOTS-23678	[0E9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E6, 0x0061 };
    uint32_t const ces[9] = { 0x0E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_167)
{
    // 28E6 0041;	
    // (⣦) BRAILLE PATTERN DOTS-23678	[0E9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E6, 0x0041 };
    uint32_t const ces[9] = { 0x0E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_168)
{
    // 28E6 0062;	
    // (⣦) BRAILLE PATTERN DOTS-23678	[0E9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E6, 0x0062 };
    uint32_t const ces[9] = { 0x0E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_169)
{
    // 28E7 0021;	
    // (⣧) BRAILLE PATTERN DOTS-123678	[0E9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E7, 0x0021 };
    uint32_t const ces[9] = { 0x0E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_170)
{
    // 28E7 003F;	
    // (⣧) BRAILLE PATTERN DOTS-123678	[0E9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E7, 0x003F };
    uint32_t const ces[9] = { 0x0E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_171)
{
    // 28E7 0061;	
    // (⣧) BRAILLE PATTERN DOTS-123678	[0E9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E7, 0x0061 };
    uint32_t const ces[9] = { 0x0E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_172)
{
    // 28E7 0041;	
    // (⣧) BRAILLE PATTERN DOTS-123678	[0E9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E7, 0x0041 };
    uint32_t const ces[9] = { 0x0E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_173)
{
    // 28E7 0062;	
    // (⣧) BRAILLE PATTERN DOTS-123678	[0E9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E7, 0x0062 };
    uint32_t const ces[9] = { 0x0E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_174)
{
    // 28E8 0021;	
    // (⣨) BRAILLE PATTERN DOTS-4678	[0E9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E8, 0x0021 };
    uint32_t const ces[9] = { 0x0E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_175)
{
    // 28E8 003F;	
    // (⣨) BRAILLE PATTERN DOTS-4678	[0E9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E8, 0x003F };
    uint32_t const ces[9] = { 0x0E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_176)
{
    // 28E8 0061;	
    // (⣨) BRAILLE PATTERN DOTS-4678	[0E9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E8, 0x0061 };
    uint32_t const ces[9] = { 0x0E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_177)
{
    // 28E8 0041;	
    // (⣨) BRAILLE PATTERN DOTS-4678	[0E9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E8, 0x0041 };
    uint32_t const ces[9] = { 0x0E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_178)
{
    // 28E8 0062;	
    // (⣨) BRAILLE PATTERN DOTS-4678	[0E9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E8, 0x0062 };
    uint32_t const ces[9] = { 0x0E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_179)
{
    // 28E9 0021;	
    // (⣩) BRAILLE PATTERN DOTS-14678	[0E9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E9, 0x0021 };
    uint32_t const ces[9] = { 0x0E9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_180)
{
    // 28E9 003F;	
    // (⣩) BRAILLE PATTERN DOTS-14678	[0E9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E9, 0x003F };
    uint32_t const ces[9] = { 0x0E9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_181)
{
    // 28E9 0061;	
    // (⣩) BRAILLE PATTERN DOTS-14678	[0E9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E9, 0x0061 };
    uint32_t const ces[9] = { 0x0E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_182)
{
    // 28E9 0041;	
    // (⣩) BRAILLE PATTERN DOTS-14678	[0E9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28E9, 0x0041 };
    uint32_t const ces[9] = { 0x0E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_183)
{
    // 28E9 0062;	
    // (⣩) BRAILLE PATTERN DOTS-14678	[0E9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28E9, 0x0062 };
    uint32_t const ces[9] = { 0x0E9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_184)
{
    // 28EA 0021;	
    // (⣪) BRAILLE PATTERN DOTS-24678	[0E9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EA, 0x0021 };
    uint32_t const ces[9] = { 0x0E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_185)
{
    // 28EA 003F;	
    // (⣪) BRAILLE PATTERN DOTS-24678	[0E9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EA, 0x003F };
    uint32_t const ces[9] = { 0x0E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_186)
{
    // 28EA 0061;	
    // (⣪) BRAILLE PATTERN DOTS-24678	[0E9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EA, 0x0061 };
    uint32_t const ces[9] = { 0x0E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_187)
{
    // 28EA 0041;	
    // (⣪) BRAILLE PATTERN DOTS-24678	[0E9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28EA, 0x0041 };
    uint32_t const ces[9] = { 0x0E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_188)
{
    // 28EA 0062;	
    // (⣪) BRAILLE PATTERN DOTS-24678	[0E9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EA, 0x0062 };
    uint32_t const ces[9] = { 0x0E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_189)
{
    // 28EB 0021;	
    // (⣫) BRAILLE PATTERN DOTS-124678	[0E9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EB, 0x0021 };
    uint32_t const ces[9] = { 0x0E9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_190)
{
    // 28EB 003F;	
    // (⣫) BRAILLE PATTERN DOTS-124678	[0E9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EB, 0x003F };
    uint32_t const ces[9] = { 0x0E9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_191)
{
    // 28EB 0061;	
    // (⣫) BRAILLE PATTERN DOTS-124678	[0E9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EB, 0x0061 };
    uint32_t const ces[9] = { 0x0E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_192)
{
    // 28EB 0041;	
    // (⣫) BRAILLE PATTERN DOTS-124678	[0E9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28EB, 0x0041 };
    uint32_t const ces[9] = { 0x0E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_193)
{
    // 28EB 0062;	
    // (⣫) BRAILLE PATTERN DOTS-124678	[0E9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EB, 0x0062 };
    uint32_t const ces[9] = { 0x0E9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_194)
{
    // 28EC 0021;	
    // (⣬) BRAILLE PATTERN DOTS-34678	[0EA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EC, 0x0021 };
    uint32_t const ces[9] = { 0x0EA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_195)
{
    // 28EC 003F;	
    // (⣬) BRAILLE PATTERN DOTS-34678	[0EA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EC, 0x003F };
    uint32_t const ces[9] = { 0x0EA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_196)
{
    // 28EC 0061;	
    // (⣬) BRAILLE PATTERN DOTS-34678	[0EA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EC, 0x0061 };
    uint32_t const ces[9] = { 0x0EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_197)
{
    // 28EC 0041;	
    // (⣬) BRAILLE PATTERN DOTS-34678	[0EA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28EC, 0x0041 };
    uint32_t const ces[9] = { 0x0EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_198)
{
    // 28EC 0062;	
    // (⣬) BRAILLE PATTERN DOTS-34678	[0EA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EC, 0x0062 };
    uint32_t const ces[9] = { 0x0EA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_199)
{
    // 28ED 0021;	
    // (⣭) BRAILLE PATTERN DOTS-134678	[0EA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28ED, 0x0021 };
    uint32_t const ces[9] = { 0x0EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_200)
{
    // 28ED 003F;	
    // (⣭) BRAILLE PATTERN DOTS-134678	[0EA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28ED, 0x003F };
    uint32_t const ces[9] = { 0x0EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_201)
{
    // 28ED 0061;	
    // (⣭) BRAILLE PATTERN DOTS-134678	[0EA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28ED, 0x0061 };
    uint32_t const ces[9] = { 0x0EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_202)
{
    // 28ED 0041;	
    // (⣭) BRAILLE PATTERN DOTS-134678	[0EA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28ED, 0x0041 };
    uint32_t const ces[9] = { 0x0EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_203)
{
    // 28ED 0062;	
    // (⣭) BRAILLE PATTERN DOTS-134678	[0EA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28ED, 0x0062 };
    uint32_t const ces[9] = { 0x0EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_204)
{
    // 28EE 0021;	
    // (⣮) BRAILLE PATTERN DOTS-234678	[0EA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EE, 0x0021 };
    uint32_t const ces[9] = { 0x0EA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_205)
{
    // 28EE 003F;	
    // (⣮) BRAILLE PATTERN DOTS-234678	[0EA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EE, 0x003F };
    uint32_t const ces[9] = { 0x0EA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_206)
{
    // 28EE 0061;	
    // (⣮) BRAILLE PATTERN DOTS-234678	[0EA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EE, 0x0061 };
    uint32_t const ces[9] = { 0x0EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_207)
{
    // 28EE 0041;	
    // (⣮) BRAILLE PATTERN DOTS-234678	[0EA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28EE, 0x0041 };
    uint32_t const ces[9] = { 0x0EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_208)
{
    // 28EE 0062;	
    // (⣮) BRAILLE PATTERN DOTS-234678	[0EA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EE, 0x0062 };
    uint32_t const ces[9] = { 0x0EA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_209)
{
    // 28EF 0021;	
    // (⣯) BRAILLE PATTERN DOTS-1234678	[0EA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EF, 0x0021 };
    uint32_t const ces[9] = { 0x0EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_210)
{
    // 28EF 003F;	
    // (⣯) BRAILLE PATTERN DOTS-1234678	[0EA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EF, 0x003F };
    uint32_t const ces[9] = { 0x0EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_211)
{
    // 28EF 0061;	
    // (⣯) BRAILLE PATTERN DOTS-1234678	[0EA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EF, 0x0061 };
    uint32_t const ces[9] = { 0x0EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_212)
{
    // 28EF 0041;	
    // (⣯) BRAILLE PATTERN DOTS-1234678	[0EA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28EF, 0x0041 };
    uint32_t const ces[9] = { 0x0EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_213)
{
    // 28EF 0062;	
    // (⣯) BRAILLE PATTERN DOTS-1234678	[0EA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28EF, 0x0062 };
    uint32_t const ces[9] = { 0x0EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_214)
{
    // 28F0 0021;	
    // (⣰) BRAILLE PATTERN DOTS-5678	[0EA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F0, 0x0021 };
    uint32_t const ces[9] = { 0x0EA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_215)
{
    // 28F0 003F;	
    // (⣰) BRAILLE PATTERN DOTS-5678	[0EA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F0, 0x003F };
    uint32_t const ces[9] = { 0x0EA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_216)
{
    // 28F0 0061;	
    // (⣰) BRAILLE PATTERN DOTS-5678	[0EA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F0, 0x0061 };
    uint32_t const ces[9] = { 0x0EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_217)
{
    // 28F0 0041;	
    // (⣰) BRAILLE PATTERN DOTS-5678	[0EA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F0, 0x0041 };
    uint32_t const ces[9] = { 0x0EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_218)
{
    // 28F0 0062;	
    // (⣰) BRAILLE PATTERN DOTS-5678	[0EA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F0, 0x0062 };
    uint32_t const ces[9] = { 0x0EA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_219)
{
    // 28F1 0021;	
    // (⣱) BRAILLE PATTERN DOTS-15678	[0EA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F1, 0x0021 };
    uint32_t const ces[9] = { 0x0EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_220)
{
    // 28F1 003F;	
    // (⣱) BRAILLE PATTERN DOTS-15678	[0EA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F1, 0x003F };
    uint32_t const ces[9] = { 0x0EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_221)
{
    // 28F1 0061;	
    // (⣱) BRAILLE PATTERN DOTS-15678	[0EA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F1, 0x0061 };
    uint32_t const ces[9] = { 0x0EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_222)
{
    // 28F1 0041;	
    // (⣱) BRAILLE PATTERN DOTS-15678	[0EA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F1, 0x0041 };
    uint32_t const ces[9] = { 0x0EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_223)
{
    // 28F1 0062;	
    // (⣱) BRAILLE PATTERN DOTS-15678	[0EA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F1, 0x0062 };
    uint32_t const ces[9] = { 0x0EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_224)
{
    // 28F2 0021;	
    // (⣲) BRAILLE PATTERN DOTS-25678	[0EA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F2, 0x0021 };
    uint32_t const ces[9] = { 0x0EA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_225)
{
    // 28F2 003F;	
    // (⣲) BRAILLE PATTERN DOTS-25678	[0EA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F2, 0x003F };
    uint32_t const ces[9] = { 0x0EA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_226)
{
    // 28F2 0061;	
    // (⣲) BRAILLE PATTERN DOTS-25678	[0EA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F2, 0x0061 };
    uint32_t const ces[9] = { 0x0EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_227)
{
    // 28F2 0041;	
    // (⣲) BRAILLE PATTERN DOTS-25678	[0EA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F2, 0x0041 };
    uint32_t const ces[9] = { 0x0EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_228)
{
    // 28F2 0062;	
    // (⣲) BRAILLE PATTERN DOTS-25678	[0EA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F2, 0x0062 };
    uint32_t const ces[9] = { 0x0EA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_229)
{
    // 28F3 0021;	
    // (⣳) BRAILLE PATTERN DOTS-125678	[0EA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F3, 0x0021 };
    uint32_t const ces[9] = { 0x0EA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_230)
{
    // 28F3 003F;	
    // (⣳) BRAILLE PATTERN DOTS-125678	[0EA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F3, 0x003F };
    uint32_t const ces[9] = { 0x0EA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_231)
{
    // 28F3 0061;	
    // (⣳) BRAILLE PATTERN DOTS-125678	[0EA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F3, 0x0061 };
    uint32_t const ces[9] = { 0x0EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_232)
{
    // 28F3 0041;	
    // (⣳) BRAILLE PATTERN DOTS-125678	[0EA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F3, 0x0041 };
    uint32_t const ces[9] = { 0x0EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_233)
{
    // 28F3 0062;	
    // (⣳) BRAILLE PATTERN DOTS-125678	[0EA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F3, 0x0062 };
    uint32_t const ces[9] = { 0x0EA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_234)
{
    // 28F4 0021;	
    // (⣴) BRAILLE PATTERN DOTS-35678	[0EA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F4, 0x0021 };
    uint32_t const ces[9] = { 0x0EA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_235)
{
    // 28F4 003F;	
    // (⣴) BRAILLE PATTERN DOTS-35678	[0EA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F4, 0x003F };
    uint32_t const ces[9] = { 0x0EA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_236)
{
    // 28F4 0061;	
    // (⣴) BRAILLE PATTERN DOTS-35678	[0EA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F4, 0x0061 };
    uint32_t const ces[9] = { 0x0EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_237)
{
    // 28F4 0041;	
    // (⣴) BRAILLE PATTERN DOTS-35678	[0EA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F4, 0x0041 };
    uint32_t const ces[9] = { 0x0EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_238)
{
    // 28F4 0062;	
    // (⣴) BRAILLE PATTERN DOTS-35678	[0EA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F4, 0x0062 };
    uint32_t const ces[9] = { 0x0EA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_239)
{
    // 28F5 0021;	
    // (⣵) BRAILLE PATTERN DOTS-135678	[0EA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F5, 0x0021 };
    uint32_t const ces[9] = { 0x0EA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_240)
{
    // 28F5 003F;	
    // (⣵) BRAILLE PATTERN DOTS-135678	[0EA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F5, 0x003F };
    uint32_t const ces[9] = { 0x0EA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_241)
{
    // 28F5 0061;	
    // (⣵) BRAILLE PATTERN DOTS-135678	[0EA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F5, 0x0061 };
    uint32_t const ces[9] = { 0x0EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_242)
{
    // 28F5 0041;	
    // (⣵) BRAILLE PATTERN DOTS-135678	[0EA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F5, 0x0041 };
    uint32_t const ces[9] = { 0x0EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_243)
{
    // 28F5 0062;	
    // (⣵) BRAILLE PATTERN DOTS-135678	[0EA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F5, 0x0062 };
    uint32_t const ces[9] = { 0x0EA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_244)
{
    // 28F6 0021;	
    // (⣶) BRAILLE PATTERN DOTS-235678	[0EAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F6, 0x0021 };
    uint32_t const ces[9] = { 0x0EAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_245)
{
    // 28F6 003F;	
    // (⣶) BRAILLE PATTERN DOTS-235678	[0EAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F6, 0x003F };
    uint32_t const ces[9] = { 0x0EAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_246)
{
    // 28F6 0061;	
    // (⣶) BRAILLE PATTERN DOTS-235678	[0EAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F6, 0x0061 };
    uint32_t const ces[9] = { 0x0EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_247)
{
    // 28F6 0041;	
    // (⣶) BRAILLE PATTERN DOTS-235678	[0EAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F6, 0x0041 };
    uint32_t const ces[9] = { 0x0EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_248)
{
    // 28F6 0062;	
    // (⣶) BRAILLE PATTERN DOTS-235678	[0EAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F6, 0x0062 };
    uint32_t const ces[9] = { 0x0EAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_249)
{
    // 28F7 0021;	
    // (⣷) BRAILLE PATTERN DOTS-1235678	[0EAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F7, 0x0021 };
    uint32_t const ces[9] = { 0x0EAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_250)
{
    // 28F7 003F;	
    // (⣷) BRAILLE PATTERN DOTS-1235678	[0EAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F7, 0x003F };
    uint32_t const ces[9] = { 0x0EAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_251)
{
    // 28F7 0061;	
    // (⣷) BRAILLE PATTERN DOTS-1235678	[0EAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F7, 0x0061 };
    uint32_t const ces[9] = { 0x0EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_252)
{
    // 28F7 0041;	
    // (⣷) BRAILLE PATTERN DOTS-1235678	[0EAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F7, 0x0041 };
    uint32_t const ces[9] = { 0x0EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_253)
{
    // 28F7 0062;	
    // (⣷) BRAILLE PATTERN DOTS-1235678	[0EAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F7, 0x0062 };
    uint32_t const ces[9] = { 0x0EAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_254)
{
    // 28F8 0021;	
    // (⣸) BRAILLE PATTERN DOTS-45678	[0EAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F8, 0x0021 };
    uint32_t const ces[9] = { 0x0EAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_255)
{
    // 28F8 003F;	
    // (⣸) BRAILLE PATTERN DOTS-45678	[0EAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F8, 0x003F };
    uint32_t const ces[9] = { 0x0EAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_256)
{
    // 28F8 0061;	
    // (⣸) BRAILLE PATTERN DOTS-45678	[0EAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F8, 0x0061 };
    uint32_t const ces[9] = { 0x0EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_257)
{
    // 28F8 0041;	
    // (⣸) BRAILLE PATTERN DOTS-45678	[0EAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F8, 0x0041 };
    uint32_t const ces[9] = { 0x0EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_258)
{
    // 28F8 0062;	
    // (⣸) BRAILLE PATTERN DOTS-45678	[0EAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F8, 0x0062 };
    uint32_t const ces[9] = { 0x0EAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_259)
{
    // 28F9 0021;	
    // (⣹) BRAILLE PATTERN DOTS-145678	[0EAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F9, 0x0021 };
    uint32_t const ces[9] = { 0x0EAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_260)
{
    // 28F9 003F;	
    // (⣹) BRAILLE PATTERN DOTS-145678	[0EAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F9, 0x003F };
    uint32_t const ces[9] = { 0x0EAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_261)
{
    // 28F9 0061;	
    // (⣹) BRAILLE PATTERN DOTS-145678	[0EAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F9, 0x0061 };
    uint32_t const ces[9] = { 0x0EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_262)
{
    // 28F9 0041;	
    // (⣹) BRAILLE PATTERN DOTS-145678	[0EAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28F9, 0x0041 };
    uint32_t const ces[9] = { 0x0EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_263)
{
    // 28F9 0062;	
    // (⣹) BRAILLE PATTERN DOTS-145678	[0EAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28F9, 0x0062 };
    uint32_t const ces[9] = { 0x0EAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_264)
{
    // 28FA 0021;	
    // (⣺) BRAILLE PATTERN DOTS-245678	[0EAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FA, 0x0021 };
    uint32_t const ces[9] = { 0x0EAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_265)
{
    // 28FA 003F;	
    // (⣺) BRAILLE PATTERN DOTS-245678	[0EAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FA, 0x003F };
    uint32_t const ces[9] = { 0x0EAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_266)
{
    // 28FA 0061;	
    // (⣺) BRAILLE PATTERN DOTS-245678	[0EAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FA, 0x0061 };
    uint32_t const ces[9] = { 0x0EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_267)
{
    // 28FA 0041;	
    // (⣺) BRAILLE PATTERN DOTS-245678	[0EAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FA, 0x0041 };
    uint32_t const ces[9] = { 0x0EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_268)
{
    // 28FA 0062;	
    // (⣺) BRAILLE PATTERN DOTS-245678	[0EAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FA, 0x0062 };
    uint32_t const ces[9] = { 0x0EAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_269)
{
    // 28FB 0021;	
    // (⣻) BRAILLE PATTERN DOTS-1245678	[0EAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FB, 0x0021 };
    uint32_t const ces[9] = { 0x0EAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_270)
{
    // 28FB 003F;	
    // (⣻) BRAILLE PATTERN DOTS-1245678	[0EAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FB, 0x003F };
    uint32_t const ces[9] = { 0x0EAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_271)
{
    // 28FB 0061;	
    // (⣻) BRAILLE PATTERN DOTS-1245678	[0EAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FB, 0x0061 };
    uint32_t const ces[9] = { 0x0EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_272)
{
    // 28FB 0041;	
    // (⣻) BRAILLE PATTERN DOTS-1245678	[0EAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FB, 0x0041 };
    uint32_t const ces[9] = { 0x0EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_273)
{
    // 28FB 0062;	
    // (⣻) BRAILLE PATTERN DOTS-1245678	[0EAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FB, 0x0062 };
    uint32_t const ces[9] = { 0x0EAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_274)
{
    // 28FC 0021;	
    // (⣼) BRAILLE PATTERN DOTS-345678	[0EB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FC, 0x0021 };
    uint32_t const ces[9] = { 0x0EB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_275)
{
    // 28FC 003F;	
    // (⣼) BRAILLE PATTERN DOTS-345678	[0EB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FC, 0x003F };
    uint32_t const ces[9] = { 0x0EB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_276)
{
    // 28FC 0061;	
    // (⣼) BRAILLE PATTERN DOTS-345678	[0EB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FC, 0x0061 };
    uint32_t const ces[9] = { 0x0EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_277)
{
    // 28FC 0041;	
    // (⣼) BRAILLE PATTERN DOTS-345678	[0EB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FC, 0x0041 };
    uint32_t const ces[9] = { 0x0EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_278)
{
    // 28FC 0062;	
    // (⣼) BRAILLE PATTERN DOTS-345678	[0EB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FC, 0x0062 };
    uint32_t const ces[9] = { 0x0EB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_279)
{
    // 28FD 0021;	
    // (⣽) BRAILLE PATTERN DOTS-1345678	[0EB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FD, 0x0021 };
    uint32_t const ces[9] = { 0x0EB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_280)
{
    // 28FD 003F;	
    // (⣽) BRAILLE PATTERN DOTS-1345678	[0EB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FD, 0x003F };
    uint32_t const ces[9] = { 0x0EB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_281)
{
    // 28FD 0061;	
    // (⣽) BRAILLE PATTERN DOTS-1345678	[0EB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FD, 0x0061 };
    uint32_t const ces[9] = { 0x0EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_282)
{
    // 28FD 0041;	
    // (⣽) BRAILLE PATTERN DOTS-1345678	[0EB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FD, 0x0041 };
    uint32_t const ces[9] = { 0x0EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_283)
{
    // 28FD 0062;	
    // (⣽) BRAILLE PATTERN DOTS-1345678	[0EB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FD, 0x0062 };
    uint32_t const ces[9] = { 0x0EB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_284)
{
    // 28FE 0021;	
    // (⣾) BRAILLE PATTERN DOTS-2345678	[0EB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FE, 0x0021 };
    uint32_t const ces[9] = { 0x0EB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_285)
{
    // 28FE 003F;	
    // (⣾) BRAILLE PATTERN DOTS-2345678	[0EB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FE, 0x003F };
    uint32_t const ces[9] = { 0x0EB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_286)
{
    // 28FE 0061;	
    // (⣾) BRAILLE PATTERN DOTS-2345678	[0EB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FE, 0x0061 };
    uint32_t const ces[9] = { 0x0EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_287)
{
    // 28FE 0041;	
    // (⣾) BRAILLE PATTERN DOTS-2345678	[0EB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FE, 0x0041 };
    uint32_t const ces[9] = { 0x0EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_288)
{
    // 28FE 0062;	
    // (⣾) BRAILLE PATTERN DOTS-2345678	[0EB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FE, 0x0062 };
    uint32_t const ces[9] = { 0x0EB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_289)
{
    // 28FF 0021;	
    // (⣿) BRAILLE PATTERN DOTS-12345678	[0EB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FF, 0x0021 };
    uint32_t const ces[9] = { 0x0EB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_290)
{
    // 28FF 003F;	
    // (⣿) BRAILLE PATTERN DOTS-12345678	[0EB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FF, 0x003F };
    uint32_t const ces[9] = { 0x0EB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_291)
{
    // 28FF 0061;	
    // (⣿) BRAILLE PATTERN DOTS-12345678	[0EB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FF, 0x0061 };
    uint32_t const ces[9] = { 0x0EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_292)
{
    // 28FF 0041;	
    // (⣿) BRAILLE PATTERN DOTS-12345678	[0EB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28FF, 0x0041 };
    uint32_t const ces[9] = { 0x0EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_293)
{
    // 28FF 0062;	
    // (⣿) BRAILLE PATTERN DOTS-12345678	[0EB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28FF, 0x0062 };
    uint32_t const ces[9] = { 0x0EB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_294)
{
    // 268A 0021;	
    // (⚊) MONOGRAM FOR YANG	[0EB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268A, 0x0021 };
    uint32_t const ces[9] = { 0x0EB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_295)
{
    // 268A 003F;	
    // (⚊) MONOGRAM FOR YANG	[0EB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268A, 0x003F };
    uint32_t const ces[9] = { 0x0EB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_296)
{
    // 268A 0061;	
    // (⚊) MONOGRAM FOR YANG	[0EB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268A, 0x0061 };
    uint32_t const ces[9] = { 0x0EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_297)
{
    // 268A 0041;	
    // (⚊) MONOGRAM FOR YANG	[0EB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268A, 0x0041 };
    uint32_t const ces[9] = { 0x0EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_298)
{
    // 268A 0062;	
    // (⚊) MONOGRAM FOR YANG	[0EB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268A, 0x0062 };
    uint32_t const ces[9] = { 0x0EB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_299)
{
    // 268B 0021;	
    // (⚋) MONOGRAM FOR YIN	[0EB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268B, 0x0021 };
    uint32_t const ces[9] = { 0x0EB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_300)
{
    // 268B 003F;	
    // (⚋) MONOGRAM FOR YIN	[0EB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268B, 0x003F };
    uint32_t const ces[9] = { 0x0EB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_301)
{
    // 268B 0061;	
    // (⚋) MONOGRAM FOR YIN	[0EB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268B, 0x0061 };
    uint32_t const ces[9] = { 0x0EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_302)
{
    // 268B 0041;	
    // (⚋) MONOGRAM FOR YIN	[0EB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268B, 0x0041 };
    uint32_t const ces[9] = { 0x0EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_303)
{
    // 268B 0062;	
    // (⚋) MONOGRAM FOR YIN	[0EB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268B, 0x0062 };
    uint32_t const ces[9] = { 0x0EB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_304)
{
    // 268C 0021;	
    // (⚌) DIGRAM FOR GREATER YANG	[0EB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268C, 0x0021 };
    uint32_t const ces[9] = { 0x0EB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_305)
{
    // 268C 003F;	
    // (⚌) DIGRAM FOR GREATER YANG	[0EB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268C, 0x003F };
    uint32_t const ces[9] = { 0x0EB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_306)
{
    // 268C 0061;	
    // (⚌) DIGRAM FOR GREATER YANG	[0EB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268C, 0x0061 };
    uint32_t const ces[9] = { 0x0EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_307)
{
    // 268C 0041;	
    // (⚌) DIGRAM FOR GREATER YANG	[0EB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268C, 0x0041 };
    uint32_t const ces[9] = { 0x0EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_308)
{
    // 268C 0062;	
    // (⚌) DIGRAM FOR GREATER YANG	[0EB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268C, 0x0062 };
    uint32_t const ces[9] = { 0x0EB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_309)
{
    // 268D 0021;	
    // (⚍) DIGRAM FOR LESSER YIN	[0EB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268D, 0x0021 };
    uint32_t const ces[9] = { 0x0EB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_310)
{
    // 268D 003F;	
    // (⚍) DIGRAM FOR LESSER YIN	[0EB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268D, 0x003F };
    uint32_t const ces[9] = { 0x0EB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_311)
{
    // 268D 0061;	
    // (⚍) DIGRAM FOR LESSER YIN	[0EB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268D, 0x0061 };
    uint32_t const ces[9] = { 0x0EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_312)
{
    // 268D 0041;	
    // (⚍) DIGRAM FOR LESSER YIN	[0EB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268D, 0x0041 };
    uint32_t const ces[9] = { 0x0EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_313)
{
    // 268D 0062;	
    // (⚍) DIGRAM FOR LESSER YIN	[0EB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268D, 0x0062 };
    uint32_t const ces[9] = { 0x0EB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_314)
{
    // 268E 0021;	
    // (⚎) DIGRAM FOR LESSER YANG	[0EB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268E, 0x0021 };
    uint32_t const ces[9] = { 0x0EB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_315)
{
    // 268E 003F;	
    // (⚎) DIGRAM FOR LESSER YANG	[0EB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268E, 0x003F };
    uint32_t const ces[9] = { 0x0EB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_316)
{
    // 268E 0061;	
    // (⚎) DIGRAM FOR LESSER YANG	[0EB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268E, 0x0061 };
    uint32_t const ces[9] = { 0x0EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_317)
{
    // 268E 0041;	
    // (⚎) DIGRAM FOR LESSER YANG	[0EB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268E, 0x0041 };
    uint32_t const ces[9] = { 0x0EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_318)
{
    // 268E 0062;	
    // (⚎) DIGRAM FOR LESSER YANG	[0EB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268E, 0x0062 };
    uint32_t const ces[9] = { 0x0EB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_319)
{
    // 268F 0021;	
    // (⚏) DIGRAM FOR GREATER YIN	[0EB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268F, 0x0021 };
    uint32_t const ces[9] = { 0x0EB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_320)
{
    // 268F 003F;	
    // (⚏) DIGRAM FOR GREATER YIN	[0EB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268F, 0x003F };
    uint32_t const ces[9] = { 0x0EB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_321)
{
    // 268F 0061;	
    // (⚏) DIGRAM FOR GREATER YIN	[0EB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268F, 0x0061 };
    uint32_t const ces[9] = { 0x0EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_322)
{
    // 268F 0041;	
    // (⚏) DIGRAM FOR GREATER YIN	[0EB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x268F, 0x0041 };
    uint32_t const ces[9] = { 0x0EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_323)
{
    // 268F 0062;	
    // (⚏) DIGRAM FOR GREATER YIN	[0EB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x268F, 0x0062 };
    uint32_t const ces[9] = { 0x0EB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_324)
{
    // 2630 0021;	
    // (☰) TRIGRAM FOR HEAVEN	[0EBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2630, 0x0021 };
    uint32_t const ces[9] = { 0x0EBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_325)
{
    // 2630 003F;	
    // (☰) TRIGRAM FOR HEAVEN	[0EBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2630, 0x003F };
    uint32_t const ces[9] = { 0x0EBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_326)
{
    // 2630 0061;	
    // (☰) TRIGRAM FOR HEAVEN	[0EBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2630, 0x0061 };
    uint32_t const ces[9] = { 0x0EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_327)
{
    // 2630 0041;	
    // (☰) TRIGRAM FOR HEAVEN	[0EBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2630, 0x0041 };
    uint32_t const ces[9] = { 0x0EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_328)
{
    // 2630 0062;	
    // (☰) TRIGRAM FOR HEAVEN	[0EBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2630, 0x0062 };
    uint32_t const ces[9] = { 0x0EBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_329)
{
    // 2631 0021;	
    // (☱) TRIGRAM FOR LAKE	[0EBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2631, 0x0021 };
    uint32_t const ces[9] = { 0x0EBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_330)
{
    // 2631 003F;	
    // (☱) TRIGRAM FOR LAKE	[0EBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2631, 0x003F };
    uint32_t const ces[9] = { 0x0EBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_331)
{
    // 2631 0061;	
    // (☱) TRIGRAM FOR LAKE	[0EBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2631, 0x0061 };
    uint32_t const ces[9] = { 0x0EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_332)
{
    // 2631 0041;	
    // (☱) TRIGRAM FOR LAKE	[0EBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2631, 0x0041 };
    uint32_t const ces[9] = { 0x0EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_333)
{
    // 2631 0062;	
    // (☱) TRIGRAM FOR LAKE	[0EBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2631, 0x0062 };
    uint32_t const ces[9] = { 0x0EBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_334)
{
    // 2632 0021;	
    // (☲) TRIGRAM FOR FIRE	[0EBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2632, 0x0021 };
    uint32_t const ces[9] = { 0x0EBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_335)
{
    // 2632 003F;	
    // (☲) TRIGRAM FOR FIRE	[0EBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2632, 0x003F };
    uint32_t const ces[9] = { 0x0EBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_336)
{
    // 2632 0061;	
    // (☲) TRIGRAM FOR FIRE	[0EBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2632, 0x0061 };
    uint32_t const ces[9] = { 0x0EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_337)
{
    // 2632 0041;	
    // (☲) TRIGRAM FOR FIRE	[0EBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2632, 0x0041 };
    uint32_t const ces[9] = { 0x0EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_338)
{
    // 2632 0062;	
    // (☲) TRIGRAM FOR FIRE	[0EBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2632, 0x0062 };
    uint32_t const ces[9] = { 0x0EBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_339)
{
    // 2633 0021;	
    // (☳) TRIGRAM FOR THUNDER	[0EBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2633, 0x0021 };
    uint32_t const ces[9] = { 0x0EBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_340)
{
    // 2633 003F;	
    // (☳) TRIGRAM FOR THUNDER	[0EBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2633, 0x003F };
    uint32_t const ces[9] = { 0x0EBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_341)
{
    // 2633 0061;	
    // (☳) TRIGRAM FOR THUNDER	[0EBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2633, 0x0061 };
    uint32_t const ces[9] = { 0x0EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_342)
{
    // 2633 0041;	
    // (☳) TRIGRAM FOR THUNDER	[0EBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2633, 0x0041 };
    uint32_t const ces[9] = { 0x0EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_343)
{
    // 2633 0062;	
    // (☳) TRIGRAM FOR THUNDER	[0EBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2633, 0x0062 };
    uint32_t const ces[9] = { 0x0EBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_344)
{
    // 2634 0021;	
    // (☴) TRIGRAM FOR WIND	[0EBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2634, 0x0021 };
    uint32_t const ces[9] = { 0x0EBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_345)
{
    // 2634 003F;	
    // (☴) TRIGRAM FOR WIND	[0EBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2634, 0x003F };
    uint32_t const ces[9] = { 0x0EBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_346)
{
    // 2634 0061;	
    // (☴) TRIGRAM FOR WIND	[0EBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2634, 0x0061 };
    uint32_t const ces[9] = { 0x0EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_347)
{
    // 2634 0041;	
    // (☴) TRIGRAM FOR WIND	[0EBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2634, 0x0041 };
    uint32_t const ces[9] = { 0x0EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_348)
{
    // 2634 0062;	
    // (☴) TRIGRAM FOR WIND	[0EBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2634, 0x0062 };
    uint32_t const ces[9] = { 0x0EBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_349)
{
    // 2635 0021;	
    // (☵) TRIGRAM FOR WATER	[0EBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2635, 0x0021 };
    uint32_t const ces[9] = { 0x0EBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_350)
{
    // 2635 003F;	
    // (☵) TRIGRAM FOR WATER	[0EBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2635, 0x003F };
    uint32_t const ces[9] = { 0x0EBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_351)
{
    // 2635 0061;	
    // (☵) TRIGRAM FOR WATER	[0EBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2635, 0x0061 };
    uint32_t const ces[9] = { 0x0EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_352)
{
    // 2635 0041;	
    // (☵) TRIGRAM FOR WATER	[0EBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2635, 0x0041 };
    uint32_t const ces[9] = { 0x0EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_353)
{
    // 2635 0062;	
    // (☵) TRIGRAM FOR WATER	[0EBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2635, 0x0062 };
    uint32_t const ces[9] = { 0x0EBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_354)
{
    // 2636 0021;	
    // (☶) TRIGRAM FOR MOUNTAIN	[0EC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2636, 0x0021 };
    uint32_t const ces[9] = { 0x0EC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_355)
{
    // 2636 003F;	
    // (☶) TRIGRAM FOR MOUNTAIN	[0EC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2636, 0x003F };
    uint32_t const ces[9] = { 0x0EC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_356)
{
    // 2636 0061;	
    // (☶) TRIGRAM FOR MOUNTAIN	[0EC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2636, 0x0061 };
    uint32_t const ces[9] = { 0x0EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_357)
{
    // 2636 0041;	
    // (☶) TRIGRAM FOR MOUNTAIN	[0EC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2636, 0x0041 };
    uint32_t const ces[9] = { 0x0EC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_358)
{
    // 2636 0062;	
    // (☶) TRIGRAM FOR MOUNTAIN	[0EC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2636, 0x0062 };
    uint32_t const ces[9] = { 0x0EC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_359)
{
    // 2637 0021;	
    // (☷) TRIGRAM FOR EARTH	[0EC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2637, 0x0021 };
    uint32_t const ces[9] = { 0x0EC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_360)
{
    // 2637 003F;	
    // (☷) TRIGRAM FOR EARTH	[0EC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2637, 0x003F };
    uint32_t const ces[9] = { 0x0EC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_361)
{
    // 2637 0061;	
    // (☷) TRIGRAM FOR EARTH	[0EC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2637, 0x0061 };
    uint32_t const ces[9] = { 0x0EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_362)
{
    // 2637 0041;	
    // (☷) TRIGRAM FOR EARTH	[0EC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2637, 0x0041 };
    uint32_t const ces[9] = { 0x0EC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_363)
{
    // 2637 0062;	
    // (☷) TRIGRAM FOR EARTH	[0EC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2637, 0x0062 };
    uint32_t const ces[9] = { 0x0EC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_364)
{
    // 4DC0 0021;	
    // (䷀) HEXAGRAM FOR THE CREATIVE HEAVEN	[0EC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC0, 0x0021 };
    uint32_t const ces[9] = { 0x0EC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_365)
{
    // 4DC0 003F;	
    // (䷀) HEXAGRAM FOR THE CREATIVE HEAVEN	[0EC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC0, 0x003F };
    uint32_t const ces[9] = { 0x0EC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_366)
{
    // 4DC0 0061;	
    // (䷀) HEXAGRAM FOR THE CREATIVE HEAVEN	[0EC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC0, 0x0061 };
    uint32_t const ces[9] = { 0x0EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_367)
{
    // 4DC0 0041;	
    // (䷀) HEXAGRAM FOR THE CREATIVE HEAVEN	[0EC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC0, 0x0041 };
    uint32_t const ces[9] = { 0x0EC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_368)
{
    // 4DC0 0062;	
    // (䷀) HEXAGRAM FOR THE CREATIVE HEAVEN	[0EC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC0, 0x0062 };
    uint32_t const ces[9] = { 0x0EC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_369)
{
    // 4DC1 0021;	
    // (䷁) HEXAGRAM FOR THE RECEPTIVE EARTH	[0EC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC1, 0x0021 };
    uint32_t const ces[9] = { 0x0EC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_370)
{
    // 4DC1 003F;	
    // (䷁) HEXAGRAM FOR THE RECEPTIVE EARTH	[0EC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC1, 0x003F };
    uint32_t const ces[9] = { 0x0EC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_371)
{
    // 4DC1 0061;	
    // (䷁) HEXAGRAM FOR THE RECEPTIVE EARTH	[0EC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC1, 0x0061 };
    uint32_t const ces[9] = { 0x0EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_372)
{
    // 4DC1 0041;	
    // (䷁) HEXAGRAM FOR THE RECEPTIVE EARTH	[0EC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC1, 0x0041 };
    uint32_t const ces[9] = { 0x0EC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_373)
{
    // 4DC1 0062;	
    // (䷁) HEXAGRAM FOR THE RECEPTIVE EARTH	[0EC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC1, 0x0062 };
    uint32_t const ces[9] = { 0x0EC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_374)
{
    // 4DC2 0021;	
    // (䷂) HEXAGRAM FOR DIFFICULTY AT THE BEGINNING	[0EC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC2, 0x0021 };
    uint32_t const ces[9] = { 0x0EC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_375)
{
    // 4DC2 003F;	
    // (䷂) HEXAGRAM FOR DIFFICULTY AT THE BEGINNING	[0EC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC2, 0x003F };
    uint32_t const ces[9] = { 0x0EC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_376)
{
    // 4DC2 0061;	
    // (䷂) HEXAGRAM FOR DIFFICULTY AT THE BEGINNING	[0EC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC2, 0x0061 };
    uint32_t const ces[9] = { 0x0EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_377)
{
    // 4DC2 0041;	
    // (䷂) HEXAGRAM FOR DIFFICULTY AT THE BEGINNING	[0EC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC2, 0x0041 };
    uint32_t const ces[9] = { 0x0EC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_378)
{
    // 4DC2 0062;	
    // (䷂) HEXAGRAM FOR DIFFICULTY AT THE BEGINNING	[0EC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC2, 0x0062 };
    uint32_t const ces[9] = { 0x0EC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_379)
{
    // 4DC3 0021;	
    // (䷃) HEXAGRAM FOR YOUTHFUL FOLLY	[0EC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC3, 0x0021 };
    uint32_t const ces[9] = { 0x0EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_380)
{
    // 4DC3 003F;	
    // (䷃) HEXAGRAM FOR YOUTHFUL FOLLY	[0EC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC3, 0x003F };
    uint32_t const ces[9] = { 0x0EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_381)
{
    // 4DC3 0061;	
    // (䷃) HEXAGRAM FOR YOUTHFUL FOLLY	[0EC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC3, 0x0061 };
    uint32_t const ces[9] = { 0x0EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_382)
{
    // 4DC3 0041;	
    // (䷃) HEXAGRAM FOR YOUTHFUL FOLLY	[0EC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC3, 0x0041 };
    uint32_t const ces[9] = { 0x0EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_383)
{
    // 4DC3 0062;	
    // (䷃) HEXAGRAM FOR YOUTHFUL FOLLY	[0EC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC3, 0x0062 };
    uint32_t const ces[9] = { 0x0EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_384)
{
    // 4DC4 0021;	
    // (䷄) HEXAGRAM FOR WAITING	[0EC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC4, 0x0021 };
    uint32_t const ces[9] = { 0x0EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_385)
{
    // 4DC4 003F;	
    // (䷄) HEXAGRAM FOR WAITING	[0EC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC4, 0x003F };
    uint32_t const ces[9] = { 0x0EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_386)
{
    // 4DC4 0061;	
    // (䷄) HEXAGRAM FOR WAITING	[0EC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC4, 0x0061 };
    uint32_t const ces[9] = { 0x0EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_387)
{
    // 4DC4 0041;	
    // (䷄) HEXAGRAM FOR WAITING	[0EC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC4, 0x0041 };
    uint32_t const ces[9] = { 0x0EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_388)
{
    // 4DC4 0062;	
    // (䷄) HEXAGRAM FOR WAITING	[0EC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC4, 0x0062 };
    uint32_t const ces[9] = { 0x0EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_389)
{
    // 4DC5 0021;	
    // (䷅) HEXAGRAM FOR CONFLICT	[0EC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC5, 0x0021 };
    uint32_t const ces[9] = { 0x0EC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_390)
{
    // 4DC5 003F;	
    // (䷅) HEXAGRAM FOR CONFLICT	[0EC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC5, 0x003F };
    uint32_t const ces[9] = { 0x0EC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_391)
{
    // 4DC5 0061;	
    // (䷅) HEXAGRAM FOR CONFLICT	[0EC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC5, 0x0061 };
    uint32_t const ces[9] = { 0x0EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_392)
{
    // 4DC5 0041;	
    // (䷅) HEXAGRAM FOR CONFLICT	[0EC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC5, 0x0041 };
    uint32_t const ces[9] = { 0x0EC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_393)
{
    // 4DC5 0062;	
    // (䷅) HEXAGRAM FOR CONFLICT	[0EC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC5, 0x0062 };
    uint32_t const ces[9] = { 0x0EC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_394)
{
    // 4DC6 0021;	
    // (䷆) HEXAGRAM FOR THE ARMY	[0EC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC6, 0x0021 };
    uint32_t const ces[9] = { 0x0EC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_395)
{
    // 4DC6 003F;	
    // (䷆) HEXAGRAM FOR THE ARMY	[0EC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC6, 0x003F };
    uint32_t const ces[9] = { 0x0EC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_396)
{
    // 4DC6 0061;	
    // (䷆) HEXAGRAM FOR THE ARMY	[0EC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC6, 0x0061 };
    uint32_t const ces[9] = { 0x0EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_397)
{
    // 4DC6 0041;	
    // (䷆) HEXAGRAM FOR THE ARMY	[0EC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC6, 0x0041 };
    uint32_t const ces[9] = { 0x0EC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_398)
{
    // 4DC6 0062;	
    // (䷆) HEXAGRAM FOR THE ARMY	[0EC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC6, 0x0062 };
    uint32_t const ces[9] = { 0x0EC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_399)
{
    // 4DC7 0021;	
    // (䷇) HEXAGRAM FOR HOLDING TOGETHER	[0EC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC7, 0x0021 };
    uint32_t const ces[9] = { 0x0EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_400)
{
    // 4DC7 003F;	
    // (䷇) HEXAGRAM FOR HOLDING TOGETHER	[0EC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC7, 0x003F };
    uint32_t const ces[9] = { 0x0EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_401)
{
    // 4DC7 0061;	
    // (䷇) HEXAGRAM FOR HOLDING TOGETHER	[0EC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC7, 0x0061 };
    uint32_t const ces[9] = { 0x0EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_402)
{
    // 4DC7 0041;	
    // (䷇) HEXAGRAM FOR HOLDING TOGETHER	[0EC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC7, 0x0041 };
    uint32_t const ces[9] = { 0x0EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_403)
{
    // 4DC7 0062;	
    // (䷇) HEXAGRAM FOR HOLDING TOGETHER	[0EC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC7, 0x0062 };
    uint32_t const ces[9] = { 0x0EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_404)
{
    // 4DC8 0021;	
    // (䷈) HEXAGRAM FOR SMALL TAMING	[0ECA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC8, 0x0021 };
    uint32_t const ces[9] = { 0x0ECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_405)
{
    // 4DC8 003F;	
    // (䷈) HEXAGRAM FOR SMALL TAMING	[0ECA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC8, 0x003F };
    uint32_t const ces[9] = { 0x0ECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_406)
{
    // 4DC8 0061;	
    // (䷈) HEXAGRAM FOR SMALL TAMING	[0ECA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC8, 0x0061 };
    uint32_t const ces[9] = { 0x0ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_407)
{
    // 4DC8 0041;	
    // (䷈) HEXAGRAM FOR SMALL TAMING	[0ECA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC8, 0x0041 };
    uint32_t const ces[9] = { 0x0ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_408)
{
    // 4DC8 0062;	
    // (䷈) HEXAGRAM FOR SMALL TAMING	[0ECA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC8, 0x0062 };
    uint32_t const ces[9] = { 0x0ECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_409)
{
    // 4DC9 0021;	
    // (䷉) HEXAGRAM FOR TREADING	[0ECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC9, 0x0021 };
    uint32_t const ces[9] = { 0x0ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_410)
{
    // 4DC9 003F;	
    // (䷉) HEXAGRAM FOR TREADING	[0ECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC9, 0x003F };
    uint32_t const ces[9] = { 0x0ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_411)
{
    // 4DC9 0061;	
    // (䷉) HEXAGRAM FOR TREADING	[0ECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC9, 0x0061 };
    uint32_t const ces[9] = { 0x0ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_412)
{
    // 4DC9 0041;	
    // (䷉) HEXAGRAM FOR TREADING	[0ECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DC9, 0x0041 };
    uint32_t const ces[9] = { 0x0ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_413)
{
    // 4DC9 0062;	
    // (䷉) HEXAGRAM FOR TREADING	[0ECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DC9, 0x0062 };
    uint32_t const ces[9] = { 0x0ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_414)
{
    // 4DCA 0021;	
    // (䷊) HEXAGRAM FOR PEACE	[0ECC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCA, 0x0021 };
    uint32_t const ces[9] = { 0x0ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_415)
{
    // 4DCA 003F;	
    // (䷊) HEXAGRAM FOR PEACE	[0ECC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCA, 0x003F };
    uint32_t const ces[9] = { 0x0ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_416)
{
    // 4DCA 0061;	
    // (䷊) HEXAGRAM FOR PEACE	[0ECC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCA, 0x0061 };
    uint32_t const ces[9] = { 0x0ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_417)
{
    // 4DCA 0041;	
    // (䷊) HEXAGRAM FOR PEACE	[0ECC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCA, 0x0041 };
    uint32_t const ces[9] = { 0x0ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_418)
{
    // 4DCA 0062;	
    // (䷊) HEXAGRAM FOR PEACE	[0ECC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCA, 0x0062 };
    uint32_t const ces[9] = { 0x0ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_419)
{
    // 4DCB 0021;	
    // (䷋) HEXAGRAM FOR STANDSTILL	[0ECD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCB, 0x0021 };
    uint32_t const ces[9] = { 0x0ECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_420)
{
    // 4DCB 003F;	
    // (䷋) HEXAGRAM FOR STANDSTILL	[0ECD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCB, 0x003F };
    uint32_t const ces[9] = { 0x0ECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_421)
{
    // 4DCB 0061;	
    // (䷋) HEXAGRAM FOR STANDSTILL	[0ECD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCB, 0x0061 };
    uint32_t const ces[9] = { 0x0ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_422)
{
    // 4DCB 0041;	
    // (䷋) HEXAGRAM FOR STANDSTILL	[0ECD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCB, 0x0041 };
    uint32_t const ces[9] = { 0x0ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_423)
{
    // 4DCB 0062;	
    // (䷋) HEXAGRAM FOR STANDSTILL	[0ECD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCB, 0x0062 };
    uint32_t const ces[9] = { 0x0ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_424)
{
    // 4DCC 0021;	
    // (䷌) HEXAGRAM FOR FELLOWSHIP	[0ECE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCC, 0x0021 };
    uint32_t const ces[9] = { 0x0ECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_425)
{
    // 4DCC 003F;	
    // (䷌) HEXAGRAM FOR FELLOWSHIP	[0ECE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCC, 0x003F };
    uint32_t const ces[9] = { 0x0ECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_426)
{
    // 4DCC 0061;	
    // (䷌) HEXAGRAM FOR FELLOWSHIP	[0ECE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCC, 0x0061 };
    uint32_t const ces[9] = { 0x0ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_427)
{
    // 4DCC 0041;	
    // (䷌) HEXAGRAM FOR FELLOWSHIP	[0ECE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCC, 0x0041 };
    uint32_t const ces[9] = { 0x0ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_428)
{
    // 4DCC 0062;	
    // (䷌) HEXAGRAM FOR FELLOWSHIP	[0ECE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCC, 0x0062 };
    uint32_t const ces[9] = { 0x0ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_429)
{
    // 4DCD 0021;	
    // (䷍) HEXAGRAM FOR GREAT POSSESSION	[0ECF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCD, 0x0021 };
    uint32_t const ces[9] = { 0x0ECF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_430)
{
    // 4DCD 003F;	
    // (䷍) HEXAGRAM FOR GREAT POSSESSION	[0ECF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCD, 0x003F };
    uint32_t const ces[9] = { 0x0ECF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_431)
{
    // 4DCD 0061;	
    // (䷍) HEXAGRAM FOR GREAT POSSESSION	[0ECF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCD, 0x0061 };
    uint32_t const ces[9] = { 0x0ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_432)
{
    // 4DCD 0041;	
    // (䷍) HEXAGRAM FOR GREAT POSSESSION	[0ECF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCD, 0x0041 };
    uint32_t const ces[9] = { 0x0ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_433)
{
    // 4DCD 0062;	
    // (䷍) HEXAGRAM FOR GREAT POSSESSION	[0ECF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCD, 0x0062 };
    uint32_t const ces[9] = { 0x0ECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_434)
{
    // 4DCE 0021;	
    // (䷎) HEXAGRAM FOR MODESTY	[0ED0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCE, 0x0021 };
    uint32_t const ces[9] = { 0x0ED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_435)
{
    // 4DCE 003F;	
    // (䷎) HEXAGRAM FOR MODESTY	[0ED0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCE, 0x003F };
    uint32_t const ces[9] = { 0x0ED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_436)
{
    // 4DCE 0061;	
    // (䷎) HEXAGRAM FOR MODESTY	[0ED0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCE, 0x0061 };
    uint32_t const ces[9] = { 0x0ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_437)
{
    // 4DCE 0041;	
    // (䷎) HEXAGRAM FOR MODESTY	[0ED0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCE, 0x0041 };
    uint32_t const ces[9] = { 0x0ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_438)
{
    // 4DCE 0062;	
    // (䷎) HEXAGRAM FOR MODESTY	[0ED0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCE, 0x0062 };
    uint32_t const ces[9] = { 0x0ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_439)
{
    // 4DCF 0021;	
    // (䷏) HEXAGRAM FOR ENTHUSIASM	[0ED1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCF, 0x0021 };
    uint32_t const ces[9] = { 0x0ED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_440)
{
    // 4DCF 003F;	
    // (䷏) HEXAGRAM FOR ENTHUSIASM	[0ED1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCF, 0x003F };
    uint32_t const ces[9] = { 0x0ED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_441)
{
    // 4DCF 0061;	
    // (䷏) HEXAGRAM FOR ENTHUSIASM	[0ED1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCF, 0x0061 };
    uint32_t const ces[9] = { 0x0ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_442)
{
    // 4DCF 0041;	
    // (䷏) HEXAGRAM FOR ENTHUSIASM	[0ED1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DCF, 0x0041 };
    uint32_t const ces[9] = { 0x0ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_443)
{
    // 4DCF 0062;	
    // (䷏) HEXAGRAM FOR ENTHUSIASM	[0ED1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DCF, 0x0062 };
    uint32_t const ces[9] = { 0x0ED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_444)
{
    // 4DD0 0021;	
    // (䷐) HEXAGRAM FOR FOLLOWING	[0ED2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD0, 0x0021 };
    uint32_t const ces[9] = { 0x0ED2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_445)
{
    // 4DD0 003F;	
    // (䷐) HEXAGRAM FOR FOLLOWING	[0ED2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD0, 0x003F };
    uint32_t const ces[9] = { 0x0ED2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_446)
{
    // 4DD0 0061;	
    // (䷐) HEXAGRAM FOR FOLLOWING	[0ED2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD0, 0x0061 };
    uint32_t const ces[9] = { 0x0ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_447)
{
    // 4DD0 0041;	
    // (䷐) HEXAGRAM FOR FOLLOWING	[0ED2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD0, 0x0041 };
    uint32_t const ces[9] = { 0x0ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_448)
{
    // 4DD0 0062;	
    // (䷐) HEXAGRAM FOR FOLLOWING	[0ED2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD0, 0x0062 };
    uint32_t const ces[9] = { 0x0ED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_449)
{
    // 4DD1 0021;	
    // (䷑) HEXAGRAM FOR WORK ON THE DECAYED	[0ED3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD1, 0x0021 };
    uint32_t const ces[9] = { 0x0ED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_450)
{
    // 4DD1 003F;	
    // (䷑) HEXAGRAM FOR WORK ON THE DECAYED	[0ED3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD1, 0x003F };
    uint32_t const ces[9] = { 0x0ED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_451)
{
    // 4DD1 0061;	
    // (䷑) HEXAGRAM FOR WORK ON THE DECAYED	[0ED3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD1, 0x0061 };
    uint32_t const ces[9] = { 0x0ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_452)
{
    // 4DD1 0041;	
    // (䷑) HEXAGRAM FOR WORK ON THE DECAYED	[0ED3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD1, 0x0041 };
    uint32_t const ces[9] = { 0x0ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_453)
{
    // 4DD1 0062;	
    // (䷑) HEXAGRAM FOR WORK ON THE DECAYED	[0ED3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD1, 0x0062 };
    uint32_t const ces[9] = { 0x0ED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_454)
{
    // 4DD2 0021;	
    // (䷒) HEXAGRAM FOR APPROACH	[0ED4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD2, 0x0021 };
    uint32_t const ces[9] = { 0x0ED4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_455)
{
    // 4DD2 003F;	
    // (䷒) HEXAGRAM FOR APPROACH	[0ED4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD2, 0x003F };
    uint32_t const ces[9] = { 0x0ED4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_456)
{
    // 4DD2 0061;	
    // (䷒) HEXAGRAM FOR APPROACH	[0ED4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD2, 0x0061 };
    uint32_t const ces[9] = { 0x0ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_457)
{
    // 4DD2 0041;	
    // (䷒) HEXAGRAM FOR APPROACH	[0ED4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD2, 0x0041 };
    uint32_t const ces[9] = { 0x0ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_458)
{
    // 4DD2 0062;	
    // (䷒) HEXAGRAM FOR APPROACH	[0ED4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD2, 0x0062 };
    uint32_t const ces[9] = { 0x0ED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_459)
{
    // 4DD3 0021;	
    // (䷓) HEXAGRAM FOR CONTEMPLATION	[0ED5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD3, 0x0021 };
    uint32_t const ces[9] = { 0x0ED5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_460)
{
    // 4DD3 003F;	
    // (䷓) HEXAGRAM FOR CONTEMPLATION	[0ED5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD3, 0x003F };
    uint32_t const ces[9] = { 0x0ED5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_461)
{
    // 4DD3 0061;	
    // (䷓) HEXAGRAM FOR CONTEMPLATION	[0ED5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD3, 0x0061 };
    uint32_t const ces[9] = { 0x0ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_462)
{
    // 4DD3 0041;	
    // (䷓) HEXAGRAM FOR CONTEMPLATION	[0ED5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD3, 0x0041 };
    uint32_t const ces[9] = { 0x0ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_463)
{
    // 4DD3 0062;	
    // (䷓) HEXAGRAM FOR CONTEMPLATION	[0ED5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD3, 0x0062 };
    uint32_t const ces[9] = { 0x0ED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_464)
{
    // 4DD4 0021;	
    // (䷔) HEXAGRAM FOR BITING THROUGH	[0ED6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD4, 0x0021 };
    uint32_t const ces[9] = { 0x0ED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_465)
{
    // 4DD4 003F;	
    // (䷔) HEXAGRAM FOR BITING THROUGH	[0ED6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD4, 0x003F };
    uint32_t const ces[9] = { 0x0ED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_466)
{
    // 4DD4 0061;	
    // (䷔) HEXAGRAM FOR BITING THROUGH	[0ED6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD4, 0x0061 };
    uint32_t const ces[9] = { 0x0ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_467)
{
    // 4DD4 0041;	
    // (䷔) HEXAGRAM FOR BITING THROUGH	[0ED6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD4, 0x0041 };
    uint32_t const ces[9] = { 0x0ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_468)
{
    // 4DD4 0062;	
    // (䷔) HEXAGRAM FOR BITING THROUGH	[0ED6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD4, 0x0062 };
    uint32_t const ces[9] = { 0x0ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_469)
{
    // 4DD5 0021;	
    // (䷕) HEXAGRAM FOR GRACE	[0ED7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD5, 0x0021 };
    uint32_t const ces[9] = { 0x0ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_470)
{
    // 4DD5 003F;	
    // (䷕) HEXAGRAM FOR GRACE	[0ED7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD5, 0x003F };
    uint32_t const ces[9] = { 0x0ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_471)
{
    // 4DD5 0061;	
    // (䷕) HEXAGRAM FOR GRACE	[0ED7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD5, 0x0061 };
    uint32_t const ces[9] = { 0x0ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_472)
{
    // 4DD5 0041;	
    // (䷕) HEXAGRAM FOR GRACE	[0ED7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD5, 0x0041 };
    uint32_t const ces[9] = { 0x0ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_473)
{
    // 4DD5 0062;	
    // (䷕) HEXAGRAM FOR GRACE	[0ED7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD5, 0x0062 };
    uint32_t const ces[9] = { 0x0ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_474)
{
    // 4DD6 0021;	
    // (䷖) HEXAGRAM FOR SPLITTING APART	[0ED8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD6, 0x0021 };
    uint32_t const ces[9] = { 0x0ED8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_475)
{
    // 4DD6 003F;	
    // (䷖) HEXAGRAM FOR SPLITTING APART	[0ED8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD6, 0x003F };
    uint32_t const ces[9] = { 0x0ED8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_476)
{
    // 4DD6 0061;	
    // (䷖) HEXAGRAM FOR SPLITTING APART	[0ED8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD6, 0x0061 };
    uint32_t const ces[9] = { 0x0ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_477)
{
    // 4DD6 0041;	
    // (䷖) HEXAGRAM FOR SPLITTING APART	[0ED8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD6, 0x0041 };
    uint32_t const ces[9] = { 0x0ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_478)
{
    // 4DD6 0062;	
    // (䷖) HEXAGRAM FOR SPLITTING APART	[0ED8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD6, 0x0062 };
    uint32_t const ces[9] = { 0x0ED8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_479)
{
    // 4DD7 0021;	
    // (䷗) HEXAGRAM FOR RETURN	[0ED9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD7, 0x0021 };
    uint32_t const ces[9] = { 0x0ED9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_480)
{
    // 4DD7 003F;	
    // (䷗) HEXAGRAM FOR RETURN	[0ED9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD7, 0x003F };
    uint32_t const ces[9] = { 0x0ED9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_481)
{
    // 4DD7 0061;	
    // (䷗) HEXAGRAM FOR RETURN	[0ED9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD7, 0x0061 };
    uint32_t const ces[9] = { 0x0ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_482)
{
    // 4DD7 0041;	
    // (䷗) HEXAGRAM FOR RETURN	[0ED9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD7, 0x0041 };
    uint32_t const ces[9] = { 0x0ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_483)
{
    // 4DD7 0062;	
    // (䷗) HEXAGRAM FOR RETURN	[0ED9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD7, 0x0062 };
    uint32_t const ces[9] = { 0x0ED9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_484)
{
    // 4DD8 0021;	
    // (䷘) HEXAGRAM FOR INNOCENCE	[0EDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD8, 0x0021 };
    uint32_t const ces[9] = { 0x0EDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_485)
{
    // 4DD8 003F;	
    // (䷘) HEXAGRAM FOR INNOCENCE	[0EDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD8, 0x003F };
    uint32_t const ces[9] = { 0x0EDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_486)
{
    // 4DD8 0061;	
    // (䷘) HEXAGRAM FOR INNOCENCE	[0EDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD8, 0x0061 };
    uint32_t const ces[9] = { 0x0EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_487)
{
    // 4DD8 0041;	
    // (䷘) HEXAGRAM FOR INNOCENCE	[0EDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD8, 0x0041 };
    uint32_t const ces[9] = { 0x0EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_488)
{
    // 4DD8 0062;	
    // (䷘) HEXAGRAM FOR INNOCENCE	[0EDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD8, 0x0062 };
    uint32_t const ces[9] = { 0x0EDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_489)
{
    // 4DD9 0021;	
    // (䷙) HEXAGRAM FOR GREAT TAMING	[0EDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD9, 0x0021 };
    uint32_t const ces[9] = { 0x0EDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_490)
{
    // 4DD9 003F;	
    // (䷙) HEXAGRAM FOR GREAT TAMING	[0EDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD9, 0x003F };
    uint32_t const ces[9] = { 0x0EDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_491)
{
    // 4DD9 0061;	
    // (䷙) HEXAGRAM FOR GREAT TAMING	[0EDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD9, 0x0061 };
    uint32_t const ces[9] = { 0x0EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_492)
{
    // 4DD9 0041;	
    // (䷙) HEXAGRAM FOR GREAT TAMING	[0EDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DD9, 0x0041 };
    uint32_t const ces[9] = { 0x0EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_493)
{
    // 4DD9 0062;	
    // (䷙) HEXAGRAM FOR GREAT TAMING	[0EDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DD9, 0x0062 };
    uint32_t const ces[9] = { 0x0EDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_494)
{
    // 4DDA 0021;	
    // (䷚) HEXAGRAM FOR MOUTH CORNERS	[0EDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDA, 0x0021 };
    uint32_t const ces[9] = { 0x0EDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_495)
{
    // 4DDA 003F;	
    // (䷚) HEXAGRAM FOR MOUTH CORNERS	[0EDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDA, 0x003F };
    uint32_t const ces[9] = { 0x0EDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_496)
{
    // 4DDA 0061;	
    // (䷚) HEXAGRAM FOR MOUTH CORNERS	[0EDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDA, 0x0061 };
    uint32_t const ces[9] = { 0x0EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_497)
{
    // 4DDA 0041;	
    // (䷚) HEXAGRAM FOR MOUTH CORNERS	[0EDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDA, 0x0041 };
    uint32_t const ces[9] = { 0x0EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_498)
{
    // 4DDA 0062;	
    // (䷚) HEXAGRAM FOR MOUTH CORNERS	[0EDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDA, 0x0062 };
    uint32_t const ces[9] = { 0x0EDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_044_499)
{
    // 4DDB 0021;	
    // (䷛) HEXAGRAM FOR GREAT PREPONDERANCE	[0EDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDB, 0x0021 };
    uint32_t const ces[9] = { 0x0EDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

