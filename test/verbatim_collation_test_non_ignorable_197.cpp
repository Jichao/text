// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_197_000)
{
    // 0F91 0021;	
    // (ྑ) TIBETAN SUBJOINED LETTER KHA	[2ED7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F91, 0x0021 };
    uint32_t const ces[9] = { 0x2ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_001)
{
    // 0F91 003F;	
    // (ྑ) TIBETAN SUBJOINED LETTER KHA	[2ED7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F91, 0x003F };
    uint32_t const ces[9] = { 0x2ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_002)
{
    // 0F91 0061;	
    // (ྑ) TIBETAN SUBJOINED LETTER KHA	[2ED7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F91, 0x0061 };
    uint32_t const ces[9] = { 0x2ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_003)
{
    // 0F91 0041;	
    // (ྑ) TIBETAN SUBJOINED LETTER KHA	[2ED7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F91, 0x0041 };
    uint32_t const ces[9] = { 0x2ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_004)
{
    // 0F91 0062;	
    // (ྑ) TIBETAN SUBJOINED LETTER KHA	[2ED7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F91, 0x0062 };
    uint32_t const ces[9] = { 0x2ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_005)
{
    // 0F42 0021;	
    // (ག) TIBETAN LETTER GA	[2ED8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F42, 0x0021 };
    uint32_t const ces[9] = { 0x2ED8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_006)
{
    // 0F42 003F;	
    // (ག) TIBETAN LETTER GA	[2ED8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F42, 0x003F };
    uint32_t const ces[9] = { 0x2ED8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_007)
{
    // 0F42 0061;	
    // (ག) TIBETAN LETTER GA	[2ED8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F42, 0x0061 };
    uint32_t const ces[9] = { 0x2ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_008)
{
    // 0F42 0041;	
    // (ག) TIBETAN LETTER GA	[2ED8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F42, 0x0041 };
    uint32_t const ces[9] = { 0x2ED8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_009)
{
    // 0F42 0062;	
    // (ག) TIBETAN LETTER GA	[2ED8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F42, 0x0062 };
    uint32_t const ces[9] = { 0x2ED8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_010)
{
    // 0F43 0021;	
    // (གྷ) TIBETAN LETTER GHA	[2ED8 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F43, 0x0021 };
    uint32_t const ces[12] = { 0x2ED8, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_011)
{
    // 0F43 003F;	
    // (གྷ) TIBETAN LETTER GHA	[2ED8 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F43, 0x003F };
    uint32_t const ces[12] = { 0x2ED8, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_012)
{
    // 0F43 0061;	
    // (གྷ) TIBETAN LETTER GHA	[2ED8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F43, 0x0061 };
    uint32_t const ces[12] = { 0x2ED8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_013)
{
    // 0F43 0041;	
    // (གྷ) TIBETAN LETTER GHA	[2ED8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F43, 0x0041 };
    uint32_t const ces[12] = { 0x2ED8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_014)
{
    // 0F43 0062;	
    // (གྷ) TIBETAN LETTER GHA	[2ED8 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F43, 0x0062 };
    uint32_t const ces[12] = { 0x2ED8, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_015)
{
    // 0F92 0021;	
    // (ྒ) TIBETAN SUBJOINED LETTER GA	[2ED9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F92, 0x0021 };
    uint32_t const ces[9] = { 0x2ED9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_016)
{
    // 0F92 003F;	
    // (ྒ) TIBETAN SUBJOINED LETTER GA	[2ED9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F92, 0x003F };
    uint32_t const ces[9] = { 0x2ED9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_017)
{
    // 0F92 0061;	
    // (ྒ) TIBETAN SUBJOINED LETTER GA	[2ED9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F92, 0x0061 };
    uint32_t const ces[9] = { 0x2ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_018)
{
    // 0F92 0041;	
    // (ྒ) TIBETAN SUBJOINED LETTER GA	[2ED9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F92, 0x0041 };
    uint32_t const ces[9] = { 0x2ED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_019)
{
    // 0F92 0062;	
    // (ྒ) TIBETAN SUBJOINED LETTER GA	[2ED9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F92, 0x0062 };
    uint32_t const ces[9] = { 0x2ED9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_020)
{
    // 0F93 0021;	
    // (ྒྷ) TIBETAN SUBJOINED LETTER GHA	[2ED9 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F93, 0x0021 };
    uint32_t const ces[12] = { 0x2ED9, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_021)
{
    // 0F93 003F;	
    // (ྒྷ) TIBETAN SUBJOINED LETTER GHA	[2ED9 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F93, 0x003F };
    uint32_t const ces[12] = { 0x2ED9, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_022)
{
    // 0F93 0061;	
    // (ྒྷ) TIBETAN SUBJOINED LETTER GHA	[2ED9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F93, 0x0061 };
    uint32_t const ces[12] = { 0x2ED9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_023)
{
    // 0F93 0041;	
    // (ྒྷ) TIBETAN SUBJOINED LETTER GHA	[2ED9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F93, 0x0041 };
    uint32_t const ces[12] = { 0x2ED9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_024)
{
    // 0F93 0062;	
    // (ྒྷ) TIBETAN SUBJOINED LETTER GHA	[2ED9 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F93, 0x0062 };
    uint32_t const ces[12] = { 0x2ED9, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_025)
{
    // 0F44 0021;	
    // (ང) TIBETAN LETTER NGA	[2EDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F44, 0x0021 };
    uint32_t const ces[9] = { 0x2EDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_026)
{
    // 0F44 003F;	
    // (ང) TIBETAN LETTER NGA	[2EDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F44, 0x003F };
    uint32_t const ces[9] = { 0x2EDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_027)
{
    // 0F44 0061;	
    // (ང) TIBETAN LETTER NGA	[2EDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F44, 0x0061 };
    uint32_t const ces[9] = { 0x2EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_028)
{
    // 0F44 0041;	
    // (ང) TIBETAN LETTER NGA	[2EDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F44, 0x0041 };
    uint32_t const ces[9] = { 0x2EDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_029)
{
    // 0F44 0062;	
    // (ང) TIBETAN LETTER NGA	[2EDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F44, 0x0062 };
    uint32_t const ces[9] = { 0x2EDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_030)
{
    // 0F94 0021;	
    // (ྔ) TIBETAN SUBJOINED LETTER NGA	[2EDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F94, 0x0021 };
    uint32_t const ces[9] = { 0x2EDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_031)
{
    // 0F94 003F;	
    // (ྔ) TIBETAN SUBJOINED LETTER NGA	[2EDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F94, 0x003F };
    uint32_t const ces[9] = { 0x2EDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_032)
{
    // 0F94 0061;	
    // (ྔ) TIBETAN SUBJOINED LETTER NGA	[2EDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F94, 0x0061 };
    uint32_t const ces[9] = { 0x2EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_033)
{
    // 0F94 0041;	
    // (ྔ) TIBETAN SUBJOINED LETTER NGA	[2EDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F94, 0x0041 };
    uint32_t const ces[9] = { 0x2EDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_034)
{
    // 0F94 0062;	
    // (ྔ) TIBETAN SUBJOINED LETTER NGA	[2EDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F94, 0x0062 };
    uint32_t const ces[9] = { 0x2EDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_035)
{
    // 0F45 0021;	
    // (ཅ) TIBETAN LETTER CA	[2EDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F45, 0x0021 };
    uint32_t const ces[9] = { 0x2EDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_036)
{
    // 0F45 003F;	
    // (ཅ) TIBETAN LETTER CA	[2EDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F45, 0x003F };
    uint32_t const ces[9] = { 0x2EDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_037)
{
    // 0F45 0061;	
    // (ཅ) TIBETAN LETTER CA	[2EDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F45, 0x0061 };
    uint32_t const ces[9] = { 0x2EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_038)
{
    // 0F45 0041;	
    // (ཅ) TIBETAN LETTER CA	[2EDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F45, 0x0041 };
    uint32_t const ces[9] = { 0x2EDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_039)
{
    // 0F45 0062;	
    // (ཅ) TIBETAN LETTER CA	[2EDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F45, 0x0062 };
    uint32_t const ces[9] = { 0x2EDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_040)
{
    // 0F95 0021;	
    // (ྕ) TIBETAN SUBJOINED LETTER CA	[2EDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F95, 0x0021 };
    uint32_t const ces[9] = { 0x2EDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_041)
{
    // 0F95 003F;	
    // (ྕ) TIBETAN SUBJOINED LETTER CA	[2EDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F95, 0x003F };
    uint32_t const ces[9] = { 0x2EDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_042)
{
    // 0F95 0061;	
    // (ྕ) TIBETAN SUBJOINED LETTER CA	[2EDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F95, 0x0061 };
    uint32_t const ces[9] = { 0x2EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_043)
{
    // 0F95 0041;	
    // (ྕ) TIBETAN SUBJOINED LETTER CA	[2EDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F95, 0x0041 };
    uint32_t const ces[9] = { 0x2EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_044)
{
    // 0F95 0062;	
    // (ྕ) TIBETAN SUBJOINED LETTER CA	[2EDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F95, 0x0062 };
    uint32_t const ces[9] = { 0x2EDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_045)
{
    // 0F46 0021;	
    // (ཆ) TIBETAN LETTER CHA	[2EDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F46, 0x0021 };
    uint32_t const ces[9] = { 0x2EDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_046)
{
    // 0F46 003F;	
    // (ཆ) TIBETAN LETTER CHA	[2EDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F46, 0x003F };
    uint32_t const ces[9] = { 0x2EDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_047)
{
    // 0F46 0061;	
    // (ཆ) TIBETAN LETTER CHA	[2EDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F46, 0x0061 };
    uint32_t const ces[9] = { 0x2EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_048)
{
    // 0F46 0041;	
    // (ཆ) TIBETAN LETTER CHA	[2EDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F46, 0x0041 };
    uint32_t const ces[9] = { 0x2EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_049)
{
    // 0F46 0062;	
    // (ཆ) TIBETAN LETTER CHA	[2EDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F46, 0x0062 };
    uint32_t const ces[9] = { 0x2EDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_050)
{
    // 0F96 0021;	
    // (ྖ) TIBETAN SUBJOINED LETTER CHA	[2EDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F96, 0x0021 };
    uint32_t const ces[9] = { 0x2EDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_051)
{
    // 0F96 003F;	
    // (ྖ) TIBETAN SUBJOINED LETTER CHA	[2EDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F96, 0x003F };
    uint32_t const ces[9] = { 0x2EDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_052)
{
    // 0F96 0061;	
    // (ྖ) TIBETAN SUBJOINED LETTER CHA	[2EDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F96, 0x0061 };
    uint32_t const ces[9] = { 0x2EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_053)
{
    // 0F96 0041;	
    // (ྖ) TIBETAN SUBJOINED LETTER CHA	[2EDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F96, 0x0041 };
    uint32_t const ces[9] = { 0x2EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_054)
{
    // 0F96 0062;	
    // (ྖ) TIBETAN SUBJOINED LETTER CHA	[2EDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F96, 0x0062 };
    uint32_t const ces[9] = { 0x2EDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_055)
{
    // 0F47 0021;	
    // (ཇ) TIBETAN LETTER JA	[2EE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F47, 0x0021 };
    uint32_t const ces[9] = { 0x2EE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_056)
{
    // 0F47 003F;	
    // (ཇ) TIBETAN LETTER JA	[2EE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F47, 0x003F };
    uint32_t const ces[9] = { 0x2EE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_057)
{
    // 0F47 0061;	
    // (ཇ) TIBETAN LETTER JA	[2EE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F47, 0x0061 };
    uint32_t const ces[9] = { 0x2EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_058)
{
    // 0F47 0041;	
    // (ཇ) TIBETAN LETTER JA	[2EE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F47, 0x0041 };
    uint32_t const ces[9] = { 0x2EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_059)
{
    // 0F47 0062;	
    // (ཇ) TIBETAN LETTER JA	[2EE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F47, 0x0062 };
    uint32_t const ces[9] = { 0x2EE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_060)
{
    // 0F97 0021;	
    // (ྗ) TIBETAN SUBJOINED LETTER JA	[2EE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F97, 0x0021 };
    uint32_t const ces[9] = { 0x2EE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_061)
{
    // 0F97 003F;	
    // (ྗ) TIBETAN SUBJOINED LETTER JA	[2EE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F97, 0x003F };
    uint32_t const ces[9] = { 0x2EE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_062)
{
    // 0F97 0061;	
    // (ྗ) TIBETAN SUBJOINED LETTER JA	[2EE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F97, 0x0061 };
    uint32_t const ces[9] = { 0x2EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_063)
{
    // 0F97 0041;	
    // (ྗ) TIBETAN SUBJOINED LETTER JA	[2EE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F97, 0x0041 };
    uint32_t const ces[9] = { 0x2EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_064)
{
    // 0F97 0062;	
    // (ྗ) TIBETAN SUBJOINED LETTER JA	[2EE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F97, 0x0062 };
    uint32_t const ces[9] = { 0x2EE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_065)
{
    // 0F49 0021;	
    // (ཉ) TIBETAN LETTER NYA	[2EE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F49, 0x0021 };
    uint32_t const ces[9] = { 0x2EE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_066)
{
    // 0F49 003F;	
    // (ཉ) TIBETAN LETTER NYA	[2EE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F49, 0x003F };
    uint32_t const ces[9] = { 0x2EE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_067)
{
    // 0F49 0061;	
    // (ཉ) TIBETAN LETTER NYA	[2EE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F49, 0x0061 };
    uint32_t const ces[9] = { 0x2EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_068)
{
    // 0F49 0041;	
    // (ཉ) TIBETAN LETTER NYA	[2EE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F49, 0x0041 };
    uint32_t const ces[9] = { 0x2EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_069)
{
    // 0F49 0062;	
    // (ཉ) TIBETAN LETTER NYA	[2EE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F49, 0x0062 };
    uint32_t const ces[9] = { 0x2EE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_070)
{
    // 0F99 0021;	
    // (ྙ) TIBETAN SUBJOINED LETTER NYA	[2EE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F99, 0x0021 };
    uint32_t const ces[9] = { 0x2EE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_071)
{
    // 0F99 003F;	
    // (ྙ) TIBETAN SUBJOINED LETTER NYA	[2EE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F99, 0x003F };
    uint32_t const ces[9] = { 0x2EE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_072)
{
    // 0F99 0061;	
    // (ྙ) TIBETAN SUBJOINED LETTER NYA	[2EE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F99, 0x0061 };
    uint32_t const ces[9] = { 0x2EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_073)
{
    // 0F99 0041;	
    // (ྙ) TIBETAN SUBJOINED LETTER NYA	[2EE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F99, 0x0041 };
    uint32_t const ces[9] = { 0x2EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_074)
{
    // 0F99 0062;	
    // (ྙ) TIBETAN SUBJOINED LETTER NYA	[2EE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F99, 0x0062 };
    uint32_t const ces[9] = { 0x2EE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_075)
{
    // 0F4A 0021;	
    // (ཊ) TIBETAN LETTER TTA	[2EE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4A, 0x0021 };
    uint32_t const ces[9] = { 0x2EE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_076)
{
    // 0F4A 003F;	
    // (ཊ) TIBETAN LETTER TTA	[2EE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4A, 0x003F };
    uint32_t const ces[9] = { 0x2EE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_077)
{
    // 0F4A 0061;	
    // (ཊ) TIBETAN LETTER TTA	[2EE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4A, 0x0061 };
    uint32_t const ces[9] = { 0x2EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_078)
{
    // 0F4A 0041;	
    // (ཊ) TIBETAN LETTER TTA	[2EE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F4A, 0x0041 };
    uint32_t const ces[9] = { 0x2EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_079)
{
    // 0F4A 0062;	
    // (ཊ) TIBETAN LETTER TTA	[2EE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4A, 0x0062 };
    uint32_t const ces[9] = { 0x2EE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_080)
{
    // 0F9A 0021;	
    // (ྚ) TIBETAN SUBJOINED LETTER TTA	[2EE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9A, 0x0021 };
    uint32_t const ces[9] = { 0x2EE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_081)
{
    // 0F9A 003F;	
    // (ྚ) TIBETAN SUBJOINED LETTER TTA	[2EE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9A, 0x003F };
    uint32_t const ces[9] = { 0x2EE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_082)
{
    // 0F9A 0061;	
    // (ྚ) TIBETAN SUBJOINED LETTER TTA	[2EE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9A, 0x0061 };
    uint32_t const ces[9] = { 0x2EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_083)
{
    // 0F9A 0041;	
    // (ྚ) TIBETAN SUBJOINED LETTER TTA	[2EE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F9A, 0x0041 };
    uint32_t const ces[9] = { 0x2EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_084)
{
    // 0F9A 0062;	
    // (ྚ) TIBETAN SUBJOINED LETTER TTA	[2EE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9A, 0x0062 };
    uint32_t const ces[9] = { 0x2EE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_085)
{
    // 0F4B 0021;	
    // (ཋ) TIBETAN LETTER TTHA	[2EE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4B, 0x0021 };
    uint32_t const ces[9] = { 0x2EE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_086)
{
    // 0F4B 003F;	
    // (ཋ) TIBETAN LETTER TTHA	[2EE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4B, 0x003F };
    uint32_t const ces[9] = { 0x2EE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_087)
{
    // 0F4B 0061;	
    // (ཋ) TIBETAN LETTER TTHA	[2EE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4B, 0x0061 };
    uint32_t const ces[9] = { 0x2EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_088)
{
    // 0F4B 0041;	
    // (ཋ) TIBETAN LETTER TTHA	[2EE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F4B, 0x0041 };
    uint32_t const ces[9] = { 0x2EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_089)
{
    // 0F4B 0062;	
    // (ཋ) TIBETAN LETTER TTHA	[2EE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4B, 0x0062 };
    uint32_t const ces[9] = { 0x2EE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_090)
{
    // 0F9B 0021;	
    // (ྛ) TIBETAN SUBJOINED LETTER TTHA	[2EE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9B, 0x0021 };
    uint32_t const ces[9] = { 0x2EE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_091)
{
    // 0F9B 003F;	
    // (ྛ) TIBETAN SUBJOINED LETTER TTHA	[2EE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9B, 0x003F };
    uint32_t const ces[9] = { 0x2EE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_092)
{
    // 0F9B 0061;	
    // (ྛ) TIBETAN SUBJOINED LETTER TTHA	[2EE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9B, 0x0061 };
    uint32_t const ces[9] = { 0x2EE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_093)
{
    // 0F9B 0041;	
    // (ྛ) TIBETAN SUBJOINED LETTER TTHA	[2EE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F9B, 0x0041 };
    uint32_t const ces[9] = { 0x2EE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_094)
{
    // 0F9B 0062;	
    // (ྛ) TIBETAN SUBJOINED LETTER TTHA	[2EE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9B, 0x0062 };
    uint32_t const ces[9] = { 0x2EE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_095)
{
    // 0F4C 0021;	
    // (ཌ) TIBETAN LETTER DDA	[2EE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4C, 0x0021 };
    uint32_t const ces[9] = { 0x2EE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_096)
{
    // 0F4C 003F;	
    // (ཌ) TIBETAN LETTER DDA	[2EE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4C, 0x003F };
    uint32_t const ces[9] = { 0x2EE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_097)
{
    // 0F4C 0061;	
    // (ཌ) TIBETAN LETTER DDA	[2EE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4C, 0x0061 };
    uint32_t const ces[9] = { 0x2EE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_098)
{
    // 0F4C 0041;	
    // (ཌ) TIBETAN LETTER DDA	[2EE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F4C, 0x0041 };
    uint32_t const ces[9] = { 0x2EE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_099)
{
    // 0F4C 0062;	
    // (ཌ) TIBETAN LETTER DDA	[2EE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4C, 0x0062 };
    uint32_t const ces[9] = { 0x2EE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_100)
{
    // 0F4D 0021;	
    // (ཌྷ) TIBETAN LETTER DDHA	[2EE8 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F4D, 0x0021 };
    uint32_t const ces[12] = { 0x2EE8, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_101)
{
    // 0F4D 003F;	
    // (ཌྷ) TIBETAN LETTER DDHA	[2EE8 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F4D, 0x003F };
    uint32_t const ces[12] = { 0x2EE8, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_102)
{
    // 0F4D 0061;	
    // (ཌྷ) TIBETAN LETTER DDHA	[2EE8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F4D, 0x0061 };
    uint32_t const ces[12] = { 0x2EE8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_103)
{
    // 0F4D 0041;	
    // (ཌྷ) TIBETAN LETTER DDHA	[2EE8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F4D, 0x0041 };
    uint32_t const ces[12] = { 0x2EE8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_104)
{
    // 0F4D 0062;	
    // (ཌྷ) TIBETAN LETTER DDHA	[2EE8 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F4D, 0x0062 };
    uint32_t const ces[12] = { 0x2EE8, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_105)
{
    // 0F9C 0021;	
    // (ྜ) TIBETAN SUBJOINED LETTER DDA	[2EE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9C, 0x0021 };
    uint32_t const ces[9] = { 0x2EE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_106)
{
    // 0F9C 003F;	
    // (ྜ) TIBETAN SUBJOINED LETTER DDA	[2EE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9C, 0x003F };
    uint32_t const ces[9] = { 0x2EE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_107)
{
    // 0F9C 0061;	
    // (ྜ) TIBETAN SUBJOINED LETTER DDA	[2EE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9C, 0x0061 };
    uint32_t const ces[9] = { 0x2EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_108)
{
    // 0F9C 0041;	
    // (ྜ) TIBETAN SUBJOINED LETTER DDA	[2EE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F9C, 0x0041 };
    uint32_t const ces[9] = { 0x2EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_109)
{
    // 0F9C 0062;	
    // (ྜ) TIBETAN SUBJOINED LETTER DDA	[2EE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9C, 0x0062 };
    uint32_t const ces[9] = { 0x2EE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_110)
{
    // 0F9D 0021;	
    // (ྜྷ) TIBETAN SUBJOINED LETTER DDHA	[2EE9 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EE9, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_111)
{
    // 0F9D 003F;	
    // (ྜྷ) TIBETAN SUBJOINED LETTER DDHA	[2EE9 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F9D, 0x003F };
    uint32_t const ces[12] = { 0x2EE9, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_112)
{
    // 0F9D 0061;	
    // (ྜྷ) TIBETAN SUBJOINED LETTER DDHA	[2EE9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EE9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_113)
{
    // 0F9D 0041;	
    // (ྜྷ) TIBETAN SUBJOINED LETTER DDHA	[2EE9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EE9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_114)
{
    // 0F9D 0062;	
    // (ྜྷ) TIBETAN SUBJOINED LETTER DDHA	[2EE9 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EE9, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_115)
{
    // 0F4E 0021;	
    // (ཎ) TIBETAN LETTER NNA	[2EEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4E, 0x0021 };
    uint32_t const ces[9] = { 0x2EEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_116)
{
    // 0F4E 003F;	
    // (ཎ) TIBETAN LETTER NNA	[2EEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4E, 0x003F };
    uint32_t const ces[9] = { 0x2EEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_117)
{
    // 0F4E 0061;	
    // (ཎ) TIBETAN LETTER NNA	[2EEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4E, 0x0061 };
    uint32_t const ces[9] = { 0x2EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_118)
{
    // 0F4E 0041;	
    // (ཎ) TIBETAN LETTER NNA	[2EEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F4E, 0x0041 };
    uint32_t const ces[9] = { 0x2EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_119)
{
    // 0F4E 0062;	
    // (ཎ) TIBETAN LETTER NNA	[2EEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4E, 0x0062 };
    uint32_t const ces[9] = { 0x2EEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_120)
{
    // 0F9E 0021;	
    // (ྞ) TIBETAN SUBJOINED LETTER NNA	[2EEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9E, 0x0021 };
    uint32_t const ces[9] = { 0x2EEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_121)
{
    // 0F9E 003F;	
    // (ྞ) TIBETAN SUBJOINED LETTER NNA	[2EEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9E, 0x003F };
    uint32_t const ces[9] = { 0x2EEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_122)
{
    // 0F9E 0061;	
    // (ྞ) TIBETAN SUBJOINED LETTER NNA	[2EEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9E, 0x0061 };
    uint32_t const ces[9] = { 0x2EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_123)
{
    // 0F9E 0041;	
    // (ྞ) TIBETAN SUBJOINED LETTER NNA	[2EEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F9E, 0x0041 };
    uint32_t const ces[9] = { 0x2EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_124)
{
    // 0F9E 0062;	
    // (ྞ) TIBETAN SUBJOINED LETTER NNA	[2EEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9E, 0x0062 };
    uint32_t const ces[9] = { 0x2EEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_125)
{
    // 0F4F 0021;	
    // (ཏ) TIBETAN LETTER TA	[2EEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4F, 0x0021 };
    uint32_t const ces[9] = { 0x2EEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_126)
{
    // 0F4F 003F;	
    // (ཏ) TIBETAN LETTER TA	[2EEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4F, 0x003F };
    uint32_t const ces[9] = { 0x2EEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_127)
{
    // 0F4F 0061;	
    // (ཏ) TIBETAN LETTER TA	[2EEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4F, 0x0061 };
    uint32_t const ces[9] = { 0x2EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_128)
{
    // 0F4F 0041;	
    // (ཏ) TIBETAN LETTER TA	[2EEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F4F, 0x0041 };
    uint32_t const ces[9] = { 0x2EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_129)
{
    // 0F4F 0062;	
    // (ཏ) TIBETAN LETTER TA	[2EEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F4F, 0x0062 };
    uint32_t const ces[9] = { 0x2EEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_130)
{
    // 0F9F 0021;	
    // (ྟ) TIBETAN SUBJOINED LETTER TA	[2EED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9F, 0x0021 };
    uint32_t const ces[9] = { 0x2EED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_131)
{
    // 0F9F 003F;	
    // (ྟ) TIBETAN SUBJOINED LETTER TA	[2EED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9F, 0x003F };
    uint32_t const ces[9] = { 0x2EED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_132)
{
    // 0F9F 0061;	
    // (ྟ) TIBETAN SUBJOINED LETTER TA	[2EED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9F, 0x0061 };
    uint32_t const ces[9] = { 0x2EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_133)
{
    // 0F9F 0041;	
    // (ྟ) TIBETAN SUBJOINED LETTER TA	[2EED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F9F, 0x0041 };
    uint32_t const ces[9] = { 0x2EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_134)
{
    // 0F9F 0062;	
    // (ྟ) TIBETAN SUBJOINED LETTER TA	[2EED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F9F, 0x0062 };
    uint32_t const ces[9] = { 0x2EED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_135)
{
    // 0F50 0021;	
    // (ཐ) TIBETAN LETTER THA	[2EEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F50, 0x0021 };
    uint32_t const ces[9] = { 0x2EEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_136)
{
    // 0F50 003F;	
    // (ཐ) TIBETAN LETTER THA	[2EEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F50, 0x003F };
    uint32_t const ces[9] = { 0x2EEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_137)
{
    // 0F50 0061;	
    // (ཐ) TIBETAN LETTER THA	[2EEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F50, 0x0061 };
    uint32_t const ces[9] = { 0x2EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_138)
{
    // 0F50 0041;	
    // (ཐ) TIBETAN LETTER THA	[2EEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F50, 0x0041 };
    uint32_t const ces[9] = { 0x2EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_139)
{
    // 0F50 0062;	
    // (ཐ) TIBETAN LETTER THA	[2EEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F50, 0x0062 };
    uint32_t const ces[9] = { 0x2EEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_140)
{
    // 0FA0 0021;	
    // (ྠ) TIBETAN SUBJOINED LETTER THA	[2EEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA0, 0x0021 };
    uint32_t const ces[9] = { 0x2EEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_141)
{
    // 0FA0 003F;	
    // (ྠ) TIBETAN SUBJOINED LETTER THA	[2EEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA0, 0x003F };
    uint32_t const ces[9] = { 0x2EEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_142)
{
    // 0FA0 0061;	
    // (ྠ) TIBETAN SUBJOINED LETTER THA	[2EEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA0, 0x0061 };
    uint32_t const ces[9] = { 0x2EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_143)
{
    // 0FA0 0041;	
    // (ྠ) TIBETAN SUBJOINED LETTER THA	[2EEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA0, 0x0041 };
    uint32_t const ces[9] = { 0x2EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_144)
{
    // 0FA0 0062;	
    // (ྠ) TIBETAN SUBJOINED LETTER THA	[2EEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA0, 0x0062 };
    uint32_t const ces[9] = { 0x2EEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_145)
{
    // 0F51 0021;	
    // (ད) TIBETAN LETTER DA	[2EF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F51, 0x0021 };
    uint32_t const ces[9] = { 0x2EF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_146)
{
    // 0F51 003F;	
    // (ད) TIBETAN LETTER DA	[2EF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F51, 0x003F };
    uint32_t const ces[9] = { 0x2EF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_147)
{
    // 0F51 0061;	
    // (ད) TIBETAN LETTER DA	[2EF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F51, 0x0061 };
    uint32_t const ces[9] = { 0x2EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_148)
{
    // 0F51 0041;	
    // (ད) TIBETAN LETTER DA	[2EF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F51, 0x0041 };
    uint32_t const ces[9] = { 0x2EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_149)
{
    // 0F51 0062;	
    // (ད) TIBETAN LETTER DA	[2EF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F51, 0x0062 };
    uint32_t const ces[9] = { 0x2EF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_150)
{
    // 0F52 0021;	
    // (དྷ) TIBETAN LETTER DHA	[2EF0 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F52, 0x0021 };
    uint32_t const ces[12] = { 0x2EF0, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_151)
{
    // 0F52 003F;	
    // (དྷ) TIBETAN LETTER DHA	[2EF0 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F52, 0x003F };
    uint32_t const ces[12] = { 0x2EF0, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_152)
{
    // 0F52 0061;	
    // (དྷ) TIBETAN LETTER DHA	[2EF0 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F52, 0x0061 };
    uint32_t const ces[12] = { 0x2EF0, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_153)
{
    // 0F52 0041;	
    // (དྷ) TIBETAN LETTER DHA	[2EF0 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F52, 0x0041 };
    uint32_t const ces[12] = { 0x2EF0, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_154)
{
    // 0F52 0062;	
    // (དྷ) TIBETAN LETTER DHA	[2EF0 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F52, 0x0062 };
    uint32_t const ces[12] = { 0x2EF0, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_155)
{
    // 0FA1 0021;	
    // (ྡ) TIBETAN SUBJOINED LETTER DA	[2EF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA1, 0x0021 };
    uint32_t const ces[9] = { 0x2EF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_156)
{
    // 0FA1 003F;	
    // (ྡ) TIBETAN SUBJOINED LETTER DA	[2EF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA1, 0x003F };
    uint32_t const ces[9] = { 0x2EF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_157)
{
    // 0FA1 0061;	
    // (ྡ) TIBETAN SUBJOINED LETTER DA	[2EF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA1, 0x0061 };
    uint32_t const ces[9] = { 0x2EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_158)
{
    // 0FA1 0041;	
    // (ྡ) TIBETAN SUBJOINED LETTER DA	[2EF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA1, 0x0041 };
    uint32_t const ces[9] = { 0x2EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_159)
{
    // 0FA1 0062;	
    // (ྡ) TIBETAN SUBJOINED LETTER DA	[2EF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA1, 0x0062 };
    uint32_t const ces[9] = { 0x2EF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_160)
{
    // 0FA2 0021;	
    // (ྡྷ) TIBETAN SUBJOINED LETTER DHA	[2EF1 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EF1, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_161)
{
    // 0FA2 003F;	
    // (ྡྷ) TIBETAN SUBJOINED LETTER DHA	[2EF1 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA2, 0x003F };
    uint32_t const ces[12] = { 0x2EF1, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_162)
{
    // 0FA2 0061;	
    // (ྡྷ) TIBETAN SUBJOINED LETTER DHA	[2EF1 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EF1, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_163)
{
    // 0FA2 0041;	
    // (ྡྷ) TIBETAN SUBJOINED LETTER DHA	[2EF1 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0FA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EF1, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_164)
{
    // 0FA2 0062;	
    // (ྡྷ) TIBETAN SUBJOINED LETTER DHA	[2EF1 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EF1, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_165)
{
    // 0F53 0021;	
    // (ན) TIBETAN LETTER NA	[2EF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F53, 0x0021 };
    uint32_t const ces[9] = { 0x2EF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_166)
{
    // 0F53 003F;	
    // (ན) TIBETAN LETTER NA	[2EF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F53, 0x003F };
    uint32_t const ces[9] = { 0x2EF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_167)
{
    // 0F53 0061;	
    // (ན) TIBETAN LETTER NA	[2EF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F53, 0x0061 };
    uint32_t const ces[9] = { 0x2EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_168)
{
    // 0F53 0041;	
    // (ན) TIBETAN LETTER NA	[2EF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F53, 0x0041 };
    uint32_t const ces[9] = { 0x2EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_169)
{
    // 0F53 0062;	
    // (ན) TIBETAN LETTER NA	[2EF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F53, 0x0062 };
    uint32_t const ces[9] = { 0x2EF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_170)
{
    // 0FA3 0021;	
    // (ྣ) TIBETAN SUBJOINED LETTER NA	[2EF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA3, 0x0021 };
    uint32_t const ces[9] = { 0x2EF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_171)
{
    // 0FA3 003F;	
    // (ྣ) TIBETAN SUBJOINED LETTER NA	[2EF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA3, 0x003F };
    uint32_t const ces[9] = { 0x2EF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_172)
{
    // 0FA3 0061;	
    // (ྣ) TIBETAN SUBJOINED LETTER NA	[2EF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA3, 0x0061 };
    uint32_t const ces[9] = { 0x2EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_173)
{
    // 0FA3 0041;	
    // (ྣ) TIBETAN SUBJOINED LETTER NA	[2EF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA3, 0x0041 };
    uint32_t const ces[9] = { 0x2EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_174)
{
    // 0FA3 0062;	
    // (ྣ) TIBETAN SUBJOINED LETTER NA	[2EF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA3, 0x0062 };
    uint32_t const ces[9] = { 0x2EF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_175)
{
    // 0F54 0021;	
    // (པ) TIBETAN LETTER PA	[2EF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F54, 0x0021 };
    uint32_t const ces[9] = { 0x2EF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_176)
{
    // 0F54 003F;	
    // (པ) TIBETAN LETTER PA	[2EF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F54, 0x003F };
    uint32_t const ces[9] = { 0x2EF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_177)
{
    // 0F54 0061;	
    // (པ) TIBETAN LETTER PA	[2EF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F54, 0x0061 };
    uint32_t const ces[9] = { 0x2EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_178)
{
    // 0F54 0041;	
    // (པ) TIBETAN LETTER PA	[2EF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F54, 0x0041 };
    uint32_t const ces[9] = { 0x2EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_179)
{
    // 0F54 0062;	
    // (པ) TIBETAN LETTER PA	[2EF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F54, 0x0062 };
    uint32_t const ces[9] = { 0x2EF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_180)
{
    // 0FA4 0021;	
    // (ྤ) TIBETAN SUBJOINED LETTER PA	[2EF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA4, 0x0021 };
    uint32_t const ces[9] = { 0x2EF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_181)
{
    // 0FA4 003F;	
    // (ྤ) TIBETAN SUBJOINED LETTER PA	[2EF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA4, 0x003F };
    uint32_t const ces[9] = { 0x2EF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_182)
{
    // 0FA4 0061;	
    // (ྤ) TIBETAN SUBJOINED LETTER PA	[2EF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA4, 0x0061 };
    uint32_t const ces[9] = { 0x2EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_183)
{
    // 0FA4 0041;	
    // (ྤ) TIBETAN SUBJOINED LETTER PA	[2EF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA4, 0x0041 };
    uint32_t const ces[9] = { 0x2EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_184)
{
    // 0FA4 0062;	
    // (ྤ) TIBETAN SUBJOINED LETTER PA	[2EF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA4, 0x0062 };
    uint32_t const ces[9] = { 0x2EF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_185)
{
    // 0F55 0021;	
    // (ཕ) TIBETAN LETTER PHA	[2EF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F55, 0x0021 };
    uint32_t const ces[9] = { 0x2EF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_186)
{
    // 0F55 003F;	
    // (ཕ) TIBETAN LETTER PHA	[2EF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F55, 0x003F };
    uint32_t const ces[9] = { 0x2EF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_187)
{
    // 0F55 0061;	
    // (ཕ) TIBETAN LETTER PHA	[2EF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F55, 0x0061 };
    uint32_t const ces[9] = { 0x2EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_188)
{
    // 0F55 0041;	
    // (ཕ) TIBETAN LETTER PHA	[2EF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F55, 0x0041 };
    uint32_t const ces[9] = { 0x2EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_189)
{
    // 0F55 0062;	
    // (ཕ) TIBETAN LETTER PHA	[2EF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F55, 0x0062 };
    uint32_t const ces[9] = { 0x2EF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_190)
{
    // 0FA5 0021;	
    // (ྥ) TIBETAN SUBJOINED LETTER PHA	[2EF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA5, 0x0021 };
    uint32_t const ces[9] = { 0x2EF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_191)
{
    // 0FA5 003F;	
    // (ྥ) TIBETAN SUBJOINED LETTER PHA	[2EF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA5, 0x003F };
    uint32_t const ces[9] = { 0x2EF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_192)
{
    // 0FA5 0061;	
    // (ྥ) TIBETAN SUBJOINED LETTER PHA	[2EF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA5, 0x0061 };
    uint32_t const ces[9] = { 0x2EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_193)
{
    // 0FA5 0041;	
    // (ྥ) TIBETAN SUBJOINED LETTER PHA	[2EF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA5, 0x0041 };
    uint32_t const ces[9] = { 0x2EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_194)
{
    // 0FA5 0062;	
    // (ྥ) TIBETAN SUBJOINED LETTER PHA	[2EF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA5, 0x0062 };
    uint32_t const ces[9] = { 0x2EF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_195)
{
    // 0F56 0021;	
    // (བ) TIBETAN LETTER BA	[2EF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F56, 0x0021 };
    uint32_t const ces[9] = { 0x2EF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_196)
{
    // 0F56 003F;	
    // (བ) TIBETAN LETTER BA	[2EF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F56, 0x003F };
    uint32_t const ces[9] = { 0x2EF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_197)
{
    // 0F56 0061;	
    // (བ) TIBETAN LETTER BA	[2EF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F56, 0x0061 };
    uint32_t const ces[9] = { 0x2EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_198)
{
    // 0F56 0041;	
    // (བ) TIBETAN LETTER BA	[2EF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F56, 0x0041 };
    uint32_t const ces[9] = { 0x2EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_199)
{
    // 0F56 0062;	
    // (བ) TIBETAN LETTER BA	[2EF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F56, 0x0062 };
    uint32_t const ces[9] = { 0x2EF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_200)
{
    // 0F57 0021;	
    // (བྷ) TIBETAN LETTER BHA	[2EF8 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F57, 0x0021 };
    uint32_t const ces[12] = { 0x2EF8, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_201)
{
    // 0F57 003F;	
    // (བྷ) TIBETAN LETTER BHA	[2EF8 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F57, 0x003F };
    uint32_t const ces[12] = { 0x2EF8, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_202)
{
    // 0F57 0061;	
    // (བྷ) TIBETAN LETTER BHA	[2EF8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F57, 0x0061 };
    uint32_t const ces[12] = { 0x2EF8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_203)
{
    // 0F57 0041;	
    // (བྷ) TIBETAN LETTER BHA	[2EF8 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F57, 0x0041 };
    uint32_t const ces[12] = { 0x2EF8, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_204)
{
    // 0F57 0062;	
    // (བྷ) TIBETAN LETTER BHA	[2EF8 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F57, 0x0062 };
    uint32_t const ces[12] = { 0x2EF8, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_205)
{
    // 0FA6 0021;	
    // (ྦ) TIBETAN SUBJOINED LETTER BA	[2EF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA6, 0x0021 };
    uint32_t const ces[9] = { 0x2EF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_206)
{
    // 0FA6 003F;	
    // (ྦ) TIBETAN SUBJOINED LETTER BA	[2EF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA6, 0x003F };
    uint32_t const ces[9] = { 0x2EF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_207)
{
    // 0FA6 0061;	
    // (ྦ) TIBETAN SUBJOINED LETTER BA	[2EF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA6, 0x0061 };
    uint32_t const ces[9] = { 0x2EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_208)
{
    // 0FA6 0041;	
    // (ྦ) TIBETAN SUBJOINED LETTER BA	[2EF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA6, 0x0041 };
    uint32_t const ces[9] = { 0x2EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_209)
{
    // 0FA6 0062;	
    // (ྦ) TIBETAN SUBJOINED LETTER BA	[2EF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA6, 0x0062 };
    uint32_t const ces[9] = { 0x2EF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_210)
{
    // 0FA7 0021;	
    // (ྦྷ) TIBETAN SUBJOINED LETTER BHA	[2EF9 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EF9, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_211)
{
    // 0FA7 003F;	
    // (ྦྷ) TIBETAN SUBJOINED LETTER BHA	[2EF9 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA7, 0x003F };
    uint32_t const ces[12] = { 0x2EF9, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_212)
{
    // 0FA7 0061;	
    // (ྦྷ) TIBETAN SUBJOINED LETTER BHA	[2EF9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EF9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_213)
{
    // 0FA7 0041;	
    // (ྦྷ) TIBETAN SUBJOINED LETTER BHA	[2EF9 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0FA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EF9, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_214)
{
    // 0FA7 0062;	
    // (ྦྷ) TIBETAN SUBJOINED LETTER BHA	[2EF9 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EF9, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_215)
{
    // 0F58 0021;	
    // (མ) TIBETAN LETTER MA	[2EFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F58, 0x0021 };
    uint32_t const ces[9] = { 0x2EFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_216)
{
    // 0F58 003F;	
    // (མ) TIBETAN LETTER MA	[2EFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F58, 0x003F };
    uint32_t const ces[9] = { 0x2EFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_217)
{
    // 0F58 0061;	
    // (མ) TIBETAN LETTER MA	[2EFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F58, 0x0061 };
    uint32_t const ces[9] = { 0x2EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_218)
{
    // 0F58 0041;	
    // (མ) TIBETAN LETTER MA	[2EFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F58, 0x0041 };
    uint32_t const ces[9] = { 0x2EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_219)
{
    // 0F58 0062;	
    // (མ) TIBETAN LETTER MA	[2EFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F58, 0x0062 };
    uint32_t const ces[9] = { 0x2EFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_220)
{
    // 0FA8 0021;	
    // (ྨ) TIBETAN SUBJOINED LETTER MA	[2EFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA8, 0x0021 };
    uint32_t const ces[9] = { 0x2EFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_221)
{
    // 0FA8 003F;	
    // (ྨ) TIBETAN SUBJOINED LETTER MA	[2EFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA8, 0x003F };
    uint32_t const ces[9] = { 0x2EFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_222)
{
    // 0FA8 0061;	
    // (ྨ) TIBETAN SUBJOINED LETTER MA	[2EFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA8, 0x0061 };
    uint32_t const ces[9] = { 0x2EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_223)
{
    // 0FA8 0041;	
    // (ྨ) TIBETAN SUBJOINED LETTER MA	[2EFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA8, 0x0041 };
    uint32_t const ces[9] = { 0x2EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_224)
{
    // 0FA8 0062;	
    // (ྨ) TIBETAN SUBJOINED LETTER MA	[2EFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA8, 0x0062 };
    uint32_t const ces[9] = { 0x2EFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_225)
{
    // 0F59 0021;	
    // (ཙ) TIBETAN LETTER TSA	[2EFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F59, 0x0021 };
    uint32_t const ces[9] = { 0x2EFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_226)
{
    // 0F59 003F;	
    // (ཙ) TIBETAN LETTER TSA	[2EFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F59, 0x003F };
    uint32_t const ces[9] = { 0x2EFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_227)
{
    // 0F59 0061;	
    // (ཙ) TIBETAN LETTER TSA	[2EFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F59, 0x0061 };
    uint32_t const ces[9] = { 0x2EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_228)
{
    // 0F59 0041;	
    // (ཙ) TIBETAN LETTER TSA	[2EFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F59, 0x0041 };
    uint32_t const ces[9] = { 0x2EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_229)
{
    // 0F59 0062;	
    // (ཙ) TIBETAN LETTER TSA	[2EFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F59, 0x0062 };
    uint32_t const ces[9] = { 0x2EFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_230)
{
    // 0FA9 0021;	
    // (ྩ) TIBETAN SUBJOINED LETTER TSA	[2EFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA9, 0x0021 };
    uint32_t const ces[9] = { 0x2EFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_231)
{
    // 0FA9 003F;	
    // (ྩ) TIBETAN SUBJOINED LETTER TSA	[2EFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA9, 0x003F };
    uint32_t const ces[9] = { 0x2EFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_232)
{
    // 0FA9 0061;	
    // (ྩ) TIBETAN SUBJOINED LETTER TSA	[2EFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA9, 0x0061 };
    uint32_t const ces[9] = { 0x2EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_233)
{
    // 0FA9 0041;	
    // (ྩ) TIBETAN SUBJOINED LETTER TSA	[2EFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FA9, 0x0041 };
    uint32_t const ces[9] = { 0x2EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_234)
{
    // 0FA9 0062;	
    // (ྩ) TIBETAN SUBJOINED LETTER TSA	[2EFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FA9, 0x0062 };
    uint32_t const ces[9] = { 0x2EFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_235)
{
    // 0F5A 0021;	
    // (ཚ) TIBETAN LETTER TSHA	[2EFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5A, 0x0021 };
    uint32_t const ces[9] = { 0x2EFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_236)
{
    // 0F5A 003F;	
    // (ཚ) TIBETAN LETTER TSHA	[2EFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5A, 0x003F };
    uint32_t const ces[9] = { 0x2EFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_237)
{
    // 0F5A 0061;	
    // (ཚ) TIBETAN LETTER TSHA	[2EFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5A, 0x0061 };
    uint32_t const ces[9] = { 0x2EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_238)
{
    // 0F5A 0041;	
    // (ཚ) TIBETAN LETTER TSHA	[2EFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F5A, 0x0041 };
    uint32_t const ces[9] = { 0x2EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_239)
{
    // 0F5A 0062;	
    // (ཚ) TIBETAN LETTER TSHA	[2EFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5A, 0x0062 };
    uint32_t const ces[9] = { 0x2EFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_240)
{
    // 0FAA 0021;	
    // (ྪ) TIBETAN SUBJOINED LETTER TSHA	[2EFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAA, 0x0021 };
    uint32_t const ces[9] = { 0x2EFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_241)
{
    // 0FAA 003F;	
    // (ྪ) TIBETAN SUBJOINED LETTER TSHA	[2EFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAA, 0x003F };
    uint32_t const ces[9] = { 0x2EFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_242)
{
    // 0FAA 0061;	
    // (ྪ) TIBETAN SUBJOINED LETTER TSHA	[2EFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAA, 0x0061 };
    uint32_t const ces[9] = { 0x2EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_243)
{
    // 0FAA 0041;	
    // (ྪ) TIBETAN SUBJOINED LETTER TSHA	[2EFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FAA, 0x0041 };
    uint32_t const ces[9] = { 0x2EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_244)
{
    // 0FAA 0062;	
    // (ྪ) TIBETAN SUBJOINED LETTER TSHA	[2EFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAA, 0x0062 };
    uint32_t const ces[9] = { 0x2EFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_245)
{
    // 0F5B 0021;	
    // (ཛ) TIBETAN LETTER DZA	[2F00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5B, 0x0021 };
    uint32_t const ces[9] = { 0x2F00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_246)
{
    // 0F5B 003F;	
    // (ཛ) TIBETAN LETTER DZA	[2F00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5B, 0x003F };
    uint32_t const ces[9] = { 0x2F00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_247)
{
    // 0F5B 0061;	
    // (ཛ) TIBETAN LETTER DZA	[2F00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5B, 0x0061 };
    uint32_t const ces[9] = { 0x2F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_248)
{
    // 0F5B 0041;	
    // (ཛ) TIBETAN LETTER DZA	[2F00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F5B, 0x0041 };
    uint32_t const ces[9] = { 0x2F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_249)
{
    // 0F5B 0062;	
    // (ཛ) TIBETAN LETTER DZA	[2F00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5B, 0x0062 };
    uint32_t const ces[9] = { 0x2F00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_250)
{
    // 0F5C 0021;	
    // (ཛྷ) TIBETAN LETTER DZHA	[2F00 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F5C, 0x0021 };
    uint32_t const ces[12] = { 0x2F00, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_251)
{
    // 0F5C 003F;	
    // (ཛྷ) TIBETAN LETTER DZHA	[2F00 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F5C, 0x003F };
    uint32_t const ces[12] = { 0x2F00, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_252)
{
    // 0F5C 0061;	
    // (ཛྷ) TIBETAN LETTER DZHA	[2F00 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F5C, 0x0061 };
    uint32_t const ces[12] = { 0x2F00, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_253)
{
    // 0F5C 0041;	
    // (ཛྷ) TIBETAN LETTER DZHA	[2F00 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0F5C, 0x0041 };
    uint32_t const ces[12] = { 0x2F00, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_254)
{
    // 0F5C 0062;	
    // (ཛྷ) TIBETAN LETTER DZHA	[2F00 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0F5C, 0x0062 };
    uint32_t const ces[12] = { 0x2F00, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_255)
{
    // 0FAB 0021;	
    // (ྫ) TIBETAN SUBJOINED LETTER DZA	[2F01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAB, 0x0021 };
    uint32_t const ces[9] = { 0x2F01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_256)
{
    // 0FAB 003F;	
    // (ྫ) TIBETAN SUBJOINED LETTER DZA	[2F01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAB, 0x003F };
    uint32_t const ces[9] = { 0x2F01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_257)
{
    // 0FAB 0061;	
    // (ྫ) TIBETAN SUBJOINED LETTER DZA	[2F01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAB, 0x0061 };
    uint32_t const ces[9] = { 0x2F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_258)
{
    // 0FAB 0041;	
    // (ྫ) TIBETAN SUBJOINED LETTER DZA	[2F01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FAB, 0x0041 };
    uint32_t const ces[9] = { 0x2F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_259)
{
    // 0FAB 0062;	
    // (ྫ) TIBETAN SUBJOINED LETTER DZA	[2F01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAB, 0x0062 };
    uint32_t const ces[9] = { 0x2F01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_260)
{
    // 0FAC 0021;	
    // (ྫྷ) TIBETAN SUBJOINED LETTER DZHA	[2F01 2F18 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FAC, 0x0021 };
    uint32_t const ces[12] = { 0x2F01, 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_261)
{
    // 0FAC 003F;	
    // (ྫྷ) TIBETAN SUBJOINED LETTER DZHA	[2F01 2F18 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FAC, 0x003F };
    uint32_t const ces[12] = { 0x2F01, 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_262)
{
    // 0FAC 0061;	
    // (ྫྷ) TIBETAN SUBJOINED LETTER DZHA	[2F01 2F18 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FAC, 0x0061 };
    uint32_t const ces[12] = { 0x2F01, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_263)
{
    // 0FAC 0041;	
    // (ྫྷ) TIBETAN SUBJOINED LETTER DZHA	[2F01 2F18 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0FAC, 0x0041 };
    uint32_t const ces[12] = { 0x2F01, 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_264)
{
    // 0FAC 0062;	
    // (ྫྷ) TIBETAN SUBJOINED LETTER DZHA	[2F01 2F18 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0FAC, 0x0062 };
    uint32_t const ces[12] = { 0x2F01, 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_265)
{
    // 0F5D 0021;	
    // (ཝ) TIBETAN LETTER WA	[2F02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5D, 0x0021 };
    uint32_t const ces[9] = { 0x2F02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_266)
{
    // 0F5D 003F;	
    // (ཝ) TIBETAN LETTER WA	[2F02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5D, 0x003F };
    uint32_t const ces[9] = { 0x2F02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_267)
{
    // 0F5D 0061;	
    // (ཝ) TIBETAN LETTER WA	[2F02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5D, 0x0061 };
    uint32_t const ces[9] = { 0x2F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_268)
{
    // 0F5D 0041;	
    // (ཝ) TIBETAN LETTER WA	[2F02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F5D, 0x0041 };
    uint32_t const ces[9] = { 0x2F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_269)
{
    // 0F5D 0062;	
    // (ཝ) TIBETAN LETTER WA	[2F02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5D, 0x0062 };
    uint32_t const ces[9] = { 0x2F02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_270)
{
    // 0FAD 0021;	
    // (ྭ) TIBETAN SUBJOINED LETTER WA	[2F03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAD, 0x0021 };
    uint32_t const ces[9] = { 0x2F03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_271)
{
    // 0FBA 0021;	
    // (ྺ) TIBETAN SUBJOINED LETTER FIXED-FORM WA	[2F03 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBA, 0x0021 };
    uint32_t const ces[11] = { 0x2F03, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_272)
{
    // 0FAD 003F;	
    // (ྭ) TIBETAN SUBJOINED LETTER WA	[2F03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAD, 0x003F };
    uint32_t const ces[9] = { 0x2F03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_273)
{
    // 0FBA 003F;	
    // (ྺ) TIBETAN SUBJOINED LETTER FIXED-FORM WA	[2F03 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBA, 0x003F };
    uint32_t const ces[11] = { 0x2F03, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_274)
{
    // 0FAD 0061;	
    // (ྭ) TIBETAN SUBJOINED LETTER WA	[2F03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAD, 0x0061 };
    uint32_t const ces[9] = { 0x2F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_275)
{
    // 0FAD 0041;	
    // (ྭ) TIBETAN SUBJOINED LETTER WA	[2F03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FAD, 0x0041 };
    uint32_t const ces[9] = { 0x2F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_276)
{
    // 0FBA 0061;	
    // (ྺ) TIBETAN SUBJOINED LETTER FIXED-FORM WA	[2F03 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBA, 0x0061 };
    uint32_t const ces[11] = { 0x2F03, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_277)
{
    // 0FBA 0041;	
    // (ྺ) TIBETAN SUBJOINED LETTER FIXED-FORM WA	[2F03 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0FBA, 0x0041 };
    uint32_t const ces[11] = { 0x2F03, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_278)
{
    // 0FAD 0062;	
    // (ྭ) TIBETAN SUBJOINED LETTER WA	[2F03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAD, 0x0062 };
    uint32_t const ces[9] = { 0x2F03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_279)
{
    // 0FBA 0062;	
    // (ྺ) TIBETAN SUBJOINED LETTER FIXED-FORM WA	[2F03 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBA, 0x0062 };
    uint32_t const ces[11] = { 0x2F03, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_280)
{
    // 0F5E 0021;	
    // (ཞ) TIBETAN LETTER ZHA	[2F04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5E, 0x0021 };
    uint32_t const ces[9] = { 0x2F04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_281)
{
    // 0F5E 003F;	
    // (ཞ) TIBETAN LETTER ZHA	[2F04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5E, 0x003F };
    uint32_t const ces[9] = { 0x2F04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_282)
{
    // 0F5E 0061;	
    // (ཞ) TIBETAN LETTER ZHA	[2F04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5E, 0x0061 };
    uint32_t const ces[9] = { 0x2F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_283)
{
    // 0F5E 0041;	
    // (ཞ) TIBETAN LETTER ZHA	[2F04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F5E, 0x0041 };
    uint32_t const ces[9] = { 0x2F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_284)
{
    // 0F5E 0062;	
    // (ཞ) TIBETAN LETTER ZHA	[2F04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5E, 0x0062 };
    uint32_t const ces[9] = { 0x2F04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_285)
{
    // 0FAE 0021;	
    // (ྮ) TIBETAN SUBJOINED LETTER ZHA	[2F05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAE, 0x0021 };
    uint32_t const ces[9] = { 0x2F05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_286)
{
    // 0FAE 003F;	
    // (ྮ) TIBETAN SUBJOINED LETTER ZHA	[2F05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAE, 0x003F };
    uint32_t const ces[9] = { 0x2F05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_287)
{
    // 0FAE 0061;	
    // (ྮ) TIBETAN SUBJOINED LETTER ZHA	[2F05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAE, 0x0061 };
    uint32_t const ces[9] = { 0x2F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_288)
{
    // 0FAE 0041;	
    // (ྮ) TIBETAN SUBJOINED LETTER ZHA	[2F05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FAE, 0x0041 };
    uint32_t const ces[9] = { 0x2F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_289)
{
    // 0FAE 0062;	
    // (ྮ) TIBETAN SUBJOINED LETTER ZHA	[2F05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAE, 0x0062 };
    uint32_t const ces[9] = { 0x2F05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_290)
{
    // 0F5F 0021;	
    // (ཟ) TIBETAN LETTER ZA	[2F06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5F, 0x0021 };
    uint32_t const ces[9] = { 0x2F06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_291)
{
    // 0F5F 003F;	
    // (ཟ) TIBETAN LETTER ZA	[2F06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5F, 0x003F };
    uint32_t const ces[9] = { 0x2F06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_292)
{
    // 0F5F 0061;	
    // (ཟ) TIBETAN LETTER ZA	[2F06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5F, 0x0061 };
    uint32_t const ces[9] = { 0x2F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_293)
{
    // 0F5F 0041;	
    // (ཟ) TIBETAN LETTER ZA	[2F06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F5F, 0x0041 };
    uint32_t const ces[9] = { 0x2F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_294)
{
    // 0F5F 0062;	
    // (ཟ) TIBETAN LETTER ZA	[2F06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F5F, 0x0062 };
    uint32_t const ces[9] = { 0x2F06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_295)
{
    // 0FAF 0021;	
    // (ྯ) TIBETAN SUBJOINED LETTER ZA	[2F07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAF, 0x0021 };
    uint32_t const ces[9] = { 0x2F07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_296)
{
    // 0FAF 003F;	
    // (ྯ) TIBETAN SUBJOINED LETTER ZA	[2F07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAF, 0x003F };
    uint32_t const ces[9] = { 0x2F07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_297)
{
    // 0FAF 0061;	
    // (ྯ) TIBETAN SUBJOINED LETTER ZA	[2F07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAF, 0x0061 };
    uint32_t const ces[9] = { 0x2F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_298)
{
    // 0FAF 0041;	
    // (ྯ) TIBETAN SUBJOINED LETTER ZA	[2F07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FAF, 0x0041 };
    uint32_t const ces[9] = { 0x2F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_299)
{
    // 0FAF 0062;	
    // (ྯ) TIBETAN SUBJOINED LETTER ZA	[2F07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FAF, 0x0062 };
    uint32_t const ces[9] = { 0x2F07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_300)
{
    // 0F60 0021;	
    // (འ) TIBETAN LETTER -A	[2F08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F60, 0x0021 };
    uint32_t const ces[9] = { 0x2F08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_301)
{
    // 0F60 003F;	
    // (འ) TIBETAN LETTER -A	[2F08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F60, 0x003F };
    uint32_t const ces[9] = { 0x2F08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_302)
{
    // 0F60 0061;	
    // (འ) TIBETAN LETTER -A	[2F08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F60, 0x0061 };
    uint32_t const ces[9] = { 0x2F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_303)
{
    // 0F60 0041;	
    // (འ) TIBETAN LETTER -A	[2F08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F60, 0x0041 };
    uint32_t const ces[9] = { 0x2F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_304)
{
    // 0F60 0062;	
    // (འ) TIBETAN LETTER -A	[2F08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F60, 0x0062 };
    uint32_t const ces[9] = { 0x2F08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_305)
{
    // 0FB0 0021;	
    // (ྰ) TIBETAN SUBJOINED LETTER -A	[2F09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB0, 0x0021 };
    uint32_t const ces[9] = { 0x2F09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_306)
{
    // 0FB0 003F;	
    // (ྰ) TIBETAN SUBJOINED LETTER -A	[2F09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB0, 0x003F };
    uint32_t const ces[9] = { 0x2F09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_307)
{
    // 0FB0 0061;	
    // (ྰ) TIBETAN SUBJOINED LETTER -A	[2F09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB0, 0x0061 };
    uint32_t const ces[9] = { 0x2F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_308)
{
    // 0FB0 0041;	
    // (ྰ) TIBETAN SUBJOINED LETTER -A	[2F09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB0, 0x0041 };
    uint32_t const ces[9] = { 0x2F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_309)
{
    // 0FB0 0062;	
    // (ྰ) TIBETAN SUBJOINED LETTER -A	[2F09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB0, 0x0062 };
    uint32_t const ces[9] = { 0x2F09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_310)
{
    // 0F61 0021;	
    // (ཡ) TIBETAN LETTER YA	[2F0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F61, 0x0021 };
    uint32_t const ces[9] = { 0x2F0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_311)
{
    // 0F61 003F;	
    // (ཡ) TIBETAN LETTER YA	[2F0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F61, 0x003F };
    uint32_t const ces[9] = { 0x2F0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_312)
{
    // 0F61 0061;	
    // (ཡ) TIBETAN LETTER YA	[2F0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F61, 0x0061 };
    uint32_t const ces[9] = { 0x2F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_313)
{
    // 0F61 0041;	
    // (ཡ) TIBETAN LETTER YA	[2F0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F61, 0x0041 };
    uint32_t const ces[9] = { 0x2F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_314)
{
    // 0F61 0062;	
    // (ཡ) TIBETAN LETTER YA	[2F0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F61, 0x0062 };
    uint32_t const ces[9] = { 0x2F0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_315)
{
    // 0FB1 0021;	
    // (ྱ) TIBETAN SUBJOINED LETTER YA	[2F0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB1, 0x0021 };
    uint32_t const ces[9] = { 0x2F0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_316)
{
    // 0FBB 0021;	
    // (ྻ) TIBETAN SUBJOINED LETTER FIXED-FORM YA	[2F0B 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBB, 0x0021 };
    uint32_t const ces[11] = { 0x2F0B, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_317)
{
    // 0FB1 003F;	
    // (ྱ) TIBETAN SUBJOINED LETTER YA	[2F0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB1, 0x003F };
    uint32_t const ces[9] = { 0x2F0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_318)
{
    // 0FBB 003F;	
    // (ྻ) TIBETAN SUBJOINED LETTER FIXED-FORM YA	[2F0B 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBB, 0x003F };
    uint32_t const ces[11] = { 0x2F0B, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_319)
{
    // 0FB1 0061;	
    // (ྱ) TIBETAN SUBJOINED LETTER YA	[2F0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB1, 0x0061 };
    uint32_t const ces[9] = { 0x2F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_320)
{
    // 0FB1 0041;	
    // (ྱ) TIBETAN SUBJOINED LETTER YA	[2F0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB1, 0x0041 };
    uint32_t const ces[9] = { 0x2F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_321)
{
    // 0FBB 0061;	
    // (ྻ) TIBETAN SUBJOINED LETTER FIXED-FORM YA	[2F0B 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBB, 0x0061 };
    uint32_t const ces[11] = { 0x2F0B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_322)
{
    // 0FBB 0041;	
    // (ྻ) TIBETAN SUBJOINED LETTER FIXED-FORM YA	[2F0B 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0FBB, 0x0041 };
    uint32_t const ces[11] = { 0x2F0B, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_323)
{
    // 0FB1 0062;	
    // (ྱ) TIBETAN SUBJOINED LETTER YA	[2F0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB1, 0x0062 };
    uint32_t const ces[9] = { 0x2F0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_324)
{
    // 0FBB 0062;	
    // (ྻ) TIBETAN SUBJOINED LETTER FIXED-FORM YA	[2F0B 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBB, 0x0062 };
    uint32_t const ces[11] = { 0x2F0B, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_325)
{
    // 0F62 0021;	
    // (ར) TIBETAN LETTER RA	[2F0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F62, 0x0021 };
    uint32_t const ces[9] = { 0x2F0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_326)
{
    // 0F6A 0021;	
    // (ཪ) TIBETAN LETTER FIXED-FORM RA	[2F0C 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F6A, 0x0021 };
    uint32_t const ces[11] = { 0x2F0C, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_327)
{
    // 0F62 003F;	
    // (ར) TIBETAN LETTER RA	[2F0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F62, 0x003F };
    uint32_t const ces[9] = { 0x2F0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_328)
{
    // 0F6A 003F;	
    // (ཪ) TIBETAN LETTER FIXED-FORM RA	[2F0C 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F6A, 0x003F };
    uint32_t const ces[11] = { 0x2F0C, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_329)
{
    // 0F62 0061;	
    // (ར) TIBETAN LETTER RA	[2F0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F62, 0x0061 };
    uint32_t const ces[9] = { 0x2F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_330)
{
    // 0F62 0041;	
    // (ར) TIBETAN LETTER RA	[2F0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F62, 0x0041 };
    uint32_t const ces[9] = { 0x2F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_331)
{
    // 0F6A 0061;	
    // (ཪ) TIBETAN LETTER FIXED-FORM RA	[2F0C 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F6A, 0x0061 };
    uint32_t const ces[11] = { 0x2F0C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_332)
{
    // 0F6A 0041;	
    // (ཪ) TIBETAN LETTER FIXED-FORM RA	[2F0C 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0F6A, 0x0041 };
    uint32_t const ces[11] = { 0x2F0C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_333)
{
    // 0F62 0062;	
    // (ར) TIBETAN LETTER RA	[2F0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F62, 0x0062 };
    uint32_t const ces[9] = { 0x2F0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_334)
{
    // 0F6A 0062;	
    // (ཪ) TIBETAN LETTER FIXED-FORM RA	[2F0C 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F6A, 0x0062 };
    uint32_t const ces[11] = { 0x2F0C, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_335)
{
    // 0FB2 0021;	
    // (ྲ) TIBETAN SUBJOINED LETTER RA	[2F0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB2, 0x0021 };
    uint32_t const ces[9] = { 0x2F0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_336)
{
    // 0FBC 0021;	
    // (ྼ) TIBETAN SUBJOINED LETTER FIXED-FORM RA	[2F0D 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBC, 0x0021 };
    uint32_t const ces[11] = { 0x2F0D, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_337)
{
    // 0FB2 003F;	
    // (ྲ) TIBETAN SUBJOINED LETTER RA	[2F0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB2, 0x003F };
    uint32_t const ces[9] = { 0x2F0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_338)
{
    // 0FBC 003F;	
    // (ྼ) TIBETAN SUBJOINED LETTER FIXED-FORM RA	[2F0D 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBC, 0x003F };
    uint32_t const ces[11] = { 0x2F0D, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_339)
{
    // 0FB2 0061;	
    // (ྲ) TIBETAN SUBJOINED LETTER RA	[2F0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB2, 0x0061 };
    uint32_t const ces[9] = { 0x2F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_340)
{
    // 0FB2 0041;	
    // (ྲ) TIBETAN SUBJOINED LETTER RA	[2F0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB2, 0x0041 };
    uint32_t const ces[9] = { 0x2F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_341)
{
    // 0FBC 0061;	
    // (ྼ) TIBETAN SUBJOINED LETTER FIXED-FORM RA	[2F0D 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBC, 0x0061 };
    uint32_t const ces[11] = { 0x2F0D, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_342)
{
    // 0FBC 0041;	
    // (ྼ) TIBETAN SUBJOINED LETTER FIXED-FORM RA	[2F0D 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0FBC, 0x0041 };
    uint32_t const ces[11] = { 0x2F0D, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_343)
{
    // 0FB2 0062;	
    // (ྲ) TIBETAN SUBJOINED LETTER RA	[2F0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB2, 0x0062 };
    uint32_t const ces[9] = { 0x2F0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_344)
{
    // 0FBC 0062;	
    // (ྼ) TIBETAN SUBJOINED LETTER FIXED-FORM RA	[2F0D 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0FBC, 0x0062 };
    uint32_t const ces[11] = { 0x2F0D, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_345)
{
    // 0FB2 0F71 0001 0F80 0061;	
    // (ྲཱ'\u0001'ྀ) TIBETAN SUBJOINED LETTER RA, TIBETAN VOWEL SIGN AA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED I	[2F0D 2F23 2F26 1CAD | 0020 0020 0020 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0FB2, 0x0F71, 0x0001, 0x0F80, 0x0061 };
    uint32_t const ces[15] = { 0x2F0D, 0x2F23, 0x2F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_346)
{
    // 0FB2 0001 0F80 0061;	
    // (ྲ'\u0001'ྀ) TIBETAN SUBJOINED LETTER RA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED I	[2F0D 2F26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0FB2, 0x0001, 0x0F80, 0x0061 };
    uint32_t const ces[12] = { 0x2F0D, 0x2F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_347)
{
    // 0FB2 0001 0F71 0F80 0061;	
    // (ྲ'\u0001'ཱྀ) TIBETAN SUBJOINED LETTER RA, <START OF HEADING>, TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN REVERSED I	[2F0D 2F27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0FB2, 0x0001, 0x0F71, 0x0F80, 0x0061 };
    uint32_t const ces[12] = { 0x2F0D, 0x2F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_348)
{
    // 0FB2 0001 0F81 0061;	
    // (ྲ'\u0001'ཱྀ) TIBETAN SUBJOINED LETTER RA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED II	[2F0D 2F27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0FB2, 0x0001, 0x0F81, 0x0061 };
    uint32_t const ces[12] = { 0x2F0D, 0x2F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_349)
{
    // 0F6C 0021;	
    // (ཬ) TIBETAN LETTER RRA	[2F0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F6C, 0x0021 };
    uint32_t const ces[9] = { 0x2F0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_350)
{
    // 0F6C 003F;	
    // (ཬ) TIBETAN LETTER RRA	[2F0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F6C, 0x003F };
    uint32_t const ces[9] = { 0x2F0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_351)
{
    // 0F6C 0061;	
    // (ཬ) TIBETAN LETTER RRA	[2F0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F6C, 0x0061 };
    uint32_t const ces[9] = { 0x2F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_352)
{
    // 0F6C 0041;	
    // (ཬ) TIBETAN LETTER RRA	[2F0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F6C, 0x0041 };
    uint32_t const ces[9] = { 0x2F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_353)
{
    // 0F6C 0062;	
    // (ཬ) TIBETAN LETTER RRA	[2F0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F6C, 0x0062 };
    uint32_t const ces[9] = { 0x2F0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_354)
{
    // 0F63 0021;	
    // (ལ) TIBETAN LETTER LA	[2F0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F63, 0x0021 };
    uint32_t const ces[9] = { 0x2F0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_355)
{
    // 0F63 003F;	
    // (ལ) TIBETAN LETTER LA	[2F0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F63, 0x003F };
    uint32_t const ces[9] = { 0x2F0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_356)
{
    // 0F63 0061;	
    // (ལ) TIBETAN LETTER LA	[2F0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F63, 0x0061 };
    uint32_t const ces[9] = { 0x2F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_357)
{
    // 0F63 0041;	
    // (ལ) TIBETAN LETTER LA	[2F0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F63, 0x0041 };
    uint32_t const ces[9] = { 0x2F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_358)
{
    // 0F63 0062;	
    // (ལ) TIBETAN LETTER LA	[2F0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F63, 0x0062 };
    uint32_t const ces[9] = { 0x2F0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_359)
{
    // 0FB3 0021;	
    // (ླ) TIBETAN SUBJOINED LETTER LA	[2F10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB3, 0x0021 };
    uint32_t const ces[9] = { 0x2F10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_360)
{
    // 0FB3 003F;	
    // (ླ) TIBETAN SUBJOINED LETTER LA	[2F10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB3, 0x003F };
    uint32_t const ces[9] = { 0x2F10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_361)
{
    // 0FB3 0061;	
    // (ླ) TIBETAN SUBJOINED LETTER LA	[2F10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB3, 0x0061 };
    uint32_t const ces[9] = { 0x2F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_362)
{
    // 0FB3 0041;	
    // (ླ) TIBETAN SUBJOINED LETTER LA	[2F10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB3, 0x0041 };
    uint32_t const ces[9] = { 0x2F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_363)
{
    // 0FB3 0062;	
    // (ླ) TIBETAN SUBJOINED LETTER LA	[2F10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB3, 0x0062 };
    uint32_t const ces[9] = { 0x2F10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_364)
{
    // 0FB3 0F71 0001 0F80 0061;	
    // (ླཱ'\u0001'ྀ) TIBETAN SUBJOINED LETTER LA, TIBETAN VOWEL SIGN AA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED I	[2F10 2F23 2F26 1CAD | 0020 0020 0020 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0FB3, 0x0F71, 0x0001, 0x0F80, 0x0061 };
    uint32_t const ces[15] = { 0x2F10, 0x2F23, 0x2F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_365)
{
    // 0FB3 0001 0F80 0061;	
    // (ླ'\u0001'ྀ) TIBETAN SUBJOINED LETTER LA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED I	[2F10 2F26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0FB3, 0x0001, 0x0F80, 0x0061 };
    uint32_t const ces[12] = { 0x2F10, 0x2F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_366)
{
    // 0FB3 0001 0F71 0F80 0061;	
    // (ླ'\u0001'ཱྀ) TIBETAN SUBJOINED LETTER LA, <START OF HEADING>, TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN REVERSED I	[2F10 2F27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0FB3, 0x0001, 0x0F71, 0x0F80, 0x0061 };
    uint32_t const ces[12] = { 0x2F10, 0x2F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_367)
{
    // 0FB3 0001 0F81 0061;	
    // (ླ'\u0001'ཱྀ) TIBETAN SUBJOINED LETTER LA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED II	[2F10 2F27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0FB3, 0x0001, 0x0F81, 0x0061 };
    uint32_t const ces[12] = { 0x2F10, 0x2F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_368)
{
    // 0F64 0021;	
    // (ཤ) TIBETAN LETTER SHA	[2F11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F64, 0x0021 };
    uint32_t const ces[9] = { 0x2F11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_369)
{
    // 0F64 003F;	
    // (ཤ) TIBETAN LETTER SHA	[2F11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F64, 0x003F };
    uint32_t const ces[9] = { 0x2F11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_370)
{
    // 0F64 0061;	
    // (ཤ) TIBETAN LETTER SHA	[2F11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F64, 0x0061 };
    uint32_t const ces[9] = { 0x2F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_371)
{
    // 0F64 0041;	
    // (ཤ) TIBETAN LETTER SHA	[2F11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F64, 0x0041 };
    uint32_t const ces[9] = { 0x2F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_372)
{
    // 0F64 0062;	
    // (ཤ) TIBETAN LETTER SHA	[2F11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F64, 0x0062 };
    uint32_t const ces[9] = { 0x2F11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_373)
{
    // 0FB4 0021;	
    // (ྴ) TIBETAN SUBJOINED LETTER SHA	[2F12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB4, 0x0021 };
    uint32_t const ces[9] = { 0x2F12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_374)
{
    // 0FB4 003F;	
    // (ྴ) TIBETAN SUBJOINED LETTER SHA	[2F12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB4, 0x003F };
    uint32_t const ces[9] = { 0x2F12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_375)
{
    // 0FB4 0061;	
    // (ྴ) TIBETAN SUBJOINED LETTER SHA	[2F12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB4, 0x0061 };
    uint32_t const ces[9] = { 0x2F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_376)
{
    // 0FB4 0041;	
    // (ྴ) TIBETAN SUBJOINED LETTER SHA	[2F12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB4, 0x0041 };
    uint32_t const ces[9] = { 0x2F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_377)
{
    // 0FB4 0062;	
    // (ྴ) TIBETAN SUBJOINED LETTER SHA	[2F12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB4, 0x0062 };
    uint32_t const ces[9] = { 0x2F12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_378)
{
    // 0F65 0021;	
    // (ཥ) TIBETAN LETTER SSA	[2F13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F65, 0x0021 };
    uint32_t const ces[9] = { 0x2F13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_379)
{
    // 0F65 003F;	
    // (ཥ) TIBETAN LETTER SSA	[2F13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F65, 0x003F };
    uint32_t const ces[9] = { 0x2F13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_380)
{
    // 0F65 0061;	
    // (ཥ) TIBETAN LETTER SSA	[2F13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F65, 0x0061 };
    uint32_t const ces[9] = { 0x2F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_381)
{
    // 0F65 0041;	
    // (ཥ) TIBETAN LETTER SSA	[2F13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F65, 0x0041 };
    uint32_t const ces[9] = { 0x2F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_382)
{
    // 0F65 0062;	
    // (ཥ) TIBETAN LETTER SSA	[2F13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F65, 0x0062 };
    uint32_t const ces[9] = { 0x2F13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_383)
{
    // 0FB5 0021;	
    // (ྵ) TIBETAN SUBJOINED LETTER SSA	[2F14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB5, 0x0021 };
    uint32_t const ces[9] = { 0x2F14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_384)
{
    // 0FB5 003F;	
    // (ྵ) TIBETAN SUBJOINED LETTER SSA	[2F14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB5, 0x003F };
    uint32_t const ces[9] = { 0x2F14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_385)
{
    // 0FB5 0061;	
    // (ྵ) TIBETAN SUBJOINED LETTER SSA	[2F14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB5, 0x0061 };
    uint32_t const ces[9] = { 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_386)
{
    // 0FB5 0041;	
    // (ྵ) TIBETAN SUBJOINED LETTER SSA	[2F14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB5, 0x0041 };
    uint32_t const ces[9] = { 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_387)
{
    // 0FB5 0062;	
    // (ྵ) TIBETAN SUBJOINED LETTER SSA	[2F14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB5, 0x0062 };
    uint32_t const ces[9] = { 0x2F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_388)
{
    // 0F66 0021;	
    // (ས) TIBETAN LETTER SA	[2F15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F66, 0x0021 };
    uint32_t const ces[9] = { 0x2F15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_389)
{
    // 0F66 003F;	
    // (ས) TIBETAN LETTER SA	[2F15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F66, 0x003F };
    uint32_t const ces[9] = { 0x2F15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_390)
{
    // 0F66 0061;	
    // (ས) TIBETAN LETTER SA	[2F15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F66, 0x0061 };
    uint32_t const ces[9] = { 0x2F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_391)
{
    // 0F66 0041;	
    // (ས) TIBETAN LETTER SA	[2F15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F66, 0x0041 };
    uint32_t const ces[9] = { 0x2F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_392)
{
    // 0F66 0062;	
    // (ས) TIBETAN LETTER SA	[2F15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F66, 0x0062 };
    uint32_t const ces[9] = { 0x2F15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_393)
{
    // 0FB6 0021;	
    // (ྶ) TIBETAN SUBJOINED LETTER SA	[2F16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB6, 0x0021 };
    uint32_t const ces[9] = { 0x2F16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_394)
{
    // 0FB6 003F;	
    // (ྶ) TIBETAN SUBJOINED LETTER SA	[2F16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB6, 0x003F };
    uint32_t const ces[9] = { 0x2F16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_395)
{
    // 0FB6 0061;	
    // (ྶ) TIBETAN SUBJOINED LETTER SA	[2F16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB6, 0x0061 };
    uint32_t const ces[9] = { 0x2F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_396)
{
    // 0FB6 0041;	
    // (ྶ) TIBETAN SUBJOINED LETTER SA	[2F16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB6, 0x0041 };
    uint32_t const ces[9] = { 0x2F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_397)
{
    // 0FB6 0062;	
    // (ྶ) TIBETAN SUBJOINED LETTER SA	[2F16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB6, 0x0062 };
    uint32_t const ces[9] = { 0x2F16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_398)
{
    // 0F67 0021;	
    // (ཧ) TIBETAN LETTER HA	[2F17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F67, 0x0021 };
    uint32_t const ces[9] = { 0x2F17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_399)
{
    // 0F67 003F;	
    // (ཧ) TIBETAN LETTER HA	[2F17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F67, 0x003F };
    uint32_t const ces[9] = { 0x2F17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_400)
{
    // 0F67 0061;	
    // (ཧ) TIBETAN LETTER HA	[2F17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F67, 0x0061 };
    uint32_t const ces[9] = { 0x2F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_401)
{
    // 0F67 0041;	
    // (ཧ) TIBETAN LETTER HA	[2F17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F67, 0x0041 };
    uint32_t const ces[9] = { 0x2F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_402)
{
    // 0F67 0062;	
    // (ཧ) TIBETAN LETTER HA	[2F17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F67, 0x0062 };
    uint32_t const ces[9] = { 0x2F17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_403)
{
    // 0FB7 0021;	
    // (ྷ) TIBETAN SUBJOINED LETTER HA	[2F18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB7, 0x0021 };
    uint32_t const ces[9] = { 0x2F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_404)
{
    // 0FB7 003F;	
    // (ྷ) TIBETAN SUBJOINED LETTER HA	[2F18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB7, 0x003F };
    uint32_t const ces[9] = { 0x2F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_405)
{
    // 0FB7 0061;	
    // (ྷ) TIBETAN SUBJOINED LETTER HA	[2F18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB7, 0x0061 };
    uint32_t const ces[9] = { 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_406)
{
    // 0FB7 0041;	
    // (ྷ) TIBETAN SUBJOINED LETTER HA	[2F18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB7, 0x0041 };
    uint32_t const ces[9] = { 0x2F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_407)
{
    // 0FB7 0062;	
    // (ྷ) TIBETAN SUBJOINED LETTER HA	[2F18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB7, 0x0062 };
    uint32_t const ces[9] = { 0x2F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_408)
{
    // 0F68 0021;	
    // (ཨ) TIBETAN LETTER A	[2F19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F68, 0x0021 };
    uint32_t const ces[9] = { 0x2F19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_409)
{
    // 0F68 003F;	
    // (ཨ) TIBETAN LETTER A	[2F19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F68, 0x003F };
    uint32_t const ces[9] = { 0x2F19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_410)
{
    // 0F68 0061;	
    // (ཨ) TIBETAN LETTER A	[2F19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F68, 0x0061 };
    uint32_t const ces[9] = { 0x2F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_411)
{
    // 0F68 0041;	
    // (ཨ) TIBETAN LETTER A	[2F19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F68, 0x0041 };
    uint32_t const ces[9] = { 0x2F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_412)
{
    // 0F68 0062;	
    // (ཨ) TIBETAN LETTER A	[2F19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F68, 0x0062 };
    uint32_t const ces[9] = { 0x2F19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_413)
{
    // 0F00 0021;	
    // (ༀ) TIBETAN SYLLABLE OM	[2F19 2F30 0261 | 0020 0020 00C4 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F00, 0x0021 };
    uint32_t const ces[14] = { 0x2F19, 0x2F30, 0x0261, 0x0000, 0x0020, 0x0020, 0x00C4, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_414)
{
    // 0F00 003F;	
    // (ༀ) TIBETAN SYLLABLE OM	[2F19 2F30 0267 | 0020 0020 00C4 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F00, 0x003F };
    uint32_t const ces[14] = { 0x2F19, 0x2F30, 0x0267, 0x0000, 0x0020, 0x0020, 0x00C4, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_415)
{
    // 0F00 0061;	
    // (ༀ) TIBETAN SYLLABLE OM	[2F19 2F30 1CAD | 0020 0020 00C4 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F00, 0x0061 };
    uint32_t const ces[14] = { 0x2F19, 0x2F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x00C4, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_416)
{
    // 0F00 0041;	
    // (ༀ) TIBETAN SYLLABLE OM	[2F19 2F30 1CAD | 0020 0020 00C4 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0F00, 0x0041 };
    uint32_t const ces[14] = { 0x2F19, 0x2F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x00C4, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_417)
{
    // 0F00 0062;	
    // (ༀ) TIBETAN SYLLABLE OM	[2F19 2F30 1CC6 | 0020 0020 00C4 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0F00, 0x0062 };
    uint32_t const ces[14] = { 0x2F19, 0x2F30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x00C4, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_418)
{
    // 0FB8 0021;	
    // (ྸ) TIBETAN SUBJOINED LETTER A	[2F1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB8, 0x0021 };
    uint32_t const ces[9] = { 0x2F1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_419)
{
    // 0FB8 003F;	
    // (ྸ) TIBETAN SUBJOINED LETTER A	[2F1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB8, 0x003F };
    uint32_t const ces[9] = { 0x2F1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_420)
{
    // 0FB8 0061;	
    // (ྸ) TIBETAN SUBJOINED LETTER A	[2F1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB8, 0x0061 };
    uint32_t const ces[9] = { 0x2F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_421)
{
    // 0FB8 0041;	
    // (ྸ) TIBETAN SUBJOINED LETTER A	[2F1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FB8, 0x0041 };
    uint32_t const ces[9] = { 0x2F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_422)
{
    // 0FB8 0062;	
    // (ྸ) TIBETAN SUBJOINED LETTER A	[2F1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FB8, 0x0062 };
    uint32_t const ces[9] = { 0x2F1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_423)
{
    // 0F88 0021;	
    // (ྈ) TIBETAN SIGN LCE TSA CAN	[2F1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F88, 0x0021 };
    uint32_t const ces[9] = { 0x2F1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_424)
{
    // 0F88 003F;	
    // (ྈ) TIBETAN SIGN LCE TSA CAN	[2F1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F88, 0x003F };
    uint32_t const ces[9] = { 0x2F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_425)
{
    // 0F88 0061;	
    // (ྈ) TIBETAN SIGN LCE TSA CAN	[2F1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F88, 0x0061 };
    uint32_t const ces[9] = { 0x2F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_426)
{
    // 0F88 0041;	
    // (ྈ) TIBETAN SIGN LCE TSA CAN	[2F1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F88, 0x0041 };
    uint32_t const ces[9] = { 0x2F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_427)
{
    // 0F88 0062;	
    // (ྈ) TIBETAN SIGN LCE TSA CAN	[2F1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F88, 0x0062 };
    uint32_t const ces[9] = { 0x2F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_428)
{
    // 0F8D 0021;	
    // (ྍ) TIBETAN SUBJOINED SIGN LCE TSA CAN	[2F1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8D, 0x0021 };
    uint32_t const ces[9] = { 0x2F1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_429)
{
    // 0F8D 003F;	
    // (ྍ) TIBETAN SUBJOINED SIGN LCE TSA CAN	[2F1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8D, 0x003F };
    uint32_t const ces[9] = { 0x2F1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_430)
{
    // 0F8D 0061;	
    // (ྍ) TIBETAN SUBJOINED SIGN LCE TSA CAN	[2F1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8D, 0x0061 };
    uint32_t const ces[9] = { 0x2F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_431)
{
    // 0F8D 0041;	
    // (ྍ) TIBETAN SUBJOINED SIGN LCE TSA CAN	[2F1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8D, 0x0041 };
    uint32_t const ces[9] = { 0x2F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_432)
{
    // 0F8D 0062;	
    // (ྍ) TIBETAN SUBJOINED SIGN LCE TSA CAN	[2F1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8D, 0x0062 };
    uint32_t const ces[9] = { 0x2F1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_433)
{
    // 0F89 0021;	
    // (ྉ) TIBETAN SIGN MCHU CAN	[2F1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F89, 0x0021 };
    uint32_t const ces[9] = { 0x2F1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_434)
{
    // 0F89 003F;	
    // (ྉ) TIBETAN SIGN MCHU CAN	[2F1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F89, 0x003F };
    uint32_t const ces[9] = { 0x2F1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_435)
{
    // 0F89 0061;	
    // (ྉ) TIBETAN SIGN MCHU CAN	[2F1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F89, 0x0061 };
    uint32_t const ces[9] = { 0x2F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_436)
{
    // 0F89 0041;	
    // (ྉ) TIBETAN SIGN MCHU CAN	[2F1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F89, 0x0041 };
    uint32_t const ces[9] = { 0x2F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_437)
{
    // 0F89 0062;	
    // (ྉ) TIBETAN SIGN MCHU CAN	[2F1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F89, 0x0062 };
    uint32_t const ces[9] = { 0x2F1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_438)
{
    // 0F8E 0021;	
    // (ྎ) TIBETAN SUBJOINED SIGN MCHU CAN	[2F1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8E, 0x0021 };
    uint32_t const ces[9] = { 0x2F1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_439)
{
    // 0F8E 003F;	
    // (ྎ) TIBETAN SUBJOINED SIGN MCHU CAN	[2F1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8E, 0x003F };
    uint32_t const ces[9] = { 0x2F1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_440)
{
    // 0F8E 0061;	
    // (ྎ) TIBETAN SUBJOINED SIGN MCHU CAN	[2F1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8E, 0x0061 };
    uint32_t const ces[9] = { 0x2F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_441)
{
    // 0F8E 0041;	
    // (ྎ) TIBETAN SUBJOINED SIGN MCHU CAN	[2F1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8E, 0x0041 };
    uint32_t const ces[9] = { 0x2F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_442)
{
    // 0F8E 0062;	
    // (ྎ) TIBETAN SUBJOINED SIGN MCHU CAN	[2F1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8E, 0x0062 };
    uint32_t const ces[9] = { 0x2F1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_443)
{
    // 0F8C 0021;	
    // (ྌ) TIBETAN SIGN INVERTED MCHU CAN	[2F1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8C, 0x0021 };
    uint32_t const ces[9] = { 0x2F1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_444)
{
    // 0F8C 003F;	
    // (ྌ) TIBETAN SIGN INVERTED MCHU CAN	[2F1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8C, 0x003F };
    uint32_t const ces[9] = { 0x2F1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_445)
{
    // 0F8C 0061;	
    // (ྌ) TIBETAN SIGN INVERTED MCHU CAN	[2F1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8C, 0x0061 };
    uint32_t const ces[9] = { 0x2F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_446)
{
    // 0F8C 0041;	
    // (ྌ) TIBETAN SIGN INVERTED MCHU CAN	[2F1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8C, 0x0041 };
    uint32_t const ces[9] = { 0x2F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_447)
{
    // 0F8C 0062;	
    // (ྌ) TIBETAN SIGN INVERTED MCHU CAN	[2F1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8C, 0x0062 };
    uint32_t const ces[9] = { 0x2F1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_448)
{
    // 0F8F 0021;	
    // (ྏ) TIBETAN SUBJOINED SIGN INVERTED MCHU CAN	[2F20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8F, 0x0021 };
    uint32_t const ces[9] = { 0x2F20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_449)
{
    // 0F8F 003F;	
    // (ྏ) TIBETAN SUBJOINED SIGN INVERTED MCHU CAN	[2F20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8F, 0x003F };
    uint32_t const ces[9] = { 0x2F20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_450)
{
    // 0F8F 0061;	
    // (ྏ) TIBETAN SUBJOINED SIGN INVERTED MCHU CAN	[2F20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8F, 0x0061 };
    uint32_t const ces[9] = { 0x2F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_451)
{
    // 0F8F 0041;	
    // (ྏ) TIBETAN SUBJOINED SIGN INVERTED MCHU CAN	[2F20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8F, 0x0041 };
    uint32_t const ces[9] = { 0x2F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_452)
{
    // 0F8F 0062;	
    // (ྏ) TIBETAN SUBJOINED SIGN INVERTED MCHU CAN	[2F20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8F, 0x0062 };
    uint32_t const ces[9] = { 0x2F20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_453)
{
    // 0F8A 0021;	
    // (ྊ) TIBETAN SIGN GRU CAN RGYINGS	[2F21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8A, 0x0021 };
    uint32_t const ces[9] = { 0x2F21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_454)
{
    // 0F8A 003F;	
    // (ྊ) TIBETAN SIGN GRU CAN RGYINGS	[2F21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8A, 0x003F };
    uint32_t const ces[9] = { 0x2F21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_455)
{
    // 0F8A 0061;	
    // (ྊ) TIBETAN SIGN GRU CAN RGYINGS	[2F21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8A, 0x0061 };
    uint32_t const ces[9] = { 0x2F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_456)
{
    // 0F8A 0041;	
    // (ྊ) TIBETAN SIGN GRU CAN RGYINGS	[2F21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8A, 0x0041 };
    uint32_t const ces[9] = { 0x2F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_457)
{
    // 0F8A 0062;	
    // (ྊ) TIBETAN SIGN GRU CAN RGYINGS	[2F21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8A, 0x0062 };
    uint32_t const ces[9] = { 0x2F21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_458)
{
    // 0F8B 0021;	
    // (ྋ) TIBETAN SIGN GRU MED RGYINGS	[2F22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8B, 0x0021 };
    uint32_t const ces[9] = { 0x2F22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_459)
{
    // 0F8B 003F;	
    // (ྋ) TIBETAN SIGN GRU MED RGYINGS	[2F22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8B, 0x003F };
    uint32_t const ces[9] = { 0x2F22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_460)
{
    // 0F8B 0061;	
    // (ྋ) TIBETAN SIGN GRU MED RGYINGS	[2F22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8B, 0x0061 };
    uint32_t const ces[9] = { 0x2F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_461)
{
    // 0F8B 0041;	
    // (ྋ) TIBETAN SIGN GRU MED RGYINGS	[2F22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F8B, 0x0041 };
    uint32_t const ces[9] = { 0x2F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_462)
{
    // 0F8B 0062;	
    // (ྋ) TIBETAN SIGN GRU MED RGYINGS	[2F22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F8B, 0x0062 };
    uint32_t const ces[9] = { 0x2F22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_463)
{
    // 0334 0F71;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F71 };
    uint32_t const ces[8] = { 0x2F23, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_464)
{
    // 0F71 0334;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F71, 0x0334 };
    uint32_t const ces[8] = { 0x2F23, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_465)
{
    // 0F71 0021;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F71, 0x0021 };
    uint32_t const ces[9] = { 0x2F23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_466)
{
    // 0F71 003F;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F71, 0x003F };
    uint32_t const ces[9] = { 0x2F23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_467)
{
    // 0F71 0061;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F71, 0x0061 };
    uint32_t const ces[9] = { 0x2F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_468)
{
    // 0F71 0041;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F71, 0x0041 };
    uint32_t const ces[9] = { 0x2F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_469)
{
    // 0F71 0062;	
    // (ཱ) TIBETAN VOWEL SIGN AA	[2F23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F71, 0x0062 };
    uint32_t const ces[9] = { 0x2F23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_470)
{
    // 0F71 0001 0F72 0061;	
    // (ཱ'\u0001'ི) TIBETAN VOWEL SIGN AA, <START OF HEADING>, TIBETAN VOWEL SIGN I	[2F23 2F24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0F71, 0x0001, 0x0F72, 0x0061 };
    uint32_t const ces[12] = { 0x2F23, 0x2F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_471)
{
    // 0F71 0001 0F80 0061;	
    // (ཱ'\u0001'ྀ) TIBETAN VOWEL SIGN AA, <START OF HEADING>, TIBETAN VOWEL SIGN REVERSED I	[2F23 2F26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0F71, 0x0001, 0x0F80, 0x0061 };
    uint32_t const ces[12] = { 0x2F23, 0x2F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_472)
{
    // 0F71 0001 0F74 0061;	
    // (ཱ'\u0001'ུ) TIBETAN VOWEL SIGN AA, <START OF HEADING>, TIBETAN VOWEL SIGN U	[2F23 2F28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0F71, 0x0001, 0x0F74, 0x0061 };
    uint32_t const ces[12] = { 0x2F23, 0x2F28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_473)
{
    // 0334 0F72;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F72 };
    uint32_t const ces[8] = { 0x2F24, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_474)
{
    // 0F72 0334;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F72, 0x0334 };
    uint32_t const ces[8] = { 0x2F24, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_475)
{
    // 0F72 0021;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F72, 0x0021 };
    uint32_t const ces[9] = { 0x2F24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_476)
{
    // 0F72 003F;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F72, 0x003F };
    uint32_t const ces[9] = { 0x2F24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_477)
{
    // 0F72 0061;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F72, 0x0061 };
    uint32_t const ces[9] = { 0x2F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_478)
{
    // 0F72 0041;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F72, 0x0041 };
    uint32_t const ces[9] = { 0x2F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_479)
{
    // 0F72 0062;	
    // (ི) TIBETAN VOWEL SIGN I	[2F24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F72, 0x0062 };
    uint32_t const ces[9] = { 0x2F24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_480)
{
    // 0334 0F71 0F72;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 | 004A 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0334, 0x0F71, 0x0F72 };
    uint32_t const ces[8] = { 0x2F25, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_481)
{
    // 0F71 0334 0F72;	
    // (̴ཱ) TIBETAN VOWEL SIGN AA, COMBINING TILDE OVERLAY	[2F25 | 004A 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0334, 0x0F72 };
    uint32_t const ces[8] = { 0x2F25, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_482)
{
    // 0F71 0F72 0334;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 | 004A 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x0334 };
    uint32_t const ces[8] = { 0x2F25, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_483)
{
    // 0F72 0334 0F71;	
    // (̴ི) TIBETAN VOWEL SIGN I, COMBINING TILDE OVERLAY	[2F25 | 004A 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F72, 0x0334, 0x0F71 };
    uint32_t const ces[8] = { 0x2F25, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_484)
{
    // 0F71 0F72 0021;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x0021 };
    uint32_t const ces[9] = { 0x2F25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_485)
{
    // 0F73 0021;	
    // (ཱི) TIBETAN VOWEL SIGN II	[2F25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F73, 0x0021 };
    uint32_t const ces[9] = { 0x2F25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_486)
{
    // 0F71 0F72 003F;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x003F };
    uint32_t const ces[9] = { 0x2F25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_487)
{
    // 0F73 003F;	
    // (ཱི) TIBETAN VOWEL SIGN II	[2F25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F73, 0x003F };
    uint32_t const ces[9] = { 0x2F25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_488)
{
    // 0F71 0F72 0061;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x0061 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_489)
{
    // 0F73 0061;	
    // (ཱི) TIBETAN VOWEL SIGN II	[2F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F73, 0x0061 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_490)
{
    // 0F71 0591 0F72 0061;	
    // (ཱི֑) TIBETAN VOWEL SIGN AA, HEBREW ACCENT ETNAHTA, TIBETAN VOWEL SIGN I	[2F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0F71, 0x0591, 0x0F72, 0x0061 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_491)
{
    // 0F71 1D165 0F72 0061;	
    // (ཱི𝅥) TIBETAN VOWEL SIGN AA, MUSICAL SYMBOL COMBINING STEM, TIBETAN VOWEL SIGN I	[2F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0F71, 0x1D165, 0x0F72, 0x0061 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_492)
{
    // 0F71 0F72 0041;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x0041 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_493)
{
    // 0F73 0041;	
    // (ཱི) TIBETAN VOWEL SIGN II	[2F25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F73, 0x0041 };
    uint32_t const ces[9] = { 0x2F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_494)
{
    // 0F71 0F72 0062;	
    // (ཱི) TIBETAN VOWEL SIGN AA, TIBETAN VOWEL SIGN I	[2F25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0F71, 0x0F72, 0x0062 };
    uint32_t const ces[9] = { 0x2F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_495)
{
    // 0F73 0062;	
    // (ཱི) TIBETAN VOWEL SIGN II	[2F25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F73, 0x0062 };
    uint32_t const ces[9] = { 0x2F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_496)
{
    // 0334 0F80;	
    // (ྀ) TIBETAN VOWEL SIGN REVERSED I	[2F26 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F80 };
    uint32_t const ces[8] = { 0x2F26, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_497)
{
    // 0F80 0334;	
    // (ྀ) TIBETAN VOWEL SIGN REVERSED I	[2F26 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F80, 0x0334 };
    uint32_t const ces[8] = { 0x2F26, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_498)
{
    // 0F80 0021;	
    // (ྀ) TIBETAN VOWEL SIGN REVERSED I	[2F26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F80, 0x0021 };
    uint32_t const ces[9] = { 0x2F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_197_499)
{
    // 0F80 003F;	
    // (ྀ) TIBETAN VOWEL SIGN REVERSED I	[2F26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F80, 0x003F };
    uint32_t const ces[9] = { 0x2F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

