// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_076_000)
{
    // 31D7 0041;	
    // (㇗) CJK STROKE SZ	[1AE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D7, 0x0041 };
    uint32_t const ces[9] = { 0x1AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_001)
{
    // 31D7 0062;	
    // (㇗) CJK STROKE SZ	[1AE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D7, 0x0062 };
    uint32_t const ces[9] = { 0x1AE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_002)
{
    // 31D8 0021;	
    // (㇘) CJK STROKE SWZ	[1AE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D8, 0x0021 };
    uint32_t const ces[9] = { 0x1AE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_003)
{
    // 31D8 003F;	
    // (㇘) CJK STROKE SWZ	[1AE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D8, 0x003F };
    uint32_t const ces[9] = { 0x1AE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_004)
{
    // 31D8 0061;	
    // (㇘) CJK STROKE SWZ	[1AE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D8, 0x0061 };
    uint32_t const ces[9] = { 0x1AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_005)
{
    // 31D8 0041;	
    // (㇘) CJK STROKE SWZ	[1AE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D8, 0x0041 };
    uint32_t const ces[9] = { 0x1AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_006)
{
    // 31D8 0062;	
    // (㇘) CJK STROKE SWZ	[1AE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D8, 0x0062 };
    uint32_t const ces[9] = { 0x1AE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_007)
{
    // 31D9 0021;	
    // (㇙) CJK STROKE ST	[1AE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D9, 0x0021 };
    uint32_t const ces[9] = { 0x1AE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_008)
{
    // 31D9 003F;	
    // (㇙) CJK STROKE ST	[1AE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D9, 0x003F };
    uint32_t const ces[9] = { 0x1AE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_009)
{
    // 31D9 0061;	
    // (㇙) CJK STROKE ST	[1AE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D9, 0x0061 };
    uint32_t const ces[9] = { 0x1AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_010)
{
    // 31D9 0041;	
    // (㇙) CJK STROKE ST	[1AE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31D9, 0x0041 };
    uint32_t const ces[9] = { 0x1AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_011)
{
    // 31D9 0062;	
    // (㇙) CJK STROKE ST	[1AE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31D9, 0x0062 };
    uint32_t const ces[9] = { 0x1AE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_012)
{
    // 31DA 0021;	
    // (㇚) CJK STROKE SG	[1AE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DA, 0x0021 };
    uint32_t const ces[9] = { 0x1AE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_013)
{
    // 31DA 003F;	
    // (㇚) CJK STROKE SG	[1AE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DA, 0x003F };
    uint32_t const ces[9] = { 0x1AE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_014)
{
    // 31DA 0061;	
    // (㇚) CJK STROKE SG	[1AE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DA, 0x0061 };
    uint32_t const ces[9] = { 0x1AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_015)
{
    // 31DA 0041;	
    // (㇚) CJK STROKE SG	[1AE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DA, 0x0041 };
    uint32_t const ces[9] = { 0x1AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_016)
{
    // 31DA 0062;	
    // (㇚) CJK STROKE SG	[1AE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DA, 0x0062 };
    uint32_t const ces[9] = { 0x1AE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_017)
{
    // 31DB 0021;	
    // (㇛) CJK STROKE PD	[1AE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DB, 0x0021 };
    uint32_t const ces[9] = { 0x1AE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_018)
{
    // 31DB 003F;	
    // (㇛) CJK STROKE PD	[1AE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DB, 0x003F };
    uint32_t const ces[9] = { 0x1AE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_019)
{
    // 31DB 0061;	
    // (㇛) CJK STROKE PD	[1AE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DB, 0x0061 };
    uint32_t const ces[9] = { 0x1AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_020)
{
    // 31DB 0041;	
    // (㇛) CJK STROKE PD	[1AE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DB, 0x0041 };
    uint32_t const ces[9] = { 0x1AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_021)
{
    // 31DB 0062;	
    // (㇛) CJK STROKE PD	[1AE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DB, 0x0062 };
    uint32_t const ces[9] = { 0x1AE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_022)
{
    // 31DC 0021;	
    // (㇜) CJK STROKE PZ	[1AE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DC, 0x0021 };
    uint32_t const ces[9] = { 0x1AE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_023)
{
    // 31DC 003F;	
    // (㇜) CJK STROKE PZ	[1AE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DC, 0x003F };
    uint32_t const ces[9] = { 0x1AE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_024)
{
    // 31DC 0061;	
    // (㇜) CJK STROKE PZ	[1AE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DC, 0x0061 };
    uint32_t const ces[9] = { 0x1AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_025)
{
    // 31DC 0041;	
    // (㇜) CJK STROKE PZ	[1AE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DC, 0x0041 };
    uint32_t const ces[9] = { 0x1AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_026)
{
    // 31DC 0062;	
    // (㇜) CJK STROKE PZ	[1AE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DC, 0x0062 };
    uint32_t const ces[9] = { 0x1AE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_027)
{
    // 31DD 0021;	
    // (㇝) CJK STROKE TN	[1AE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DD, 0x0021 };
    uint32_t const ces[9] = { 0x1AE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_028)
{
    // 31DD 003F;	
    // (㇝) CJK STROKE TN	[1AE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DD, 0x003F };
    uint32_t const ces[9] = { 0x1AE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_029)
{
    // 31DD 0061;	
    // (㇝) CJK STROKE TN	[1AE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DD, 0x0061 };
    uint32_t const ces[9] = { 0x1AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_030)
{
    // 31DD 0041;	
    // (㇝) CJK STROKE TN	[1AE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DD, 0x0041 };
    uint32_t const ces[9] = { 0x1AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_031)
{
    // 31DD 0062;	
    // (㇝) CJK STROKE TN	[1AE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DD, 0x0062 };
    uint32_t const ces[9] = { 0x1AE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_032)
{
    // 31DE 0021;	
    // (㇞) CJK STROKE SZZ	[1AE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DE, 0x0021 };
    uint32_t const ces[9] = { 0x1AE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_033)
{
    // 31DE 003F;	
    // (㇞) CJK STROKE SZZ	[1AE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DE, 0x003F };
    uint32_t const ces[9] = { 0x1AE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_034)
{
    // 31DE 0061;	
    // (㇞) CJK STROKE SZZ	[1AE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DE, 0x0061 };
    uint32_t const ces[9] = { 0x1AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_035)
{
    // 31DE 0041;	
    // (㇞) CJK STROKE SZZ	[1AE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DE, 0x0041 };
    uint32_t const ces[9] = { 0x1AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_036)
{
    // 31DE 0062;	
    // (㇞) CJK STROKE SZZ	[1AE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DE, 0x0062 };
    uint32_t const ces[9] = { 0x1AE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_037)
{
    // 31DF 0021;	
    // (㇟) CJK STROKE SWG	[1AEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DF, 0x0021 };
    uint32_t const ces[9] = { 0x1AEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_038)
{
    // 31DF 003F;	
    // (㇟) CJK STROKE SWG	[1AEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DF, 0x003F };
    uint32_t const ces[9] = { 0x1AEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_039)
{
    // 31DF 0061;	
    // (㇟) CJK STROKE SWG	[1AEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DF, 0x0061 };
    uint32_t const ces[9] = { 0x1AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_040)
{
    // 31DF 0041;	
    // (㇟) CJK STROKE SWG	[1AEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31DF, 0x0041 };
    uint32_t const ces[9] = { 0x1AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_041)
{
    // 31DF 0062;	
    // (㇟) CJK STROKE SWG	[1AEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31DF, 0x0062 };
    uint32_t const ces[9] = { 0x1AEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_042)
{
    // 31E0 0021;	
    // (㇠) CJK STROKE HXWG	[1AEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E0, 0x0021 };
    uint32_t const ces[9] = { 0x1AEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_043)
{
    // 31E0 003F;	
    // (㇠) CJK STROKE HXWG	[1AEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E0, 0x003F };
    uint32_t const ces[9] = { 0x1AEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_044)
{
    // 31E0 0061;	
    // (㇠) CJK STROKE HXWG	[1AEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E0, 0x0061 };
    uint32_t const ces[9] = { 0x1AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_045)
{
    // 31E0 0041;	
    // (㇠) CJK STROKE HXWG	[1AEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31E0, 0x0041 };
    uint32_t const ces[9] = { 0x1AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_046)
{
    // 31E0 0062;	
    // (㇠) CJK STROKE HXWG	[1AEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E0, 0x0062 };
    uint32_t const ces[9] = { 0x1AEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_047)
{
    // 31E1 0021;	
    // (㇡) CJK STROKE HZZZG	[1AEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E1, 0x0021 };
    uint32_t const ces[9] = { 0x1AEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_048)
{
    // 31E1 003F;	
    // (㇡) CJK STROKE HZZZG	[1AEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E1, 0x003F };
    uint32_t const ces[9] = { 0x1AEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_049)
{
    // 31E1 0061;	
    // (㇡) CJK STROKE HZZZG	[1AEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E1, 0x0061 };
    uint32_t const ces[9] = { 0x1AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_050)
{
    // 31E1 0041;	
    // (㇡) CJK STROKE HZZZG	[1AEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31E1, 0x0041 };
    uint32_t const ces[9] = { 0x1AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_051)
{
    // 31E1 0062;	
    // (㇡) CJK STROKE HZZZG	[1AEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E1, 0x0062 };
    uint32_t const ces[9] = { 0x1AEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_052)
{
    // 31E2 0021;	
    // (㇢) CJK STROKE PG	[1AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E2, 0x0021 };
    uint32_t const ces[9] = { 0x1AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_053)
{
    // 31E2 003F;	
    // (㇢) CJK STROKE PG	[1AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E2, 0x003F };
    uint32_t const ces[9] = { 0x1AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_054)
{
    // 31E2 0061;	
    // (㇢) CJK STROKE PG	[1AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E2, 0x0061 };
    uint32_t const ces[9] = { 0x1AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_055)
{
    // 31E2 0041;	
    // (㇢) CJK STROKE PG	[1AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31E2, 0x0041 };
    uint32_t const ces[9] = { 0x1AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_056)
{
    // 31E2 0062;	
    // (㇢) CJK STROKE PG	[1AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E2, 0x0062 };
    uint32_t const ces[9] = { 0x1AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_057)
{
    // 31E3 0021;	
    // (㇣) CJK STROKE Q	[1AEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E3, 0x0021 };
    uint32_t const ces[9] = { 0x1AEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_058)
{
    // 31E3 003F;	
    // (㇣) CJK STROKE Q	[1AEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E3, 0x003F };
    uint32_t const ces[9] = { 0x1AEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_059)
{
    // 31E3 0061;	
    // (㇣) CJK STROKE Q	[1AEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E3, 0x0061 };
    uint32_t const ces[9] = { 0x1AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_060)
{
    // 31E3 0041;	
    // (㇣) CJK STROKE Q	[1AEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x31E3, 0x0041 };
    uint32_t const ces[9] = { 0x1AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_061)
{
    // 31E3 0062;	
    // (㇣) CJK STROKE Q	[1AEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x31E3, 0x0062 };
    uint32_t const ces[9] = { 0x1AEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_062)
{
    // 3004 0021;	
    // (〄) JAPANESE INDUSTRIAL STANDARD SYMBOL	[1AEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3004, 0x0021 };
    uint32_t const ces[9] = { 0x1AEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_063)
{
    // 3004 003F;	
    // (〄) JAPANESE INDUSTRIAL STANDARD SYMBOL	[1AEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3004, 0x003F };
    uint32_t const ces[9] = { 0x1AEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_064)
{
    // 3004 0061;	
    // (〄) JAPANESE INDUSTRIAL STANDARD SYMBOL	[1AEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3004, 0x0061 };
    uint32_t const ces[9] = { 0x1AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_065)
{
    // 3004 0041;	
    // (〄) JAPANESE INDUSTRIAL STANDARD SYMBOL	[1AEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3004, 0x0041 };
    uint32_t const ces[9] = { 0x1AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_066)
{
    // 3004 0062;	
    // (〄) JAPANESE INDUSTRIAL STANDARD SYMBOL	[1AEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3004, 0x0062 };
    uint32_t const ces[9] = { 0x1AEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_067)
{
    // 3012 0021;	
    // (〒) POSTAL MARK	[1AF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3012, 0x0021 };
    uint32_t const ces[9] = { 0x1AF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_068)
{
    // 3036 0021;	
    // (〶) CIRCLED POSTAL MARK	[1AF0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3036, 0x0021 };
    uint32_t const ces[9] = { 0x1AF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_069)
{
    // 3012 003F;	
    // (〒) POSTAL MARK	[1AF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3012, 0x003F };
    uint32_t const ces[9] = { 0x1AF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_070)
{
    // 3036 003F;	
    // (〶) CIRCLED POSTAL MARK	[1AF0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3036, 0x003F };
    uint32_t const ces[9] = { 0x1AF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_071)
{
    // 3012 0061;	
    // (〒) POSTAL MARK	[1AF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3012, 0x0061 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_072)
{
    // 3012 0041;	
    // (〒) POSTAL MARK	[1AF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3012, 0x0041 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_073)
{
    // 3036 0061;	
    // (〶) CIRCLED POSTAL MARK	[1AF0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3036, 0x0061 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_074)
{
    // 3036 0041;	
    // (〶) CIRCLED POSTAL MARK	[1AF0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3036, 0x0041 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_075)
{
    // 3012 0062;	
    // (〒) POSTAL MARK	[1AF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3012, 0x0062 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_076)
{
    // 3036 0062;	
    // (〶) CIRCLED POSTAL MARK	[1AF0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3036, 0x0062 };
    uint32_t const ces[9] = { 0x1AF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_077)
{
    // 3013 0021;	
    // (〓) GETA MARK	[1AF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3013, 0x0021 };
    uint32_t const ces[9] = { 0x1AF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_078)
{
    // 3013 003F;	
    // (〓) GETA MARK	[1AF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3013, 0x003F };
    uint32_t const ces[9] = { 0x1AF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_079)
{
    // 3013 0061;	
    // (〓) GETA MARK	[1AF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3013, 0x0061 };
    uint32_t const ces[9] = { 0x1AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_080)
{
    // 3013 0041;	
    // (〓) GETA MARK	[1AF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3013, 0x0041 };
    uint32_t const ces[9] = { 0x1AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_081)
{
    // 3013 0062;	
    // (〓) GETA MARK	[1AF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3013, 0x0062 };
    uint32_t const ces[9] = { 0x1AF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_082)
{
    // 3020 0021;	
    // (〠) POSTAL MARK FACE	[1AF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3020, 0x0021 };
    uint32_t const ces[9] = { 0x1AF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_083)
{
    // 3020 003F;	
    // (〠) POSTAL MARK FACE	[1AF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3020, 0x003F };
    uint32_t const ces[9] = { 0x1AF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_084)
{
    // 3020 0061;	
    // (〠) POSTAL MARK FACE	[1AF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3020, 0x0061 };
    uint32_t const ces[9] = { 0x1AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_085)
{
    // 3020 0041;	
    // (〠) POSTAL MARK FACE	[1AF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3020, 0x0041 };
    uint32_t const ces[9] = { 0x1AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_086)
{
    // 3020 0062;	
    // (〠) POSTAL MARK FACE	[1AF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3020, 0x0062 };
    uint32_t const ces[9] = { 0x1AF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_087)
{
    // 3037 0021;	
    // (〷) IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL	[1AF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3037, 0x0021 };
    uint32_t const ces[9] = { 0x1AF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_088)
{
    // 3037 003F;	
    // (〷) IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL	[1AF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3037, 0x003F };
    uint32_t const ces[9] = { 0x1AF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_089)
{
    // 3037 0061;	
    // (〷) IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL	[1AF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3037, 0x0061 };
    uint32_t const ces[9] = { 0x1AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_090)
{
    // 3037 0041;	
    // (〷) IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL	[1AF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3037, 0x0041 };
    uint32_t const ces[9] = { 0x1AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_091)
{
    // 3037 0062;	
    // (〷) IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL	[1AF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3037, 0x0062 };
    uint32_t const ces[9] = { 0x1AF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_092)
{
    // 303E 0021;	
    // (〾) IDEOGRAPHIC VARIATION INDICATOR	[1AF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303E, 0x0021 };
    uint32_t const ces[9] = { 0x1AF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_093)
{
    // 303E 003F;	
    // (〾) IDEOGRAPHIC VARIATION INDICATOR	[1AF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303E, 0x003F };
    uint32_t const ces[9] = { 0x1AF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_094)
{
    // 303E 0061;	
    // (〾) IDEOGRAPHIC VARIATION INDICATOR	[1AF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303E, 0x0061 };
    uint32_t const ces[9] = { 0x1AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_095)
{
    // 303E 0041;	
    // (〾) IDEOGRAPHIC VARIATION INDICATOR	[1AF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x303E, 0x0041 };
    uint32_t const ces[9] = { 0x1AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_096)
{
    // 303E 0062;	
    // (〾) IDEOGRAPHIC VARIATION INDICATOR	[1AF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303E, 0x0062 };
    uint32_t const ces[9] = { 0x1AF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_097)
{
    // 303F 0021;	
    // (〿) IDEOGRAPHIC HALF FILL SPACE	[1AF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303F, 0x0021 };
    uint32_t const ces[9] = { 0x1AF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_098)
{
    // 303F 003F;	
    // (〿) IDEOGRAPHIC HALF FILL SPACE	[1AF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303F, 0x003F };
    uint32_t const ces[9] = { 0x1AF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_099)
{
    // 303F 0061;	
    // (〿) IDEOGRAPHIC HALF FILL SPACE	[1AF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303F, 0x0061 };
    uint32_t const ces[9] = { 0x1AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_100)
{
    // 303F 0041;	
    // (〿) IDEOGRAPHIC HALF FILL SPACE	[1AF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x303F, 0x0041 };
    uint32_t const ces[9] = { 0x1AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_101)
{
    // 303F 0062;	
    // (〿) IDEOGRAPHIC HALF FILL SPACE	[1AF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303F, 0x0062 };
    uint32_t const ces[9] = { 0x1AF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_102)
{
    // 3190 0021;	
    // (㆐) IDEOGRAPHIC ANNOTATION LINKING MARK	[1AF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3190, 0x0021 };
    uint32_t const ces[9] = { 0x1AF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_103)
{
    // 3190 003F;	
    // (㆐) IDEOGRAPHIC ANNOTATION LINKING MARK	[1AF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3190, 0x003F };
    uint32_t const ces[9] = { 0x1AF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_104)
{
    // 3190 0061;	
    // (㆐) IDEOGRAPHIC ANNOTATION LINKING MARK	[1AF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3190, 0x0061 };
    uint32_t const ces[9] = { 0x1AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_105)
{
    // 3190 0041;	
    // (㆐) IDEOGRAPHIC ANNOTATION LINKING MARK	[1AF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3190, 0x0041 };
    uint32_t const ces[9] = { 0x1AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_106)
{
    // 3190 0062;	
    // (㆐) IDEOGRAPHIC ANNOTATION LINKING MARK	[1AF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3190, 0x0062 };
    uint32_t const ces[9] = { 0x1AF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_107)
{
    // 3191 0021;	
    // (㆑) IDEOGRAPHIC ANNOTATION REVERSE MARK	[1AF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3191, 0x0021 };
    uint32_t const ces[9] = { 0x1AF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_108)
{
    // 3191 003F;	
    // (㆑) IDEOGRAPHIC ANNOTATION REVERSE MARK	[1AF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3191, 0x003F };
    uint32_t const ces[9] = { 0x1AF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_109)
{
    // 3191 0061;	
    // (㆑) IDEOGRAPHIC ANNOTATION REVERSE MARK	[1AF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3191, 0x0061 };
    uint32_t const ces[9] = { 0x1AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_110)
{
    // 3191 0041;	
    // (㆑) IDEOGRAPHIC ANNOTATION REVERSE MARK	[1AF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3191, 0x0041 };
    uint32_t const ces[9] = { 0x1AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_111)
{
    // 3191 0062;	
    // (㆑) IDEOGRAPHIC ANNOTATION REVERSE MARK	[1AF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3191, 0x0062 };
    uint32_t const ces[9] = { 0x1AF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_112)
{
    // 327F 0021;	
    // (㉿) KOREAN STANDARD SYMBOL	[1AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x327F, 0x0021 };
    uint32_t const ces[9] = { 0x1AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_113)
{
    // 327F 003F;	
    // (㉿) KOREAN STANDARD SYMBOL	[1AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x327F, 0x003F };
    uint32_t const ces[9] = { 0x1AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_114)
{
    // 327F 0061;	
    // (㉿) KOREAN STANDARD SYMBOL	[1AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x327F, 0x0061 };
    uint32_t const ces[9] = { 0x1AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_115)
{
    // 327F 0041;	
    // (㉿) KOREAN STANDARD SYMBOL	[1AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x327F, 0x0041 };
    uint32_t const ces[9] = { 0x1AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_116)
{
    // 327F 0062;	
    // (㉿) KOREAN STANDARD SYMBOL	[1AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x327F, 0x0062 };
    uint32_t const ces[9] = { 0x1AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_117)
{
    // FFFC 0021;	
    // (￼) OBJECT REPLACEMENT CHARACTER	[1AF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFC, 0x0021 };
    uint32_t const ces[9] = { 0x1AF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_118)
{
    // FFFC 003F;	
    // (￼) OBJECT REPLACEMENT CHARACTER	[1AF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFC, 0x003F };
    uint32_t const ces[9] = { 0x1AF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_119)
{
    // FFFC 0061;	
    // (￼) OBJECT REPLACEMENT CHARACTER	[1AF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFC, 0x0061 };
    uint32_t const ces[9] = { 0x1AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_120)
{
    // FFFC 0041;	
    // (￼) OBJECT REPLACEMENT CHARACTER	[1AF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFC, 0x0041 };
    uint32_t const ces[9] = { 0x1AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_121)
{
    // FFFC 0062;	
    // (￼) OBJECT REPLACEMENT CHARACTER	[1AF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFC, 0x0062 };
    uint32_t const ces[9] = { 0x1AF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_122)
{
    // 09F4 0021;	
    // (৴) BENGALI CURRENCY NUMERATOR ONE	[1AFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F4, 0x0021 };
    uint32_t const ces[9] = { 0x1AFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_123)
{
    // 09F4 003F;	
    // (৴) BENGALI CURRENCY NUMERATOR ONE	[1AFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F4, 0x003F };
    uint32_t const ces[9] = { 0x1AFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_124)
{
    // 09F4 0061;	
    // (৴) BENGALI CURRENCY NUMERATOR ONE	[1AFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F4, 0x0061 };
    uint32_t const ces[9] = { 0x1AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_125)
{
    // 09F4 0041;	
    // (৴) BENGALI CURRENCY NUMERATOR ONE	[1AFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F4, 0x0041 };
    uint32_t const ces[9] = { 0x1AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_126)
{
    // 09F4 0062;	
    // (৴) BENGALI CURRENCY NUMERATOR ONE	[1AFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F4, 0x0062 };
    uint32_t const ces[9] = { 0x1AFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_127)
{
    // 09F5 0021;	
    // (৵) BENGALI CURRENCY NUMERATOR TWO	[1AFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F5, 0x0021 };
    uint32_t const ces[9] = { 0x1AFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_128)
{
    // 09F5 003F;	
    // (৵) BENGALI CURRENCY NUMERATOR TWO	[1AFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F5, 0x003F };
    uint32_t const ces[9] = { 0x1AFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_129)
{
    // 09F5 0061;	
    // (৵) BENGALI CURRENCY NUMERATOR TWO	[1AFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F5, 0x0061 };
    uint32_t const ces[9] = { 0x1AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_130)
{
    // 09F5 0041;	
    // (৵) BENGALI CURRENCY NUMERATOR TWO	[1AFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F5, 0x0041 };
    uint32_t const ces[9] = { 0x1AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_131)
{
    // 09F5 0062;	
    // (৵) BENGALI CURRENCY NUMERATOR TWO	[1AFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F5, 0x0062 };
    uint32_t const ces[9] = { 0x1AFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_132)
{
    // 09F6 0021;	
    // (৶) BENGALI CURRENCY NUMERATOR THREE	[1AFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F6, 0x0021 };
    uint32_t const ces[9] = { 0x1AFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_133)
{
    // 09F6 003F;	
    // (৶) BENGALI CURRENCY NUMERATOR THREE	[1AFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F6, 0x003F };
    uint32_t const ces[9] = { 0x1AFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_134)
{
    // 09F6 0061;	
    // (৶) BENGALI CURRENCY NUMERATOR THREE	[1AFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F6, 0x0061 };
    uint32_t const ces[9] = { 0x1AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_135)
{
    // 09F6 0041;	
    // (৶) BENGALI CURRENCY NUMERATOR THREE	[1AFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F6, 0x0041 };
    uint32_t const ces[9] = { 0x1AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_136)
{
    // 09F6 0062;	
    // (৶) BENGALI CURRENCY NUMERATOR THREE	[1AFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F6, 0x0062 };
    uint32_t const ces[9] = { 0x1AFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_137)
{
    // 09F7 0021;	
    // (৷) BENGALI CURRENCY NUMERATOR FOUR	[1AFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F7, 0x0021 };
    uint32_t const ces[9] = { 0x1AFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_138)
{
    // 09F7 003F;	
    // (৷) BENGALI CURRENCY NUMERATOR FOUR	[1AFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F7, 0x003F };
    uint32_t const ces[9] = { 0x1AFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_139)
{
    // 09F7 0061;	
    // (৷) BENGALI CURRENCY NUMERATOR FOUR	[1AFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F7, 0x0061 };
    uint32_t const ces[9] = { 0x1AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_140)
{
    // 09F7 0041;	
    // (৷) BENGALI CURRENCY NUMERATOR FOUR	[1AFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F7, 0x0041 };
    uint32_t const ces[9] = { 0x1AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_141)
{
    // 09F7 0062;	
    // (৷) BENGALI CURRENCY NUMERATOR FOUR	[1AFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F7, 0x0062 };
    uint32_t const ces[9] = { 0x1AFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_142)
{
    // 09F8 0021;	
    // (৸) BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR	[1AFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F8, 0x0021 };
    uint32_t const ces[9] = { 0x1AFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_143)
{
    // 09F8 003F;	
    // (৸) BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR	[1AFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F8, 0x003F };
    uint32_t const ces[9] = { 0x1AFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_144)
{
    // 09F8 0061;	
    // (৸) BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR	[1AFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F8, 0x0061 };
    uint32_t const ces[9] = { 0x1AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_145)
{
    // 09F8 0041;	
    // (৸) BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR	[1AFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F8, 0x0041 };
    uint32_t const ces[9] = { 0x1AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_146)
{
    // 09F8 0062;	
    // (৸) BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR	[1AFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F8, 0x0062 };
    uint32_t const ces[9] = { 0x1AFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_147)
{
    // 09F9 0021;	
    // (৹) BENGALI CURRENCY DENOMINATOR SIXTEEN	[1AFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F9, 0x0021 };
    uint32_t const ces[9] = { 0x1AFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_148)
{
    // 09F9 003F;	
    // (৹) BENGALI CURRENCY DENOMINATOR SIXTEEN	[1AFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F9, 0x003F };
    uint32_t const ces[9] = { 0x1AFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_149)
{
    // 09F9 0061;	
    // (৹) BENGALI CURRENCY DENOMINATOR SIXTEEN	[1AFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F9, 0x0061 };
    uint32_t const ces[9] = { 0x1AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_150)
{
    // 09F9 0041;	
    // (৹) BENGALI CURRENCY DENOMINATOR SIXTEEN	[1AFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F9, 0x0041 };
    uint32_t const ces[9] = { 0x1AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_151)
{
    // 09F9 0062;	
    // (৹) BENGALI CURRENCY DENOMINATOR SIXTEEN	[1AFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F9, 0x0062 };
    uint32_t const ces[9] = { 0x1AFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_152)
{
    // 0B72 0021;	
    // (୲) ORIYA FRACTION ONE QUARTER	[1B00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B72, 0x0021 };
    uint32_t const ces[9] = { 0x1B00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_153)
{
    // 0B72 003F;	
    // (୲) ORIYA FRACTION ONE QUARTER	[1B00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B72, 0x003F };
    uint32_t const ces[9] = { 0x1B00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_154)
{
    // 0B72 0061;	
    // (୲) ORIYA FRACTION ONE QUARTER	[1B00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B72, 0x0061 };
    uint32_t const ces[9] = { 0x1B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_155)
{
    // 0B72 0041;	
    // (୲) ORIYA FRACTION ONE QUARTER	[1B00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B72, 0x0041 };
    uint32_t const ces[9] = { 0x1B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_156)
{
    // 0B72 0062;	
    // (୲) ORIYA FRACTION ONE QUARTER	[1B00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B72, 0x0062 };
    uint32_t const ces[9] = { 0x1B00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_157)
{
    // 0B73 0021;	
    // (୳) ORIYA FRACTION ONE HALF	[1B01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B73, 0x0021 };
    uint32_t const ces[9] = { 0x1B01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_158)
{
    // 0B73 003F;	
    // (୳) ORIYA FRACTION ONE HALF	[1B01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B73, 0x003F };
    uint32_t const ces[9] = { 0x1B01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_159)
{
    // 0B73 0061;	
    // (୳) ORIYA FRACTION ONE HALF	[1B01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B73, 0x0061 };
    uint32_t const ces[9] = { 0x1B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_160)
{
    // 0B73 0041;	
    // (୳) ORIYA FRACTION ONE HALF	[1B01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B73, 0x0041 };
    uint32_t const ces[9] = { 0x1B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_161)
{
    // 0B73 0062;	
    // (୳) ORIYA FRACTION ONE HALF	[1B01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B73, 0x0062 };
    uint32_t const ces[9] = { 0x1B01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_162)
{
    // 0B74 0021;	
    // (୴) ORIYA FRACTION THREE QUARTERS	[1B02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B74, 0x0021 };
    uint32_t const ces[9] = { 0x1B02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_163)
{
    // 0B74 003F;	
    // (୴) ORIYA FRACTION THREE QUARTERS	[1B02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B74, 0x003F };
    uint32_t const ces[9] = { 0x1B02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_164)
{
    // 0B74 0061;	
    // (୴) ORIYA FRACTION THREE QUARTERS	[1B02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B74, 0x0061 };
    uint32_t const ces[9] = { 0x1B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_165)
{
    // 0B74 0041;	
    // (୴) ORIYA FRACTION THREE QUARTERS	[1B02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B74, 0x0041 };
    uint32_t const ces[9] = { 0x1B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_166)
{
    // 0B74 0062;	
    // (୴) ORIYA FRACTION THREE QUARTERS	[1B02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B74, 0x0062 };
    uint32_t const ces[9] = { 0x1B02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_167)
{
    // 0B75 0021;	
    // (୵) ORIYA FRACTION ONE SIXTEENTH	[1B03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B75, 0x0021 };
    uint32_t const ces[9] = { 0x1B03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_168)
{
    // 0B75 003F;	
    // (୵) ORIYA FRACTION ONE SIXTEENTH	[1B03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B75, 0x003F };
    uint32_t const ces[9] = { 0x1B03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_169)
{
    // 0B75 0061;	
    // (୵) ORIYA FRACTION ONE SIXTEENTH	[1B03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B75, 0x0061 };
    uint32_t const ces[9] = { 0x1B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_170)
{
    // 0B75 0041;	
    // (୵) ORIYA FRACTION ONE SIXTEENTH	[1B03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B75, 0x0041 };
    uint32_t const ces[9] = { 0x1B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_171)
{
    // 0B75 0062;	
    // (୵) ORIYA FRACTION ONE SIXTEENTH	[1B03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B75, 0x0062 };
    uint32_t const ces[9] = { 0x1B03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_172)
{
    // 0B76 0021;	
    // (୶) ORIYA FRACTION ONE EIGHTH	[1B04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B76, 0x0021 };
    uint32_t const ces[9] = { 0x1B04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_173)
{
    // 0B76 003F;	
    // (୶) ORIYA FRACTION ONE EIGHTH	[1B04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B76, 0x003F };
    uint32_t const ces[9] = { 0x1B04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_174)
{
    // 0B76 0061;	
    // (୶) ORIYA FRACTION ONE EIGHTH	[1B04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B76, 0x0061 };
    uint32_t const ces[9] = { 0x1B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_175)
{
    // 0B76 0041;	
    // (୶) ORIYA FRACTION ONE EIGHTH	[1B04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B76, 0x0041 };
    uint32_t const ces[9] = { 0x1B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_176)
{
    // 0B76 0062;	
    // (୶) ORIYA FRACTION ONE EIGHTH	[1B04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B76, 0x0062 };
    uint32_t const ces[9] = { 0x1B04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_177)
{
    // 0B77 0021;	
    // (୷) ORIYA FRACTION THREE SIXTEENTHS	[1B05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B77, 0x0021 };
    uint32_t const ces[9] = { 0x1B05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_178)
{
    // 0B77 003F;	
    // (୷) ORIYA FRACTION THREE SIXTEENTHS	[1B05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B77, 0x003F };
    uint32_t const ces[9] = { 0x1B05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_179)
{
    // 0B77 0061;	
    // (୷) ORIYA FRACTION THREE SIXTEENTHS	[1B05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B77, 0x0061 };
    uint32_t const ces[9] = { 0x1B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_180)
{
    // 0B77 0041;	
    // (୷) ORIYA FRACTION THREE SIXTEENTHS	[1B05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B77, 0x0041 };
    uint32_t const ces[9] = { 0x1B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_181)
{
    // 0B77 0062;	
    // (୷) ORIYA FRACTION THREE SIXTEENTHS	[1B05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B77, 0x0062 };
    uint32_t const ces[9] = { 0x1B05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_182)
{
    // A830 0021;	
    // (꠰) NORTH INDIC FRACTION ONE QUARTER	[1B06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA830, 0x0021 };
    uint32_t const ces[9] = { 0x1B06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_183)
{
    // A830 003F;	
    // (꠰) NORTH INDIC FRACTION ONE QUARTER	[1B06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA830, 0x003F };
    uint32_t const ces[9] = { 0x1B06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_184)
{
    // A830 0061;	
    // (꠰) NORTH INDIC FRACTION ONE QUARTER	[1B06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA830, 0x0061 };
    uint32_t const ces[9] = { 0x1B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_185)
{
    // A830 0041;	
    // (꠰) NORTH INDIC FRACTION ONE QUARTER	[1B06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA830, 0x0041 };
    uint32_t const ces[9] = { 0x1B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_186)
{
    // A830 0062;	
    // (꠰) NORTH INDIC FRACTION ONE QUARTER	[1B06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA830, 0x0062 };
    uint32_t const ces[9] = { 0x1B06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_187)
{
    // A831 0021;	
    // (꠱) NORTH INDIC FRACTION ONE HALF	[1B07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA831, 0x0021 };
    uint32_t const ces[9] = { 0x1B07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_188)
{
    // A831 003F;	
    // (꠱) NORTH INDIC FRACTION ONE HALF	[1B07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA831, 0x003F };
    uint32_t const ces[9] = { 0x1B07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_189)
{
    // A831 0061;	
    // (꠱) NORTH INDIC FRACTION ONE HALF	[1B07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA831, 0x0061 };
    uint32_t const ces[9] = { 0x1B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_190)
{
    // A831 0041;	
    // (꠱) NORTH INDIC FRACTION ONE HALF	[1B07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA831, 0x0041 };
    uint32_t const ces[9] = { 0x1B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_191)
{
    // A831 0062;	
    // (꠱) NORTH INDIC FRACTION ONE HALF	[1B07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA831, 0x0062 };
    uint32_t const ces[9] = { 0x1B07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_192)
{
    // A832 0021;	
    // (꠲) NORTH INDIC FRACTION THREE QUARTERS	[1B08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA832, 0x0021 };
    uint32_t const ces[9] = { 0x1B08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_193)
{
    // A832 003F;	
    // (꠲) NORTH INDIC FRACTION THREE QUARTERS	[1B08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA832, 0x003F };
    uint32_t const ces[9] = { 0x1B08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_194)
{
    // A832 0061;	
    // (꠲) NORTH INDIC FRACTION THREE QUARTERS	[1B08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA832, 0x0061 };
    uint32_t const ces[9] = { 0x1B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_195)
{
    // A832 0041;	
    // (꠲) NORTH INDIC FRACTION THREE QUARTERS	[1B08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA832, 0x0041 };
    uint32_t const ces[9] = { 0x1B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_196)
{
    // A832 0062;	
    // (꠲) NORTH INDIC FRACTION THREE QUARTERS	[1B08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA832, 0x0062 };
    uint32_t const ces[9] = { 0x1B08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_197)
{
    // A833 0021;	
    // (꠳) NORTH INDIC FRACTION ONE SIXTEENTH	[1B09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA833, 0x0021 };
    uint32_t const ces[9] = { 0x1B09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_198)
{
    // A833 003F;	
    // (꠳) NORTH INDIC FRACTION ONE SIXTEENTH	[1B09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA833, 0x003F };
    uint32_t const ces[9] = { 0x1B09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_199)
{
    // A833 0061;	
    // (꠳) NORTH INDIC FRACTION ONE SIXTEENTH	[1B09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA833, 0x0061 };
    uint32_t const ces[9] = { 0x1B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_200)
{
    // A833 0041;	
    // (꠳) NORTH INDIC FRACTION ONE SIXTEENTH	[1B09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA833, 0x0041 };
    uint32_t const ces[9] = { 0x1B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_201)
{
    // A833 0062;	
    // (꠳) NORTH INDIC FRACTION ONE SIXTEENTH	[1B09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA833, 0x0062 };
    uint32_t const ces[9] = { 0x1B09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_202)
{
    // A834 0021;	
    // (꠴) NORTH INDIC FRACTION ONE EIGHTH	[1B0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA834, 0x0021 };
    uint32_t const ces[9] = { 0x1B0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_203)
{
    // A834 003F;	
    // (꠴) NORTH INDIC FRACTION ONE EIGHTH	[1B0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA834, 0x003F };
    uint32_t const ces[9] = { 0x1B0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_204)
{
    // A834 0061;	
    // (꠴) NORTH INDIC FRACTION ONE EIGHTH	[1B0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA834, 0x0061 };
    uint32_t const ces[9] = { 0x1B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_205)
{
    // A834 0041;	
    // (꠴) NORTH INDIC FRACTION ONE EIGHTH	[1B0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA834, 0x0041 };
    uint32_t const ces[9] = { 0x1B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_206)
{
    // A834 0062;	
    // (꠴) NORTH INDIC FRACTION ONE EIGHTH	[1B0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA834, 0x0062 };
    uint32_t const ces[9] = { 0x1B0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_207)
{
    // A835 0021;	
    // (꠵) NORTH INDIC FRACTION THREE SIXTEENTHS	[1B0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA835, 0x0021 };
    uint32_t const ces[9] = { 0x1B0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_208)
{
    // A835 003F;	
    // (꠵) NORTH INDIC FRACTION THREE SIXTEENTHS	[1B0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA835, 0x003F };
    uint32_t const ces[9] = { 0x1B0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_209)
{
    // A835 0061;	
    // (꠵) NORTH INDIC FRACTION THREE SIXTEENTHS	[1B0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA835, 0x0061 };
    uint32_t const ces[9] = { 0x1B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_210)
{
    // A835 0041;	
    // (꠵) NORTH INDIC FRACTION THREE SIXTEENTHS	[1B0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA835, 0x0041 };
    uint32_t const ces[9] = { 0x1B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_211)
{
    // A835 0062;	
    // (꠵) NORTH INDIC FRACTION THREE SIXTEENTHS	[1B0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA835, 0x0062 };
    uint32_t const ces[9] = { 0x1B0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_212)
{
    // 0BF0 0021;	
    // (௰) TAMIL NUMBER TEN	[1B0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF0, 0x0021 };
    uint32_t const ces[9] = { 0x1B0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_213)
{
    // 0BF0 003F;	
    // (௰) TAMIL NUMBER TEN	[1B0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF0, 0x003F };
    uint32_t const ces[9] = { 0x1B0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_214)
{
    // 0BF0 0061;	
    // (௰) TAMIL NUMBER TEN	[1B0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF0, 0x0061 };
    uint32_t const ces[9] = { 0x1B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_215)
{
    // 0BF0 0041;	
    // (௰) TAMIL NUMBER TEN	[1B0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF0, 0x0041 };
    uint32_t const ces[9] = { 0x1B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_216)
{
    // 0BF0 0062;	
    // (௰) TAMIL NUMBER TEN	[1B0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF0, 0x0062 };
    uint32_t const ces[9] = { 0x1B0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_217)
{
    // 0BF1 0021;	
    // (௱) TAMIL NUMBER ONE HUNDRED	[1B0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF1, 0x0021 };
    uint32_t const ces[9] = { 0x1B0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_218)
{
    // 0BF1 003F;	
    // (௱) TAMIL NUMBER ONE HUNDRED	[1B0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF1, 0x003F };
    uint32_t const ces[9] = { 0x1B0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_219)
{
    // 0BF1 0061;	
    // (௱) TAMIL NUMBER ONE HUNDRED	[1B0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF1, 0x0061 };
    uint32_t const ces[9] = { 0x1B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_220)
{
    // 0BF1 0041;	
    // (௱) TAMIL NUMBER ONE HUNDRED	[1B0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF1, 0x0041 };
    uint32_t const ces[9] = { 0x1B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_221)
{
    // 0BF1 0062;	
    // (௱) TAMIL NUMBER ONE HUNDRED	[1B0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF1, 0x0062 };
    uint32_t const ces[9] = { 0x1B0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_222)
{
    // 0BF2 0021;	
    // (௲) TAMIL NUMBER ONE THOUSAND	[1B0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF2, 0x0021 };
    uint32_t const ces[9] = { 0x1B0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_223)
{
    // 0BF2 003F;	
    // (௲) TAMIL NUMBER ONE THOUSAND	[1B0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF2, 0x003F };
    uint32_t const ces[9] = { 0x1B0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_224)
{
    // 0BF2 0061;	
    // (௲) TAMIL NUMBER ONE THOUSAND	[1B0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF2, 0x0061 };
    uint32_t const ces[9] = { 0x1B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_225)
{
    // 0BF2 0041;	
    // (௲) TAMIL NUMBER ONE THOUSAND	[1B0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF2, 0x0041 };
    uint32_t const ces[9] = { 0x1B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_226)
{
    // 0BF2 0062;	
    // (௲) TAMIL NUMBER ONE THOUSAND	[1B0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF2, 0x0062 };
    uint32_t const ces[9] = { 0x1B0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_227)
{
    // 0D58 0021;	
    // (൘) MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH	[1B0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D58, 0x0021 };
    uint32_t const ces[9] = { 0x1B0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_228)
{
    // 0D58 003F;	
    // (൘) MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH	[1B0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D58, 0x003F };
    uint32_t const ces[9] = { 0x1B0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_229)
{
    // 0D58 0061;	
    // (൘) MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH	[1B0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D58, 0x0061 };
    uint32_t const ces[9] = { 0x1B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_230)
{
    // 0D58 0041;	
    // (൘) MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH	[1B0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D58, 0x0041 };
    uint32_t const ces[9] = { 0x1B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_231)
{
    // 0D58 0062;	
    // (൘) MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH	[1B0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D58, 0x0062 };
    uint32_t const ces[9] = { 0x1B0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_232)
{
    // 0D59 0021;	
    // (൙) MALAYALAM FRACTION ONE FORTIETH	[1B10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D59, 0x0021 };
    uint32_t const ces[9] = { 0x1B10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_233)
{
    // 0D59 003F;	
    // (൙) MALAYALAM FRACTION ONE FORTIETH	[1B10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D59, 0x003F };
    uint32_t const ces[9] = { 0x1B10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_234)
{
    // 0D59 0061;	
    // (൙) MALAYALAM FRACTION ONE FORTIETH	[1B10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D59, 0x0061 };
    uint32_t const ces[9] = { 0x1B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_235)
{
    // 0D59 0041;	
    // (൙) MALAYALAM FRACTION ONE FORTIETH	[1B10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D59, 0x0041 };
    uint32_t const ces[9] = { 0x1B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_236)
{
    // 0D59 0062;	
    // (൙) MALAYALAM FRACTION ONE FORTIETH	[1B10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D59, 0x0062 };
    uint32_t const ces[9] = { 0x1B10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_237)
{
    // 0D5A 0021;	
    // (൚) MALAYALAM FRACTION THREE EIGHTIETHS	[1B11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5A, 0x0021 };
    uint32_t const ces[9] = { 0x1B11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_238)
{
    // 0D5A 003F;	
    // (൚) MALAYALAM FRACTION THREE EIGHTIETHS	[1B11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5A, 0x003F };
    uint32_t const ces[9] = { 0x1B11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_239)
{
    // 0D5A 0061;	
    // (൚) MALAYALAM FRACTION THREE EIGHTIETHS	[1B11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5A, 0x0061 };
    uint32_t const ces[9] = { 0x1B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_240)
{
    // 0D5A 0041;	
    // (൚) MALAYALAM FRACTION THREE EIGHTIETHS	[1B11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D5A, 0x0041 };
    uint32_t const ces[9] = { 0x1B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_241)
{
    // 0D5A 0062;	
    // (൚) MALAYALAM FRACTION THREE EIGHTIETHS	[1B11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5A, 0x0062 };
    uint32_t const ces[9] = { 0x1B11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_242)
{
    // 0D5B 0021;	
    // (൛) MALAYALAM FRACTION ONE TWENTIETH	[1B12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5B, 0x0021 };
    uint32_t const ces[9] = { 0x1B12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_243)
{
    // 0D5B 003F;	
    // (൛) MALAYALAM FRACTION ONE TWENTIETH	[1B12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5B, 0x003F };
    uint32_t const ces[9] = { 0x1B12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_244)
{
    // 0D5B 0061;	
    // (൛) MALAYALAM FRACTION ONE TWENTIETH	[1B12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5B, 0x0061 };
    uint32_t const ces[9] = { 0x1B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_245)
{
    // 0D5B 0041;	
    // (൛) MALAYALAM FRACTION ONE TWENTIETH	[1B12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D5B, 0x0041 };
    uint32_t const ces[9] = { 0x1B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_246)
{
    // 0D5B 0062;	
    // (൛) MALAYALAM FRACTION ONE TWENTIETH	[1B12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5B, 0x0062 };
    uint32_t const ces[9] = { 0x1B12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_247)
{
    // 0D5C 0021;	
    // (൜) MALAYALAM FRACTION ONE TENTH	[1B13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5C, 0x0021 };
    uint32_t const ces[9] = { 0x1B13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_248)
{
    // 0D5C 003F;	
    // (൜) MALAYALAM FRACTION ONE TENTH	[1B13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5C, 0x003F };
    uint32_t const ces[9] = { 0x1B13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_249)
{
    // 0D5C 0061;	
    // (൜) MALAYALAM FRACTION ONE TENTH	[1B13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5C, 0x0061 };
    uint32_t const ces[9] = { 0x1B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_250)
{
    // 0D5C 0041;	
    // (൜) MALAYALAM FRACTION ONE TENTH	[1B13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D5C, 0x0041 };
    uint32_t const ces[9] = { 0x1B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_251)
{
    // 0D5C 0062;	
    // (൜) MALAYALAM FRACTION ONE TENTH	[1B13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5C, 0x0062 };
    uint32_t const ces[9] = { 0x1B13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_252)
{
    // 0D5D 0021;	
    // (൝) MALAYALAM FRACTION THREE TWENTIETHS	[1B14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5D, 0x0021 };
    uint32_t const ces[9] = { 0x1B14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_253)
{
    // 0D5D 003F;	
    // (൝) MALAYALAM FRACTION THREE TWENTIETHS	[1B14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5D, 0x003F };
    uint32_t const ces[9] = { 0x1B14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_254)
{
    // 0D5D 0061;	
    // (൝) MALAYALAM FRACTION THREE TWENTIETHS	[1B14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5D, 0x0061 };
    uint32_t const ces[9] = { 0x1B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_255)
{
    // 0D5D 0041;	
    // (൝) MALAYALAM FRACTION THREE TWENTIETHS	[1B14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D5D, 0x0041 };
    uint32_t const ces[9] = { 0x1B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_256)
{
    // 0D5D 0062;	
    // (൝) MALAYALAM FRACTION THREE TWENTIETHS	[1B14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5D, 0x0062 };
    uint32_t const ces[9] = { 0x1B14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_257)
{
    // 0D5E 0021;	
    // (൞) MALAYALAM FRACTION ONE FIFTH	[1B15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5E, 0x0021 };
    uint32_t const ces[9] = { 0x1B15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_258)
{
    // 0D5E 003F;	
    // (൞) MALAYALAM FRACTION ONE FIFTH	[1B15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5E, 0x003F };
    uint32_t const ces[9] = { 0x1B15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_259)
{
    // 0D5E 0061;	
    // (൞) MALAYALAM FRACTION ONE FIFTH	[1B15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5E, 0x0061 };
    uint32_t const ces[9] = { 0x1B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_260)
{
    // 0D5E 0041;	
    // (൞) MALAYALAM FRACTION ONE FIFTH	[1B15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D5E, 0x0041 };
    uint32_t const ces[9] = { 0x1B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_261)
{
    // 0D5E 0062;	
    // (൞) MALAYALAM FRACTION ONE FIFTH	[1B15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D5E, 0x0062 };
    uint32_t const ces[9] = { 0x1B15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_262)
{
    // 0D70 0021;	
    // (൰) MALAYALAM NUMBER TEN	[1B16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D70, 0x0021 };
    uint32_t const ces[9] = { 0x1B16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_263)
{
    // 0D70 003F;	
    // (൰) MALAYALAM NUMBER TEN	[1B16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D70, 0x003F };
    uint32_t const ces[9] = { 0x1B16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_264)
{
    // 0D70 0061;	
    // (൰) MALAYALAM NUMBER TEN	[1B16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D70, 0x0061 };
    uint32_t const ces[9] = { 0x1B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_265)
{
    // 0D70 0041;	
    // (൰) MALAYALAM NUMBER TEN	[1B16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D70, 0x0041 };
    uint32_t const ces[9] = { 0x1B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_266)
{
    // 0D70 0062;	
    // (൰) MALAYALAM NUMBER TEN	[1B16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D70, 0x0062 };
    uint32_t const ces[9] = { 0x1B16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_267)
{
    // 0D71 0021;	
    // (൱) MALAYALAM NUMBER ONE HUNDRED	[1B17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D71, 0x0021 };
    uint32_t const ces[9] = { 0x1B17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_268)
{
    // 0D71 003F;	
    // (൱) MALAYALAM NUMBER ONE HUNDRED	[1B17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D71, 0x003F };
    uint32_t const ces[9] = { 0x1B17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_269)
{
    // 0D71 0061;	
    // (൱) MALAYALAM NUMBER ONE HUNDRED	[1B17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D71, 0x0061 };
    uint32_t const ces[9] = { 0x1B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_270)
{
    // 0D71 0041;	
    // (൱) MALAYALAM NUMBER ONE HUNDRED	[1B17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D71, 0x0041 };
    uint32_t const ces[9] = { 0x1B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_271)
{
    // 0D71 0062;	
    // (൱) MALAYALAM NUMBER ONE HUNDRED	[1B17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D71, 0x0062 };
    uint32_t const ces[9] = { 0x1B17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_272)
{
    // 0D72 0021;	
    // (൲) MALAYALAM NUMBER ONE THOUSAND	[1B18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D72, 0x0021 };
    uint32_t const ces[9] = { 0x1B18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_273)
{
    // 0D72 003F;	
    // (൲) MALAYALAM NUMBER ONE THOUSAND	[1B18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D72, 0x003F };
    uint32_t const ces[9] = { 0x1B18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_274)
{
    // 0D72 0061;	
    // (൲) MALAYALAM NUMBER ONE THOUSAND	[1B18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D72, 0x0061 };
    uint32_t const ces[9] = { 0x1B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_275)
{
    // 0D72 0041;	
    // (൲) MALAYALAM NUMBER ONE THOUSAND	[1B18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D72, 0x0041 };
    uint32_t const ces[9] = { 0x1B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_276)
{
    // 0D72 0062;	
    // (൲) MALAYALAM NUMBER ONE THOUSAND	[1B18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D72, 0x0062 };
    uint32_t const ces[9] = { 0x1B18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_277)
{
    // 0D73 0021;	
    // (൳) MALAYALAM FRACTION ONE QUARTER	[1B19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D73, 0x0021 };
    uint32_t const ces[9] = { 0x1B19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_278)
{
    // 0D73 003F;	
    // (൳) MALAYALAM FRACTION ONE QUARTER	[1B19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D73, 0x003F };
    uint32_t const ces[9] = { 0x1B19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_279)
{
    // 0D73 0061;	
    // (൳) MALAYALAM FRACTION ONE QUARTER	[1B19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D73, 0x0061 };
    uint32_t const ces[9] = { 0x1B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_280)
{
    // 0D73 0041;	
    // (൳) MALAYALAM FRACTION ONE QUARTER	[1B19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D73, 0x0041 };
    uint32_t const ces[9] = { 0x1B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_281)
{
    // 0D73 0062;	
    // (൳) MALAYALAM FRACTION ONE QUARTER	[1B19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D73, 0x0062 };
    uint32_t const ces[9] = { 0x1B19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_282)
{
    // 0D74 0021;	
    // (൴) MALAYALAM FRACTION ONE HALF	[1B1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D74, 0x0021 };
    uint32_t const ces[9] = { 0x1B1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_283)
{
    // 0D74 003F;	
    // (൴) MALAYALAM FRACTION ONE HALF	[1B1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D74, 0x003F };
    uint32_t const ces[9] = { 0x1B1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_284)
{
    // 0D74 0061;	
    // (൴) MALAYALAM FRACTION ONE HALF	[1B1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D74, 0x0061 };
    uint32_t const ces[9] = { 0x1B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_285)
{
    // 0D74 0041;	
    // (൴) MALAYALAM FRACTION ONE HALF	[1B1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D74, 0x0041 };
    uint32_t const ces[9] = { 0x1B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_286)
{
    // 0D74 0062;	
    // (൴) MALAYALAM FRACTION ONE HALF	[1B1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D74, 0x0062 };
    uint32_t const ces[9] = { 0x1B1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_287)
{
    // 0D75 0021;	
    // (൵) MALAYALAM FRACTION THREE QUARTERS	[1B1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D75, 0x0021 };
    uint32_t const ces[9] = { 0x1B1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_288)
{
    // 0D75 003F;	
    // (൵) MALAYALAM FRACTION THREE QUARTERS	[1B1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D75, 0x003F };
    uint32_t const ces[9] = { 0x1B1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_289)
{
    // 0D75 0061;	
    // (൵) MALAYALAM FRACTION THREE QUARTERS	[1B1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D75, 0x0061 };
    uint32_t const ces[9] = { 0x1B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_290)
{
    // 0D75 0041;	
    // (൵) MALAYALAM FRACTION THREE QUARTERS	[1B1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D75, 0x0041 };
    uint32_t const ces[9] = { 0x1B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_291)
{
    // 0D75 0062;	
    // (൵) MALAYALAM FRACTION THREE QUARTERS	[1B1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D75, 0x0062 };
    uint32_t const ces[9] = { 0x1B1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_292)
{
    // 0D76 0021;	
    // (൶) MALAYALAM FRACTION ONE SIXTEENTH	[1B1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D76, 0x0021 };
    uint32_t const ces[9] = { 0x1B1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_293)
{
    // 0D76 003F;	
    // (൶) MALAYALAM FRACTION ONE SIXTEENTH	[1B1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D76, 0x003F };
    uint32_t const ces[9] = { 0x1B1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_294)
{
    // 0D76 0061;	
    // (൶) MALAYALAM FRACTION ONE SIXTEENTH	[1B1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D76, 0x0061 };
    uint32_t const ces[9] = { 0x1B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_295)
{
    // 0D76 0041;	
    // (൶) MALAYALAM FRACTION ONE SIXTEENTH	[1B1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D76, 0x0041 };
    uint32_t const ces[9] = { 0x1B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_296)
{
    // 0D76 0062;	
    // (൶) MALAYALAM FRACTION ONE SIXTEENTH	[1B1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D76, 0x0062 };
    uint32_t const ces[9] = { 0x1B1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_297)
{
    // 0D77 0021;	
    // (൷) MALAYALAM FRACTION ONE EIGHTH	[1B1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D77, 0x0021 };
    uint32_t const ces[9] = { 0x1B1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_298)
{
    // 0D77 003F;	
    // (൷) MALAYALAM FRACTION ONE EIGHTH	[1B1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D77, 0x003F };
    uint32_t const ces[9] = { 0x1B1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_299)
{
    // 0D77 0061;	
    // (൷) MALAYALAM FRACTION ONE EIGHTH	[1B1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D77, 0x0061 };
    uint32_t const ces[9] = { 0x1B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_300)
{
    // 0D77 0041;	
    // (൷) MALAYALAM FRACTION ONE EIGHTH	[1B1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D77, 0x0041 };
    uint32_t const ces[9] = { 0x1B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_301)
{
    // 0D77 0062;	
    // (൷) MALAYALAM FRACTION ONE EIGHTH	[1B1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D77, 0x0062 };
    uint32_t const ces[9] = { 0x1B1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_302)
{
    // 0D78 0021;	
    // (൸) MALAYALAM FRACTION THREE SIXTEENTHS	[1B1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D78, 0x0021 };
    uint32_t const ces[9] = { 0x1B1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_303)
{
    // 0D78 003F;	
    // (൸) MALAYALAM FRACTION THREE SIXTEENTHS	[1B1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D78, 0x003F };
    uint32_t const ces[9] = { 0x1B1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_304)
{
    // 0D78 0061;	
    // (൸) MALAYALAM FRACTION THREE SIXTEENTHS	[1B1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D78, 0x0061 };
    uint32_t const ces[9] = { 0x1B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_305)
{
    // 0D78 0041;	
    // (൸) MALAYALAM FRACTION THREE SIXTEENTHS	[1B1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D78, 0x0041 };
    uint32_t const ces[9] = { 0x1B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_306)
{
    // 0D78 0062;	
    // (൸) MALAYALAM FRACTION THREE SIXTEENTHS	[1B1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D78, 0x0062 };
    uint32_t const ces[9] = { 0x1B1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_307)
{
    // 1372 0021;	
    // (፲) ETHIOPIC NUMBER TEN	[1B1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1372, 0x0021 };
    uint32_t const ces[9] = { 0x1B1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_308)
{
    // 1372 003F;	
    // (፲) ETHIOPIC NUMBER TEN	[1B1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1372, 0x003F };
    uint32_t const ces[9] = { 0x1B1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_309)
{
    // 1372 0061;	
    // (፲) ETHIOPIC NUMBER TEN	[1B1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1372, 0x0061 };
    uint32_t const ces[9] = { 0x1B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_310)
{
    // 1372 0041;	
    // (፲) ETHIOPIC NUMBER TEN	[1B1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1372, 0x0041 };
    uint32_t const ces[9] = { 0x1B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_311)
{
    // 1372 0062;	
    // (፲) ETHIOPIC NUMBER TEN	[1B1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1372, 0x0062 };
    uint32_t const ces[9] = { 0x1B1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_312)
{
    // 1373 0021;	
    // (፳) ETHIOPIC NUMBER TWENTY	[1B20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1373, 0x0021 };
    uint32_t const ces[9] = { 0x1B20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_313)
{
    // 1373 003F;	
    // (፳) ETHIOPIC NUMBER TWENTY	[1B20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1373, 0x003F };
    uint32_t const ces[9] = { 0x1B20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_314)
{
    // 1373 0061;	
    // (፳) ETHIOPIC NUMBER TWENTY	[1B20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1373, 0x0061 };
    uint32_t const ces[9] = { 0x1B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_315)
{
    // 1373 0041;	
    // (፳) ETHIOPIC NUMBER TWENTY	[1B20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1373, 0x0041 };
    uint32_t const ces[9] = { 0x1B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_316)
{
    // 1373 0062;	
    // (፳) ETHIOPIC NUMBER TWENTY	[1B20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1373, 0x0062 };
    uint32_t const ces[9] = { 0x1B20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_317)
{
    // 1374 0021;	
    // (፴) ETHIOPIC NUMBER THIRTY	[1B21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1374, 0x0021 };
    uint32_t const ces[9] = { 0x1B21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_318)
{
    // 1374 003F;	
    // (፴) ETHIOPIC NUMBER THIRTY	[1B21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1374, 0x003F };
    uint32_t const ces[9] = { 0x1B21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_319)
{
    // 1374 0061;	
    // (፴) ETHIOPIC NUMBER THIRTY	[1B21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1374, 0x0061 };
    uint32_t const ces[9] = { 0x1B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_320)
{
    // 1374 0041;	
    // (፴) ETHIOPIC NUMBER THIRTY	[1B21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1374, 0x0041 };
    uint32_t const ces[9] = { 0x1B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_321)
{
    // 1374 0062;	
    // (፴) ETHIOPIC NUMBER THIRTY	[1B21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1374, 0x0062 };
    uint32_t const ces[9] = { 0x1B21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_322)
{
    // 1375 0021;	
    // (፵) ETHIOPIC NUMBER FORTY	[1B22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1375, 0x0021 };
    uint32_t const ces[9] = { 0x1B22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_323)
{
    // 1375 003F;	
    // (፵) ETHIOPIC NUMBER FORTY	[1B22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1375, 0x003F };
    uint32_t const ces[9] = { 0x1B22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_324)
{
    // 1375 0061;	
    // (፵) ETHIOPIC NUMBER FORTY	[1B22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1375, 0x0061 };
    uint32_t const ces[9] = { 0x1B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_325)
{
    // 1375 0041;	
    // (፵) ETHIOPIC NUMBER FORTY	[1B22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1375, 0x0041 };
    uint32_t const ces[9] = { 0x1B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_326)
{
    // 1375 0062;	
    // (፵) ETHIOPIC NUMBER FORTY	[1B22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1375, 0x0062 };
    uint32_t const ces[9] = { 0x1B22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_327)
{
    // 1376 0021;	
    // (፶) ETHIOPIC NUMBER FIFTY	[1B23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1376, 0x0021 };
    uint32_t const ces[9] = { 0x1B23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_328)
{
    // 1376 003F;	
    // (፶) ETHIOPIC NUMBER FIFTY	[1B23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1376, 0x003F };
    uint32_t const ces[9] = { 0x1B23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_329)
{
    // 1376 0061;	
    // (፶) ETHIOPIC NUMBER FIFTY	[1B23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1376, 0x0061 };
    uint32_t const ces[9] = { 0x1B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_330)
{
    // 1376 0041;	
    // (፶) ETHIOPIC NUMBER FIFTY	[1B23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1376, 0x0041 };
    uint32_t const ces[9] = { 0x1B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_331)
{
    // 1376 0062;	
    // (፶) ETHIOPIC NUMBER FIFTY	[1B23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1376, 0x0062 };
    uint32_t const ces[9] = { 0x1B23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_332)
{
    // 1377 0021;	
    // (፷) ETHIOPIC NUMBER SIXTY	[1B24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1377, 0x0021 };
    uint32_t const ces[9] = { 0x1B24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_333)
{
    // 1377 003F;	
    // (፷) ETHIOPIC NUMBER SIXTY	[1B24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1377, 0x003F };
    uint32_t const ces[9] = { 0x1B24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_334)
{
    // 1377 0061;	
    // (፷) ETHIOPIC NUMBER SIXTY	[1B24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1377, 0x0061 };
    uint32_t const ces[9] = { 0x1B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_335)
{
    // 1377 0041;	
    // (፷) ETHIOPIC NUMBER SIXTY	[1B24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1377, 0x0041 };
    uint32_t const ces[9] = { 0x1B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_336)
{
    // 1377 0062;	
    // (፷) ETHIOPIC NUMBER SIXTY	[1B24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1377, 0x0062 };
    uint32_t const ces[9] = { 0x1B24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_337)
{
    // 1378 0021;	
    // (፸) ETHIOPIC NUMBER SEVENTY	[1B25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1378, 0x0021 };
    uint32_t const ces[9] = { 0x1B25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_338)
{
    // 1378 003F;	
    // (፸) ETHIOPIC NUMBER SEVENTY	[1B25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1378, 0x003F };
    uint32_t const ces[9] = { 0x1B25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_339)
{
    // 1378 0061;	
    // (፸) ETHIOPIC NUMBER SEVENTY	[1B25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1378, 0x0061 };
    uint32_t const ces[9] = { 0x1B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_340)
{
    // 1378 0041;	
    // (፸) ETHIOPIC NUMBER SEVENTY	[1B25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1378, 0x0041 };
    uint32_t const ces[9] = { 0x1B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_341)
{
    // 1378 0062;	
    // (፸) ETHIOPIC NUMBER SEVENTY	[1B25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1378, 0x0062 };
    uint32_t const ces[9] = { 0x1B25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_342)
{
    // 1379 0021;	
    // (፹) ETHIOPIC NUMBER EIGHTY	[1B26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1379, 0x0021 };
    uint32_t const ces[9] = { 0x1B26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_343)
{
    // 1379 003F;	
    // (፹) ETHIOPIC NUMBER EIGHTY	[1B26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1379, 0x003F };
    uint32_t const ces[9] = { 0x1B26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_344)
{
    // 1379 0061;	
    // (፹) ETHIOPIC NUMBER EIGHTY	[1B26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1379, 0x0061 };
    uint32_t const ces[9] = { 0x1B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_345)
{
    // 1379 0041;	
    // (፹) ETHIOPIC NUMBER EIGHTY	[1B26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1379, 0x0041 };
    uint32_t const ces[9] = { 0x1B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_346)
{
    // 1379 0062;	
    // (፹) ETHIOPIC NUMBER EIGHTY	[1B26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1379, 0x0062 };
    uint32_t const ces[9] = { 0x1B26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_347)
{
    // 137A 0021;	
    // (፺) ETHIOPIC NUMBER NINETY	[1B27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137A, 0x0021 };
    uint32_t const ces[9] = { 0x1B27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_348)
{
    // 137A 003F;	
    // (፺) ETHIOPIC NUMBER NINETY	[1B27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137A, 0x003F };
    uint32_t const ces[9] = { 0x1B27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_349)
{
    // 137A 0061;	
    // (፺) ETHIOPIC NUMBER NINETY	[1B27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137A, 0x0061 };
    uint32_t const ces[9] = { 0x1B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_350)
{
    // 137A 0041;	
    // (፺) ETHIOPIC NUMBER NINETY	[1B27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x137A, 0x0041 };
    uint32_t const ces[9] = { 0x1B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_351)
{
    // 137A 0062;	
    // (፺) ETHIOPIC NUMBER NINETY	[1B27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137A, 0x0062 };
    uint32_t const ces[9] = { 0x1B27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_352)
{
    // 137B 0021;	
    // (፻) ETHIOPIC NUMBER HUNDRED	[1B28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137B, 0x0021 };
    uint32_t const ces[9] = { 0x1B28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_353)
{
    // 137B 003F;	
    // (፻) ETHIOPIC NUMBER HUNDRED	[1B28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137B, 0x003F };
    uint32_t const ces[9] = { 0x1B28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_354)
{
    // 137B 0061;	
    // (፻) ETHIOPIC NUMBER HUNDRED	[1B28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137B, 0x0061 };
    uint32_t const ces[9] = { 0x1B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_355)
{
    // 137B 0041;	
    // (፻) ETHIOPIC NUMBER HUNDRED	[1B28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x137B, 0x0041 };
    uint32_t const ces[9] = { 0x1B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_356)
{
    // 137B 0062;	
    // (፻) ETHIOPIC NUMBER HUNDRED	[1B28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137B, 0x0062 };
    uint32_t const ces[9] = { 0x1B28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_357)
{
    // 137C 0021;	
    // (፼) ETHIOPIC NUMBER TEN THOUSAND	[1B29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137C, 0x0021 };
    uint32_t const ces[9] = { 0x1B29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_358)
{
    // 137C 003F;	
    // (፼) ETHIOPIC NUMBER TEN THOUSAND	[1B29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137C, 0x003F };
    uint32_t const ces[9] = { 0x1B29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_359)
{
    // 137C 0061;	
    // (፼) ETHIOPIC NUMBER TEN THOUSAND	[1B29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137C, 0x0061 };
    uint32_t const ces[9] = { 0x1B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_360)
{
    // 137C 0041;	
    // (፼) ETHIOPIC NUMBER TEN THOUSAND	[1B29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x137C, 0x0041 };
    uint32_t const ces[9] = { 0x1B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_361)
{
    // 137C 0062;	
    // (፼) ETHIOPIC NUMBER TEN THOUSAND	[1B29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x137C, 0x0062 };
    uint32_t const ces[9] = { 0x1B29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_362)
{
    // 2180 0021;	
    // (ↀ) ROMAN NUMERAL ONE THOUSAND C D	[1B2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2180, 0x0021 };
    uint32_t const ces[9] = { 0x1B2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_363)
{
    // 2180 003F;	
    // (ↀ) ROMAN NUMERAL ONE THOUSAND C D	[1B2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2180, 0x003F };
    uint32_t const ces[9] = { 0x1B2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_364)
{
    // 2180 0061;	
    // (ↀ) ROMAN NUMERAL ONE THOUSAND C D	[1B2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2180, 0x0061 };
    uint32_t const ces[9] = { 0x1B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_365)
{
    // 2180 0041;	
    // (ↀ) ROMAN NUMERAL ONE THOUSAND C D	[1B2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2180, 0x0041 };
    uint32_t const ces[9] = { 0x1B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_366)
{
    // 2180 0062;	
    // (ↀ) ROMAN NUMERAL ONE THOUSAND C D	[1B2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2180, 0x0062 };
    uint32_t const ces[9] = { 0x1B2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_367)
{
    // 2181 0021;	
    // (ↁ) ROMAN NUMERAL FIVE THOUSAND	[1B2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2181, 0x0021 };
    uint32_t const ces[9] = { 0x1B2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_368)
{
    // 2181 003F;	
    // (ↁ) ROMAN NUMERAL FIVE THOUSAND	[1B2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2181, 0x003F };
    uint32_t const ces[9] = { 0x1B2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_369)
{
    // 2181 0061;	
    // (ↁ) ROMAN NUMERAL FIVE THOUSAND	[1B2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2181, 0x0061 };
    uint32_t const ces[9] = { 0x1B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_370)
{
    // 2181 0041;	
    // (ↁ) ROMAN NUMERAL FIVE THOUSAND	[1B2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2181, 0x0041 };
    uint32_t const ces[9] = { 0x1B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_371)
{
    // 2181 0062;	
    // (ↁ) ROMAN NUMERAL FIVE THOUSAND	[1B2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2181, 0x0062 };
    uint32_t const ces[9] = { 0x1B2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_372)
{
    // 2182 0021;	
    // (ↂ) ROMAN NUMERAL TEN THOUSAND	[1B2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2182, 0x0021 };
    uint32_t const ces[9] = { 0x1B2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_373)
{
    // 2182 003F;	
    // (ↂ) ROMAN NUMERAL TEN THOUSAND	[1B2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2182, 0x003F };
    uint32_t const ces[9] = { 0x1B2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_374)
{
    // 2182 0061;	
    // (ↂ) ROMAN NUMERAL TEN THOUSAND	[1B2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2182, 0x0061 };
    uint32_t const ces[9] = { 0x1B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_375)
{
    // 2182 0041;	
    // (ↂ) ROMAN NUMERAL TEN THOUSAND	[1B2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2182, 0x0041 };
    uint32_t const ces[9] = { 0x1B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_376)
{
    // 2182 0062;	
    // (ↂ) ROMAN NUMERAL TEN THOUSAND	[1B2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2182, 0x0062 };
    uint32_t const ces[9] = { 0x1B2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_377)
{
    // 2186 0021;	
    // (ↆ) ROMAN NUMERAL FIFTY EARLY FORM	[1B2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2186, 0x0021 };
    uint32_t const ces[9] = { 0x1B2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_378)
{
    // 2186 003F;	
    // (ↆ) ROMAN NUMERAL FIFTY EARLY FORM	[1B2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2186, 0x003F };
    uint32_t const ces[9] = { 0x1B2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_379)
{
    // 2186 0061;	
    // (ↆ) ROMAN NUMERAL FIFTY EARLY FORM	[1B2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2186, 0x0061 };
    uint32_t const ces[9] = { 0x1B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_380)
{
    // 2186 0041;	
    // (ↆ) ROMAN NUMERAL FIFTY EARLY FORM	[1B2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2186, 0x0041 };
    uint32_t const ces[9] = { 0x1B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_381)
{
    // 2186 0062;	
    // (ↆ) ROMAN NUMERAL FIFTY EARLY FORM	[1B2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2186, 0x0062 };
    uint32_t const ces[9] = { 0x1B2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_382)
{
    // 2187 0021;	
    // (ↇ) ROMAN NUMERAL FIFTY THOUSAND	[1B2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2187, 0x0021 };
    uint32_t const ces[9] = { 0x1B2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_383)
{
    // 2187 003F;	
    // (ↇ) ROMAN NUMERAL FIFTY THOUSAND	[1B2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2187, 0x003F };
    uint32_t const ces[9] = { 0x1B2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_384)
{
    // 2187 0061;	
    // (ↇ) ROMAN NUMERAL FIFTY THOUSAND	[1B2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2187, 0x0061 };
    uint32_t const ces[9] = { 0x1B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_385)
{
    // 2187 0041;	
    // (ↇ) ROMAN NUMERAL FIFTY THOUSAND	[1B2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2187, 0x0041 };
    uint32_t const ces[9] = { 0x1B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_386)
{
    // 2187 0062;	
    // (ↇ) ROMAN NUMERAL FIFTY THOUSAND	[1B2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2187, 0x0062 };
    uint32_t const ces[9] = { 0x1B2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_387)
{
    // 2188 0021;	
    // (ↈ) ROMAN NUMERAL ONE HUNDRED THOUSAND	[1B2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2188, 0x0021 };
    uint32_t const ces[9] = { 0x1B2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_388)
{
    // 2188 003F;	
    // (ↈ) ROMAN NUMERAL ONE HUNDRED THOUSAND	[1B2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2188, 0x003F };
    uint32_t const ces[9] = { 0x1B2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_389)
{
    // 2188 0061;	
    // (ↈ) ROMAN NUMERAL ONE HUNDRED THOUSAND	[1B2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2188, 0x0061 };
    uint32_t const ces[9] = { 0x1B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_390)
{
    // 2188 0041;	
    // (ↈ) ROMAN NUMERAL ONE HUNDRED THOUSAND	[1B2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2188, 0x0041 };
    uint32_t const ces[9] = { 0x1B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_391)
{
    // 2188 0062;	
    // (ↈ) ROMAN NUMERAL ONE HUNDRED THOUSAND	[1B2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2188, 0x0062 };
    uint32_t const ces[9] = { 0x1B2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_392)
{
    // 10E69 0021;	
    // (‎𐹩‎) RUMI NUMBER TEN	[1B30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E69, 0x0021 };
    uint32_t const ces[9] = { 0x1B30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_393)
{
    // 10E69 003F;	
    // (‎𐹩‎) RUMI NUMBER TEN	[1B30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E69, 0x003F };
    uint32_t const ces[9] = { 0x1B30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_394)
{
    // 10E69 0061;	
    // (‎𐹩‎) RUMI NUMBER TEN	[1B30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E69, 0x0061 };
    uint32_t const ces[9] = { 0x1B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_395)
{
    // 10E69 0041;	
    // (‎𐹩‎) RUMI NUMBER TEN	[1B30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E69, 0x0041 };
    uint32_t const ces[9] = { 0x1B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_396)
{
    // 10E69 0062;	
    // (‎𐹩‎) RUMI NUMBER TEN	[1B30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E69, 0x0062 };
    uint32_t const ces[9] = { 0x1B30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_397)
{
    // 10E6A 0021;	
    // (‎𐹪‎) RUMI NUMBER TWENTY	[1B31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6A, 0x0021 };
    uint32_t const ces[9] = { 0x1B31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_398)
{
    // 10E6A 003F;	
    // (‎𐹪‎) RUMI NUMBER TWENTY	[1B31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6A, 0x003F };
    uint32_t const ces[9] = { 0x1B31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_399)
{
    // 10E6A 0061;	
    // (‎𐹪‎) RUMI NUMBER TWENTY	[1B31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6A, 0x0061 };
    uint32_t const ces[9] = { 0x1B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_400)
{
    // 10E6A 0041;	
    // (‎𐹪‎) RUMI NUMBER TWENTY	[1B31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6A, 0x0041 };
    uint32_t const ces[9] = { 0x1B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_401)
{
    // 10E6A 0062;	
    // (‎𐹪‎) RUMI NUMBER TWENTY	[1B31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6A, 0x0062 };
    uint32_t const ces[9] = { 0x1B31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_402)
{
    // 10E6B 0021;	
    // (‎𐹫‎) RUMI NUMBER THIRTY	[1B32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6B, 0x0021 };
    uint32_t const ces[9] = { 0x1B32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_403)
{
    // 10E6B 003F;	
    // (‎𐹫‎) RUMI NUMBER THIRTY	[1B32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6B, 0x003F };
    uint32_t const ces[9] = { 0x1B32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_404)
{
    // 10E6B 0061;	
    // (‎𐹫‎) RUMI NUMBER THIRTY	[1B32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6B, 0x0061 };
    uint32_t const ces[9] = { 0x1B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_405)
{
    // 10E6B 0041;	
    // (‎𐹫‎) RUMI NUMBER THIRTY	[1B32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6B, 0x0041 };
    uint32_t const ces[9] = { 0x1B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_406)
{
    // 10E6B 0062;	
    // (‎𐹫‎) RUMI NUMBER THIRTY	[1B32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6B, 0x0062 };
    uint32_t const ces[9] = { 0x1B32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_407)
{
    // 10E6C 0021;	
    // (‎𐹬‎) RUMI NUMBER FORTY	[1B33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6C, 0x0021 };
    uint32_t const ces[9] = { 0x1B33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_408)
{
    // 10E6C 003F;	
    // (‎𐹬‎) RUMI NUMBER FORTY	[1B33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6C, 0x003F };
    uint32_t const ces[9] = { 0x1B33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_409)
{
    // 10E6C 0061;	
    // (‎𐹬‎) RUMI NUMBER FORTY	[1B33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6C, 0x0061 };
    uint32_t const ces[9] = { 0x1B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_410)
{
    // 10E6C 0041;	
    // (‎𐹬‎) RUMI NUMBER FORTY	[1B33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6C, 0x0041 };
    uint32_t const ces[9] = { 0x1B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_411)
{
    // 10E6C 0062;	
    // (‎𐹬‎) RUMI NUMBER FORTY	[1B33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6C, 0x0062 };
    uint32_t const ces[9] = { 0x1B33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_412)
{
    // 10E6D 0021;	
    // (‎𐹭‎) RUMI NUMBER FIFTY	[1B34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6D, 0x0021 };
    uint32_t const ces[9] = { 0x1B34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_413)
{
    // 10E6D 003F;	
    // (‎𐹭‎) RUMI NUMBER FIFTY	[1B34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6D, 0x003F };
    uint32_t const ces[9] = { 0x1B34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_414)
{
    // 10E6D 0061;	
    // (‎𐹭‎) RUMI NUMBER FIFTY	[1B34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6D, 0x0061 };
    uint32_t const ces[9] = { 0x1B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_415)
{
    // 10E6D 0041;	
    // (‎𐹭‎) RUMI NUMBER FIFTY	[1B34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6D, 0x0041 };
    uint32_t const ces[9] = { 0x1B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_416)
{
    // 10E6D 0062;	
    // (‎𐹭‎) RUMI NUMBER FIFTY	[1B34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6D, 0x0062 };
    uint32_t const ces[9] = { 0x1B34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_417)
{
    // 10E6E 0021;	
    // (‎𐹮‎) RUMI NUMBER SIXTY	[1B35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6E, 0x0021 };
    uint32_t const ces[9] = { 0x1B35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_418)
{
    // 10E6E 003F;	
    // (‎𐹮‎) RUMI NUMBER SIXTY	[1B35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6E, 0x003F };
    uint32_t const ces[9] = { 0x1B35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_419)
{
    // 10E6E 0061;	
    // (‎𐹮‎) RUMI NUMBER SIXTY	[1B35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6E, 0x0061 };
    uint32_t const ces[9] = { 0x1B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_420)
{
    // 10E6E 0041;	
    // (‎𐹮‎) RUMI NUMBER SIXTY	[1B35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6E, 0x0041 };
    uint32_t const ces[9] = { 0x1B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_421)
{
    // 10E6E 0062;	
    // (‎𐹮‎) RUMI NUMBER SIXTY	[1B35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6E, 0x0062 };
    uint32_t const ces[9] = { 0x1B35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_422)
{
    // 10E6F 0021;	
    // (‎𐹯‎) RUMI NUMBER SEVENTY	[1B36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6F, 0x0021 };
    uint32_t const ces[9] = { 0x1B36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_423)
{
    // 10E6F 003F;	
    // (‎𐹯‎) RUMI NUMBER SEVENTY	[1B36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6F, 0x003F };
    uint32_t const ces[9] = { 0x1B36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_424)
{
    // 10E6F 0061;	
    // (‎𐹯‎) RUMI NUMBER SEVENTY	[1B36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6F, 0x0061 };
    uint32_t const ces[9] = { 0x1B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_425)
{
    // 10E6F 0041;	
    // (‎𐹯‎) RUMI NUMBER SEVENTY	[1B36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E6F, 0x0041 };
    uint32_t const ces[9] = { 0x1B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_426)
{
    // 10E6F 0062;	
    // (‎𐹯‎) RUMI NUMBER SEVENTY	[1B36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E6F, 0x0062 };
    uint32_t const ces[9] = { 0x1B36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_427)
{
    // 10E70 0021;	
    // (‎𐹰‎) RUMI NUMBER EIGHTY	[1B37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E70, 0x0021 };
    uint32_t const ces[9] = { 0x1B37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_428)
{
    // 10E70 003F;	
    // (‎𐹰‎) RUMI NUMBER EIGHTY	[1B37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E70, 0x003F };
    uint32_t const ces[9] = { 0x1B37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_429)
{
    // 10E70 0061;	
    // (‎𐹰‎) RUMI NUMBER EIGHTY	[1B37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E70, 0x0061 };
    uint32_t const ces[9] = { 0x1B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_430)
{
    // 10E70 0041;	
    // (‎𐹰‎) RUMI NUMBER EIGHTY	[1B37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E70, 0x0041 };
    uint32_t const ces[9] = { 0x1B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_431)
{
    // 10E70 0062;	
    // (‎𐹰‎) RUMI NUMBER EIGHTY	[1B37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E70, 0x0062 };
    uint32_t const ces[9] = { 0x1B37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_432)
{
    // 10E71 0021;	
    // (‎𐹱‎) RUMI NUMBER NINETY	[1B38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E71, 0x0021 };
    uint32_t const ces[9] = { 0x1B38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_433)
{
    // 10E71 003F;	
    // (‎𐹱‎) RUMI NUMBER NINETY	[1B38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E71, 0x003F };
    uint32_t const ces[9] = { 0x1B38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_434)
{
    // 10E71 0061;	
    // (‎𐹱‎) RUMI NUMBER NINETY	[1B38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E71, 0x0061 };
    uint32_t const ces[9] = { 0x1B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_435)
{
    // 10E71 0041;	
    // (‎𐹱‎) RUMI NUMBER NINETY	[1B38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E71, 0x0041 };
    uint32_t const ces[9] = { 0x1B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_436)
{
    // 10E71 0062;	
    // (‎𐹱‎) RUMI NUMBER NINETY	[1B38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E71, 0x0062 };
    uint32_t const ces[9] = { 0x1B38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_437)
{
    // 10E72 0021;	
    // (‎𐹲‎) RUMI NUMBER ONE HUNDRED	[1B39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E72, 0x0021 };
    uint32_t const ces[9] = { 0x1B39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_438)
{
    // 10E72 003F;	
    // (‎𐹲‎) RUMI NUMBER ONE HUNDRED	[1B39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E72, 0x003F };
    uint32_t const ces[9] = { 0x1B39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_439)
{
    // 10E72 0061;	
    // (‎𐹲‎) RUMI NUMBER ONE HUNDRED	[1B39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E72, 0x0061 };
    uint32_t const ces[9] = { 0x1B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_440)
{
    // 10E72 0041;	
    // (‎𐹲‎) RUMI NUMBER ONE HUNDRED	[1B39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E72, 0x0041 };
    uint32_t const ces[9] = { 0x1B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_441)
{
    // 10E72 0062;	
    // (‎𐹲‎) RUMI NUMBER ONE HUNDRED	[1B39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E72, 0x0062 };
    uint32_t const ces[9] = { 0x1B39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_442)
{
    // 10E73 0021;	
    // (‎𐹳‎) RUMI NUMBER TWO HUNDRED	[1B3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E73, 0x0021 };
    uint32_t const ces[9] = { 0x1B3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_443)
{
    // 10E73 003F;	
    // (‎𐹳‎) RUMI NUMBER TWO HUNDRED	[1B3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E73, 0x003F };
    uint32_t const ces[9] = { 0x1B3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_444)
{
    // 10E73 0061;	
    // (‎𐹳‎) RUMI NUMBER TWO HUNDRED	[1B3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E73, 0x0061 };
    uint32_t const ces[9] = { 0x1B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_445)
{
    // 10E73 0041;	
    // (‎𐹳‎) RUMI NUMBER TWO HUNDRED	[1B3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E73, 0x0041 };
    uint32_t const ces[9] = { 0x1B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_446)
{
    // 10E73 0062;	
    // (‎𐹳‎) RUMI NUMBER TWO HUNDRED	[1B3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E73, 0x0062 };
    uint32_t const ces[9] = { 0x1B3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_447)
{
    // 10E74 0021;	
    // (‎𐹴‎) RUMI NUMBER THREE HUNDRED	[1B3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E74, 0x0021 };
    uint32_t const ces[9] = { 0x1B3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_448)
{
    // 10E74 003F;	
    // (‎𐹴‎) RUMI NUMBER THREE HUNDRED	[1B3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E74, 0x003F };
    uint32_t const ces[9] = { 0x1B3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_449)
{
    // 10E74 0061;	
    // (‎𐹴‎) RUMI NUMBER THREE HUNDRED	[1B3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E74, 0x0061 };
    uint32_t const ces[9] = { 0x1B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_450)
{
    // 10E74 0041;	
    // (‎𐹴‎) RUMI NUMBER THREE HUNDRED	[1B3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E74, 0x0041 };
    uint32_t const ces[9] = { 0x1B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_451)
{
    // 10E74 0062;	
    // (‎𐹴‎) RUMI NUMBER THREE HUNDRED	[1B3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E74, 0x0062 };
    uint32_t const ces[9] = { 0x1B3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_452)
{
    // 10E75 0021;	
    // (‎𐹵‎) RUMI NUMBER FOUR HUNDRED	[1B3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E75, 0x0021 };
    uint32_t const ces[9] = { 0x1B3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_453)
{
    // 10E75 003F;	
    // (‎𐹵‎) RUMI NUMBER FOUR HUNDRED	[1B3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E75, 0x003F };
    uint32_t const ces[9] = { 0x1B3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_454)
{
    // 10E75 0061;	
    // (‎𐹵‎) RUMI NUMBER FOUR HUNDRED	[1B3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E75, 0x0061 };
    uint32_t const ces[9] = { 0x1B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_455)
{
    // 10E75 0041;	
    // (‎𐹵‎) RUMI NUMBER FOUR HUNDRED	[1B3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E75, 0x0041 };
    uint32_t const ces[9] = { 0x1B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_456)
{
    // 10E75 0062;	
    // (‎𐹵‎) RUMI NUMBER FOUR HUNDRED	[1B3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E75, 0x0062 };
    uint32_t const ces[9] = { 0x1B3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_457)
{
    // 10E76 0021;	
    // (‎𐹶‎) RUMI NUMBER FIVE HUNDRED	[1B3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E76, 0x0021 };
    uint32_t const ces[9] = { 0x1B3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_458)
{
    // 10E76 003F;	
    // (‎𐹶‎) RUMI NUMBER FIVE HUNDRED	[1B3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E76, 0x003F };
    uint32_t const ces[9] = { 0x1B3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_459)
{
    // 10E76 0061;	
    // (‎𐹶‎) RUMI NUMBER FIVE HUNDRED	[1B3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E76, 0x0061 };
    uint32_t const ces[9] = { 0x1B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_460)
{
    // 10E76 0041;	
    // (‎𐹶‎) RUMI NUMBER FIVE HUNDRED	[1B3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E76, 0x0041 };
    uint32_t const ces[9] = { 0x1B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_461)
{
    // 10E76 0062;	
    // (‎𐹶‎) RUMI NUMBER FIVE HUNDRED	[1B3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E76, 0x0062 };
    uint32_t const ces[9] = { 0x1B3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_462)
{
    // 10E77 0021;	
    // (‎𐹷‎) RUMI NUMBER SIX HUNDRED	[1B3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E77, 0x0021 };
    uint32_t const ces[9] = { 0x1B3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_463)
{
    // 10E77 003F;	
    // (‎𐹷‎) RUMI NUMBER SIX HUNDRED	[1B3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E77, 0x003F };
    uint32_t const ces[9] = { 0x1B3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_464)
{
    // 10E77 0061;	
    // (‎𐹷‎) RUMI NUMBER SIX HUNDRED	[1B3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E77, 0x0061 };
    uint32_t const ces[9] = { 0x1B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_465)
{
    // 10E77 0041;	
    // (‎𐹷‎) RUMI NUMBER SIX HUNDRED	[1B3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E77, 0x0041 };
    uint32_t const ces[9] = { 0x1B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_466)
{
    // 10E77 0062;	
    // (‎𐹷‎) RUMI NUMBER SIX HUNDRED	[1B3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E77, 0x0062 };
    uint32_t const ces[9] = { 0x1B3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_467)
{
    // 10E78 0021;	
    // (‎𐹸‎) RUMI NUMBER SEVEN HUNDRED	[1B3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E78, 0x0021 };
    uint32_t const ces[9] = { 0x1B3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_468)
{
    // 10E78 003F;	
    // (‎𐹸‎) RUMI NUMBER SEVEN HUNDRED	[1B3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E78, 0x003F };
    uint32_t const ces[9] = { 0x1B3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_469)
{
    // 10E78 0061;	
    // (‎𐹸‎) RUMI NUMBER SEVEN HUNDRED	[1B3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E78, 0x0061 };
    uint32_t const ces[9] = { 0x1B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_470)
{
    // 10E78 0041;	
    // (‎𐹸‎) RUMI NUMBER SEVEN HUNDRED	[1B3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E78, 0x0041 };
    uint32_t const ces[9] = { 0x1B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_471)
{
    // 10E78 0062;	
    // (‎𐹸‎) RUMI NUMBER SEVEN HUNDRED	[1B3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E78, 0x0062 };
    uint32_t const ces[9] = { 0x1B3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_472)
{
    // 10E79 0021;	
    // (‎𐹹‎) RUMI NUMBER EIGHT HUNDRED	[1B40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E79, 0x0021 };
    uint32_t const ces[9] = { 0x1B40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_473)
{
    // 10E79 003F;	
    // (‎𐹹‎) RUMI NUMBER EIGHT HUNDRED	[1B40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E79, 0x003F };
    uint32_t const ces[9] = { 0x1B40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_474)
{
    // 10E79 0061;	
    // (‎𐹹‎) RUMI NUMBER EIGHT HUNDRED	[1B40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E79, 0x0061 };
    uint32_t const ces[9] = { 0x1B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_475)
{
    // 10E79 0041;	
    // (‎𐹹‎) RUMI NUMBER EIGHT HUNDRED	[1B40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E79, 0x0041 };
    uint32_t const ces[9] = { 0x1B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_476)
{
    // 10E79 0062;	
    // (‎𐹹‎) RUMI NUMBER EIGHT HUNDRED	[1B40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E79, 0x0062 };
    uint32_t const ces[9] = { 0x1B40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_477)
{
    // 10E7A 0021;	
    // (‎𐹺‎) RUMI NUMBER NINE HUNDRED	[1B41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7A, 0x0021 };
    uint32_t const ces[9] = { 0x1B41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_478)
{
    // 10E7A 003F;	
    // (‎𐹺‎) RUMI NUMBER NINE HUNDRED	[1B41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7A, 0x003F };
    uint32_t const ces[9] = { 0x1B41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_479)
{
    // 10E7A 0061;	
    // (‎𐹺‎) RUMI NUMBER NINE HUNDRED	[1B41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7A, 0x0061 };
    uint32_t const ces[9] = { 0x1B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_480)
{
    // 10E7A 0041;	
    // (‎𐹺‎) RUMI NUMBER NINE HUNDRED	[1B41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7A, 0x0041 };
    uint32_t const ces[9] = { 0x1B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_481)
{
    // 10E7A 0062;	
    // (‎𐹺‎) RUMI NUMBER NINE HUNDRED	[1B41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7A, 0x0062 };
    uint32_t const ces[9] = { 0x1B41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_482)
{
    // 10E7B 0021;	
    // (‎𐹻‎) RUMI FRACTION ONE HALF	[1B42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7B, 0x0021 };
    uint32_t const ces[9] = { 0x1B42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_483)
{
    // 10E7B 003F;	
    // (‎𐹻‎) RUMI FRACTION ONE HALF	[1B42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7B, 0x003F };
    uint32_t const ces[9] = { 0x1B42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_484)
{
    // 10E7B 0061;	
    // (‎𐹻‎) RUMI FRACTION ONE HALF	[1B42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7B, 0x0061 };
    uint32_t const ces[9] = { 0x1B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_485)
{
    // 10E7B 0041;	
    // (‎𐹻‎) RUMI FRACTION ONE HALF	[1B42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7B, 0x0041 };
    uint32_t const ces[9] = { 0x1B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_486)
{
    // 10E7B 0062;	
    // (‎𐹻‎) RUMI FRACTION ONE HALF	[1B42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7B, 0x0062 };
    uint32_t const ces[9] = { 0x1B42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_487)
{
    // 10E7C 0021;	
    // (‎𐹼‎) RUMI FRACTION ONE QUARTER	[1B43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7C, 0x0021 };
    uint32_t const ces[9] = { 0x1B43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_488)
{
    // 10E7C 003F;	
    // (‎𐹼‎) RUMI FRACTION ONE QUARTER	[1B43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7C, 0x003F };
    uint32_t const ces[9] = { 0x1B43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_489)
{
    // 10E7C 0061;	
    // (‎𐹼‎) RUMI FRACTION ONE QUARTER	[1B43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7C, 0x0061 };
    uint32_t const ces[9] = { 0x1B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_490)
{
    // 10E7C 0041;	
    // (‎𐹼‎) RUMI FRACTION ONE QUARTER	[1B43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7C, 0x0041 };
    uint32_t const ces[9] = { 0x1B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_491)
{
    // 10E7C 0062;	
    // (‎𐹼‎) RUMI FRACTION ONE QUARTER	[1B43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7C, 0x0062 };
    uint32_t const ces[9] = { 0x1B43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_492)
{
    // 10E7D 0021;	
    // (‎𐹽‎) RUMI FRACTION ONE THIRD	[1B44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7D, 0x0021 };
    uint32_t const ces[9] = { 0x1B44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_493)
{
    // 10E7D 003F;	
    // (‎𐹽‎) RUMI FRACTION ONE THIRD	[1B44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7D, 0x003F };
    uint32_t const ces[9] = { 0x1B44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_494)
{
    // 10E7D 0061;	
    // (‎𐹽‎) RUMI FRACTION ONE THIRD	[1B44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7D, 0x0061 };
    uint32_t const ces[9] = { 0x1B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_495)
{
    // 10E7D 0041;	
    // (‎𐹽‎) RUMI FRACTION ONE THIRD	[1B44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7D, 0x0041 };
    uint32_t const ces[9] = { 0x1B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_496)
{
    // 10E7D 0062;	
    // (‎𐹽‎) RUMI FRACTION ONE THIRD	[1B44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7D, 0x0062 };
    uint32_t const ces[9] = { 0x1B44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_497)
{
    // 10E7E 0021;	
    // (‎𐹾‎) RUMI FRACTION TWO THIRDS	[1B45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7E, 0x0021 };
    uint32_t const ces[9] = { 0x1B45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_498)
{
    // 10E7E 003F;	
    // (‎𐹾‎) RUMI FRACTION TWO THIRDS	[1B45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7E, 0x003F };
    uint32_t const ces[9] = { 0x1B45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_076_499)
{
    // 10E7E 0061;	
    // (‎𐹾‎) RUMI FRACTION TWO THIRDS	[1B45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7E, 0x0061 };
    uint32_t const ces[9] = { 0x1B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

