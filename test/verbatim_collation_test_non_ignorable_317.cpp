// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_317_000)
{
    // F9BD 003F;	
    // (尿) CJK COMPATIBILITY IDEOGRAPH-F9BD	[FB40 DC3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_001)
{
    // F9BD 0061;	
    // (尿) CJK COMPATIBILITY IDEOGRAPH-F9BD	[FB40 DC3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_002)
{
    // F9BD 0041;	
    // (尿) CJK COMPATIBILITY IDEOGRAPH-F9BD	[FB40 DC3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_003)
{
    // F9BD 0062;	
    // (尿) CJK COMPATIBILITY IDEOGRAPH-F9BD	[FB40 DC3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_004)
{
    // 2F877 0021;	
    // (屠) CJK COMPATIBILITY IDEOGRAPH-2F877	[FB40 DC60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F877, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_005)
{
    // 2F877 003F;	
    // (屠) CJK COMPATIBILITY IDEOGRAPH-2F877	[FB40 DC60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F877, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_006)
{
    // 2F877 0061;	
    // (屠) CJK COMPATIBILITY IDEOGRAPH-2F877	[FB40 DC60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F877, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_007)
{
    // 2F877 0041;	
    // (屠) CJK COMPATIBILITY IDEOGRAPH-2F877	[FB40 DC60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F877, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_008)
{
    // 2F877 0062;	
    // (屠) CJK COMPATIBILITY IDEOGRAPH-2F877	[FB40 DC60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F877, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_009)
{
    // F94B 0021;	
    // (屢) CJK COMPATIBILITY IDEOGRAPH-F94B	[FB40 DC62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_010)
{
    // F94B 003F;	
    // (屢) CJK COMPATIBILITY IDEOGRAPH-F94B	[FB40 DC62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_011)
{
    // F94B 0061;	
    // (屢) CJK COMPATIBILITY IDEOGRAPH-F94B	[FB40 DC62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_012)
{
    // F94B 0041;	
    // (屢) CJK COMPATIBILITY IDEOGRAPH-F94B	[FB40 DC62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_013)
{
    // F94B 0062;	
    // (屢) CJK COMPATIBILITY IDEOGRAPH-F94B	[FB40 DC62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_014)
{
    // FA3B 0021;	
    // (層) CJK COMPATIBILITY IDEOGRAPH-FA3B	[FB40 DC64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_015)
{
    // FA3B 003F;	
    // (層) CJK COMPATIBILITY IDEOGRAPH-FA3B	[FB40 DC64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_016)
{
    // FA3B 0061;	
    // (層) CJK COMPATIBILITY IDEOGRAPH-FA3B	[FB40 DC64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_017)
{
    // FA3B 0041;	
    // (層) CJK COMPATIBILITY IDEOGRAPH-FA3B	[FB40 DC64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_018)
{
    // FA3B 0062;	
    // (層) CJK COMPATIBILITY IDEOGRAPH-FA3B	[FB40 DC64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_019)
{
    // F9DF 0021;	
    // (履) CJK COMPATIBILITY IDEOGRAPH-F9DF	[FB40 DC65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_020)
{
    // F9DF 003F;	
    // (履) CJK COMPATIBILITY IDEOGRAPH-F9DF	[FB40 DC65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_021)
{
    // F9DF 0061;	
    // (履) CJK COMPATIBILITY IDEOGRAPH-F9DF	[FB40 DC65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_022)
{
    // F9DF 0041;	
    // (履) CJK COMPATIBILITY IDEOGRAPH-F9DF	[FB40 DC65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_023)
{
    // F9DF 0062;	
    // (履) CJK COMPATIBILITY IDEOGRAPH-F9DF	[FB40 DC65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_024)
{
    // FA3C 0021;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-FA3C	[FB40 DC6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_025)
{
    // 2F878 0021;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-2F878	[FB40 DC6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F878, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_026)
{
    // 2F2C 0021;	
    // (⼬) KANGXI RADICAL SPROUT	[FB40 DC6E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_027)
{
    // FA3C 003F;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-FA3C	[FB40 DC6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_028)
{
    // 2F878 003F;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-2F878	[FB40 DC6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F878, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_029)
{
    // 2F2C 003F;	
    // (⼬) KANGXI RADICAL SPROUT	[FB40 DC6E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_030)
{
    // FA3C 0061;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-FA3C	[FB40 DC6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_031)
{
    // 2F878 0061;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-2F878	[FB40 DC6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F878, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_032)
{
    // FA3C 0041;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-FA3C	[FB40 DC6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_033)
{
    // 2F878 0041;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-2F878	[FB40 DC6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F878, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_034)
{
    // 2F2C 0061;	
    // (⼬) KANGXI RADICAL SPROUT	[FB40 DC6E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_035)
{
    // 2F2C 0041;	
    // (⼬) KANGXI RADICAL SPROUT	[FB40 DC6E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_036)
{
    // FA3C 0062;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-FA3C	[FB40 DC6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_037)
{
    // 2F878 0062;	
    // (屮) CJK COMPATIBILITY IDEOGRAPH-2F878	[FB40 DC6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F878, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_038)
{
    // 2F2C 0062;	
    // (⼬) KANGXI RADICAL SPROUT	[FB40 DC6E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_039)
{
    // 2F2D 0021;	
    // (⼭) KANGXI RADICAL MOUNTAIN	[FB40 DC71 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_040)
{
    // 2F2D 003F;	
    // (⼭) KANGXI RADICAL MOUNTAIN	[FB40 DC71 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_041)
{
    // 2F2D 0061;	
    // (⼭) KANGXI RADICAL MOUNTAIN	[FB40 DC71 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_042)
{
    // 2F2D 0041;	
    // (⼭) KANGXI RADICAL MOUNTAIN	[FB40 DC71 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_043)
{
    // 2F2D 0062;	
    // (⼭) KANGXI RADICAL MOUNTAIN	[FB40 DC71 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_044)
{
    // 2F87A 0021;	
    // (岍) CJK COMPATIBILITY IDEOGRAPH-2F87A	[FB40 DC8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_045)
{
    // 2F87A 003F;	
    // (岍) CJK COMPATIBILITY IDEOGRAPH-2F87A	[FB40 DC8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_046)
{
    // 2F87A 0061;	
    // (岍) CJK COMPATIBILITY IDEOGRAPH-2F87A	[FB40 DC8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_047)
{
    // 2F87A 0041;	
    // (岍) CJK COMPATIBILITY IDEOGRAPH-2F87A	[FB40 DC8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_048)
{
    // 2F87A 0062;	
    // (岍) CJK COMPATIBILITY IDEOGRAPH-2F87A	[FB40 DC8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_049)
{
    // 2F879 0021;	
    // (峀) CJK COMPATIBILITY IDEOGRAPH-2F879	[FB40 DCC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F879, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDCC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_050)
{
    // 2F879 003F;	
    // (峀) CJK COMPATIBILITY IDEOGRAPH-2F879	[FB40 DCC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F879, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDCC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_051)
{
    // 2F879 0061;	
    // (峀) CJK COMPATIBILITY IDEOGRAPH-2F879	[FB40 DCC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F879, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_052)
{
    // 2F879 0041;	
    // (峀) CJK COMPATIBILITY IDEOGRAPH-2F879	[FB40 DCC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F879, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_053)
{
    // 2F879 0062;	
    // (峀) CJK COMPATIBILITY IDEOGRAPH-2F879	[FB40 DCC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F879, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDCC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_054)
{
    // F9D5 0021;	
    // (崙) CJK COMPATIBILITY IDEOGRAPH-F9D5	[FB40 DD19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_055)
{
    // F9D5 003F;	
    // (崙) CJK COMPATIBILITY IDEOGRAPH-F9D5	[FB40 DD19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_056)
{
    // F9D5 0061;	
    // (崙) CJK COMPATIBILITY IDEOGRAPH-F9D5	[FB40 DD19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_057)
{
    // F9D5 0041;	
    // (崙) CJK COMPATIBILITY IDEOGRAPH-F9D5	[FB40 DD19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_058)
{
    // F9D5 0062;	
    // (崙) CJK COMPATIBILITY IDEOGRAPH-F9D5	[FB40 DD19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_059)
{
    // 2F87C 0021;	
    // (嵃) CJK COMPATIBILITY IDEOGRAPH-2F87C	[FB40 DD43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_060)
{
    // 2F87C 003F;	
    // (嵃) CJK COMPATIBILITY IDEOGRAPH-2F87C	[FB40 DD43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_061)
{
    // 2F87C 0061;	
    // (嵃) CJK COMPATIBILITY IDEOGRAPH-2F87C	[FB40 DD43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_062)
{
    // 2F87C 0041;	
    // (嵃) CJK COMPATIBILITY IDEOGRAPH-2F87C	[FB40 DD43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_063)
{
    // 2F87C 0062;	
    // (嵃) CJK COMPATIBILITY IDEOGRAPH-2F87C	[FB40 DD43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_064)
{
    // F921 0021;	
    // (嵐) CJK COMPATIBILITY IDEOGRAPH-F921	[FB40 DD50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF921, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_065)
{
    // F921 003F;	
    // (嵐) CJK COMPATIBILITY IDEOGRAPH-F921	[FB40 DD50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF921, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_066)
{
    // F921 0061;	
    // (嵐) CJK COMPATIBILITY IDEOGRAPH-F921	[FB40 DD50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF921, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_067)
{
    // F921 0041;	
    // (嵐) CJK COMPATIBILITY IDEOGRAPH-F921	[FB40 DD50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF921, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_068)
{
    // F921 0062;	
    // (嵐) CJK COMPATIBILITY IDEOGRAPH-F921	[FB40 DD50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF921, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_069)
{
    // 2F87F 0021;	
    // (嵫) CJK COMPATIBILITY IDEOGRAPH-2F87F	[FB40 DD6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_070)
{
    // 2F87F 003F;	
    // (嵫) CJK COMPATIBILITY IDEOGRAPH-2F87F	[FB40 DD6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_071)
{
    // 2F87F 0061;	
    // (嵫) CJK COMPATIBILITY IDEOGRAPH-2F87F	[FB40 DD6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_072)
{
    // 2F87F 0041;	
    // (嵫) CJK COMPATIBILITY IDEOGRAPH-2F87F	[FB40 DD6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_073)
{
    // 2F87F 0062;	
    // (嵫) CJK COMPATIBILITY IDEOGRAPH-2F87F	[FB40 DD6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_074)
{
    // 2F87E 0021;	
    // (嵮) CJK COMPATIBILITY IDEOGRAPH-2F87E	[FB40 DD6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_075)
{
    // 2F87E 003F;	
    // (嵮) CJK COMPATIBILITY IDEOGRAPH-2F87E	[FB40 DD6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_076)
{
    // 2F87E 0061;	
    // (嵮) CJK COMPATIBILITY IDEOGRAPH-2F87E	[FB40 DD6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_077)
{
    // 2F87E 0041;	
    // (嵮) CJK COMPATIBILITY IDEOGRAPH-2F87E	[FB40 DD6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_078)
{
    // 2F87E 0062;	
    // (嵮) CJK COMPATIBILITY IDEOGRAPH-2F87E	[FB40 DD6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_079)
{
    // 2F880 0021;	
    // (嵼) CJK COMPATIBILITY IDEOGRAPH-2F880	[FB40 DD7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F880, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDD7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_080)
{
    // 2F880 003F;	
    // (嵼) CJK COMPATIBILITY IDEOGRAPH-2F880	[FB40 DD7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F880, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDD7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_081)
{
    // 2F880 0061;	
    // (嵼) CJK COMPATIBILITY IDEOGRAPH-2F880	[FB40 DD7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F880, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_082)
{
    // 2F880 0041;	
    // (嵼) CJK COMPATIBILITY IDEOGRAPH-2F880	[FB40 DD7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F880, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_083)
{
    // 2F880 0062;	
    // (嵼) CJK COMPATIBILITY IDEOGRAPH-2F880	[FB40 DD7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F880, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDD7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_084)
{
    // 2F9F4 0021;	
    // (嶲) CJK COMPATIBILITY IDEOGRAPH-2F9F4	[FB40 DDB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_085)
{
    // 2F9F4 003F;	
    // (嶲) CJK COMPATIBILITY IDEOGRAPH-2F9F4	[FB40 DDB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_086)
{
    // 2F9F4 0061;	
    // (嶲) CJK COMPATIBILITY IDEOGRAPH-2F9F4	[FB40 DDB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_087)
{
    // 2F9F4 0041;	
    // (嶲) CJK COMPATIBILITY IDEOGRAPH-2F9F4	[FB40 DDB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_088)
{
    // 2F9F4 0062;	
    // (嶲) CJK COMPATIBILITY IDEOGRAPH-2F9F4	[FB40 DDB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_089)
{
    // F9AB 0021;	
    // (嶺) CJK COMPATIBILITY IDEOGRAPH-F9AB	[FB40 DDBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_090)
{
    // F9AB 003F;	
    // (嶺) CJK COMPATIBILITY IDEOGRAPH-F9AB	[FB40 DDBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_091)
{
    // F9AB 0061;	
    // (嶺) CJK COMPATIBILITY IDEOGRAPH-F9AB	[FB40 DDBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_092)
{
    // F9AB 0041;	
    // (嶺) CJK COMPATIBILITY IDEOGRAPH-F9AB	[FB40 DDBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_093)
{
    // F9AB 0062;	
    // (嶺) CJK COMPATIBILITY IDEOGRAPH-F9AB	[FB40 DDBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_094)
{
    // 2F2E 0021;	
    // (⼮) KANGXI RADICAL RIVER	[FB40 DDDB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_095)
{
    // 2F2E 003F;	
    // (⼮) KANGXI RADICAL RIVER	[FB40 DDDB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_096)
{
    // 2F2E 0061;	
    // (⼮) KANGXI RADICAL RIVER	[FB40 DDDB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_097)
{
    // 2F2E 0041;	
    // (⼮) KANGXI RADICAL RIVER	[FB40 DDDB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_098)
{
    // 2F2E 0062;	
    // (⼮) KANGXI RADICAL RIVER	[FB40 DDDB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_099)
{
    // 2F881 0021;	
    // (巡) CJK COMPATIBILITY IDEOGRAPH-2F881	[FB40 DDE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F881, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_100)
{
    // 2F881 003F;	
    // (巡) CJK COMPATIBILITY IDEOGRAPH-2F881	[FB40 DDE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F881, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_101)
{
    // 2F881 0061;	
    // (巡) CJK COMPATIBILITY IDEOGRAPH-2F881	[FB40 DDE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F881, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_102)
{
    // 2F881 0041;	
    // (巡) CJK COMPATIBILITY IDEOGRAPH-2F881	[FB40 DDE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F881, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_103)
{
    // 2F881 0062;	
    // (巡) CJK COMPATIBILITY IDEOGRAPH-2F881	[FB40 DDE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F881, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_104)
{
    // 2F882 0021;	
    // (巢) CJK COMPATIBILITY IDEOGRAPH-2F882	[FB40 DDE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F882, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_105)
{
    // 2F882 003F;	
    // (巢) CJK COMPATIBILITY IDEOGRAPH-2F882	[FB40 DDE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F882, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_106)
{
    // 2F882 0061;	
    // (巢) CJK COMPATIBILITY IDEOGRAPH-2F882	[FB40 DDE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F882, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_107)
{
    // 2F882 0041;	
    // (巢) CJK COMPATIBILITY IDEOGRAPH-2F882	[FB40 DDE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F882, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_108)
{
    // 2F882 0062;	
    // (巢) CJK COMPATIBILITY IDEOGRAPH-2F882	[FB40 DDE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F882, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_109)
{
    // 2F2F 0021;	
    // (⼯) KANGXI RADICAL WORK	[FB40 DDE5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_110)
{
    // 2F2F 003F;	
    // (⼯) KANGXI RADICAL WORK	[FB40 DDE5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_111)
{
    // 2F2F 0061;	
    // (⼯) KANGXI RADICAL WORK	[FB40 DDE5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_112)
{
    // 2F2F 0041;	
    // (⼯) KANGXI RADICAL WORK	[FB40 DDE5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_113)
{
    // 2F2F 0062;	
    // (⼯) KANGXI RADICAL WORK	[FB40 DDE5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_114)
{
    // 32A7 0021;	
    // (㊧) CIRCLED IDEOGRAPH LEFT	[FB40 DDE6 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_115)
{
    // 1F22C 0021;	
    // (🈬) SQUARED CJK UNIFIED IDEOGRAPH-5DE6	[FB40 DDE6 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_116)
{
    // 32A7 003F;	
    // (㊧) CIRCLED IDEOGRAPH LEFT	[FB40 DDE6 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A7, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_117)
{
    // 1F22C 003F;	
    // (🈬) SQUARED CJK UNIFIED IDEOGRAPH-5DE6	[FB40 DDE6 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_118)
{
    // 32A7 0061;	
    // (㊧) CIRCLED IDEOGRAPH LEFT	[FB40 DDE6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_119)
{
    // 32A7 0041;	
    // (㊧) CIRCLED IDEOGRAPH LEFT	[FB40 DDE6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_120)
{
    // 1F22C 0061;	
    // (🈬) SQUARED CJK UNIFIED IDEOGRAPH-5DE6	[FB40 DDE6 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_121)
{
    // 1F22C 0041;	
    // (🈬) SQUARED CJK UNIFIED IDEOGRAPH-5DE6	[FB40 DDE6 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F22C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_122)
{
    // 32A7 0062;	
    // (㊧) CIRCLED IDEOGRAPH LEFT	[FB40 DDE6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_123)
{
    // 1F22C 0062;	
    // (🈬) SQUARED CJK UNIFIED IDEOGRAPH-5DE6	[FB40 DDE6 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_124)
{
    // 2F30 0021;	
    // (⼰) KANGXI RADICAL ONESELF	[FB40 DDF1 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F30, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_125)
{
    // 2F30 003F;	
    // (⼰) KANGXI RADICAL ONESELF	[FB40 DDF1 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F30, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_126)
{
    // 2F30 0061;	
    // (⼰) KANGXI RADICAL ONESELF	[FB40 DDF1 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F30, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_127)
{
    // 2F30 0041;	
    // (⼰) KANGXI RADICAL ONESELF	[FB40 DDF1 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F30, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_128)
{
    // 2F30 0062;	
    // (⼰) KANGXI RADICAL ONESELF	[FB40 DDF1 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F30, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_129)
{
    // 2E92 0021;	
    // (⺒) CJK RADICAL SNAKE	[FB40 DDF3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E92, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_130)
{
    // 2E92 003F;	
    // (⺒) CJK RADICAL SNAKE	[FB40 DDF3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E92, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_131)
{
    // 2E92 0061;	
    // (⺒) CJK RADICAL SNAKE	[FB40 DDF3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E92, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_132)
{
    // 2E92 0041;	
    // (⺒) CJK RADICAL SNAKE	[FB40 DDF3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E92, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_133)
{
    // 2E92 0062;	
    // (⺒) CJK RADICAL SNAKE	[FB40 DDF3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E92, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_134)
{
    // 2F884 0021;	
    // (巽) CJK COMPATIBILITY IDEOGRAPH-2F884	[FB40 DDFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F884, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_135)
{
    // 2F884 003F;	
    // (巽) CJK COMPATIBILITY IDEOGRAPH-2F884	[FB40 DDFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F884, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_136)
{
    // 2F884 0061;	
    // (巽) CJK COMPATIBILITY IDEOGRAPH-2F884	[FB40 DDFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F884, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_137)
{
    // 2F884 0041;	
    // (巽) CJK COMPATIBILITY IDEOGRAPH-2F884	[FB40 DDFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F884, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_138)
{
    // 2F884 0062;	
    // (巽) CJK COMPATIBILITY IDEOGRAPH-2F884	[FB40 DDFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F884, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_139)
{
    // 2F31 0021;	
    // (⼱) KANGXI RADICAL TURBAN	[FB40 DDFE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F31, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_140)
{
    // 2F31 003F;	
    // (⼱) KANGXI RADICAL TURBAN	[FB40 DDFE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F31, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDDFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_141)
{
    // 2F31 0061;	
    // (⼱) KANGXI RADICAL TURBAN	[FB40 DDFE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F31, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_142)
{
    // 2F31 0041;	
    // (⼱) KANGXI RADICAL TURBAN	[FB40 DDFE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F31, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_143)
{
    // 2F31 0062;	
    // (⼱) KANGXI RADICAL TURBAN	[FB40 DDFE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F31, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDDFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_144)
{
    // 2F885 0021;	
    // (帨) CJK COMPATIBILITY IDEOGRAPH-2F885	[FB40 DE28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F885, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_145)
{
    // 2F885 003F;	
    // (帨) CJK COMPATIBILITY IDEOGRAPH-2F885	[FB40 DE28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F885, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_146)
{
    // 2F885 0061;	
    // (帨) CJK COMPATIBILITY IDEOGRAPH-2F885	[FB40 DE28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F885, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_147)
{
    // 2F885 0041;	
    // (帨) CJK COMPATIBILITY IDEOGRAPH-2F885	[FB40 DE28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F885, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_148)
{
    // 2F885 0062;	
    // (帨) CJK COMPATIBILITY IDEOGRAPH-2F885	[FB40 DE28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F885, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_149)
{
    // 2F886 0021;	
    // (帽) CJK COMPATIBILITY IDEOGRAPH-2F886	[FB40 DE3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F886, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_150)
{
    // 2F886 003F;	
    // (帽) CJK COMPATIBILITY IDEOGRAPH-2F886	[FB40 DE3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F886, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_151)
{
    // 2F886 0061;	
    // (帽) CJK COMPATIBILITY IDEOGRAPH-2F886	[FB40 DE3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F886, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_152)
{
    // 2F886 0041;	
    // (帽) CJK COMPATIBILITY IDEOGRAPH-2F886	[FB40 DE3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F886, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_153)
{
    // 2F886 0062;	
    // (帽) CJK COMPATIBILITY IDEOGRAPH-2F886	[FB40 DE3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F886, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_154)
{
    // 2F887 0021;	
    // (幩) CJK COMPATIBILITY IDEOGRAPH-2F887	[FB40 DE69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F887, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_155)
{
    // 2F887 003F;	
    // (幩) CJK COMPATIBILITY IDEOGRAPH-2F887	[FB40 DE69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F887, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_156)
{
    // 2F887 0061;	
    // (幩) CJK COMPATIBILITY IDEOGRAPH-2F887	[FB40 DE69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F887, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_157)
{
    // 2F887 0041;	
    // (幩) CJK COMPATIBILITY IDEOGRAPH-2F887	[FB40 DE69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F887, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_158)
{
    // 2F887 0062;	
    // (幩) CJK COMPATIBILITY IDEOGRAPH-2F887	[FB40 DE69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F887, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_159)
{
    // 2F32 0021;	
    // (⼲) KANGXI RADICAL DRY	[FB40 DE72 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F32, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_160)
{
    // 2F32 003F;	
    // (⼲) KANGXI RADICAL DRY	[FB40 DE72 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F32, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_161)
{
    // 2F32 0061;	
    // (⼲) KANGXI RADICAL DRY	[FB40 DE72 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F32, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_162)
{
    // 2F32 0041;	
    // (⼲) KANGXI RADICAL DRY	[FB40 DE72 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F32, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_163)
{
    // 2F32 0062;	
    // (⼲) KANGXI RADICAL DRY	[FB40 DE72 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F32, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_164)
{
    // 337B 0021;	
    // (㍻) SQUARE ERA NAME HEISEI	[FB40 DE73 FB40 E210 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337B, 0x0021 };
    uint32_t const ces[14] = { 0xFB40, 0xDE73, 0xFB40, 0xE210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_165)
{
    // 337B 003F;	
    // (㍻) SQUARE ERA NAME HEISEI	[FB40 DE73 FB40 E210 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337B, 0x003F };
    uint32_t const ces[14] = { 0xFB40, 0xDE73, 0xFB40, 0xE210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_166)
{
    // 337B 0061;	
    // (㍻) SQUARE ERA NAME HEISEI	[FB40 DE73 FB40 E210 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337B, 0x0061 };
    uint32_t const ces[14] = { 0xFB40, 0xDE73, 0xFB40, 0xE210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_167)
{
    // 337B 0041;	
    // (㍻) SQUARE ERA NAME HEISEI	[FB40 DE73 FB40 E210 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x337B, 0x0041 };
    uint32_t const ces[14] = { 0xFB40, 0xDE73, 0xFB40, 0xE210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_168)
{
    // 337B 0062;	
    // (㍻) SQUARE ERA NAME HEISEI	[FB40 DE73 FB40 E210 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337B, 0x0062 };
    uint32_t const ces[14] = { 0xFB40, 0xDE73, 0xFB40, 0xE210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_169)
{
    // F98E 0021;	
    // (年) CJK COMPATIBILITY IDEOGRAPH-F98E	[FB40 DE74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_170)
{
    // F98E 003F;	
    // (年) CJK COMPATIBILITY IDEOGRAPH-F98E	[FB40 DE74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_171)
{
    // F98E 0061;	
    // (年) CJK COMPATIBILITY IDEOGRAPH-F98E	[FB40 DE74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_172)
{
    // F98E 0041;	
    // (年) CJK COMPATIBILITY IDEOGRAPH-F98E	[FB40 DE74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF98E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_173)
{
    // F98E 0062;	
    // (年) CJK COMPATIBILITY IDEOGRAPH-F98E	[FB40 DE74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_174)
{
    // 2E93 0021;	
    // (⺓) CJK RADICAL THREAD	[FB40 DE7A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E93, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_175)
{
    // 2F33 0021;	
    // (⼳) KANGXI RADICAL SHORT THREAD	[FB40 DE7A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F33, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_176)
{
    // 2E93 003F;	
    // (⺓) CJK RADICAL THREAD	[FB40 DE7A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E93, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_177)
{
    // 2F33 003F;	
    // (⼳) KANGXI RADICAL SHORT THREAD	[FB40 DE7A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F33, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_178)
{
    // 2E93 0061;	
    // (⺓) CJK RADICAL THREAD	[FB40 DE7A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E93, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_179)
{
    // 2F33 0061;	
    // (⼳) KANGXI RADICAL SHORT THREAD	[FB40 DE7A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F33, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_180)
{
    // 2E93 0041;	
    // (⺓) CJK RADICAL THREAD	[FB40 DE7A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E93, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_181)
{
    // 2F33 0041;	
    // (⼳) KANGXI RADICAL SHORT THREAD	[FB40 DE7A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F33, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_182)
{
    // 2E93 0062;	
    // (⺓) CJK RADICAL THREAD	[FB40 DE7A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E93, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_183)
{
    // 2F33 0062;	
    // (⼳) KANGXI RADICAL SHORT THREAD	[FB40 DE7A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F33, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_184)
{
    // 3245 0021;	
    // (㉅) CIRCLED IDEOGRAPH KINDERGARTEN	[FB40 DE7C 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3245, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_185)
{
    // 3245 003F;	
    // (㉅) CIRCLED IDEOGRAPH KINDERGARTEN	[FB40 DE7C 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3245, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_186)
{
    // 3245 0061;	
    // (㉅) CIRCLED IDEOGRAPH KINDERGARTEN	[FB40 DE7C 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3245, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_187)
{
    // 3245 0041;	
    // (㉅) CIRCLED IDEOGRAPH KINDERGARTEN	[FB40 DE7C 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3245, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_188)
{
    // 3245 0062;	
    // (㉅) CIRCLED IDEOGRAPH KINDERGARTEN	[FB40 DE7C 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3245, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_189)
{
    // 2F34 0021;	
    // (⼴) KANGXI RADICAL DOTTED CLIFF	[FB40 DE7F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F34, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_190)
{
    // 2F34 003F;	
    // (⼴) KANGXI RADICAL DOTTED CLIFF	[FB40 DE7F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F34, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDE7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_191)
{
    // 2F34 0061;	
    // (⼴) KANGXI RADICAL DOTTED CLIFF	[FB40 DE7F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F34, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_192)
{
    // 2F34 0041;	
    // (⼴) KANGXI RADICAL DOTTED CLIFF	[FB40 DE7F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F34, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_193)
{
    // 2F34 0062;	
    // (⼴) KANGXI RADICAL DOTTED CLIFF	[FB40 DE7F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F34, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDE7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_194)
{
    // FA01 0021;	
    // (度) CJK COMPATIBILITY IDEOGRAPH-FA01	[FB40 DEA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA01, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_195)
{
    // FA01 003F;	
    // (度) CJK COMPATIBILITY IDEOGRAPH-FA01	[FB40 DEA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA01, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_196)
{
    // FA01 0061;	
    // (度) CJK COMPATIBILITY IDEOGRAPH-FA01	[FB40 DEA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA01, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_197)
{
    // FA01 0041;	
    // (度) CJK COMPATIBILITY IDEOGRAPH-FA01	[FB40 DEA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA01, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_198)
{
    // FA01 0062;	
    // (度) CJK COMPATIBILITY IDEOGRAPH-FA01	[FB40 DEA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA01, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_199)
{
    // 2F88B 0021;	
    // (庰) CJK COMPATIBILITY IDEOGRAPH-2F88B	[FB40 DEB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_200)
{
    // 2F88B 003F;	
    // (庰) CJK COMPATIBILITY IDEOGRAPH-2F88B	[FB40 DEB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_201)
{
    // 2F88B 0061;	
    // (庰) CJK COMPATIBILITY IDEOGRAPH-2F88B	[FB40 DEB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_202)
{
    // 2F88B 0041;	
    // (庰) CJK COMPATIBILITY IDEOGRAPH-2F88B	[FB40 DEB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F88B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_203)
{
    // 2F88B 0062;	
    // (庰) CJK COMPATIBILITY IDEOGRAPH-2F88B	[FB40 DEB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_204)
{
    // 2F88C 0021;	
    // (庳) CJK COMPATIBILITY IDEOGRAPH-2F88C	[FB40 DEB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_205)
{
    // 2F88C 003F;	
    // (庳) CJK COMPATIBILITY IDEOGRAPH-2F88C	[FB40 DEB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_206)
{
    // 2F88C 0061;	
    // (庳) CJK COMPATIBILITY IDEOGRAPH-2F88C	[FB40 DEB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_207)
{
    // 2F88C 0041;	
    // (庳) CJK COMPATIBILITY IDEOGRAPH-2F88C	[FB40 DEB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F88C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_208)
{
    // 2F88C 0062;	
    // (庳) CJK COMPATIBILITY IDEOGRAPH-2F88C	[FB40 DEB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_209)
{
    // 2F88D 0021;	
    // (庶) CJK COMPATIBILITY IDEOGRAPH-2F88D	[FB40 DEB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_210)
{
    // 2F88D 003F;	
    // (庶) CJK COMPATIBILITY IDEOGRAPH-2F88D	[FB40 DEB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_211)
{
    // 2F88D 0061;	
    // (庶) CJK COMPATIBILITY IDEOGRAPH-2F88D	[FB40 DEB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_212)
{
    // 2F88D 0041;	
    // (庶) CJK COMPATIBILITY IDEOGRAPH-2F88D	[FB40 DEB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F88D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_213)
{
    // 2F88D 0062;	
    // (庶) CJK COMPATIBILITY IDEOGRAPH-2F88D	[FB40 DEB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_214)
{
    // F9A2 0021;	
    // (廉) CJK COMPATIBILITY IDEOGRAPH-F9A2	[FB40 DEC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_215)
{
    // F9A2 003F;	
    // (廉) CJK COMPATIBILITY IDEOGRAPH-F9A2	[FB40 DEC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_216)
{
    // F9A2 0061;	
    // (廉) CJK COMPATIBILITY IDEOGRAPH-F9A2	[FB40 DEC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_217)
{
    // F9A2 0041;	
    // (廉) CJK COMPATIBILITY IDEOGRAPH-F9A2	[FB40 DEC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_218)
{
    // F9A2 0062;	
    // (廉) CJK COMPATIBILITY IDEOGRAPH-F9A2	[FB40 DEC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_219)
{
    // F928 0021;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-F928	[FB40 DECA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF928, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_220)
{
    // 2F88E 0021;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-2F88E	[FB40 DECA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_221)
{
    // F928 003F;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-F928	[FB40 DECA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF928, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_222)
{
    // 2F88E 003F;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-2F88E	[FB40 DECA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_223)
{
    // F928 0061;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-F928	[FB40 DECA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF928, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_224)
{
    // 2F88E 0061;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-2F88E	[FB40 DECA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_225)
{
    // F928 0041;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-F928	[FB40 DECA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF928, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_226)
{
    // 2F88E 0041;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-2F88E	[FB40 DECA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F88E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_227)
{
    // F928 0062;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-F928	[FB40 DECA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF928, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_228)
{
    // 2F88E 0062;	
    // (廊) CJK COMPATIBILITY IDEOGRAPH-2F88E	[FB40 DECA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_229)
{
    // FA82 0021;	
    // (廒) CJK COMPATIBILITY IDEOGRAPH-FA82	[FB40 DED2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA82, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDED2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_230)
{
    // FA82 003F;	
    // (廒) CJK COMPATIBILITY IDEOGRAPH-FA82	[FB40 DED2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA82, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDED2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_231)
{
    // FA82 0061;	
    // (廒) CJK COMPATIBILITY IDEOGRAPH-FA82	[FB40 DED2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA82, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_232)
{
    // FA82 0041;	
    // (廒) CJK COMPATIBILITY IDEOGRAPH-FA82	[FB40 DED2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA82, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_233)
{
    // FA82 0062;	
    // (廒) CJK COMPATIBILITY IDEOGRAPH-FA82	[FB40 DED2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA82, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_234)
{
    // FA0B 0021;	
    // (廓) CJK COMPATIBILITY IDEOGRAPH-FA0B	[FB40 DED3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_235)
{
    // FA0B 003F;	
    // (廓) CJK COMPATIBILITY IDEOGRAPH-FA0B	[FB40 DED3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_236)
{
    // FA0B 0061;	
    // (廓) CJK COMPATIBILITY IDEOGRAPH-FA0B	[FB40 DED3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_237)
{
    // FA0B 0041;	
    // (廓) CJK COMPATIBILITY IDEOGRAPH-FA0B	[FB40 DED3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_238)
{
    // FA0B 0062;	
    // (廓) CJK COMPATIBILITY IDEOGRAPH-FA0B	[FB40 DED3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_239)
{
    // FA83 0021;	
    // (廙) CJK COMPATIBILITY IDEOGRAPH-FA83	[FB40 DED9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA83, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDED9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_240)
{
    // FA83 003F;	
    // (廙) CJK COMPATIBILITY IDEOGRAPH-FA83	[FB40 DED9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA83, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDED9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_241)
{
    // FA83 0061;	
    // (廙) CJK COMPATIBILITY IDEOGRAPH-FA83	[FB40 DED9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA83, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_242)
{
    // FA83 0041;	
    // (廙) CJK COMPATIBILITY IDEOGRAPH-FA83	[FB40 DED9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA83, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDED9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_243)
{
    // FA83 0062;	
    // (廙) CJK COMPATIBILITY IDEOGRAPH-FA83	[FB40 DED9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA83, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDED9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_244)
{
    // F982 0021;	
    // (廬) CJK COMPATIBILITY IDEOGRAPH-F982	[FB40 DEEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF982, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_245)
{
    // F982 003F;	
    // (廬) CJK COMPATIBILITY IDEOGRAPH-F982	[FB40 DEEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF982, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_246)
{
    // F982 0061;	
    // (廬) CJK COMPATIBILITY IDEOGRAPH-F982	[FB40 DEEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF982, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_247)
{
    // F982 0041;	
    // (廬) CJK COMPATIBILITY IDEOGRAPH-F982	[FB40 DEEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF982, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_248)
{
    // F982 0062;	
    // (廬) CJK COMPATIBILITY IDEOGRAPH-F982	[FB40 DEEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF982, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_249)
{
    // 2F35 0021;	
    // (⼵) KANGXI RADICAL LONG STRIDE	[FB40 DEF4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F35, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_250)
{
    // 2F35 003F;	
    // (⼵) KANGXI RADICAL LONG STRIDE	[FB40 DEF4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F35, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_251)
{
    // 2F35 0061;	
    // (⼵) KANGXI RADICAL LONG STRIDE	[FB40 DEF4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F35, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_252)
{
    // 2F35 0041;	
    // (⼵) KANGXI RADICAL LONG STRIDE	[FB40 DEF4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F35, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_253)
{
    // 2F35 0062;	
    // (⼵) KANGXI RADICAL LONG STRIDE	[FB40 DEF4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F35, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_254)
{
    // 2F890 0021;	
    // (廾) CJK COMPATIBILITY IDEOGRAPH-2F890	[FB40 DEFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F890, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_255)
{
    // 2F36 0021;	
    // (⼶) KANGXI RADICAL TWO HANDS	[FB40 DEFE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F36, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_256)
{
    // 2F890 003F;	
    // (廾) CJK COMPATIBILITY IDEOGRAPH-2F890	[FB40 DEFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F890, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_257)
{
    // 2F36 003F;	
    // (⼶) KANGXI RADICAL TWO HANDS	[FB40 DEFE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F36, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_258)
{
    // 2F890 0061;	
    // (廾) CJK COMPATIBILITY IDEOGRAPH-2F890	[FB40 DEFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F890, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_259)
{
    // 2F890 0041;	
    // (廾) CJK COMPATIBILITY IDEOGRAPH-2F890	[FB40 DEFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F890, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_260)
{
    // 2F36 0061;	
    // (⼶) KANGXI RADICAL TWO HANDS	[FB40 DEFE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F36, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_261)
{
    // 2F36 0041;	
    // (⼶) KANGXI RADICAL TWO HANDS	[FB40 DEFE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F36, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_262)
{
    // 2F890 0062;	
    // (廾) CJK COMPATIBILITY IDEOGRAPH-2F890	[FB40 DEFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F890, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_263)
{
    // 2F36 0062;	
    // (⼶) KANGXI RADICAL TWO HANDS	[FB40 DEFE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F36, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDEFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_264)
{
    // F943 0021;	
    // (弄) CJK COMPATIBILITY IDEOGRAPH-F943	[FB40 DF04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF943, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_265)
{
    // F943 003F;	
    // (弄) CJK COMPATIBILITY IDEOGRAPH-F943	[FB40 DF04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF943, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_266)
{
    // F943 0061;	
    // (弄) CJK COMPATIBILITY IDEOGRAPH-F943	[FB40 DF04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF943, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_267)
{
    // F943 0041;	
    // (弄) CJK COMPATIBILITY IDEOGRAPH-F943	[FB40 DF04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF943, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_268)
{
    // F943 0062;	
    // (弄) CJK COMPATIBILITY IDEOGRAPH-F943	[FB40 DF04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF943, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_269)
{
    // 2F37 0021;	
    // (⼷) KANGXI RADICAL SHOOT	[FB40 DF0B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F37, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_270)
{
    // 2F37 003F;	
    // (⼷) KANGXI RADICAL SHOOT	[FB40 DF0B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F37, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_271)
{
    // 2F37 0061;	
    // (⼷) KANGXI RADICAL SHOOT	[FB40 DF0B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F37, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_272)
{
    // 2F37 0041;	
    // (⼷) KANGXI RADICAL SHOOT	[FB40 DF0B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F37, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_273)
{
    // 2F37 0062;	
    // (⼷) KANGXI RADICAL SHOOT	[FB40 DF0B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F37, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_274)
{
    // 2F38 0021;	
    // (⼸) KANGXI RADICAL BOW	[FB40 DF13 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F38, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_275)
{
    // 2F38 003F;	
    // (⼸) KANGXI RADICAL BOW	[FB40 DF13 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F38, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_276)
{
    // 2F38 0061;	
    // (⼸) KANGXI RADICAL BOW	[FB40 DF13 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F38, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_277)
{
    // 2F38 0041;	
    // (⼸) KANGXI RADICAL BOW	[FB40 DF13 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F38, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_278)
{
    // 2F38 0062;	
    // (⼸) KANGXI RADICAL BOW	[FB40 DF13 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F38, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_279)
{
    // 2F894 0021;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F894	[FB40 DF22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F894, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_280)
{
    // 2F895 0021;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F895	[FB40 DF22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F895, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_281)
{
    // 2F894 003F;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F894	[FB40 DF22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F894, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_282)
{
    // 2F895 003F;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F895	[FB40 DF22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F895, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_283)
{
    // 2F894 0061;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F894	[FB40 DF22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F894, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_284)
{
    // 2F895 0061;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F895	[FB40 DF22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F895, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_285)
{
    // 2F894 0041;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F894	[FB40 DF22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F894, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_286)
{
    // 2F895 0041;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F895	[FB40 DF22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F895, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_287)
{
    // 2F894 0062;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F894	[FB40 DF22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F894, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_288)
{
    // 2F895 0062;	
    // (弢) CJK COMPATIBILITY IDEOGRAPH-2F895	[FB40 DF22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F895, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_289)
{
    // 2F39 0021;	
    // (⼹) KANGXI RADICAL SNOUT	[FB40 DF50 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F39, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_290)
{
    // 2E95 0021;	
    // (⺕) CJK RADICAL SNOUT TWO	[FB40 DF50 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E95, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDF50, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_291)
{
    // 2F39 003F;	
    // (⼹) KANGXI RADICAL SNOUT	[FB40 DF50 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F39, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_292)
{
    // 2E95 003F;	
    // (⺕) CJK RADICAL SNOUT TWO	[FB40 DF50 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E95, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDF50, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_293)
{
    // 2F39 0061;	
    // (⼹) KANGXI RADICAL SNOUT	[FB40 DF50 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F39, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_294)
{
    // 2F39 0041;	
    // (⼹) KANGXI RADICAL SNOUT	[FB40 DF50 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F39, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_295)
{
    // 2E95 0061;	
    // (⺕) CJK RADICAL SNOUT TWO	[FB40 DF50 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E95, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDF50, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_296)
{
    // 2E95 0041;	
    // (⺕) CJK RADICAL SNOUT TWO	[FB40 DF50 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E95, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDF50, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_297)
{
    // 2F39 0062;	
    // (⼹) KANGXI RADICAL SNOUT	[FB40 DF50 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F39, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_298)
{
    // 2E95 0062;	
    // (⺕) CJK RADICAL SNOUT TWO	[FB40 DF50 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E95, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDF50, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_299)
{
    // 2E94 0021;	
    // (⺔) CJK RADICAL SNOUT ONE	[FB40 DF51 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E94, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_300)
{
    // 2E94 003F;	
    // (⺔) CJK RADICAL SNOUT ONE	[FB40 DF51 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E94, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_301)
{
    // 2E94 0061;	
    // (⺔) CJK RADICAL SNOUT ONE	[FB40 DF51 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E94, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_302)
{
    // 2E94 0041;	
    // (⺔) CJK RADICAL SNOUT ONE	[FB40 DF51 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E94, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_303)
{
    // 2E94 0062;	
    // (⺔) CJK RADICAL SNOUT ONE	[FB40 DF51 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E94, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_304)
{
    // 2F874 0021;	
    // (当) CJK COMPATIBILITY IDEOGRAPH-2F874	[FB40 DF53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F874, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_305)
{
    // 2F874 003F;	
    // (当) CJK COMPATIBILITY IDEOGRAPH-2F874	[FB40 DF53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F874, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_306)
{
    // 2F874 0061;	
    // (当) CJK COMPATIBILITY IDEOGRAPH-2F874	[FB40 DF53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F874, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_307)
{
    // 2F874 0041;	
    // (当) CJK COMPATIBILITY IDEOGRAPH-2F874	[FB40 DF53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F874, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_308)
{
    // 2F874 0062;	
    // (当) CJK COMPATIBILITY IDEOGRAPH-2F874	[FB40 DF53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F874, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_309)
{
    // 2F3A 0021;	
    // (⼺) KANGXI RADICAL BRISTLE	[FB40 DF61 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_310)
{
    // 2F3A 003F;	
    // (⼺) KANGXI RADICAL BRISTLE	[FB40 DF61 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_311)
{
    // 2F3A 0061;	
    // (⼺) KANGXI RADICAL BRISTLE	[FB40 DF61 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_312)
{
    // 2F3A 0041;	
    // (⼺) KANGXI RADICAL BRISTLE	[FB40 DF61 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_313)
{
    // 2F3A 0062;	
    // (⼺) KANGXI RADICAL BRISTLE	[FB40 DF61 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_314)
{
    // 2F899 0021;	
    // (形) CJK COMPATIBILITY IDEOGRAPH-2F899	[FB40 DF62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F899, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_315)
{
    // 2F899 003F;	
    // (形) CJK COMPATIBILITY IDEOGRAPH-2F899	[FB40 DF62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F899, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_316)
{
    // 2F899 0061;	
    // (形) CJK COMPATIBILITY IDEOGRAPH-2F899	[FB40 DF62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F899, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_317)
{
    // 2F899 0041;	
    // (形) CJK COMPATIBILITY IDEOGRAPH-2F899	[FB40 DF62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F899, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_318)
{
    // 2F899 0062;	
    // (形) CJK COMPATIBILITY IDEOGRAPH-2F899	[FB40 DF62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F899, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_319)
{
    // FA84 0021;	
    // (彩) CJK COMPATIBILITY IDEOGRAPH-FA84	[FB40 DF69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA84, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_320)
{
    // FA84 003F;	
    // (彩) CJK COMPATIBILITY IDEOGRAPH-FA84	[FB40 DF69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA84, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_321)
{
    // FA84 0061;	
    // (彩) CJK COMPATIBILITY IDEOGRAPH-FA84	[FB40 DF69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA84, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_322)
{
    // FA84 0041;	
    // (彩) CJK COMPATIBILITY IDEOGRAPH-FA84	[FB40 DF69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA84, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_323)
{
    // FA84 0062;	
    // (彩) CJK COMPATIBILITY IDEOGRAPH-FA84	[FB40 DF69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA84, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_324)
{
    // 2F89A 0021;	
    // (彫) CJK COMPATIBILITY IDEOGRAPH-2F89A	[FB40 DF6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_325)
{
    // 2F89A 003F;	
    // (彫) CJK COMPATIBILITY IDEOGRAPH-2F89A	[FB40 DF6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_326)
{
    // 2F89A 0061;	
    // (彫) CJK COMPATIBILITY IDEOGRAPH-2F89A	[FB40 DF6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_327)
{
    // 2F89A 0041;	
    // (彫) CJK COMPATIBILITY IDEOGRAPH-2F89A	[FB40 DF6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F89A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_328)
{
    // 2F89A 0062;	
    // (彫) CJK COMPATIBILITY IDEOGRAPH-2F89A	[FB40 DF6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_329)
{
    // 2F3B 0021;	
    // (⼻) KANGXI RADICAL STEP	[FB40 DF73 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_330)
{
    // 2F3B 003F;	
    // (⼻) KANGXI RADICAL STEP	[FB40 DF73 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_331)
{
    // 2F3B 0061;	
    // (⼻) KANGXI RADICAL STEP	[FB40 DF73 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_332)
{
    // 2F3B 0041;	
    // (⼻) KANGXI RADICAL STEP	[FB40 DF73 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_333)
{
    // 2F3B 0062;	
    // (⼻) KANGXI RADICAL STEP	[FB40 DF73 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_334)
{
    // F9D8 0021;	
    // (律) CJK COMPATIBILITY IDEOGRAPH-F9D8	[FB40 DF8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_335)
{
    // F9D8 003F;	
    // (律) CJK COMPATIBILITY IDEOGRAPH-F9D8	[FB40 DF8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_336)
{
    // F9D8 0061;	
    // (律) CJK COMPATIBILITY IDEOGRAPH-F9D8	[FB40 DF8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_337)
{
    // F9D8 0041;	
    // (律) CJK COMPATIBILITY IDEOGRAPH-F9D8	[FB40 DF8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_338)
{
    // F9D8 0062;	
    // (律) CJK COMPATIBILITY IDEOGRAPH-F9D8	[FB40 DF8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_339)
{
    // 1F21D 0021;	
    // (🈝) SQUARED CJK UNIFIED IDEOGRAPH-5F8C	[FB40 DF8C 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_340)
{
    // 1F21D 003F;	
    // (🈝) SQUARED CJK UNIFIED IDEOGRAPH-5F8C	[FB40 DF8C 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_341)
{
    // 1F21D 0061;	
    // (🈝) SQUARED CJK UNIFIED IDEOGRAPH-5F8C	[FB40 DF8C 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_342)
{
    // 1F21D 0041;	
    // (🈝) SQUARED CJK UNIFIED IDEOGRAPH-5F8C	[FB40 DF8C 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_343)
{
    // 1F21D 0062;	
    // (🈝) SQUARED CJK UNIFIED IDEOGRAPH-5F8C	[FB40 DF8C 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_344)
{
    // 1F250 0021;	
    // (🉐) CIRCLED IDEOGRAPH ADVANTAGE	[FB40 DF97 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F250, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_345)
{
    // 1F250 003F;	
    // (🉐) CIRCLED IDEOGRAPH ADVANTAGE	[FB40 DF97 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F250, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_346)
{
    // 1F250 0061;	
    // (🉐) CIRCLED IDEOGRAPH ADVANTAGE	[FB40 DF97 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F250, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_347)
{
    // 1F250 0041;	
    // (🉐) CIRCLED IDEOGRAPH ADVANTAGE	[FB40 DF97 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x1F250, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_348)
{
    // 1F250 0062;	
    // (🉐) CIRCLED IDEOGRAPH ADVANTAGE	[FB40 DF97 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F250, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_349)
{
    // 2F89C 0021;	
    // (徚) CJK COMPATIBILITY IDEOGRAPH-2F89C	[FB40 DF9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDF9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_350)
{
    // 2F89C 003F;	
    // (徚) CJK COMPATIBILITY IDEOGRAPH-2F89C	[FB40 DF9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDF9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_351)
{
    // 2F89C 0061;	
    // (徚) CJK COMPATIBILITY IDEOGRAPH-2F89C	[FB40 DF9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_352)
{
    // 2F89C 0041;	
    // (徚) CJK COMPATIBILITY IDEOGRAPH-2F89C	[FB40 DF9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F89C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_353)
{
    // 2F89C 0062;	
    // (徚) CJK COMPATIBILITY IDEOGRAPH-2F89C	[FB40 DF9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDF9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_354)
{
    // F966 0021;	
    // (復) CJK COMPATIBILITY IDEOGRAPH-F966	[FB40 DFA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF966, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_355)
{
    // F966 003F;	
    // (復) CJK COMPATIBILITY IDEOGRAPH-F966	[FB40 DFA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF966, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_356)
{
    // F966 0061;	
    // (復) CJK COMPATIBILITY IDEOGRAPH-F966	[FB40 DFA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF966, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_357)
{
    // F966 0041;	
    // (復) CJK COMPATIBILITY IDEOGRAPH-F966	[FB40 DFA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF966, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_358)
{
    // F966 0062;	
    // (復) CJK COMPATIBILITY IDEOGRAPH-F966	[FB40 DFA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF966, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_359)
{
    // FA85 0021;	
    // (徭) CJK COMPATIBILITY IDEOGRAPH-FA85	[FB40 DFAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA85, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_360)
{
    // FA85 003F;	
    // (徭) CJK COMPATIBILITY IDEOGRAPH-FA85	[FB40 DFAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA85, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_361)
{
    // FA85 0061;	
    // (徭) CJK COMPATIBILITY IDEOGRAPH-FA85	[FB40 DFAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA85, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_362)
{
    // FA85 0041;	
    // (徭) CJK COMPATIBILITY IDEOGRAPH-FA85	[FB40 DFAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA85, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_363)
{
    // FA85 0062;	
    // (徭) CJK COMPATIBILITY IDEOGRAPH-FA85	[FB40 DFAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA85, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_364)
{
    // 2F3C 0021;	
    // (⼼) KANGXI RADICAL HEART	[FB40 DFC3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_365)
{
    // 2E97 0021;	
    // (⺗) CJK RADICAL HEART TWO	[FB40 DFC3 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E97, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDFC3, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_366)
{
    // 2F3C 003F;	
    // (⼼) KANGXI RADICAL HEART	[FB40 DFC3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_367)
{
    // 2E97 003F;	
    // (⺗) CJK RADICAL HEART TWO	[FB40 DFC3 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E97, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDFC3, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_368)
{
    // 2F3C 0061;	
    // (⼼) KANGXI RADICAL HEART	[FB40 DFC3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_369)
{
    // 2F3C 0041;	
    // (⼼) KANGXI RADICAL HEART	[FB40 DFC3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_370)
{
    // 2E97 0061;	
    // (⺗) CJK RADICAL HEART TWO	[FB40 DFC3 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E97, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDFC3, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_371)
{
    // 2E97 0041;	
    // (⺗) CJK RADICAL HEART TWO	[FB40 DFC3 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E97, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDFC3, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_372)
{
    // 2F3C 0062;	
    // (⼼) KANGXI RADICAL HEART	[FB40 DFC3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_373)
{
    // 2E97 0062;	
    // (⺗) CJK RADICAL HEART TWO	[FB40 DFC3 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E97, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDFC3, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_374)
{
    // 2E96 0021;	
    // (⺖) CJK RADICAL HEART ONE	[FB40 DFC4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E96, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_375)
{
    // 2E96 003F;	
    // (⺖) CJK RADICAL HEART ONE	[FB40 DFC4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E96, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_376)
{
    // 2E96 0061;	
    // (⺖) CJK RADICAL HEART ONE	[FB40 DFC4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E96, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_377)
{
    // 2E96 0041;	
    // (⺖) CJK RADICAL HEART ONE	[FB40 DFC4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E96, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_378)
{
    // 2E96 0062;	
    // (⺖) CJK RADICAL HEART ONE	[FB40 DFC4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E96, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_379)
{
    // 2F89D 0021;	
    // (忍) CJK COMPATIBILITY IDEOGRAPH-2F89D	[FB40 DFCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_380)
{
    // 2F89D 003F;	
    // (忍) CJK COMPATIBILITY IDEOGRAPH-2F89D	[FB40 DFCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_381)
{
    // 2F89D 0061;	
    // (忍) CJK COMPATIBILITY IDEOGRAPH-2F89D	[FB40 DFCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_382)
{
    // 2F89D 0041;	
    // (忍) CJK COMPATIBILITY IDEOGRAPH-2F89D	[FB40 DFCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F89D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_383)
{
    // 2F89D 0062;	
    // (忍) CJK COMPATIBILITY IDEOGRAPH-2F89D	[FB40 DFCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_384)
{
    // 2F89E 0021;	
    // (志) CJK COMPATIBILITY IDEOGRAPH-2F89E	[FB40 DFD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_385)
{
    // 2F89E 003F;	
    // (志) CJK COMPATIBILITY IDEOGRAPH-2F89E	[FB40 DFD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_386)
{
    // 2F89E 0061;	
    // (志) CJK COMPATIBILITY IDEOGRAPH-2F89E	[FB40 DFD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_387)
{
    // 2F89E 0041;	
    // (志) CJK COMPATIBILITY IDEOGRAPH-2F89E	[FB40 DFD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F89E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_388)
{
    // 2F89E 0062;	
    // (志) CJK COMPATIBILITY IDEOGRAPH-2F89E	[FB40 DFD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_389)
{
    // F9A3 0021;	
    // (念) CJK COMPATIBILITY IDEOGRAPH-F9A3	[FB40 DFF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_390)
{
    // F9A3 003F;	
    // (念) CJK COMPATIBILITY IDEOGRAPH-F9A3	[FB40 DFF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_391)
{
    // F9A3 0061;	
    // (念) CJK COMPATIBILITY IDEOGRAPH-F9A3	[FB40 DFF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_392)
{
    // F9A3 0041;	
    // (念) CJK COMPATIBILITY IDEOGRAPH-F9A3	[FB40 DFF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_393)
{
    // F9A3 0062;	
    // (念) CJK COMPATIBILITY IDEOGRAPH-F9A3	[FB40 DFF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_394)
{
    // 2F89F 0021;	
    // (忹) CJK COMPATIBILITY IDEOGRAPH-2F89F	[FB40 DFF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_395)
{
    // 2F89F 003F;	
    // (忹) CJK COMPATIBILITY IDEOGRAPH-2F89F	[FB40 DFF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDFF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_396)
{
    // 2F89F 0061;	
    // (忹) CJK COMPATIBILITY IDEOGRAPH-2F89F	[FB40 DFF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_397)
{
    // 2F89F 0041;	
    // (忹) CJK COMPATIBILITY IDEOGRAPH-2F89F	[FB40 DFF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F89F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_398)
{
    // 2F89F 0062;	
    // (忹) CJK COMPATIBILITY IDEOGRAPH-2F89F	[FB40 DFF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F89F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDFF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_399)
{
    // F960 0021;	
    // (怒) CJK COMPATIBILITY IDEOGRAPH-F960	[FB40 E012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF960, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_400)
{
    // F960 003F;	
    // (怒) CJK COMPATIBILITY IDEOGRAPH-F960	[FB40 E012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF960, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_401)
{
    // F960 0061;	
    // (怒) CJK COMPATIBILITY IDEOGRAPH-F960	[FB40 E012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF960, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_402)
{
    // F960 0041;	
    // (怒) CJK COMPATIBILITY IDEOGRAPH-F960	[FB40 E012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF960, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_403)
{
    // F960 0062;	
    // (怒) CJK COMPATIBILITY IDEOGRAPH-F960	[FB40 E012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF960, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_404)
{
    // F9AC 0021;	
    // (怜) CJK COMPATIBILITY IDEOGRAPH-F9AC	[FB40 E01C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE01C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_405)
{
    // F9AC 003F;	
    // (怜) CJK COMPATIBILITY IDEOGRAPH-F9AC	[FB40 E01C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE01C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_406)
{
    // F9AC 0061;	
    // (怜) CJK COMPATIBILITY IDEOGRAPH-F9AC	[FB40 E01C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE01C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_407)
{
    // F9AC 0041;	
    // (怜) CJK COMPATIBILITY IDEOGRAPH-F9AC	[FB40 E01C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE01C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_408)
{
    // F9AC 0062;	
    // (怜) CJK COMPATIBILITY IDEOGRAPH-F9AC	[FB40 E01C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE01C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_409)
{
    // FA6B 0021;	
    // (恵) CJK COMPATIBILITY IDEOGRAPH-FA6B	[FB40 E075 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE075, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_410)
{
    // FA6B 003F;	
    // (恵) CJK COMPATIBILITY IDEOGRAPH-FA6B	[FB40 E075 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE075, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_411)
{
    // FA6B 0061;	
    // (恵) CJK COMPATIBILITY IDEOGRAPH-FA6B	[FB40 E075 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_412)
{
    // FA6B 0041;	
    // (恵) CJK COMPATIBILITY IDEOGRAPH-FA6B	[FB40 E075 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_413)
{
    // FA6B 0062;	
    // (恵) CJK COMPATIBILITY IDEOGRAPH-FA6B	[FB40 E075 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE075, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_414)
{
    // 2F8A0 0021;	
    // (悁) CJK COMPATIBILITY IDEOGRAPH-2F8A0	[FB40 E081 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE081, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_415)
{
    // 2F8A0 003F;	
    // (悁) CJK COMPATIBILITY IDEOGRAPH-2F8A0	[FB40 E081 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE081, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_416)
{
    // 2F8A0 0061;	
    // (悁) CJK COMPATIBILITY IDEOGRAPH-2F8A0	[FB40 E081 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_417)
{
    // 2F8A0 0041;	
    // (悁) CJK COMPATIBILITY IDEOGRAPH-2F8A0	[FB40 E081 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_418)
{
    // 2F8A0 0062;	
    // (悁) CJK COMPATIBILITY IDEOGRAPH-2F8A0	[FB40 E081 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE081, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_419)
{
    // FA3D 0021;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-FA3D	[FB40 E094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_420)
{
    // 2F8A3 0021;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-2F8A3	[FB40 E094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_421)
{
    // FA3D 003F;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-FA3D	[FB40 E094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_422)
{
    // 2F8A3 003F;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-2F8A3	[FB40 E094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_423)
{
    // FA3D 0061;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-FA3D	[FB40 E094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_424)
{
    // 2F8A3 0061;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-2F8A3	[FB40 E094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_425)
{
    // FA3D 0041;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-FA3D	[FB40 E094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_426)
{
    // 2F8A3 0041;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-2F8A3	[FB40 E094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_427)
{
    // FA3D 0062;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-FA3D	[FB40 E094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_428)
{
    // 2F8A3 0062;	
    // (悔) CJK COMPATIBILITY IDEOGRAPH-2F8A3	[FB40 E094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_429)
{
    // 2F8A5 0021;	
    // (惇) CJK COMPATIBILITY IDEOGRAPH-2F8A5	[FB40 E0C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE0C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_430)
{
    // 2F8A5 003F;	
    // (惇) CJK COMPATIBILITY IDEOGRAPH-2F8A5	[FB40 E0C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE0C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_431)
{
    // 2F8A5 0061;	
    // (惇) CJK COMPATIBILITY IDEOGRAPH-2F8A5	[FB40 E0C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE0C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_432)
{
    // 2F8A5 0041;	
    // (惇) CJK COMPATIBILITY IDEOGRAPH-2F8A5	[FB40 E0C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE0C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_433)
{
    // 2F8A5 0062;	
    // (惇) CJK COMPATIBILITY IDEOGRAPH-2F8A5	[FB40 E0C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE0C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_434)
{
    // FA86 0021;	
    // (惘) CJK COMPATIBILITY IDEOGRAPH-FA86	[FB40 E0D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA86, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE0D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_435)
{
    // FA86 003F;	
    // (惘) CJK COMPATIBILITY IDEOGRAPH-FA86	[FB40 E0D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA86, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE0D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_436)
{
    // FA86 0061;	
    // (惘) CJK COMPATIBILITY IDEOGRAPH-FA86	[FB40 E0D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA86, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE0D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_437)
{
    // FA86 0041;	
    // (惘) CJK COMPATIBILITY IDEOGRAPH-FA86	[FB40 E0D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA86, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE0D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_438)
{
    // FA86 0062;	
    // (惘) CJK COMPATIBILITY IDEOGRAPH-FA86	[FB40 E0D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA86, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE0D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_439)
{
    // F9B9 0021;	
    // (惡) CJK COMPATIBILITY IDEOGRAPH-F9B9	[FB40 E0E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE0E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_440)
{
    // F9B9 003F;	
    // (惡) CJK COMPATIBILITY IDEOGRAPH-F9B9	[FB40 E0E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE0E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_441)
{
    // F9B9 0061;	
    // (惡) CJK COMPATIBILITY IDEOGRAPH-F9B9	[FB40 E0E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE0E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_442)
{
    // F9B9 0041;	
    // (惡) CJK COMPATIBILITY IDEOGRAPH-F9B9	[FB40 E0E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE0E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_443)
{
    // F9B9 0062;	
    // (惡) CJK COMPATIBILITY IDEOGRAPH-F9B9	[FB40 E0E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE0E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_444)
{
    // FA88 0021;	
    // (愈) CJK COMPATIBILITY IDEOGRAPH-FA88	[FB40 E108 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA88, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_445)
{
    // FA88 003F;	
    // (愈) CJK COMPATIBILITY IDEOGRAPH-FA88	[FB40 E108 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA88, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_446)
{
    // FA88 0061;	
    // (愈) CJK COMPATIBILITY IDEOGRAPH-FA88	[FB40 E108 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA88, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_447)
{
    // FA88 0041;	
    // (愈) CJK COMPATIBILITY IDEOGRAPH-FA88	[FB40 E108 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA88, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_448)
{
    // FA88 0062;	
    // (愈) CJK COMPATIBILITY IDEOGRAPH-FA88	[FB40 E108 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA88, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_449)
{
    // F9D9 0021;	
    // (慄) CJK COMPATIBILITY IDEOGRAPH-F9D9	[FB40 E144 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE144, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_450)
{
    // F9D9 003F;	
    // (慄) CJK COMPATIBILITY IDEOGRAPH-F9D9	[FB40 E144 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE144, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_451)
{
    // F9D9 0061;	
    // (慄) CJK COMPATIBILITY IDEOGRAPH-F9D9	[FB40 E144 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_452)
{
    // F9D9 0041;	
    // (慄) CJK COMPATIBILITY IDEOGRAPH-F9D9	[FB40 E144 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_453)
{
    // F9D9 0062;	
    // (慄) CJK COMPATIBILITY IDEOGRAPH-F9D9	[FB40 E144 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE144, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_454)
{
    // 2F8A6 0021;	
    // (慈) CJK COMPATIBILITY IDEOGRAPH-2F8A6	[FB40 E148 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE148, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_455)
{
    // 2F8A6 003F;	
    // (慈) CJK COMPATIBILITY IDEOGRAPH-2F8A6	[FB40 E148 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE148, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_456)
{
    // 2F8A6 0061;	
    // (慈) CJK COMPATIBILITY IDEOGRAPH-2F8A6	[FB40 E148 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_457)
{
    // 2F8A6 0041;	
    // (慈) CJK COMPATIBILITY IDEOGRAPH-2F8A6	[FB40 E148 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_458)
{
    // 2F8A6 0062;	
    // (慈) CJK COMPATIBILITY IDEOGRAPH-2F8A6	[FB40 E148 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE148, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_459)
{
    // 2F8A7 0021;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A7	[FB40 E14C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_460)
{
    // 2F8A9 0021;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A9	[FB40 E14C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_461)
{
    // 2F8A7 003F;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A7	[FB40 E14C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A7, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_462)
{
    // 2F8A9 003F;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A9	[FB40 E14C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_463)
{
    // 2F8A7 0061;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A7	[FB40 E14C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_464)
{
    // 2F8A9 0061;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A9	[FB40 E14C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_465)
{
    // 2F8A7 0041;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A7	[FB40 E14C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_466)
{
    // 2F8A9 0041;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A9	[FB40 E14C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_467)
{
    // 2F8A7 0062;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A7	[FB40 E14C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_468)
{
    // 2F8A9 0062;	
    // (慌) CJK COMPATIBILITY IDEOGRAPH-2F8A9	[FB40 E14C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE14C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_469)
{
    // FA87 0021;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-FA87	[FB40 E14E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA87, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_470)
{
    // 2F8A8 0021;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-2F8A8	[FB40 E14E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_471)
{
    // FA87 003F;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-FA87	[FB40 E14E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA87, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_472)
{
    // 2F8A8 003F;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-2F8A8	[FB40 E14E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_473)
{
    // FA87 0061;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-FA87	[FB40 E14E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA87, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_474)
{
    // 2F8A8 0061;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-2F8A8	[FB40 E14E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_475)
{
    // FA87 0041;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-FA87	[FB40 E14E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA87, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_476)
{
    // 2F8A8 0041;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-2F8A8	[FB40 E14E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_477)
{
    // FA87 0062;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-FA87	[FB40 E14E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA87, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_478)
{
    // 2F8A8 0062;	
    // (慎) CJK COMPATIBILITY IDEOGRAPH-2F8A8	[FB40 E14E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE14E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_479)
{
    // FA8A 0021;	
    // (慠) CJK COMPATIBILITY IDEOGRAPH-FA8A	[FB40 E160 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE160, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_480)
{
    // FA8A 003F;	
    // (慠) CJK COMPATIBILITY IDEOGRAPH-FA8A	[FB40 E160 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE160, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_481)
{
    // FA8A 0061;	
    // (慠) CJK COMPATIBILITY IDEOGRAPH-FA8A	[FB40 E160 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_482)
{
    // FA8A 0041;	
    // (慠) CJK COMPATIBILITY IDEOGRAPH-FA8A	[FB40 E160 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_483)
{
    // FA8A 0062;	
    // (慠) CJK COMPATIBILITY IDEOGRAPH-FA8A	[FB40 E160 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE160, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_484)
{
    // FA3E 0021;	
    // (慨) CJK COMPATIBILITY IDEOGRAPH-FA3E	[FB40 E168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_485)
{
    // FA3E 003F;	
    // (慨) CJK COMPATIBILITY IDEOGRAPH-FA3E	[FB40 E168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_486)
{
    // FA3E 0061;	
    // (慨) CJK COMPATIBILITY IDEOGRAPH-FA3E	[FB40 E168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_487)
{
    // FA3E 0041;	
    // (慨) CJK COMPATIBILITY IDEOGRAPH-FA3E	[FB40 E168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_488)
{
    // FA3E 0062;	
    // (慨) CJK COMPATIBILITY IDEOGRAPH-FA3E	[FB40 E168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_489)
{
    // 2F8AA 0021;	
    // (慺) CJK COMPATIBILITY IDEOGRAPH-2F8AA	[FB40 E17A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE17A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_490)
{
    // 2F8AA 003F;	
    // (慺) CJK COMPATIBILITY IDEOGRAPH-2F8AA	[FB40 E17A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE17A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_491)
{
    // 2F8AA 0061;	
    // (慺) CJK COMPATIBILITY IDEOGRAPH-2F8AA	[FB40 E17A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE17A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_492)
{
    // 2F8AA 0041;	
    // (慺) CJK COMPATIBILITY IDEOGRAPH-2F8AA	[FB40 E17A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE17A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_493)
{
    // 2F8AA 0062;	
    // (慺) CJK COMPATIBILITY IDEOGRAPH-2F8AA	[FB40 E17A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE17A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_494)
{
    // FA3F 0021;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA3F	[FB40 E18E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_495)
{
    // FA89 0021;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA89	[FB40 E18E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA89, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_496)
{
    // 2F8AB 0021;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-2F8AB	[FB40 E18E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_497)
{
    // FA3F 003F;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA3F	[FB40 E18E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_498)
{
    // FA89 003F;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-FA89	[FB40 E18E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA89, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_317_499)
{
    // 2F8AB 003F;	
    // (憎) CJK COMPATIBILITY IDEOGRAPH-2F8AB	[FB40 E18E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8AB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE18E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

