// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_233_000)
{
    // 16876 0041;	
    // (𖡶) BAMUM LETTER PHASE-B WUAET	[3A44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16876, 0x0041 };
    uint32_t const ces[9] = { 0x3A44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_001)
{
    // 16876 0062;	
    // (𖡶) BAMUM LETTER PHASE-B WUAET	[3A44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16876, 0x0062 };
    uint32_t const ces[9] = { 0x3A44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_002)
{
    // 16877 0021;	
    // (𖡷) BAMUM LETTER PHASE-B SAKEUAE	[3A45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16877, 0x0021 };
    uint32_t const ces[9] = { 0x3A45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_003)
{
    // 16877 003F;	
    // (𖡷) BAMUM LETTER PHASE-B SAKEUAE	[3A45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16877, 0x003F };
    uint32_t const ces[9] = { 0x3A45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_004)
{
    // 16877 0061;	
    // (𖡷) BAMUM LETTER PHASE-B SAKEUAE	[3A45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16877, 0x0061 };
    uint32_t const ces[9] = { 0x3A45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_005)
{
    // 16877 0041;	
    // (𖡷) BAMUM LETTER PHASE-B SAKEUAE	[3A45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16877, 0x0041 };
    uint32_t const ces[9] = { 0x3A45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_006)
{
    // 16877 0062;	
    // (𖡷) BAMUM LETTER PHASE-B SAKEUAE	[3A45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16877, 0x0062 };
    uint32_t const ces[9] = { 0x3A45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_007)
{
    // 16878 0021;	
    // (𖡸) BAMUM LETTER PHASE-B TAAM	[3A46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16878, 0x0021 };
    uint32_t const ces[9] = { 0x3A46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_008)
{
    // 16878 003F;	
    // (𖡸) BAMUM LETTER PHASE-B TAAM	[3A46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16878, 0x003F };
    uint32_t const ces[9] = { 0x3A46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_009)
{
    // 16878 0061;	
    // (𖡸) BAMUM LETTER PHASE-B TAAM	[3A46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16878, 0x0061 };
    uint32_t const ces[9] = { 0x3A46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_010)
{
    // 16878 0041;	
    // (𖡸) BAMUM LETTER PHASE-B TAAM	[3A46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16878, 0x0041 };
    uint32_t const ces[9] = { 0x3A46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_011)
{
    // 16878 0062;	
    // (𖡸) BAMUM LETTER PHASE-B TAAM	[3A46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16878, 0x0062 };
    uint32_t const ces[9] = { 0x3A46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_012)
{
    // 16879 0021;	
    // (𖡹) BAMUM LETTER PHASE-B MEUQ	[3A47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16879, 0x0021 };
    uint32_t const ces[9] = { 0x3A47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_013)
{
    // 16879 003F;	
    // (𖡹) BAMUM LETTER PHASE-B MEUQ	[3A47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16879, 0x003F };
    uint32_t const ces[9] = { 0x3A47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_014)
{
    // 16879 0061;	
    // (𖡹) BAMUM LETTER PHASE-B MEUQ	[3A47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16879, 0x0061 };
    uint32_t const ces[9] = { 0x3A47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_015)
{
    // 16879 0041;	
    // (𖡹) BAMUM LETTER PHASE-B MEUQ	[3A47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16879, 0x0041 };
    uint32_t const ces[9] = { 0x3A47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_016)
{
    // 16879 0062;	
    // (𖡹) BAMUM LETTER PHASE-B MEUQ	[3A47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16879, 0x0062 };
    uint32_t const ces[9] = { 0x3A47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_017)
{
    // 1687A 0021;	
    // (𖡺) BAMUM LETTER PHASE-B NGGUOQ	[3A48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687A, 0x0021 };
    uint32_t const ces[9] = { 0x3A48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_018)
{
    // 1687A 003F;	
    // (𖡺) BAMUM LETTER PHASE-B NGGUOQ	[3A48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687A, 0x003F };
    uint32_t const ces[9] = { 0x3A48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_019)
{
    // 1687A 0061;	
    // (𖡺) BAMUM LETTER PHASE-B NGGUOQ	[3A48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687A, 0x0061 };
    uint32_t const ces[9] = { 0x3A48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_020)
{
    // 1687A 0041;	
    // (𖡺) BAMUM LETTER PHASE-B NGGUOQ	[3A48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687A, 0x0041 };
    uint32_t const ces[9] = { 0x3A48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_021)
{
    // 1687A 0062;	
    // (𖡺) BAMUM LETTER PHASE-B NGGUOQ	[3A48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687A, 0x0062 };
    uint32_t const ces[9] = { 0x3A48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_022)
{
    // 1687B 0021;	
    // (𖡻) BAMUM LETTER PHASE-B NGGUOQ LARGE	[3A49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687B, 0x0021 };
    uint32_t const ces[9] = { 0x3A49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_023)
{
    // 1687B 003F;	
    // (𖡻) BAMUM LETTER PHASE-B NGGUOQ LARGE	[3A49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687B, 0x003F };
    uint32_t const ces[9] = { 0x3A49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_024)
{
    // 1687B 0061;	
    // (𖡻) BAMUM LETTER PHASE-B NGGUOQ LARGE	[3A49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687B, 0x0061 };
    uint32_t const ces[9] = { 0x3A49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_025)
{
    // 1687B 0041;	
    // (𖡻) BAMUM LETTER PHASE-B NGGUOQ LARGE	[3A49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687B, 0x0041 };
    uint32_t const ces[9] = { 0x3A49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_026)
{
    // 1687B 0062;	
    // (𖡻) BAMUM LETTER PHASE-B NGGUOQ LARGE	[3A49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687B, 0x0062 };
    uint32_t const ces[9] = { 0x3A49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_027)
{
    // 1687C 0021;	
    // (𖡼) BAMUM LETTER PHASE-B MFIYAQ	[3A4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687C, 0x0021 };
    uint32_t const ces[9] = { 0x3A4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_028)
{
    // 1687C 003F;	
    // (𖡼) BAMUM LETTER PHASE-B MFIYAQ	[3A4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687C, 0x003F };
    uint32_t const ces[9] = { 0x3A4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_029)
{
    // 1687C 0061;	
    // (𖡼) BAMUM LETTER PHASE-B MFIYAQ	[3A4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687C, 0x0061 };
    uint32_t const ces[9] = { 0x3A4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_030)
{
    // 1687C 0041;	
    // (𖡼) BAMUM LETTER PHASE-B MFIYAQ	[3A4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687C, 0x0041 };
    uint32_t const ces[9] = { 0x3A4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_031)
{
    // 1687C 0062;	
    // (𖡼) BAMUM LETTER PHASE-B MFIYAQ	[3A4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687C, 0x0062 };
    uint32_t const ces[9] = { 0x3A4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_032)
{
    // 1687D 0021;	
    // (𖡽) BAMUM LETTER PHASE-B SUE	[3A4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687D, 0x0021 };
    uint32_t const ces[9] = { 0x3A4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_033)
{
    // 1687D 003F;	
    // (𖡽) BAMUM LETTER PHASE-B SUE	[3A4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687D, 0x003F };
    uint32_t const ces[9] = { 0x3A4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_034)
{
    // 1687D 0061;	
    // (𖡽) BAMUM LETTER PHASE-B SUE	[3A4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687D, 0x0061 };
    uint32_t const ces[9] = { 0x3A4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_035)
{
    // 1687D 0041;	
    // (𖡽) BAMUM LETTER PHASE-B SUE	[3A4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687D, 0x0041 };
    uint32_t const ces[9] = { 0x3A4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_036)
{
    // 1687D 0062;	
    // (𖡽) BAMUM LETTER PHASE-B SUE	[3A4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687D, 0x0062 };
    uint32_t const ces[9] = { 0x3A4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_037)
{
    // 1687E 0021;	
    // (𖡾) BAMUM LETTER PHASE-B MBEURI	[3A4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687E, 0x0021 };
    uint32_t const ces[9] = { 0x3A4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_038)
{
    // 1687E 003F;	
    // (𖡾) BAMUM LETTER PHASE-B MBEURI	[3A4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687E, 0x003F };
    uint32_t const ces[9] = { 0x3A4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_039)
{
    // 1687E 0061;	
    // (𖡾) BAMUM LETTER PHASE-B MBEURI	[3A4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687E, 0x0061 };
    uint32_t const ces[9] = { 0x3A4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_040)
{
    // 1687E 0041;	
    // (𖡾) BAMUM LETTER PHASE-B MBEURI	[3A4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687E, 0x0041 };
    uint32_t const ces[9] = { 0x3A4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_041)
{
    // 1687E 0062;	
    // (𖡾) BAMUM LETTER PHASE-B MBEURI	[3A4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687E, 0x0062 };
    uint32_t const ces[9] = { 0x3A4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_042)
{
    // 1687F 0021;	
    // (𖡿) BAMUM LETTER PHASE-B MONTIEEN	[3A4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687F, 0x0021 };
    uint32_t const ces[9] = { 0x3A4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_043)
{
    // 1687F 003F;	
    // (𖡿) BAMUM LETTER PHASE-B MONTIEEN	[3A4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687F, 0x003F };
    uint32_t const ces[9] = { 0x3A4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_044)
{
    // 1687F 0061;	
    // (𖡿) BAMUM LETTER PHASE-B MONTIEEN	[3A4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687F, 0x0061 };
    uint32_t const ces[9] = { 0x3A4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_045)
{
    // 1687F 0041;	
    // (𖡿) BAMUM LETTER PHASE-B MONTIEEN	[3A4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1687F, 0x0041 };
    uint32_t const ces[9] = { 0x3A4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_046)
{
    // 1687F 0062;	
    // (𖡿) BAMUM LETTER PHASE-B MONTIEEN	[3A4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1687F, 0x0062 };
    uint32_t const ces[9] = { 0x3A4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_047)
{
    // 16880 0021;	
    // (𖢀) BAMUM LETTER PHASE-B NYAEMAE	[3A4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16880, 0x0021 };
    uint32_t const ces[9] = { 0x3A4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_048)
{
    // 16880 003F;	
    // (𖢀) BAMUM LETTER PHASE-B NYAEMAE	[3A4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16880, 0x003F };
    uint32_t const ces[9] = { 0x3A4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_049)
{
    // 16880 0061;	
    // (𖢀) BAMUM LETTER PHASE-B NYAEMAE	[3A4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16880, 0x0061 };
    uint32_t const ces[9] = { 0x3A4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_050)
{
    // 16880 0041;	
    // (𖢀) BAMUM LETTER PHASE-B NYAEMAE	[3A4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16880, 0x0041 };
    uint32_t const ces[9] = { 0x3A4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_051)
{
    // 16880 0062;	
    // (𖢀) BAMUM LETTER PHASE-B NYAEMAE	[3A4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16880, 0x0062 };
    uint32_t const ces[9] = { 0x3A4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_052)
{
    // 16881 0021;	
    // (𖢁) BAMUM LETTER PHASE-B PUNGAAM	[3A4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16881, 0x0021 };
    uint32_t const ces[9] = { 0x3A4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_053)
{
    // 16881 003F;	
    // (𖢁) BAMUM LETTER PHASE-B PUNGAAM	[3A4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16881, 0x003F };
    uint32_t const ces[9] = { 0x3A4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_054)
{
    // 16881 0061;	
    // (𖢁) BAMUM LETTER PHASE-B PUNGAAM	[3A4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16881, 0x0061 };
    uint32_t const ces[9] = { 0x3A4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_055)
{
    // 16881 0041;	
    // (𖢁) BAMUM LETTER PHASE-B PUNGAAM	[3A4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16881, 0x0041 };
    uint32_t const ces[9] = { 0x3A4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_056)
{
    // 16881 0062;	
    // (𖢁) BAMUM LETTER PHASE-B PUNGAAM	[3A4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16881, 0x0062 };
    uint32_t const ces[9] = { 0x3A4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_057)
{
    // 16882 0021;	
    // (𖢂) BAMUM LETTER PHASE-B MEUT NGGEET	[3A50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16882, 0x0021 };
    uint32_t const ces[9] = { 0x3A50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_058)
{
    // 16882 003F;	
    // (𖢂) BAMUM LETTER PHASE-B MEUT NGGEET	[3A50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16882, 0x003F };
    uint32_t const ces[9] = { 0x3A50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_059)
{
    // 16882 0061;	
    // (𖢂) BAMUM LETTER PHASE-B MEUT NGGEET	[3A50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16882, 0x0061 };
    uint32_t const ces[9] = { 0x3A50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_060)
{
    // 16882 0041;	
    // (𖢂) BAMUM LETTER PHASE-B MEUT NGGEET	[3A50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16882, 0x0041 };
    uint32_t const ces[9] = { 0x3A50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_061)
{
    // 16882 0062;	
    // (𖢂) BAMUM LETTER PHASE-B MEUT NGGEET	[3A50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16882, 0x0062 };
    uint32_t const ces[9] = { 0x3A50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_062)
{
    // 16883 0021;	
    // (𖢃) BAMUM LETTER PHASE-B FEUX	[3A51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16883, 0x0021 };
    uint32_t const ces[9] = { 0x3A51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_063)
{
    // 16883 003F;	
    // (𖢃) BAMUM LETTER PHASE-B FEUX	[3A51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16883, 0x003F };
    uint32_t const ces[9] = { 0x3A51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_064)
{
    // 16883 0061;	
    // (𖢃) BAMUM LETTER PHASE-B FEUX	[3A51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16883, 0x0061 };
    uint32_t const ces[9] = { 0x3A51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_065)
{
    // 16883 0041;	
    // (𖢃) BAMUM LETTER PHASE-B FEUX	[3A51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16883, 0x0041 };
    uint32_t const ces[9] = { 0x3A51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_066)
{
    // 16883 0062;	
    // (𖢃) BAMUM LETTER PHASE-B FEUX	[3A51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16883, 0x0062 };
    uint32_t const ces[9] = { 0x3A51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_067)
{
    // 16884 0021;	
    // (𖢄) BAMUM LETTER PHASE-B MBUOQ	[3A52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16884, 0x0021 };
    uint32_t const ces[9] = { 0x3A52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_068)
{
    // 16884 003F;	
    // (𖢄) BAMUM LETTER PHASE-B MBUOQ	[3A52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16884, 0x003F };
    uint32_t const ces[9] = { 0x3A52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_069)
{
    // 16884 0061;	
    // (𖢄) BAMUM LETTER PHASE-B MBUOQ	[3A52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16884, 0x0061 };
    uint32_t const ces[9] = { 0x3A52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_070)
{
    // 16884 0041;	
    // (𖢄) BAMUM LETTER PHASE-B MBUOQ	[3A52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16884, 0x0041 };
    uint32_t const ces[9] = { 0x3A52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_071)
{
    // 16884 0062;	
    // (𖢄) BAMUM LETTER PHASE-B MBUOQ	[3A52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16884, 0x0062 };
    uint32_t const ces[9] = { 0x3A52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_072)
{
    // 16885 0021;	
    // (𖢅) BAMUM LETTER PHASE-B FEE	[3A53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16885, 0x0021 };
    uint32_t const ces[9] = { 0x3A53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_073)
{
    // 16885 003F;	
    // (𖢅) BAMUM LETTER PHASE-B FEE	[3A53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16885, 0x003F };
    uint32_t const ces[9] = { 0x3A53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_074)
{
    // 16885 0061;	
    // (𖢅) BAMUM LETTER PHASE-B FEE	[3A53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16885, 0x0061 };
    uint32_t const ces[9] = { 0x3A53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_075)
{
    // 16885 0041;	
    // (𖢅) BAMUM LETTER PHASE-B FEE	[3A53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16885, 0x0041 };
    uint32_t const ces[9] = { 0x3A53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_076)
{
    // 16885 0062;	
    // (𖢅) BAMUM LETTER PHASE-B FEE	[3A53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16885, 0x0062 };
    uint32_t const ces[9] = { 0x3A53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_077)
{
    // 16886 0021;	
    // (𖢆) BAMUM LETTER PHASE-B KEUAEM	[3A54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16886, 0x0021 };
    uint32_t const ces[9] = { 0x3A54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_078)
{
    // 16886 003F;	
    // (𖢆) BAMUM LETTER PHASE-B KEUAEM	[3A54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16886, 0x003F };
    uint32_t const ces[9] = { 0x3A54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_079)
{
    // 16886 0061;	
    // (𖢆) BAMUM LETTER PHASE-B KEUAEM	[3A54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16886, 0x0061 };
    uint32_t const ces[9] = { 0x3A54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_080)
{
    // 16886 0041;	
    // (𖢆) BAMUM LETTER PHASE-B KEUAEM	[3A54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16886, 0x0041 };
    uint32_t const ces[9] = { 0x3A54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_081)
{
    // 16886 0062;	
    // (𖢆) BAMUM LETTER PHASE-B KEUAEM	[3A54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16886, 0x0062 };
    uint32_t const ces[9] = { 0x3A54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_082)
{
    // 16887 0021;	
    // (𖢇) BAMUM LETTER PHASE-B MA NJEUAENA	[3A55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16887, 0x0021 };
    uint32_t const ces[9] = { 0x3A55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_083)
{
    // 16887 003F;	
    // (𖢇) BAMUM LETTER PHASE-B MA NJEUAENA	[3A55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16887, 0x003F };
    uint32_t const ces[9] = { 0x3A55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_084)
{
    // 16887 0061;	
    // (𖢇) BAMUM LETTER PHASE-B MA NJEUAENA	[3A55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16887, 0x0061 };
    uint32_t const ces[9] = { 0x3A55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_085)
{
    // 16887 0041;	
    // (𖢇) BAMUM LETTER PHASE-B MA NJEUAENA	[3A55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16887, 0x0041 };
    uint32_t const ces[9] = { 0x3A55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_086)
{
    // 16887 0062;	
    // (𖢇) BAMUM LETTER PHASE-B MA NJEUAENA	[3A55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16887, 0x0062 };
    uint32_t const ces[9] = { 0x3A55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_087)
{
    // 16888 0021;	
    // (𖢈) BAMUM LETTER PHASE-B MA NJUQA	[3A56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16888, 0x0021 };
    uint32_t const ces[9] = { 0x3A56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_088)
{
    // 16888 003F;	
    // (𖢈) BAMUM LETTER PHASE-B MA NJUQA	[3A56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16888, 0x003F };
    uint32_t const ces[9] = { 0x3A56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_089)
{
    // 16888 0061;	
    // (𖢈) BAMUM LETTER PHASE-B MA NJUQA	[3A56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16888, 0x0061 };
    uint32_t const ces[9] = { 0x3A56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_090)
{
    // 16888 0041;	
    // (𖢈) BAMUM LETTER PHASE-B MA NJUQA	[3A56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16888, 0x0041 };
    uint32_t const ces[9] = { 0x3A56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_091)
{
    // 16888 0062;	
    // (𖢈) BAMUM LETTER PHASE-B MA NJUQA	[3A56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16888, 0x0062 };
    uint32_t const ces[9] = { 0x3A56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_092)
{
    // 16889 0021;	
    // (𖢉) BAMUM LETTER PHASE-B LET	[3A57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16889, 0x0021 };
    uint32_t const ces[9] = { 0x3A57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_093)
{
    // 16889 003F;	
    // (𖢉) BAMUM LETTER PHASE-B LET	[3A57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16889, 0x003F };
    uint32_t const ces[9] = { 0x3A57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_094)
{
    // 16889 0061;	
    // (𖢉) BAMUM LETTER PHASE-B LET	[3A57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16889, 0x0061 };
    uint32_t const ces[9] = { 0x3A57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_095)
{
    // 16889 0041;	
    // (𖢉) BAMUM LETTER PHASE-B LET	[3A57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16889, 0x0041 };
    uint32_t const ces[9] = { 0x3A57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_096)
{
    // 16889 0062;	
    // (𖢉) BAMUM LETTER PHASE-B LET	[3A57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16889, 0x0062 };
    uint32_t const ces[9] = { 0x3A57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_097)
{
    // 1688A 0021;	
    // (𖢊) BAMUM LETTER PHASE-B NGGAAM	[3A58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688A, 0x0021 };
    uint32_t const ces[9] = { 0x3A58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_098)
{
    // 1688A 003F;	
    // (𖢊) BAMUM LETTER PHASE-B NGGAAM	[3A58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688A, 0x003F };
    uint32_t const ces[9] = { 0x3A58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_099)
{
    // 1688A 0061;	
    // (𖢊) BAMUM LETTER PHASE-B NGGAAM	[3A58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688A, 0x0061 };
    uint32_t const ces[9] = { 0x3A58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_100)
{
    // 1688A 0041;	
    // (𖢊) BAMUM LETTER PHASE-B NGGAAM	[3A58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688A, 0x0041 };
    uint32_t const ces[9] = { 0x3A58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_101)
{
    // 1688A 0062;	
    // (𖢊) BAMUM LETTER PHASE-B NGGAAM	[3A58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688A, 0x0062 };
    uint32_t const ces[9] = { 0x3A58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_102)
{
    // 1688B 0021;	
    // (𖢋) BAMUM LETTER PHASE-B NSEN	[3A59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688B, 0x0021 };
    uint32_t const ces[9] = { 0x3A59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_103)
{
    // 1688B 003F;	
    // (𖢋) BAMUM LETTER PHASE-B NSEN	[3A59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688B, 0x003F };
    uint32_t const ces[9] = { 0x3A59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_104)
{
    // 1688B 0061;	
    // (𖢋) BAMUM LETTER PHASE-B NSEN	[3A59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688B, 0x0061 };
    uint32_t const ces[9] = { 0x3A59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_105)
{
    // 1688B 0041;	
    // (𖢋) BAMUM LETTER PHASE-B NSEN	[3A59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688B, 0x0041 };
    uint32_t const ces[9] = { 0x3A59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_106)
{
    // 1688B 0062;	
    // (𖢋) BAMUM LETTER PHASE-B NSEN	[3A59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688B, 0x0062 };
    uint32_t const ces[9] = { 0x3A59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_107)
{
    // 1688C 0021;	
    // (𖢌) BAMUM LETTER PHASE-B MA	[3A5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688C, 0x0021 };
    uint32_t const ces[9] = { 0x3A5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_108)
{
    // 1688C 003F;	
    // (𖢌) BAMUM LETTER PHASE-B MA	[3A5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688C, 0x003F };
    uint32_t const ces[9] = { 0x3A5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_109)
{
    // 1688C 0061;	
    // (𖢌) BAMUM LETTER PHASE-B MA	[3A5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688C, 0x0061 };
    uint32_t const ces[9] = { 0x3A5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_110)
{
    // 1688C 0041;	
    // (𖢌) BAMUM LETTER PHASE-B MA	[3A5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688C, 0x0041 };
    uint32_t const ces[9] = { 0x3A5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_111)
{
    // 1688C 0062;	
    // (𖢌) BAMUM LETTER PHASE-B MA	[3A5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688C, 0x0062 };
    uint32_t const ces[9] = { 0x3A5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_112)
{
    // 1688D 0021;	
    // (𖢍) BAMUM LETTER PHASE-B KIQ	[3A5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688D, 0x0021 };
    uint32_t const ces[9] = { 0x3A5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_113)
{
    // 1688D 003F;	
    // (𖢍) BAMUM LETTER PHASE-B KIQ	[3A5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688D, 0x003F };
    uint32_t const ces[9] = { 0x3A5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_114)
{
    // 1688D 0061;	
    // (𖢍) BAMUM LETTER PHASE-B KIQ	[3A5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688D, 0x0061 };
    uint32_t const ces[9] = { 0x3A5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_115)
{
    // 1688D 0041;	
    // (𖢍) BAMUM LETTER PHASE-B KIQ	[3A5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688D, 0x0041 };
    uint32_t const ces[9] = { 0x3A5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_116)
{
    // 1688D 0062;	
    // (𖢍) BAMUM LETTER PHASE-B KIQ	[3A5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688D, 0x0062 };
    uint32_t const ces[9] = { 0x3A5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_117)
{
    // 1688E 0021;	
    // (𖢎) BAMUM LETTER PHASE-B NGOM	[3A5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688E, 0x0021 };
    uint32_t const ces[9] = { 0x3A5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_118)
{
    // 1688E 003F;	
    // (𖢎) BAMUM LETTER PHASE-B NGOM	[3A5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688E, 0x003F };
    uint32_t const ces[9] = { 0x3A5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_119)
{
    // 1688E 0061;	
    // (𖢎) BAMUM LETTER PHASE-B NGOM	[3A5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688E, 0x0061 };
    uint32_t const ces[9] = { 0x3A5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_120)
{
    // 1688E 0041;	
    // (𖢎) BAMUM LETTER PHASE-B NGOM	[3A5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688E, 0x0041 };
    uint32_t const ces[9] = { 0x3A5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_121)
{
    // 1688E 0062;	
    // (𖢎) BAMUM LETTER PHASE-B NGOM	[3A5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688E, 0x0062 };
    uint32_t const ces[9] = { 0x3A5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_122)
{
    // 1688F 0021;	
    // (𖢏) BAMUM LETTER PHASE-C NGKUE MAEMBA	[3A5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688F, 0x0021 };
    uint32_t const ces[9] = { 0x3A5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_123)
{
    // 1688F 003F;	
    // (𖢏) BAMUM LETTER PHASE-C NGKUE MAEMBA	[3A5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688F, 0x003F };
    uint32_t const ces[9] = { 0x3A5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_124)
{
    // 1688F 0061;	
    // (𖢏) BAMUM LETTER PHASE-C NGKUE MAEMBA	[3A5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688F, 0x0061 };
    uint32_t const ces[9] = { 0x3A5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_125)
{
    // 1688F 0041;	
    // (𖢏) BAMUM LETTER PHASE-C NGKUE MAEMBA	[3A5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1688F, 0x0041 };
    uint32_t const ces[9] = { 0x3A5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_126)
{
    // 1688F 0062;	
    // (𖢏) BAMUM LETTER PHASE-C NGKUE MAEMBA	[3A5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1688F, 0x0062 };
    uint32_t const ces[9] = { 0x3A5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_127)
{
    // 16890 0021;	
    // (𖢐) BAMUM LETTER PHASE-C NZA	[3A5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16890, 0x0021 };
    uint32_t const ces[9] = { 0x3A5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_128)
{
    // 16890 003F;	
    // (𖢐) BAMUM LETTER PHASE-C NZA	[3A5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16890, 0x003F };
    uint32_t const ces[9] = { 0x3A5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_129)
{
    // 16890 0061;	
    // (𖢐) BAMUM LETTER PHASE-C NZA	[3A5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16890, 0x0061 };
    uint32_t const ces[9] = { 0x3A5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_130)
{
    // 16890 0041;	
    // (𖢐) BAMUM LETTER PHASE-C NZA	[3A5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16890, 0x0041 };
    uint32_t const ces[9] = { 0x3A5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_131)
{
    // 16890 0062;	
    // (𖢐) BAMUM LETTER PHASE-C NZA	[3A5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16890, 0x0062 };
    uint32_t const ces[9] = { 0x3A5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_132)
{
    // 16891 0021;	
    // (𖢑) BAMUM LETTER PHASE-C YUM	[3A5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16891, 0x0021 };
    uint32_t const ces[9] = { 0x3A5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_133)
{
    // 16891 003F;	
    // (𖢑) BAMUM LETTER PHASE-C YUM	[3A5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16891, 0x003F };
    uint32_t const ces[9] = { 0x3A5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_134)
{
    // 16891 0061;	
    // (𖢑) BAMUM LETTER PHASE-C YUM	[3A5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16891, 0x0061 };
    uint32_t const ces[9] = { 0x3A5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_135)
{
    // 16891 0041;	
    // (𖢑) BAMUM LETTER PHASE-C YUM	[3A5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16891, 0x0041 };
    uint32_t const ces[9] = { 0x3A5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_136)
{
    // 16891 0062;	
    // (𖢑) BAMUM LETTER PHASE-C YUM	[3A5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16891, 0x0062 };
    uint32_t const ces[9] = { 0x3A5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_137)
{
    // 16892 0021;	
    // (𖢒) BAMUM LETTER PHASE-C WANGKUOQ	[3A60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16892, 0x0021 };
    uint32_t const ces[9] = { 0x3A60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_138)
{
    // 16892 003F;	
    // (𖢒) BAMUM LETTER PHASE-C WANGKUOQ	[3A60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16892, 0x003F };
    uint32_t const ces[9] = { 0x3A60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_139)
{
    // 16892 0061;	
    // (𖢒) BAMUM LETTER PHASE-C WANGKUOQ	[3A60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16892, 0x0061 };
    uint32_t const ces[9] = { 0x3A60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_140)
{
    // 16892 0041;	
    // (𖢒) BAMUM LETTER PHASE-C WANGKUOQ	[3A60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16892, 0x0041 };
    uint32_t const ces[9] = { 0x3A60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_141)
{
    // 16892 0062;	
    // (𖢒) BAMUM LETTER PHASE-C WANGKUOQ	[3A60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16892, 0x0062 };
    uint32_t const ces[9] = { 0x3A60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_142)
{
    // 16893 0021;	
    // (𖢓) BAMUM LETTER PHASE-C NGGEN	[3A61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16893, 0x0021 };
    uint32_t const ces[9] = { 0x3A61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_143)
{
    // 16893 003F;	
    // (𖢓) BAMUM LETTER PHASE-C NGGEN	[3A61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16893, 0x003F };
    uint32_t const ces[9] = { 0x3A61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_144)
{
    // 16893 0061;	
    // (𖢓) BAMUM LETTER PHASE-C NGGEN	[3A61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16893, 0x0061 };
    uint32_t const ces[9] = { 0x3A61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_145)
{
    // 16893 0041;	
    // (𖢓) BAMUM LETTER PHASE-C NGGEN	[3A61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16893, 0x0041 };
    uint32_t const ces[9] = { 0x3A61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_146)
{
    // 16893 0062;	
    // (𖢓) BAMUM LETTER PHASE-C NGGEN	[3A61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16893, 0x0062 };
    uint32_t const ces[9] = { 0x3A61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_147)
{
    // 16894 0021;	
    // (𖢔) BAMUM LETTER PHASE-C NDEUAEREE	[3A62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16894, 0x0021 };
    uint32_t const ces[9] = { 0x3A62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_148)
{
    // 16894 003F;	
    // (𖢔) BAMUM LETTER PHASE-C NDEUAEREE	[3A62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16894, 0x003F };
    uint32_t const ces[9] = { 0x3A62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_149)
{
    // 16894 0061;	
    // (𖢔) BAMUM LETTER PHASE-C NDEUAEREE	[3A62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16894, 0x0061 };
    uint32_t const ces[9] = { 0x3A62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_150)
{
    // 16894 0041;	
    // (𖢔) BAMUM LETTER PHASE-C NDEUAEREE	[3A62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16894, 0x0041 };
    uint32_t const ces[9] = { 0x3A62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_151)
{
    // 16894 0062;	
    // (𖢔) BAMUM LETTER PHASE-C NDEUAEREE	[3A62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16894, 0x0062 };
    uint32_t const ces[9] = { 0x3A62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_152)
{
    // 16895 0021;	
    // (𖢕) BAMUM LETTER PHASE-C NGKAQ	[3A63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16895, 0x0021 };
    uint32_t const ces[9] = { 0x3A63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_153)
{
    // 16895 003F;	
    // (𖢕) BAMUM LETTER PHASE-C NGKAQ	[3A63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16895, 0x003F };
    uint32_t const ces[9] = { 0x3A63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_154)
{
    // 16895 0061;	
    // (𖢕) BAMUM LETTER PHASE-C NGKAQ	[3A63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16895, 0x0061 };
    uint32_t const ces[9] = { 0x3A63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_155)
{
    // 16895 0041;	
    // (𖢕) BAMUM LETTER PHASE-C NGKAQ	[3A63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16895, 0x0041 };
    uint32_t const ces[9] = { 0x3A63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_156)
{
    // 16895 0062;	
    // (𖢕) BAMUM LETTER PHASE-C NGKAQ	[3A63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16895, 0x0062 };
    uint32_t const ces[9] = { 0x3A63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_157)
{
    // 16896 0021;	
    // (𖢖) BAMUM LETTER PHASE-C GHARAE	[3A64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16896, 0x0021 };
    uint32_t const ces[9] = { 0x3A64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_158)
{
    // 16896 003F;	
    // (𖢖) BAMUM LETTER PHASE-C GHARAE	[3A64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16896, 0x003F };
    uint32_t const ces[9] = { 0x3A64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_159)
{
    // 16896 0061;	
    // (𖢖) BAMUM LETTER PHASE-C GHARAE	[3A64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16896, 0x0061 };
    uint32_t const ces[9] = { 0x3A64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_160)
{
    // 16896 0041;	
    // (𖢖) BAMUM LETTER PHASE-C GHARAE	[3A64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16896, 0x0041 };
    uint32_t const ces[9] = { 0x3A64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_161)
{
    // 16896 0062;	
    // (𖢖) BAMUM LETTER PHASE-C GHARAE	[3A64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16896, 0x0062 };
    uint32_t const ces[9] = { 0x3A64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_162)
{
    // 16897 0021;	
    // (𖢗) BAMUM LETTER PHASE-C MBEEKEET	[3A65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16897, 0x0021 };
    uint32_t const ces[9] = { 0x3A65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_163)
{
    // 16897 003F;	
    // (𖢗) BAMUM LETTER PHASE-C MBEEKEET	[3A65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16897, 0x003F };
    uint32_t const ces[9] = { 0x3A65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_164)
{
    // 16897 0061;	
    // (𖢗) BAMUM LETTER PHASE-C MBEEKEET	[3A65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16897, 0x0061 };
    uint32_t const ces[9] = { 0x3A65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_165)
{
    // 16897 0041;	
    // (𖢗) BAMUM LETTER PHASE-C MBEEKEET	[3A65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16897, 0x0041 };
    uint32_t const ces[9] = { 0x3A65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_166)
{
    // 16897 0062;	
    // (𖢗) BAMUM LETTER PHASE-C MBEEKEET	[3A65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16897, 0x0062 };
    uint32_t const ces[9] = { 0x3A65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_167)
{
    // 16898 0021;	
    // (𖢘) BAMUM LETTER PHASE-C GBAYI	[3A66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16898, 0x0021 };
    uint32_t const ces[9] = { 0x3A66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_168)
{
    // 16898 003F;	
    // (𖢘) BAMUM LETTER PHASE-C GBAYI	[3A66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16898, 0x003F };
    uint32_t const ces[9] = { 0x3A66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_169)
{
    // 16898 0061;	
    // (𖢘) BAMUM LETTER PHASE-C GBAYI	[3A66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16898, 0x0061 };
    uint32_t const ces[9] = { 0x3A66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_170)
{
    // 16898 0041;	
    // (𖢘) BAMUM LETTER PHASE-C GBAYI	[3A66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16898, 0x0041 };
    uint32_t const ces[9] = { 0x3A66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_171)
{
    // 16898 0062;	
    // (𖢘) BAMUM LETTER PHASE-C GBAYI	[3A66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16898, 0x0062 };
    uint32_t const ces[9] = { 0x3A66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_172)
{
    // 16899 0021;	
    // (𖢙) BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN	[3A67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16899, 0x0021 };
    uint32_t const ces[9] = { 0x3A67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_173)
{
    // 16899 003F;	
    // (𖢙) BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN	[3A67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16899, 0x003F };
    uint32_t const ces[9] = { 0x3A67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_174)
{
    // 16899 0061;	
    // (𖢙) BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN	[3A67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16899, 0x0061 };
    uint32_t const ces[9] = { 0x3A67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_175)
{
    // 16899 0041;	
    // (𖢙) BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN	[3A67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16899, 0x0041 };
    uint32_t const ces[9] = { 0x3A67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_176)
{
    // 16899 0062;	
    // (𖢙) BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN	[3A67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16899, 0x0062 };
    uint32_t const ces[9] = { 0x3A67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_177)
{
    // 1689A 0021;	
    // (𖢚) BAMUM LETTER PHASE-C NTU MBIT	[3A68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689A, 0x0021 };
    uint32_t const ces[9] = { 0x3A68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_178)
{
    // 1689A 003F;	
    // (𖢚) BAMUM LETTER PHASE-C NTU MBIT	[3A68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689A, 0x003F };
    uint32_t const ces[9] = { 0x3A68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_179)
{
    // 1689A 0061;	
    // (𖢚) BAMUM LETTER PHASE-C NTU MBIT	[3A68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689A, 0x0061 };
    uint32_t const ces[9] = { 0x3A68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_180)
{
    // 1689A 0041;	
    // (𖢚) BAMUM LETTER PHASE-C NTU MBIT	[3A68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689A, 0x0041 };
    uint32_t const ces[9] = { 0x3A68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_181)
{
    // 1689A 0062;	
    // (𖢚) BAMUM LETTER PHASE-C NTU MBIT	[3A68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689A, 0x0062 };
    uint32_t const ces[9] = { 0x3A68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_182)
{
    // 1689B 0021;	
    // (𖢛) BAMUM LETTER PHASE-C MBEUM	[3A69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689B, 0x0021 };
    uint32_t const ces[9] = { 0x3A69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_183)
{
    // 1689B 003F;	
    // (𖢛) BAMUM LETTER PHASE-C MBEUM	[3A69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689B, 0x003F };
    uint32_t const ces[9] = { 0x3A69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_184)
{
    // 1689B 0061;	
    // (𖢛) BAMUM LETTER PHASE-C MBEUM	[3A69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689B, 0x0061 };
    uint32_t const ces[9] = { 0x3A69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_185)
{
    // 1689B 0041;	
    // (𖢛) BAMUM LETTER PHASE-C MBEUM	[3A69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689B, 0x0041 };
    uint32_t const ces[9] = { 0x3A69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_186)
{
    // 1689B 0062;	
    // (𖢛) BAMUM LETTER PHASE-C MBEUM	[3A69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689B, 0x0062 };
    uint32_t const ces[9] = { 0x3A69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_187)
{
    // 1689C 0021;	
    // (𖢜) BAMUM LETTER PHASE-C PIRIEEN	[3A6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689C, 0x0021 };
    uint32_t const ces[9] = { 0x3A6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_188)
{
    // 1689C 003F;	
    // (𖢜) BAMUM LETTER PHASE-C PIRIEEN	[3A6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689C, 0x003F };
    uint32_t const ces[9] = { 0x3A6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_189)
{
    // 1689C 0061;	
    // (𖢜) BAMUM LETTER PHASE-C PIRIEEN	[3A6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689C, 0x0061 };
    uint32_t const ces[9] = { 0x3A6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_190)
{
    // 1689C 0041;	
    // (𖢜) BAMUM LETTER PHASE-C PIRIEEN	[3A6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689C, 0x0041 };
    uint32_t const ces[9] = { 0x3A6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_191)
{
    // 1689C 0062;	
    // (𖢜) BAMUM LETTER PHASE-C PIRIEEN	[3A6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689C, 0x0062 };
    uint32_t const ces[9] = { 0x3A6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_192)
{
    // 1689D 0021;	
    // (𖢝) BAMUM LETTER PHASE-C NDOMBU	[3A6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689D, 0x0021 };
    uint32_t const ces[9] = { 0x3A6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_193)
{
    // 1689D 003F;	
    // (𖢝) BAMUM LETTER PHASE-C NDOMBU	[3A6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689D, 0x003F };
    uint32_t const ces[9] = { 0x3A6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_194)
{
    // 1689D 0061;	
    // (𖢝) BAMUM LETTER PHASE-C NDOMBU	[3A6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689D, 0x0061 };
    uint32_t const ces[9] = { 0x3A6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_195)
{
    // 1689D 0041;	
    // (𖢝) BAMUM LETTER PHASE-C NDOMBU	[3A6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689D, 0x0041 };
    uint32_t const ces[9] = { 0x3A6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_196)
{
    // 1689D 0062;	
    // (𖢝) BAMUM LETTER PHASE-C NDOMBU	[3A6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689D, 0x0062 };
    uint32_t const ces[9] = { 0x3A6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_197)
{
    // 1689E 0021;	
    // (𖢞) BAMUM LETTER PHASE-C MBAA CABBAGE-TREE	[3A6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689E, 0x0021 };
    uint32_t const ces[9] = { 0x3A6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_198)
{
    // 1689E 003F;	
    // (𖢞) BAMUM LETTER PHASE-C MBAA CABBAGE-TREE	[3A6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689E, 0x003F };
    uint32_t const ces[9] = { 0x3A6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_199)
{
    // 1689E 0061;	
    // (𖢞) BAMUM LETTER PHASE-C MBAA CABBAGE-TREE	[3A6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689E, 0x0061 };
    uint32_t const ces[9] = { 0x3A6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_200)
{
    // 1689E 0041;	
    // (𖢞) BAMUM LETTER PHASE-C MBAA CABBAGE-TREE	[3A6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689E, 0x0041 };
    uint32_t const ces[9] = { 0x3A6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_201)
{
    // 1689E 0062;	
    // (𖢞) BAMUM LETTER PHASE-C MBAA CABBAGE-TREE	[3A6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689E, 0x0062 };
    uint32_t const ces[9] = { 0x3A6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_202)
{
    // 1689F 0021;	
    // (𖢟) BAMUM LETTER PHASE-C KEUSHEUAEP	[3A6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689F, 0x0021 };
    uint32_t const ces[9] = { 0x3A6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_203)
{
    // 1689F 003F;	
    // (𖢟) BAMUM LETTER PHASE-C KEUSHEUAEP	[3A6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689F, 0x003F };
    uint32_t const ces[9] = { 0x3A6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_204)
{
    // 1689F 0061;	
    // (𖢟) BAMUM LETTER PHASE-C KEUSHEUAEP	[3A6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689F, 0x0061 };
    uint32_t const ces[9] = { 0x3A6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_205)
{
    // 1689F 0041;	
    // (𖢟) BAMUM LETTER PHASE-C KEUSHEUAEP	[3A6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1689F, 0x0041 };
    uint32_t const ces[9] = { 0x3A6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_206)
{
    // 1689F 0062;	
    // (𖢟) BAMUM LETTER PHASE-C KEUSHEUAEP	[3A6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1689F, 0x0062 };
    uint32_t const ces[9] = { 0x3A6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_207)
{
    // 168A0 0021;	
    // (𖢠) BAMUM LETTER PHASE-C GHAP	[3A6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A0, 0x0021 };
    uint32_t const ces[9] = { 0x3A6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_208)
{
    // 168A0 003F;	
    // (𖢠) BAMUM LETTER PHASE-C GHAP	[3A6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A0, 0x003F };
    uint32_t const ces[9] = { 0x3A6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_209)
{
    // 168A0 0061;	
    // (𖢠) BAMUM LETTER PHASE-C GHAP	[3A6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A0, 0x0061 };
    uint32_t const ces[9] = { 0x3A6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_210)
{
    // 168A0 0041;	
    // (𖢠) BAMUM LETTER PHASE-C GHAP	[3A6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A0, 0x0041 };
    uint32_t const ces[9] = { 0x3A6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_211)
{
    // 168A0 0062;	
    // (𖢠) BAMUM LETTER PHASE-C GHAP	[3A6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A0, 0x0062 };
    uint32_t const ces[9] = { 0x3A6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_212)
{
    // 168A1 0021;	
    // (𖢡) BAMUM LETTER PHASE-C KEUKAQ	[3A6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A1, 0x0021 };
    uint32_t const ces[9] = { 0x3A6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_213)
{
    // 168A1 003F;	
    // (𖢡) BAMUM LETTER PHASE-C KEUKAQ	[3A6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A1, 0x003F };
    uint32_t const ces[9] = { 0x3A6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_214)
{
    // 168A1 0061;	
    // (𖢡) BAMUM LETTER PHASE-C KEUKAQ	[3A6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A1, 0x0061 };
    uint32_t const ces[9] = { 0x3A6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_215)
{
    // 168A1 0041;	
    // (𖢡) BAMUM LETTER PHASE-C KEUKAQ	[3A6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A1, 0x0041 };
    uint32_t const ces[9] = { 0x3A6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_216)
{
    // 168A1 0062;	
    // (𖢡) BAMUM LETTER PHASE-C KEUKAQ	[3A6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A1, 0x0062 };
    uint32_t const ces[9] = { 0x3A6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_217)
{
    // 168A2 0021;	
    // (𖢢) BAMUM LETTER PHASE-C YU MUOMAE	[3A70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A2, 0x0021 };
    uint32_t const ces[9] = { 0x3A70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_218)
{
    // 168A2 003F;	
    // (𖢢) BAMUM LETTER PHASE-C YU MUOMAE	[3A70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A2, 0x003F };
    uint32_t const ces[9] = { 0x3A70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_219)
{
    // 168A2 0061;	
    // (𖢢) BAMUM LETTER PHASE-C YU MUOMAE	[3A70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A2, 0x0061 };
    uint32_t const ces[9] = { 0x3A70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_220)
{
    // 168A2 0041;	
    // (𖢢) BAMUM LETTER PHASE-C YU MUOMAE	[3A70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A2, 0x0041 };
    uint32_t const ces[9] = { 0x3A70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_221)
{
    // 168A2 0062;	
    // (𖢢) BAMUM LETTER PHASE-C YU MUOMAE	[3A70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A2, 0x0062 };
    uint32_t const ces[9] = { 0x3A70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_222)
{
    // 168A3 0021;	
    // (𖢣) BAMUM LETTER PHASE-C NZEUM	[3A71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A3, 0x0021 };
    uint32_t const ces[9] = { 0x3A71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_223)
{
    // 168A3 003F;	
    // (𖢣) BAMUM LETTER PHASE-C NZEUM	[3A71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A3, 0x003F };
    uint32_t const ces[9] = { 0x3A71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_224)
{
    // 168A3 0061;	
    // (𖢣) BAMUM LETTER PHASE-C NZEUM	[3A71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A3, 0x0061 };
    uint32_t const ces[9] = { 0x3A71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_225)
{
    // 168A3 0041;	
    // (𖢣) BAMUM LETTER PHASE-C NZEUM	[3A71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A3, 0x0041 };
    uint32_t const ces[9] = { 0x3A71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_226)
{
    // 168A3 0062;	
    // (𖢣) BAMUM LETTER PHASE-C NZEUM	[3A71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A3, 0x0062 };
    uint32_t const ces[9] = { 0x3A71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_227)
{
    // 168A4 0021;	
    // (𖢤) BAMUM LETTER PHASE-C MBUE	[3A72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A4, 0x0021 };
    uint32_t const ces[9] = { 0x3A72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_228)
{
    // 168A4 003F;	
    // (𖢤) BAMUM LETTER PHASE-C MBUE	[3A72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A4, 0x003F };
    uint32_t const ces[9] = { 0x3A72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_229)
{
    // 168A4 0061;	
    // (𖢤) BAMUM LETTER PHASE-C MBUE	[3A72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A4, 0x0061 };
    uint32_t const ces[9] = { 0x3A72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_230)
{
    // 168A4 0041;	
    // (𖢤) BAMUM LETTER PHASE-C MBUE	[3A72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A4, 0x0041 };
    uint32_t const ces[9] = { 0x3A72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_231)
{
    // 168A4 0062;	
    // (𖢤) BAMUM LETTER PHASE-C MBUE	[3A72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A4, 0x0062 };
    uint32_t const ces[9] = { 0x3A72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_232)
{
    // 168A5 0021;	
    // (𖢥) BAMUM LETTER PHASE-C NSEUAEN	[3A73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A5, 0x0021 };
    uint32_t const ces[9] = { 0x3A73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_233)
{
    // 168A5 003F;	
    // (𖢥) BAMUM LETTER PHASE-C NSEUAEN	[3A73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A5, 0x003F };
    uint32_t const ces[9] = { 0x3A73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_234)
{
    // 168A5 0061;	
    // (𖢥) BAMUM LETTER PHASE-C NSEUAEN	[3A73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A5, 0x0061 };
    uint32_t const ces[9] = { 0x3A73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_235)
{
    // 168A5 0041;	
    // (𖢥) BAMUM LETTER PHASE-C NSEUAEN	[3A73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A5, 0x0041 };
    uint32_t const ces[9] = { 0x3A73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_236)
{
    // 168A5 0062;	
    // (𖢥) BAMUM LETTER PHASE-C NSEUAEN	[3A73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A5, 0x0062 };
    uint32_t const ces[9] = { 0x3A73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_237)
{
    // 168A6 0021;	
    // (𖢦) BAMUM LETTER PHASE-C MBIT	[3A74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A6, 0x0021 };
    uint32_t const ces[9] = { 0x3A74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_238)
{
    // 168A6 003F;	
    // (𖢦) BAMUM LETTER PHASE-C MBIT	[3A74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A6, 0x003F };
    uint32_t const ces[9] = { 0x3A74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_239)
{
    // 168A6 0061;	
    // (𖢦) BAMUM LETTER PHASE-C MBIT	[3A74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A6, 0x0061 };
    uint32_t const ces[9] = { 0x3A74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_240)
{
    // 168A6 0041;	
    // (𖢦) BAMUM LETTER PHASE-C MBIT	[3A74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A6, 0x0041 };
    uint32_t const ces[9] = { 0x3A74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_241)
{
    // 168A6 0062;	
    // (𖢦) BAMUM LETTER PHASE-C MBIT	[3A74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A6, 0x0062 };
    uint32_t const ces[9] = { 0x3A74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_242)
{
    // 168A7 0021;	
    // (𖢧) BAMUM LETTER PHASE-C YEUQ	[3A75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A7, 0x0021 };
    uint32_t const ces[9] = { 0x3A75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_243)
{
    // 168A7 003F;	
    // (𖢧) BAMUM LETTER PHASE-C YEUQ	[3A75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A7, 0x003F };
    uint32_t const ces[9] = { 0x3A75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_244)
{
    // 168A7 0061;	
    // (𖢧) BAMUM LETTER PHASE-C YEUQ	[3A75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A7, 0x0061 };
    uint32_t const ces[9] = { 0x3A75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_245)
{
    // 168A7 0041;	
    // (𖢧) BAMUM LETTER PHASE-C YEUQ	[3A75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A7, 0x0041 };
    uint32_t const ces[9] = { 0x3A75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_246)
{
    // 168A7 0062;	
    // (𖢧) BAMUM LETTER PHASE-C YEUQ	[3A75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A7, 0x0062 };
    uint32_t const ces[9] = { 0x3A75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_247)
{
    // 168A8 0021;	
    // (𖢨) BAMUM LETTER PHASE-C KPARAQ	[3A76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A8, 0x0021 };
    uint32_t const ces[9] = { 0x3A76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_248)
{
    // 168A8 003F;	
    // (𖢨) BAMUM LETTER PHASE-C KPARAQ	[3A76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A8, 0x003F };
    uint32_t const ces[9] = { 0x3A76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_249)
{
    // 168A8 0061;	
    // (𖢨) BAMUM LETTER PHASE-C KPARAQ	[3A76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A8, 0x0061 };
    uint32_t const ces[9] = { 0x3A76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_250)
{
    // 168A8 0041;	
    // (𖢨) BAMUM LETTER PHASE-C KPARAQ	[3A76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A8, 0x0041 };
    uint32_t const ces[9] = { 0x3A76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_251)
{
    // 168A8 0062;	
    // (𖢨) BAMUM LETTER PHASE-C KPARAQ	[3A76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A8, 0x0062 };
    uint32_t const ces[9] = { 0x3A76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_252)
{
    // 168A9 0021;	
    // (𖢩) BAMUM LETTER PHASE-C KAA	[3A77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A9, 0x0021 };
    uint32_t const ces[9] = { 0x3A77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_253)
{
    // 168A9 003F;	
    // (𖢩) BAMUM LETTER PHASE-C KAA	[3A77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A9, 0x003F };
    uint32_t const ces[9] = { 0x3A77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_254)
{
    // 168A9 0061;	
    // (𖢩) BAMUM LETTER PHASE-C KAA	[3A77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A9, 0x0061 };
    uint32_t const ces[9] = { 0x3A77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_255)
{
    // 168A9 0041;	
    // (𖢩) BAMUM LETTER PHASE-C KAA	[3A77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168A9, 0x0041 };
    uint32_t const ces[9] = { 0x3A77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_256)
{
    // 168A9 0062;	
    // (𖢩) BAMUM LETTER PHASE-C KAA	[3A77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168A9, 0x0062 };
    uint32_t const ces[9] = { 0x3A77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_257)
{
    // 168AA 0021;	
    // (𖢪) BAMUM LETTER PHASE-C SEUX	[3A78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AA, 0x0021 };
    uint32_t const ces[9] = { 0x3A78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_258)
{
    // 168AA 003F;	
    // (𖢪) BAMUM LETTER PHASE-C SEUX	[3A78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AA, 0x003F };
    uint32_t const ces[9] = { 0x3A78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_259)
{
    // 168AA 0061;	
    // (𖢪) BAMUM LETTER PHASE-C SEUX	[3A78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AA, 0x0061 };
    uint32_t const ces[9] = { 0x3A78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_260)
{
    // 168AA 0041;	
    // (𖢪) BAMUM LETTER PHASE-C SEUX	[3A78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AA, 0x0041 };
    uint32_t const ces[9] = { 0x3A78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_261)
{
    // 168AA 0062;	
    // (𖢪) BAMUM LETTER PHASE-C SEUX	[3A78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AA, 0x0062 };
    uint32_t const ces[9] = { 0x3A78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_262)
{
    // 168AB 0021;	
    // (𖢫) BAMUM LETTER PHASE-C NDIDA	[3A79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AB, 0x0021 };
    uint32_t const ces[9] = { 0x3A79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_263)
{
    // 168AB 003F;	
    // (𖢫) BAMUM LETTER PHASE-C NDIDA	[3A79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AB, 0x003F };
    uint32_t const ces[9] = { 0x3A79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_264)
{
    // 168AB 0061;	
    // (𖢫) BAMUM LETTER PHASE-C NDIDA	[3A79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AB, 0x0061 };
    uint32_t const ces[9] = { 0x3A79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_265)
{
    // 168AB 0041;	
    // (𖢫) BAMUM LETTER PHASE-C NDIDA	[3A79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AB, 0x0041 };
    uint32_t const ces[9] = { 0x3A79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_266)
{
    // 168AB 0062;	
    // (𖢫) BAMUM LETTER PHASE-C NDIDA	[3A79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AB, 0x0062 };
    uint32_t const ces[9] = { 0x3A79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_267)
{
    // 168AC 0021;	
    // (𖢬) BAMUM LETTER PHASE-C TAASHAE	[3A7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AC, 0x0021 };
    uint32_t const ces[9] = { 0x3A7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_268)
{
    // 168AC 003F;	
    // (𖢬) BAMUM LETTER PHASE-C TAASHAE	[3A7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AC, 0x003F };
    uint32_t const ces[9] = { 0x3A7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_269)
{
    // 168AC 0061;	
    // (𖢬) BAMUM LETTER PHASE-C TAASHAE	[3A7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AC, 0x0061 };
    uint32_t const ces[9] = { 0x3A7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_270)
{
    // 168AC 0041;	
    // (𖢬) BAMUM LETTER PHASE-C TAASHAE	[3A7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AC, 0x0041 };
    uint32_t const ces[9] = { 0x3A7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_271)
{
    // 168AC 0062;	
    // (𖢬) BAMUM LETTER PHASE-C TAASHAE	[3A7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AC, 0x0062 };
    uint32_t const ces[9] = { 0x3A7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_272)
{
    // 168AD 0021;	
    // (𖢭) BAMUM LETTER PHASE-C NJUEQ	[3A7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AD, 0x0021 };
    uint32_t const ces[9] = { 0x3A7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_273)
{
    // 168AD 003F;	
    // (𖢭) BAMUM LETTER PHASE-C NJUEQ	[3A7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AD, 0x003F };
    uint32_t const ces[9] = { 0x3A7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_274)
{
    // 168AD 0061;	
    // (𖢭) BAMUM LETTER PHASE-C NJUEQ	[3A7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AD, 0x0061 };
    uint32_t const ces[9] = { 0x3A7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_275)
{
    // 168AD 0041;	
    // (𖢭) BAMUM LETTER PHASE-C NJUEQ	[3A7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AD, 0x0041 };
    uint32_t const ces[9] = { 0x3A7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_276)
{
    // 168AD 0062;	
    // (𖢭) BAMUM LETTER PHASE-C NJUEQ	[3A7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AD, 0x0062 };
    uint32_t const ces[9] = { 0x3A7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_277)
{
    // 168AE 0021;	
    // (𖢮) BAMUM LETTER PHASE-C TITA YUE	[3A7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AE, 0x0021 };
    uint32_t const ces[9] = { 0x3A7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_278)
{
    // 168AE 003F;	
    // (𖢮) BAMUM LETTER PHASE-C TITA YUE	[3A7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AE, 0x003F };
    uint32_t const ces[9] = { 0x3A7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_279)
{
    // 168AE 0061;	
    // (𖢮) BAMUM LETTER PHASE-C TITA YUE	[3A7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AE, 0x0061 };
    uint32_t const ces[9] = { 0x3A7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_280)
{
    // 168AE 0041;	
    // (𖢮) BAMUM LETTER PHASE-C TITA YUE	[3A7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AE, 0x0041 };
    uint32_t const ces[9] = { 0x3A7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_281)
{
    // 168AE 0062;	
    // (𖢮) BAMUM LETTER PHASE-C TITA YUE	[3A7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AE, 0x0062 };
    uint32_t const ces[9] = { 0x3A7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_282)
{
    // 168AF 0021;	
    // (𖢯) BAMUM LETTER PHASE-C SUAET	[3A7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AF, 0x0021 };
    uint32_t const ces[9] = { 0x3A7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_283)
{
    // 168AF 003F;	
    // (𖢯) BAMUM LETTER PHASE-C SUAET	[3A7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AF, 0x003F };
    uint32_t const ces[9] = { 0x3A7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_284)
{
    // 168AF 0061;	
    // (𖢯) BAMUM LETTER PHASE-C SUAET	[3A7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AF, 0x0061 };
    uint32_t const ces[9] = { 0x3A7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_285)
{
    // 168AF 0041;	
    // (𖢯) BAMUM LETTER PHASE-C SUAET	[3A7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168AF, 0x0041 };
    uint32_t const ces[9] = { 0x3A7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_286)
{
    // 168AF 0062;	
    // (𖢯) BAMUM LETTER PHASE-C SUAET	[3A7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168AF, 0x0062 };
    uint32_t const ces[9] = { 0x3A7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_287)
{
    // 168B0 0021;	
    // (𖢰) BAMUM LETTER PHASE-C NGGUAEN NYAM	[3A7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B0, 0x0021 };
    uint32_t const ces[9] = { 0x3A7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_288)
{
    // 168B0 003F;	
    // (𖢰) BAMUM LETTER PHASE-C NGGUAEN NYAM	[3A7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B0, 0x003F };
    uint32_t const ces[9] = { 0x3A7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_289)
{
    // 168B0 0061;	
    // (𖢰) BAMUM LETTER PHASE-C NGGUAEN NYAM	[3A7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B0, 0x0061 };
    uint32_t const ces[9] = { 0x3A7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_290)
{
    // 168B0 0041;	
    // (𖢰) BAMUM LETTER PHASE-C NGGUAEN NYAM	[3A7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B0, 0x0041 };
    uint32_t const ces[9] = { 0x3A7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_291)
{
    // 168B0 0062;	
    // (𖢰) BAMUM LETTER PHASE-C NGGUAEN NYAM	[3A7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B0, 0x0062 };
    uint32_t const ces[9] = { 0x3A7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_292)
{
    // 168B1 0021;	
    // (𖢱) BAMUM LETTER PHASE-C VEUX	[3A7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B1, 0x0021 };
    uint32_t const ces[9] = { 0x3A7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_293)
{
    // 168B1 003F;	
    // (𖢱) BAMUM LETTER PHASE-C VEUX	[3A7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B1, 0x003F };
    uint32_t const ces[9] = { 0x3A7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_294)
{
    // 168B1 0061;	
    // (𖢱) BAMUM LETTER PHASE-C VEUX	[3A7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B1, 0x0061 };
    uint32_t const ces[9] = { 0x3A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_295)
{
    // 168B1 0041;	
    // (𖢱) BAMUM LETTER PHASE-C VEUX	[3A7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B1, 0x0041 };
    uint32_t const ces[9] = { 0x3A7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_296)
{
    // 168B1 0062;	
    // (𖢱) BAMUM LETTER PHASE-C VEUX	[3A7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B1, 0x0062 };
    uint32_t const ces[9] = { 0x3A7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_297)
{
    // 168B2 0021;	
    // (𖢲) BAMUM LETTER PHASE-C NANSANAQ	[3A80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B2, 0x0021 };
    uint32_t const ces[9] = { 0x3A80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_298)
{
    // 168B2 003F;	
    // (𖢲) BAMUM LETTER PHASE-C NANSANAQ	[3A80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B2, 0x003F };
    uint32_t const ces[9] = { 0x3A80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_299)
{
    // 168B2 0061;	
    // (𖢲) BAMUM LETTER PHASE-C NANSANAQ	[3A80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B2, 0x0061 };
    uint32_t const ces[9] = { 0x3A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_300)
{
    // 168B2 0041;	
    // (𖢲) BAMUM LETTER PHASE-C NANSANAQ	[3A80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B2, 0x0041 };
    uint32_t const ces[9] = { 0x3A80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_301)
{
    // 168B2 0062;	
    // (𖢲) BAMUM LETTER PHASE-C NANSANAQ	[3A80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B2, 0x0062 };
    uint32_t const ces[9] = { 0x3A80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_302)
{
    // 168B3 0021;	
    // (𖢳) BAMUM LETTER PHASE-C MA KEUAERI	[3A81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B3, 0x0021 };
    uint32_t const ces[9] = { 0x3A81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_303)
{
    // 168B3 003F;	
    // (𖢳) BAMUM LETTER PHASE-C MA KEUAERI	[3A81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B3, 0x003F };
    uint32_t const ces[9] = { 0x3A81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_304)
{
    // 168B3 0061;	
    // (𖢳) BAMUM LETTER PHASE-C MA KEUAERI	[3A81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B3, 0x0061 };
    uint32_t const ces[9] = { 0x3A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_305)
{
    // 168B3 0041;	
    // (𖢳) BAMUM LETTER PHASE-C MA KEUAERI	[3A81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B3, 0x0041 };
    uint32_t const ces[9] = { 0x3A81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_306)
{
    // 168B3 0062;	
    // (𖢳) BAMUM LETTER PHASE-C MA KEUAERI	[3A81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B3, 0x0062 };
    uint32_t const ces[9] = { 0x3A81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_307)
{
    // 168B4 0021;	
    // (𖢴) BAMUM LETTER PHASE-C NTAA	[3A82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B4, 0x0021 };
    uint32_t const ces[9] = { 0x3A82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_308)
{
    // 168B4 003F;	
    // (𖢴) BAMUM LETTER PHASE-C NTAA	[3A82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B4, 0x003F };
    uint32_t const ces[9] = { 0x3A82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_309)
{
    // 168B4 0061;	
    // (𖢴) BAMUM LETTER PHASE-C NTAA	[3A82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B4, 0x0061 };
    uint32_t const ces[9] = { 0x3A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_310)
{
    // 168B4 0041;	
    // (𖢴) BAMUM LETTER PHASE-C NTAA	[3A82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B4, 0x0041 };
    uint32_t const ces[9] = { 0x3A82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_311)
{
    // 168B4 0062;	
    // (𖢴) BAMUM LETTER PHASE-C NTAA	[3A82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B4, 0x0062 };
    uint32_t const ces[9] = { 0x3A82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_312)
{
    // 168B5 0021;	
    // (𖢵) BAMUM LETTER PHASE-C NGGUON	[3A83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B5, 0x0021 };
    uint32_t const ces[9] = { 0x3A83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_313)
{
    // 168B5 003F;	
    // (𖢵) BAMUM LETTER PHASE-C NGGUON	[3A83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B5, 0x003F };
    uint32_t const ces[9] = { 0x3A83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_314)
{
    // 168B5 0061;	
    // (𖢵) BAMUM LETTER PHASE-C NGGUON	[3A83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B5, 0x0061 };
    uint32_t const ces[9] = { 0x3A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_315)
{
    // 168B5 0041;	
    // (𖢵) BAMUM LETTER PHASE-C NGGUON	[3A83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B5, 0x0041 };
    uint32_t const ces[9] = { 0x3A83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_316)
{
    // 168B5 0062;	
    // (𖢵) BAMUM LETTER PHASE-C NGGUON	[3A83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B5, 0x0062 };
    uint32_t const ces[9] = { 0x3A83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_317)
{
    // 168B6 0021;	
    // (𖢶) BAMUM LETTER PHASE-C LAP	[3A84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B6, 0x0021 };
    uint32_t const ces[9] = { 0x3A84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_318)
{
    // 168B6 003F;	
    // (𖢶) BAMUM LETTER PHASE-C LAP	[3A84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B6, 0x003F };
    uint32_t const ces[9] = { 0x3A84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_319)
{
    // 168B6 0061;	
    // (𖢶) BAMUM LETTER PHASE-C LAP	[3A84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B6, 0x0061 };
    uint32_t const ces[9] = { 0x3A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_320)
{
    // 168B6 0041;	
    // (𖢶) BAMUM LETTER PHASE-C LAP	[3A84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B6, 0x0041 };
    uint32_t const ces[9] = { 0x3A84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_321)
{
    // 168B6 0062;	
    // (𖢶) BAMUM LETTER PHASE-C LAP	[3A84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B6, 0x0062 };
    uint32_t const ces[9] = { 0x3A84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_322)
{
    // 168B7 0021;	
    // (𖢷) BAMUM LETTER PHASE-C MBIRIEEN	[3A85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B7, 0x0021 };
    uint32_t const ces[9] = { 0x3A85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_323)
{
    // 168B7 003F;	
    // (𖢷) BAMUM LETTER PHASE-C MBIRIEEN	[3A85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B7, 0x003F };
    uint32_t const ces[9] = { 0x3A85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_324)
{
    // 168B7 0061;	
    // (𖢷) BAMUM LETTER PHASE-C MBIRIEEN	[3A85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B7, 0x0061 };
    uint32_t const ces[9] = { 0x3A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_325)
{
    // 168B7 0041;	
    // (𖢷) BAMUM LETTER PHASE-C MBIRIEEN	[3A85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B7, 0x0041 };
    uint32_t const ces[9] = { 0x3A85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_326)
{
    // 168B7 0062;	
    // (𖢷) BAMUM LETTER PHASE-C MBIRIEEN	[3A85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B7, 0x0062 };
    uint32_t const ces[9] = { 0x3A85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_327)
{
    // 168B8 0021;	
    // (𖢸) BAMUM LETTER PHASE-C MGBASAQ	[3A86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B8, 0x0021 };
    uint32_t const ces[9] = { 0x3A86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_328)
{
    // 168B8 003F;	
    // (𖢸) BAMUM LETTER PHASE-C MGBASAQ	[3A86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B8, 0x003F };
    uint32_t const ces[9] = { 0x3A86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_329)
{
    // 168B8 0061;	
    // (𖢸) BAMUM LETTER PHASE-C MGBASAQ	[3A86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B8, 0x0061 };
    uint32_t const ces[9] = { 0x3A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_330)
{
    // 168B8 0041;	
    // (𖢸) BAMUM LETTER PHASE-C MGBASAQ	[3A86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B8, 0x0041 };
    uint32_t const ces[9] = { 0x3A86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_331)
{
    // 168B8 0062;	
    // (𖢸) BAMUM LETTER PHASE-C MGBASAQ	[3A86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B8, 0x0062 };
    uint32_t const ces[9] = { 0x3A86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_332)
{
    // 168B9 0021;	
    // (𖢹) BAMUM LETTER PHASE-C NTEUNGBA	[3A87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B9, 0x0021 };
    uint32_t const ces[9] = { 0x3A87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_333)
{
    // 168B9 003F;	
    // (𖢹) BAMUM LETTER PHASE-C NTEUNGBA	[3A87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B9, 0x003F };
    uint32_t const ces[9] = { 0x3A87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_334)
{
    // 168B9 0061;	
    // (𖢹) BAMUM LETTER PHASE-C NTEUNGBA	[3A87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B9, 0x0061 };
    uint32_t const ces[9] = { 0x3A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_335)
{
    // 168B9 0041;	
    // (𖢹) BAMUM LETTER PHASE-C NTEUNGBA	[3A87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168B9, 0x0041 };
    uint32_t const ces[9] = { 0x3A87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_336)
{
    // 168B9 0062;	
    // (𖢹) BAMUM LETTER PHASE-C NTEUNGBA	[3A87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168B9, 0x0062 };
    uint32_t const ces[9] = { 0x3A87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_337)
{
    // 168BA 0021;	
    // (𖢺) BAMUM LETTER PHASE-C TEUTEUX	[3A88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BA, 0x0021 };
    uint32_t const ces[9] = { 0x3A88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_338)
{
    // 168BA 003F;	
    // (𖢺) BAMUM LETTER PHASE-C TEUTEUX	[3A88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BA, 0x003F };
    uint32_t const ces[9] = { 0x3A88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_339)
{
    // 168BA 0061;	
    // (𖢺) BAMUM LETTER PHASE-C TEUTEUX	[3A88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BA, 0x0061 };
    uint32_t const ces[9] = { 0x3A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_340)
{
    // 168BA 0041;	
    // (𖢺) BAMUM LETTER PHASE-C TEUTEUX	[3A88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BA, 0x0041 };
    uint32_t const ces[9] = { 0x3A88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_341)
{
    // 168BA 0062;	
    // (𖢺) BAMUM LETTER PHASE-C TEUTEUX	[3A88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BA, 0x0062 };
    uint32_t const ces[9] = { 0x3A88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_342)
{
    // 168BB 0021;	
    // (𖢻) BAMUM LETTER PHASE-C NGGUM	[3A89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BB, 0x0021 };
    uint32_t const ces[9] = { 0x3A89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_343)
{
    // 168BB 003F;	
    // (𖢻) BAMUM LETTER PHASE-C NGGUM	[3A89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BB, 0x003F };
    uint32_t const ces[9] = { 0x3A89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_344)
{
    // 168BB 0061;	
    // (𖢻) BAMUM LETTER PHASE-C NGGUM	[3A89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BB, 0x0061 };
    uint32_t const ces[9] = { 0x3A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_345)
{
    // 168BB 0041;	
    // (𖢻) BAMUM LETTER PHASE-C NGGUM	[3A89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BB, 0x0041 };
    uint32_t const ces[9] = { 0x3A89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_346)
{
    // 168BB 0062;	
    // (𖢻) BAMUM LETTER PHASE-C NGGUM	[3A89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BB, 0x0062 };
    uint32_t const ces[9] = { 0x3A89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_347)
{
    // 168BC 0021;	
    // (𖢼) BAMUM LETTER PHASE-C FUE	[3A8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BC, 0x0021 };
    uint32_t const ces[9] = { 0x3A8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_348)
{
    // 168BC 003F;	
    // (𖢼) BAMUM LETTER PHASE-C FUE	[3A8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BC, 0x003F };
    uint32_t const ces[9] = { 0x3A8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_349)
{
    // 168BC 0061;	
    // (𖢼) BAMUM LETTER PHASE-C FUE	[3A8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BC, 0x0061 };
    uint32_t const ces[9] = { 0x3A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_350)
{
    // 168BC 0041;	
    // (𖢼) BAMUM LETTER PHASE-C FUE	[3A8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BC, 0x0041 };
    uint32_t const ces[9] = { 0x3A8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_351)
{
    // 168BC 0062;	
    // (𖢼) BAMUM LETTER PHASE-C FUE	[3A8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BC, 0x0062 };
    uint32_t const ces[9] = { 0x3A8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_352)
{
    // 168BD 0021;	
    // (𖢽) BAMUM LETTER PHASE-C NDEUT	[3A8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BD, 0x0021 };
    uint32_t const ces[9] = { 0x3A8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_353)
{
    // 168BD 003F;	
    // (𖢽) BAMUM LETTER PHASE-C NDEUT	[3A8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BD, 0x003F };
    uint32_t const ces[9] = { 0x3A8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_354)
{
    // 168BD 0061;	
    // (𖢽) BAMUM LETTER PHASE-C NDEUT	[3A8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BD, 0x0061 };
    uint32_t const ces[9] = { 0x3A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_355)
{
    // 168BD 0041;	
    // (𖢽) BAMUM LETTER PHASE-C NDEUT	[3A8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BD, 0x0041 };
    uint32_t const ces[9] = { 0x3A8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_356)
{
    // 168BD 0062;	
    // (𖢽) BAMUM LETTER PHASE-C NDEUT	[3A8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BD, 0x0062 };
    uint32_t const ces[9] = { 0x3A8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_357)
{
    // 168BE 0021;	
    // (𖢾) BAMUM LETTER PHASE-C NSA	[3A8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BE, 0x0021 };
    uint32_t const ces[9] = { 0x3A8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_358)
{
    // 168BE 003F;	
    // (𖢾) BAMUM LETTER PHASE-C NSA	[3A8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BE, 0x003F };
    uint32_t const ces[9] = { 0x3A8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_359)
{
    // 168BE 0061;	
    // (𖢾) BAMUM LETTER PHASE-C NSA	[3A8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BE, 0x0061 };
    uint32_t const ces[9] = { 0x3A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_360)
{
    // 168BE 0041;	
    // (𖢾) BAMUM LETTER PHASE-C NSA	[3A8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BE, 0x0041 };
    uint32_t const ces[9] = { 0x3A8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_361)
{
    // 168BE 0062;	
    // (𖢾) BAMUM LETTER PHASE-C NSA	[3A8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BE, 0x0062 };
    uint32_t const ces[9] = { 0x3A8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_362)
{
    // 168BF 0021;	
    // (𖢿) BAMUM LETTER PHASE-C NSHAQ	[3A8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BF, 0x0021 };
    uint32_t const ces[9] = { 0x3A8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_363)
{
    // 168BF 003F;	
    // (𖢿) BAMUM LETTER PHASE-C NSHAQ	[3A8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BF, 0x003F };
    uint32_t const ces[9] = { 0x3A8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_364)
{
    // 168BF 0061;	
    // (𖢿) BAMUM LETTER PHASE-C NSHAQ	[3A8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BF, 0x0061 };
    uint32_t const ces[9] = { 0x3A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_365)
{
    // 168BF 0041;	
    // (𖢿) BAMUM LETTER PHASE-C NSHAQ	[3A8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168BF, 0x0041 };
    uint32_t const ces[9] = { 0x3A8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_366)
{
    // 168BF 0062;	
    // (𖢿) BAMUM LETTER PHASE-C NSHAQ	[3A8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168BF, 0x0062 };
    uint32_t const ces[9] = { 0x3A8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_367)
{
    // 168C0 0021;	
    // (𖣀) BAMUM LETTER PHASE-C BUNG	[3A8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C0, 0x0021 };
    uint32_t const ces[9] = { 0x3A8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_368)
{
    // 168C0 003F;	
    // (𖣀) BAMUM LETTER PHASE-C BUNG	[3A8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C0, 0x003F };
    uint32_t const ces[9] = { 0x3A8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_369)
{
    // 168C0 0061;	
    // (𖣀) BAMUM LETTER PHASE-C BUNG	[3A8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C0, 0x0061 };
    uint32_t const ces[9] = { 0x3A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_370)
{
    // 168C0 0041;	
    // (𖣀) BAMUM LETTER PHASE-C BUNG	[3A8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C0, 0x0041 };
    uint32_t const ces[9] = { 0x3A8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_371)
{
    // 168C0 0062;	
    // (𖣀) BAMUM LETTER PHASE-C BUNG	[3A8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C0, 0x0062 };
    uint32_t const ces[9] = { 0x3A8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_372)
{
    // 168C1 0021;	
    // (𖣁) BAMUM LETTER PHASE-C VEUAEPEN	[3A8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C1, 0x0021 };
    uint32_t const ces[9] = { 0x3A8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_373)
{
    // 168C1 003F;	
    // (𖣁) BAMUM LETTER PHASE-C VEUAEPEN	[3A8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C1, 0x003F };
    uint32_t const ces[9] = { 0x3A8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_374)
{
    // 168C1 0061;	
    // (𖣁) BAMUM LETTER PHASE-C VEUAEPEN	[3A8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C1, 0x0061 };
    uint32_t const ces[9] = { 0x3A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_375)
{
    // 168C1 0041;	
    // (𖣁) BAMUM LETTER PHASE-C VEUAEPEN	[3A8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C1, 0x0041 };
    uint32_t const ces[9] = { 0x3A8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_376)
{
    // 168C1 0062;	
    // (𖣁) BAMUM LETTER PHASE-C VEUAEPEN	[3A8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C1, 0x0062 };
    uint32_t const ces[9] = { 0x3A8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_377)
{
    // 168C2 0021;	
    // (𖣂) BAMUM LETTER PHASE-C MBERAE	[3A90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C2, 0x0021 };
    uint32_t const ces[9] = { 0x3A90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_378)
{
    // 168C2 003F;	
    // (𖣂) BAMUM LETTER PHASE-C MBERAE	[3A90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C2, 0x003F };
    uint32_t const ces[9] = { 0x3A90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_379)
{
    // 168C2 0061;	
    // (𖣂) BAMUM LETTER PHASE-C MBERAE	[3A90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C2, 0x0061 };
    uint32_t const ces[9] = { 0x3A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_380)
{
    // 168C2 0041;	
    // (𖣂) BAMUM LETTER PHASE-C MBERAE	[3A90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C2, 0x0041 };
    uint32_t const ces[9] = { 0x3A90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_381)
{
    // 168C2 0062;	
    // (𖣂) BAMUM LETTER PHASE-C MBERAE	[3A90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C2, 0x0062 };
    uint32_t const ces[9] = { 0x3A90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_382)
{
    // 168C3 0021;	
    // (𖣃) BAMUM LETTER PHASE-C RU	[3A91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C3, 0x0021 };
    uint32_t const ces[9] = { 0x3A91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_383)
{
    // 168C3 003F;	
    // (𖣃) BAMUM LETTER PHASE-C RU	[3A91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C3, 0x003F };
    uint32_t const ces[9] = { 0x3A91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_384)
{
    // 168C3 0061;	
    // (𖣃) BAMUM LETTER PHASE-C RU	[3A91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C3, 0x0061 };
    uint32_t const ces[9] = { 0x3A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_385)
{
    // 168C3 0041;	
    // (𖣃) BAMUM LETTER PHASE-C RU	[3A91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C3, 0x0041 };
    uint32_t const ces[9] = { 0x3A91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_386)
{
    // 168C3 0062;	
    // (𖣃) BAMUM LETTER PHASE-C RU	[3A91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C3, 0x0062 };
    uint32_t const ces[9] = { 0x3A91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_387)
{
    // 168C4 0021;	
    // (𖣄) BAMUM LETTER PHASE-C NJAEM	[3A92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C4, 0x0021 };
    uint32_t const ces[9] = { 0x3A92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_388)
{
    // 168C4 003F;	
    // (𖣄) BAMUM LETTER PHASE-C NJAEM	[3A92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C4, 0x003F };
    uint32_t const ces[9] = { 0x3A92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_389)
{
    // 168C4 0061;	
    // (𖣄) BAMUM LETTER PHASE-C NJAEM	[3A92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C4, 0x0061 };
    uint32_t const ces[9] = { 0x3A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_390)
{
    // 168C4 0041;	
    // (𖣄) BAMUM LETTER PHASE-C NJAEM	[3A92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C4, 0x0041 };
    uint32_t const ces[9] = { 0x3A92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_391)
{
    // 168C4 0062;	
    // (𖣄) BAMUM LETTER PHASE-C NJAEM	[3A92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C4, 0x0062 };
    uint32_t const ces[9] = { 0x3A92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_392)
{
    // 168C5 0021;	
    // (𖣅) BAMUM LETTER PHASE-C LAM	[3A93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C5, 0x0021 };
    uint32_t const ces[9] = { 0x3A93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_393)
{
    // 168C5 003F;	
    // (𖣅) BAMUM LETTER PHASE-C LAM	[3A93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C5, 0x003F };
    uint32_t const ces[9] = { 0x3A93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_394)
{
    // 168C5 0061;	
    // (𖣅) BAMUM LETTER PHASE-C LAM	[3A93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C5, 0x0061 };
    uint32_t const ces[9] = { 0x3A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_395)
{
    // 168C5 0041;	
    // (𖣅) BAMUM LETTER PHASE-C LAM	[3A93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C5, 0x0041 };
    uint32_t const ces[9] = { 0x3A93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_396)
{
    // 168C5 0062;	
    // (𖣅) BAMUM LETTER PHASE-C LAM	[3A93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C5, 0x0062 };
    uint32_t const ces[9] = { 0x3A93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_397)
{
    // 168C6 0021;	
    // (𖣆) BAMUM LETTER PHASE-C TITUAEP	[3A94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C6, 0x0021 };
    uint32_t const ces[9] = { 0x3A94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_398)
{
    // 168C6 003F;	
    // (𖣆) BAMUM LETTER PHASE-C TITUAEP	[3A94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C6, 0x003F };
    uint32_t const ces[9] = { 0x3A94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_399)
{
    // 168C6 0061;	
    // (𖣆) BAMUM LETTER PHASE-C TITUAEP	[3A94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C6, 0x0061 };
    uint32_t const ces[9] = { 0x3A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_400)
{
    // 168C6 0041;	
    // (𖣆) BAMUM LETTER PHASE-C TITUAEP	[3A94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C6, 0x0041 };
    uint32_t const ces[9] = { 0x3A94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_401)
{
    // 168C6 0062;	
    // (𖣆) BAMUM LETTER PHASE-C TITUAEP	[3A94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C6, 0x0062 };
    uint32_t const ces[9] = { 0x3A94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_402)
{
    // 168C7 0021;	
    // (𖣇) BAMUM LETTER PHASE-C NSUOT NGOM	[3A95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C7, 0x0021 };
    uint32_t const ces[9] = { 0x3A95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_403)
{
    // 168C7 003F;	
    // (𖣇) BAMUM LETTER PHASE-C NSUOT NGOM	[3A95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C7, 0x003F };
    uint32_t const ces[9] = { 0x3A95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_404)
{
    // 168C7 0061;	
    // (𖣇) BAMUM LETTER PHASE-C NSUOT NGOM	[3A95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C7, 0x0061 };
    uint32_t const ces[9] = { 0x3A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_405)
{
    // 168C7 0041;	
    // (𖣇) BAMUM LETTER PHASE-C NSUOT NGOM	[3A95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C7, 0x0041 };
    uint32_t const ces[9] = { 0x3A95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_406)
{
    // 168C7 0062;	
    // (𖣇) BAMUM LETTER PHASE-C NSUOT NGOM	[3A95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C7, 0x0062 };
    uint32_t const ces[9] = { 0x3A95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_407)
{
    // 168C8 0021;	
    // (𖣈) BAMUM LETTER PHASE-C NJEEEE	[3A96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C8, 0x0021 };
    uint32_t const ces[9] = { 0x3A96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_408)
{
    // 168C8 003F;	
    // (𖣈) BAMUM LETTER PHASE-C NJEEEE	[3A96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C8, 0x003F };
    uint32_t const ces[9] = { 0x3A96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_409)
{
    // 168C8 0061;	
    // (𖣈) BAMUM LETTER PHASE-C NJEEEE	[3A96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C8, 0x0061 };
    uint32_t const ces[9] = { 0x3A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_410)
{
    // 168C8 0041;	
    // (𖣈) BAMUM LETTER PHASE-C NJEEEE	[3A96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C8, 0x0041 };
    uint32_t const ces[9] = { 0x3A96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_411)
{
    // 168C8 0062;	
    // (𖣈) BAMUM LETTER PHASE-C NJEEEE	[3A96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C8, 0x0062 };
    uint32_t const ces[9] = { 0x3A96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_412)
{
    // 168C9 0021;	
    // (𖣉) BAMUM LETTER PHASE-C KET	[3A97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C9, 0x0021 };
    uint32_t const ces[9] = { 0x3A97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_413)
{
    // 168C9 003F;	
    // (𖣉) BAMUM LETTER PHASE-C KET	[3A97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C9, 0x003F };
    uint32_t const ces[9] = { 0x3A97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_414)
{
    // 168C9 0061;	
    // (𖣉) BAMUM LETTER PHASE-C KET	[3A97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C9, 0x0061 };
    uint32_t const ces[9] = { 0x3A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_415)
{
    // 168C9 0041;	
    // (𖣉) BAMUM LETTER PHASE-C KET	[3A97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168C9, 0x0041 };
    uint32_t const ces[9] = { 0x3A97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_416)
{
    // 168C9 0062;	
    // (𖣉) BAMUM LETTER PHASE-C KET	[3A97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168C9, 0x0062 };
    uint32_t const ces[9] = { 0x3A97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_417)
{
    // 168CA 0021;	
    // (𖣊) BAMUM LETTER PHASE-C NGGU	[3A98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CA, 0x0021 };
    uint32_t const ces[9] = { 0x3A98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_418)
{
    // 168CA 003F;	
    // (𖣊) BAMUM LETTER PHASE-C NGGU	[3A98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CA, 0x003F };
    uint32_t const ces[9] = { 0x3A98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_419)
{
    // 168CA 0061;	
    // (𖣊) BAMUM LETTER PHASE-C NGGU	[3A98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CA, 0x0061 };
    uint32_t const ces[9] = { 0x3A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_420)
{
    // 168CA 0041;	
    // (𖣊) BAMUM LETTER PHASE-C NGGU	[3A98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CA, 0x0041 };
    uint32_t const ces[9] = { 0x3A98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_421)
{
    // 168CA 0062;	
    // (𖣊) BAMUM LETTER PHASE-C NGGU	[3A98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CA, 0x0062 };
    uint32_t const ces[9] = { 0x3A98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_422)
{
    // 168CB 0021;	
    // (𖣋) BAMUM LETTER PHASE-C MAESI	[3A99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CB, 0x0021 };
    uint32_t const ces[9] = { 0x3A99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_423)
{
    // 168CB 003F;	
    // (𖣋) BAMUM LETTER PHASE-C MAESI	[3A99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CB, 0x003F };
    uint32_t const ces[9] = { 0x3A99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_424)
{
    // 168CB 0061;	
    // (𖣋) BAMUM LETTER PHASE-C MAESI	[3A99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CB, 0x0061 };
    uint32_t const ces[9] = { 0x3A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_425)
{
    // 168CB 0041;	
    // (𖣋) BAMUM LETTER PHASE-C MAESI	[3A99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CB, 0x0041 };
    uint32_t const ces[9] = { 0x3A99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_426)
{
    // 168CB 0062;	
    // (𖣋) BAMUM LETTER PHASE-C MAESI	[3A99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CB, 0x0062 };
    uint32_t const ces[9] = { 0x3A99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_427)
{
    // 168CC 0021;	
    // (𖣌) BAMUM LETTER PHASE-C MBUAEM	[3A9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CC, 0x0021 };
    uint32_t const ces[9] = { 0x3A9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_428)
{
    // 168CC 003F;	
    // (𖣌) BAMUM LETTER PHASE-C MBUAEM	[3A9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CC, 0x003F };
    uint32_t const ces[9] = { 0x3A9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_429)
{
    // 168CC 0061;	
    // (𖣌) BAMUM LETTER PHASE-C MBUAEM	[3A9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CC, 0x0061 };
    uint32_t const ces[9] = { 0x3A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_430)
{
    // 168CC 0041;	
    // (𖣌) BAMUM LETTER PHASE-C MBUAEM	[3A9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CC, 0x0041 };
    uint32_t const ces[9] = { 0x3A9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_431)
{
    // 168CC 0062;	
    // (𖣌) BAMUM LETTER PHASE-C MBUAEM	[3A9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CC, 0x0062 };
    uint32_t const ces[9] = { 0x3A9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_432)
{
    // 168CD 0021;	
    // (𖣍) BAMUM LETTER PHASE-C LU	[3A9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CD, 0x0021 };
    uint32_t const ces[9] = { 0x3A9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_433)
{
    // 168CD 003F;	
    // (𖣍) BAMUM LETTER PHASE-C LU	[3A9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CD, 0x003F };
    uint32_t const ces[9] = { 0x3A9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_434)
{
    // 168CD 0061;	
    // (𖣍) BAMUM LETTER PHASE-C LU	[3A9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CD, 0x0061 };
    uint32_t const ces[9] = { 0x3A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_435)
{
    // 168CD 0041;	
    // (𖣍) BAMUM LETTER PHASE-C LU	[3A9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CD, 0x0041 };
    uint32_t const ces[9] = { 0x3A9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_436)
{
    // 168CD 0062;	
    // (𖣍) BAMUM LETTER PHASE-C LU	[3A9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CD, 0x0062 };
    uint32_t const ces[9] = { 0x3A9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_437)
{
    // 168CE 0021;	
    // (𖣎) BAMUM LETTER PHASE-C KUT	[3A9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CE, 0x0021 };
    uint32_t const ces[9] = { 0x3A9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_438)
{
    // 168CE 003F;	
    // (𖣎) BAMUM LETTER PHASE-C KUT	[3A9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CE, 0x003F };
    uint32_t const ces[9] = { 0x3A9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_439)
{
    // 168CE 0061;	
    // (𖣎) BAMUM LETTER PHASE-C KUT	[3A9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CE, 0x0061 };
    uint32_t const ces[9] = { 0x3A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_440)
{
    // 168CE 0041;	
    // (𖣎) BAMUM LETTER PHASE-C KUT	[3A9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CE, 0x0041 };
    uint32_t const ces[9] = { 0x3A9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_441)
{
    // 168CE 0062;	
    // (𖣎) BAMUM LETTER PHASE-C KUT	[3A9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CE, 0x0062 };
    uint32_t const ces[9] = { 0x3A9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_442)
{
    // 168CF 0021;	
    // (𖣏) BAMUM LETTER PHASE-C NJAM	[3A9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CF, 0x0021 };
    uint32_t const ces[9] = { 0x3A9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_443)
{
    // 168CF 003F;	
    // (𖣏) BAMUM LETTER PHASE-C NJAM	[3A9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CF, 0x003F };
    uint32_t const ces[9] = { 0x3A9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_444)
{
    // 168CF 0061;	
    // (𖣏) BAMUM LETTER PHASE-C NJAM	[3A9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CF, 0x0061 };
    uint32_t const ces[9] = { 0x3A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_445)
{
    // 168CF 0041;	
    // (𖣏) BAMUM LETTER PHASE-C NJAM	[3A9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168CF, 0x0041 };
    uint32_t const ces[9] = { 0x3A9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_446)
{
    // 168CF 0062;	
    // (𖣏) BAMUM LETTER PHASE-C NJAM	[3A9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168CF, 0x0062 };
    uint32_t const ces[9] = { 0x3A9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_447)
{
    // 168D0 0021;	
    // (𖣐) BAMUM LETTER PHASE-C NGOM	[3A9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D0, 0x0021 };
    uint32_t const ces[9] = { 0x3A9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_448)
{
    // 168D0 003F;	
    // (𖣐) BAMUM LETTER PHASE-C NGOM	[3A9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D0, 0x003F };
    uint32_t const ces[9] = { 0x3A9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_449)
{
    // 168D0 0061;	
    // (𖣐) BAMUM LETTER PHASE-C NGOM	[3A9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D0, 0x0061 };
    uint32_t const ces[9] = { 0x3A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_450)
{
    // 168D0 0041;	
    // (𖣐) BAMUM LETTER PHASE-C NGOM	[3A9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D0, 0x0041 };
    uint32_t const ces[9] = { 0x3A9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_451)
{
    // 168D0 0062;	
    // (𖣐) BAMUM LETTER PHASE-C NGOM	[3A9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D0, 0x0062 };
    uint32_t const ces[9] = { 0x3A9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_452)
{
    // 168D1 0021;	
    // (𖣑) BAMUM LETTER PHASE-C WUP	[3A9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D1, 0x0021 };
    uint32_t const ces[9] = { 0x3A9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_453)
{
    // 168D1 003F;	
    // (𖣑) BAMUM LETTER PHASE-C WUP	[3A9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D1, 0x003F };
    uint32_t const ces[9] = { 0x3A9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_454)
{
    // 168D1 0061;	
    // (𖣑) BAMUM LETTER PHASE-C WUP	[3A9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D1, 0x0061 };
    uint32_t const ces[9] = { 0x3A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_455)
{
    // 168D1 0041;	
    // (𖣑) BAMUM LETTER PHASE-C WUP	[3A9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D1, 0x0041 };
    uint32_t const ces[9] = { 0x3A9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_456)
{
    // 168D1 0062;	
    // (𖣑) BAMUM LETTER PHASE-C WUP	[3A9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D1, 0x0062 };
    uint32_t const ces[9] = { 0x3A9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_457)
{
    // 168D2 0021;	
    // (𖣒) BAMUM LETTER PHASE-C NGGUEET	[3AA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D2, 0x0021 };
    uint32_t const ces[9] = { 0x3AA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_458)
{
    // 168D2 003F;	
    // (𖣒) BAMUM LETTER PHASE-C NGGUEET	[3AA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D2, 0x003F };
    uint32_t const ces[9] = { 0x3AA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_459)
{
    // 168D2 0061;	
    // (𖣒) BAMUM LETTER PHASE-C NGGUEET	[3AA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D2, 0x0061 };
    uint32_t const ces[9] = { 0x3AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_460)
{
    // 168D2 0041;	
    // (𖣒) BAMUM LETTER PHASE-C NGGUEET	[3AA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D2, 0x0041 };
    uint32_t const ces[9] = { 0x3AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_461)
{
    // 168D2 0062;	
    // (𖣒) BAMUM LETTER PHASE-C NGGUEET	[3AA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D2, 0x0062 };
    uint32_t const ces[9] = { 0x3AA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_462)
{
    // 168D3 0021;	
    // (𖣓) BAMUM LETTER PHASE-C NSOM	[3AA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D3, 0x0021 };
    uint32_t const ces[9] = { 0x3AA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_463)
{
    // 168D3 003F;	
    // (𖣓) BAMUM LETTER PHASE-C NSOM	[3AA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D3, 0x003F };
    uint32_t const ces[9] = { 0x3AA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_464)
{
    // 168D3 0061;	
    // (𖣓) BAMUM LETTER PHASE-C NSOM	[3AA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D3, 0x0061 };
    uint32_t const ces[9] = { 0x3AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_465)
{
    // 168D3 0041;	
    // (𖣓) BAMUM LETTER PHASE-C NSOM	[3AA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D3, 0x0041 };
    uint32_t const ces[9] = { 0x3AA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_466)
{
    // 168D3 0062;	
    // (𖣓) BAMUM LETTER PHASE-C NSOM	[3AA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D3, 0x0062 };
    uint32_t const ces[9] = { 0x3AA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_467)
{
    // 168D4 0021;	
    // (𖣔) BAMUM LETTER PHASE-C NTEN	[3AA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D4, 0x0021 };
    uint32_t const ces[9] = { 0x3AA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_468)
{
    // 168D4 003F;	
    // (𖣔) BAMUM LETTER PHASE-C NTEN	[3AA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D4, 0x003F };
    uint32_t const ces[9] = { 0x3AA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_469)
{
    // 168D4 0061;	
    // (𖣔) BAMUM LETTER PHASE-C NTEN	[3AA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D4, 0x0061 };
    uint32_t const ces[9] = { 0x3AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_470)
{
    // 168D4 0041;	
    // (𖣔) BAMUM LETTER PHASE-C NTEN	[3AA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D4, 0x0041 };
    uint32_t const ces[9] = { 0x3AA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_471)
{
    // 168D4 0062;	
    // (𖣔) BAMUM LETTER PHASE-C NTEN	[3AA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D4, 0x0062 };
    uint32_t const ces[9] = { 0x3AA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_472)
{
    // 168D5 0021;	
    // (𖣕) BAMUM LETTER PHASE-C KUOP NKAARAE	[3AA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D5, 0x0021 };
    uint32_t const ces[9] = { 0x3AA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_473)
{
    // 168D5 003F;	
    // (𖣕) BAMUM LETTER PHASE-C KUOP NKAARAE	[3AA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D5, 0x003F };
    uint32_t const ces[9] = { 0x3AA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_474)
{
    // 168D5 0061;	
    // (𖣕) BAMUM LETTER PHASE-C KUOP NKAARAE	[3AA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D5, 0x0061 };
    uint32_t const ces[9] = { 0x3AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_475)
{
    // 168D5 0041;	
    // (𖣕) BAMUM LETTER PHASE-C KUOP NKAARAE	[3AA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D5, 0x0041 };
    uint32_t const ces[9] = { 0x3AA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_476)
{
    // 168D5 0062;	
    // (𖣕) BAMUM LETTER PHASE-C KUOP NKAARAE	[3AA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D5, 0x0062 };
    uint32_t const ces[9] = { 0x3AA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_477)
{
    // 168D6 0021;	
    // (𖣖) BAMUM LETTER PHASE-C NSUN	[3AA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D6, 0x0021 };
    uint32_t const ces[9] = { 0x3AA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_478)
{
    // 168D6 003F;	
    // (𖣖) BAMUM LETTER PHASE-C NSUN	[3AA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D6, 0x003F };
    uint32_t const ces[9] = { 0x3AA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_479)
{
    // 168D6 0061;	
    // (𖣖) BAMUM LETTER PHASE-C NSUN	[3AA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D6, 0x0061 };
    uint32_t const ces[9] = { 0x3AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_480)
{
    // 168D6 0041;	
    // (𖣖) BAMUM LETTER PHASE-C NSUN	[3AA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D6, 0x0041 };
    uint32_t const ces[9] = { 0x3AA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_481)
{
    // 168D6 0062;	
    // (𖣖) BAMUM LETTER PHASE-C NSUN	[3AA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D6, 0x0062 };
    uint32_t const ces[9] = { 0x3AA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_482)
{
    // 168D7 0021;	
    // (𖣗) BAMUM LETTER PHASE-C NDAM	[3AA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D7, 0x0021 };
    uint32_t const ces[9] = { 0x3AA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_483)
{
    // 168D7 003F;	
    // (𖣗) BAMUM LETTER PHASE-C NDAM	[3AA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D7, 0x003F };
    uint32_t const ces[9] = { 0x3AA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_484)
{
    // 168D7 0061;	
    // (𖣗) BAMUM LETTER PHASE-C NDAM	[3AA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D7, 0x0061 };
    uint32_t const ces[9] = { 0x3AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_485)
{
    // 168D7 0041;	
    // (𖣗) BAMUM LETTER PHASE-C NDAM	[3AA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D7, 0x0041 };
    uint32_t const ces[9] = { 0x3AA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_486)
{
    // 168D7 0062;	
    // (𖣗) BAMUM LETTER PHASE-C NDAM	[3AA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D7, 0x0062 };
    uint32_t const ces[9] = { 0x3AA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_487)
{
    // 168D8 0021;	
    // (𖣘) BAMUM LETTER PHASE-C MA NSIEE	[3AA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D8, 0x0021 };
    uint32_t const ces[9] = { 0x3AA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_488)
{
    // 168D8 003F;	
    // (𖣘) BAMUM LETTER PHASE-C MA NSIEE	[3AA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D8, 0x003F };
    uint32_t const ces[9] = { 0x3AA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_489)
{
    // 168D8 0061;	
    // (𖣘) BAMUM LETTER PHASE-C MA NSIEE	[3AA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D8, 0x0061 };
    uint32_t const ces[9] = { 0x3AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_490)
{
    // 168D8 0041;	
    // (𖣘) BAMUM LETTER PHASE-C MA NSIEE	[3AA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D8, 0x0041 };
    uint32_t const ces[9] = { 0x3AA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_491)
{
    // 168D8 0062;	
    // (𖣘) BAMUM LETTER PHASE-C MA NSIEE	[3AA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D8, 0x0062 };
    uint32_t const ces[9] = { 0x3AA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_492)
{
    // 168D9 0021;	
    // (𖣙) BAMUM LETTER PHASE-C YAA	[3AA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D9, 0x0021 };
    uint32_t const ces[9] = { 0x3AA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_493)
{
    // 168D9 003F;	
    // (𖣙) BAMUM LETTER PHASE-C YAA	[3AA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D9, 0x003F };
    uint32_t const ces[9] = { 0x3AA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_494)
{
    // 168D9 0061;	
    // (𖣙) BAMUM LETTER PHASE-C YAA	[3AA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D9, 0x0061 };
    uint32_t const ces[9] = { 0x3AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_495)
{
    // 168D9 0041;	
    // (𖣙) BAMUM LETTER PHASE-C YAA	[3AA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x168D9, 0x0041 };
    uint32_t const ces[9] = { 0x3AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_496)
{
    // 168D9 0062;	
    // (𖣙) BAMUM LETTER PHASE-C YAA	[3AA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168D9, 0x0062 };
    uint32_t const ces[9] = { 0x3AA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_497)
{
    // 168DA 0021;	
    // (𖣚) BAMUM LETTER PHASE-C NDAP	[3AA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168DA, 0x0021 };
    uint32_t const ces[9] = { 0x3AA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_498)
{
    // 168DA 003F;	
    // (𖣚) BAMUM LETTER PHASE-C NDAP	[3AA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168DA, 0x003F };
    uint32_t const ces[9] = { 0x3AA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_233_499)
{
    // 168DA 0061;	
    // (𖣚) BAMUM LETTER PHASE-C NDAP	[3AA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x168DA, 0x0061 };
    uint32_t const ces[9] = { 0x3AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

