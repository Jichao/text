// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_019_000)
{
    // 0C97  ; [.28C1.0020.0002] 
    // KANNADA LETTER GA

    uint32_t const cps[1] = { 0xc97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_001)
{
    // 0C98  ; [.28C2.0020.0002] 
    // KANNADA LETTER GHA

    uint32_t const cps[1] = { 0xc98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_002)
{
    // 0C99  ; [.28C3.0020.0002] 
    // KANNADA LETTER NGA

    uint32_t const cps[1] = { 0xc99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_003)
{
    // 0C9A  ; [.28C4.0020.0002] 
    // KANNADA LETTER CA

    uint32_t const cps[1] = { 0xc9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_004)
{
    // 0C9B  ; [.28C5.0020.0002] 
    // KANNADA LETTER CHA

    uint32_t const cps[1] = { 0xc9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_005)
{
    // 0C9C  ; [.28C6.0020.0002] 
    // KANNADA LETTER JA

    uint32_t const cps[1] = { 0xc9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_006)
{
    // 0C9D  ; [.28C7.0020.0002] 
    // KANNADA LETTER JHA

    uint32_t const cps[1] = { 0xc9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_007)
{
    // 0C9E  ; [.28C8.0020.0002] 
    // KANNADA LETTER NYA

    uint32_t const cps[1] = { 0xc9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_008)
{
    // 0C9F  ; [.28C9.0020.0002] 
    // KANNADA LETTER TTA

    uint32_t const cps[1] = { 0xc9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_009)
{
    // 0CA0  ; [.28CA.0020.0002] 
    // KANNADA LETTER TTHA

    uint32_t const cps[1] = { 0xca0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_010)
{
    // 0CA1  ; [.28CB.0020.0002] 
    // KANNADA LETTER DDA

    uint32_t const cps[1] = { 0xca1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_011)
{
    // 0CA2  ; [.28CC.0020.0002] 
    // KANNADA LETTER DDHA

    uint32_t const cps[1] = { 0xca2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_012)
{
    // 0CA3  ; [.28CD.0020.0002] 
    // KANNADA LETTER NNA

    uint32_t const cps[1] = { 0xca3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_013)
{
    // 0CA4  ; [.28CE.0020.0002] 
    // KANNADA LETTER TA

    uint32_t const cps[1] = { 0xca4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_014)
{
    // 0CA5  ; [.28CF.0020.0002] 
    // KANNADA LETTER THA

    uint32_t const cps[1] = { 0xca5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_015)
{
    // 0CA6  ; [.28D0.0020.0002] 
    // KANNADA LETTER DA

    uint32_t const cps[1] = { 0xca6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_016)
{
    // 0CA7  ; [.28D1.0020.0002] 
    // KANNADA LETTER DHA

    uint32_t const cps[1] = { 0xca7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_017)
{
    // 0CA8  ; [.28D2.0020.0002] 
    // KANNADA LETTER NA

    uint32_t const cps[1] = { 0xca8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_018)
{
    // 0CAA  ; [.28D3.0020.0002] 
    // KANNADA LETTER PA

    uint32_t const cps[1] = { 0xcaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_019)
{
    // 0CAB  ; [.28D4.0020.0002] 
    // KANNADA LETTER PHA

    uint32_t const cps[1] = { 0xcab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_020)
{
    // 0CAC  ; [.28D5.0020.0002] 
    // KANNADA LETTER BA

    uint32_t const cps[1] = { 0xcac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_021)
{
    // 0CAD  ; [.28D6.0020.0002] 
    // KANNADA LETTER BHA

    uint32_t const cps[1] = { 0xcad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_022)
{
    // 0CAE  ; [.28D7.0020.0002] 
    // KANNADA LETTER MA

    uint32_t const cps[1] = { 0xcae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_023)
{
    // 0CAF  ; [.28D8.0020.0002] 
    // KANNADA LETTER YA

    uint32_t const cps[1] = { 0xcaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_024)
{
    // 0CB0  ; [.28D9.0020.0002] 
    // KANNADA LETTER RA

    uint32_t const cps[1] = { 0xcb0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_025)
{
    // 0CB1  ; [.28DA.0020.0002] 
    // KANNADA LETTER RRA

    uint32_t const cps[1] = { 0xcb1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_026)
{
    // 0CB2  ; [.28DB.0020.0002] 
    // KANNADA LETTER LA

    uint32_t const cps[1] = { 0xcb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_027)
{
    // 0CB3  ; [.28E1.0020.0002] 
    // KANNADA LETTER LLA

    uint32_t const cps[1] = { 0xcb3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_028)
{
    // 0CB5  ; [.28DC.0020.0002] 
    // KANNADA LETTER VA

    uint32_t const cps[1] = { 0xcb5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_029)
{
    // 0CB6  ; [.28DD.0020.0002] 
    // KANNADA LETTER SHA

    uint32_t const cps[1] = { 0xcb6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_030)
{
    // 0CB7  ; [.28DE.0020.0002] 
    // KANNADA LETTER SSA

    uint32_t const cps[1] = { 0xcb7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_031)
{
    // 0CB8  ; [.28DF.0020.0002] 
    // KANNADA LETTER SA

    uint32_t const cps[1] = { 0xcb8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_032)
{
    // 0CB9  ; [.28E0.0020.0002] 
    // KANNADA LETTER HA

    uint32_t const cps[1] = { 0xcb9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_033)
{
    // 0CBC  ; [.0000.00C2.0002] 
    // KANNADA SIGN NUKTA

    uint32_t const cps[1] = { 0xcbc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_034)
{
    // 0CBD  ; [.28E3.0020.0002] 
    // KANNADA SIGN AVAGRAHA

    uint32_t const cps[1] = { 0xcbd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_035)
{
    // 0CBE  ; [.28E7.0020.0002] 
    // KANNADA VOWEL SIGN AA

    uint32_t const cps[1] = { 0xcbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_036)
{
    // 0CBF  ; [.28E8.0020.0002] 
    // KANNADA VOWEL SIGN I

    uint32_t const cps[1] = { 0xcbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_037)
{
    // 0CBF 0CD5 ; [.28E9.0020.0002] 
    // KANNADA VOWEL SIGN II

    uint32_t const cps[1] = { 0xcc0 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_038)
{
    // 0CC0  ; [.28E9.0020.0002] 
    // KANNADA VOWEL SIGN II

    uint32_t const cps[1] = { 0xcc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_039)
{
    // 0CC1  ; [.28EA.0020.0002] 
    // KANNADA VOWEL SIGN U

    uint32_t const cps[1] = { 0xcc1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_040)
{
    // 0CC2  ; [.28EB.0020.0002] 
    // KANNADA VOWEL SIGN UU

    uint32_t const cps[1] = { 0xcc2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_041)
{
    // 0CC3  ; [.28EC.0020.0002] 
    // KANNADA VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0xcc3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_042)
{
    // 0CC4  ; [.28ED.0020.0002] 
    // KANNADA VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0xcc4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_043)
{
    // 0CC6  ; [.28F0.0020.0002] 
    // KANNADA VOWEL SIGN E

    uint32_t const cps[1] = { 0xcc6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_044)
{
    // 0CC6 0CC2 ; [.28F3.0020.0002] 
    // KANNADA VOWEL SIGN O

    uint32_t const cps[1] = { 0xcca }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_045)
{
    // 0CC6 0CC2 0CD5 ; [.28F4.0020.0002] 
    // KANNADA VOWEL SIGN OO

    uint32_t const cps[1] = { 0xccb }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_046)
{
    // 0CC6 0CD5 ; [.28F1.0020.0002] 
    // KANNADA VOWEL SIGN EE

    uint32_t const cps[1] = { 0xcc7 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_047)
{
    // 0CC6 0CD6 ; [.28F2.0020.0002] 
    // KANNADA VOWEL SIGN AI

    uint32_t const cps[1] = { 0xcc8 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_048)
{
    // 0CC7  ; [.28F1.0020.0002] 
    // KANNADA VOWEL SIGN EE

    uint32_t const cps[1] = { 0xcc7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_049)
{
    // 0CC8  ; [.28F2.0020.0002] 
    // KANNADA VOWEL SIGN AI

    uint32_t const cps[1] = { 0xcc8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_050)
{
    // 0CCA  ; [.28F3.0020.0002] 
    // KANNADA VOWEL SIGN O

    uint32_t const cps[1] = { 0xcca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_051)
{
    // 0CCA 0CD5 ; [.28F4.0020.0002] 
    // KANNADA VOWEL SIGN OO

    uint32_t const cps[2] = { 0xcca, 0xcd5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_052)
{
    // 0CCB  ; [.28F4.0020.0002] 
    // KANNADA VOWEL SIGN OO

    uint32_t const cps[1] = { 0xccb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_053)
{
    // 0CCC  ; [.28F5.0020.0002] 
    // KANNADA VOWEL SIGN AU

    uint32_t const cps[1] = { 0xccc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_054)
{
    // 0CCD  ; [.28F6.0020.0002] 
    // KANNADA SIGN VIRAMA

    uint32_t const cps[1] = { 0xccd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_055)
{
    // 0CD5  ; [.28F7.0020.0002] 
    // KANNADA LENGTH MARK

    uint32_t const cps[1] = { 0xcd5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_056)
{
    // 0CD6  ; [.28F8.0020.0002] 
    // KANNADA AI LENGTH MARK

    uint32_t const cps[1] = { 0xcd6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_057)
{
    // 0CDE  ; [.28E2.0020.0002] 
    // KANNADA LETTER FA

    uint32_t const cps[1] = { 0xcde };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_058)
{
    // 0CE0  ; [.28B6.0020.0002] 
    // KANNADA LETTER VOCALIC RR

    uint32_t const cps[1] = { 0xce0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_059)
{
    // 0CE1  ; [.28B8.0020.0002] 
    // KANNADA LETTER VOCALIC LL

    uint32_t const cps[1] = { 0xce1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_060)
{
    // 0CE2  ; [.28EE.0020.0002] 
    // KANNADA VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0xce2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_061)
{
    // 0CE3  ; [.28EF.0020.0002] 
    // KANNADA VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0xce3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_062)
{
    // 0CE6  ; [.1CA3.0020.0002] 
    // KANNADA DIGIT ZERO

    uint32_t const cps[1] = { 0xce6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_063)
{
    // 0CE7  ; [.1CA4.0020.0002] 
    // KANNADA DIGIT ONE

    uint32_t const cps[1] = { 0xce7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_064)
{
    // 0CE8  ; [.1CA5.0020.0002] 
    // KANNADA DIGIT TWO

    uint32_t const cps[1] = { 0xce8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_065)
{
    // 0CE9  ; [.1CA6.0020.0002] 
    // KANNADA DIGIT THREE

    uint32_t const cps[1] = { 0xce9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_066)
{
    // 0CEA  ; [.1CA7.0020.0002] 
    // KANNADA DIGIT FOUR

    uint32_t const cps[1] = { 0xcea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_067)
{
    // 0CEB  ; [.1CA8.0020.0002] 
    // KANNADA DIGIT FIVE

    uint32_t const cps[1] = { 0xceb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_068)
{
    // 0CEC  ; [.1CA9.0020.0002] 
    // KANNADA DIGIT SIX

    uint32_t const cps[1] = { 0xcec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_069)
{
    // 0CED  ; [.1CAA.0020.0002] 
    // KANNADA DIGIT SEVEN

    uint32_t const cps[1] = { 0xced };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_070)
{
    // 0CEE  ; [.1CAB.0020.0002] 
    // KANNADA DIGIT EIGHT

    uint32_t const cps[1] = { 0xcee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_071)
{
    // 0CEF  ; [.1CAC.0020.0002] 
    // KANNADA DIGIT NINE

    uint32_t const cps[1] = { 0xcef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_072)
{
    // 0CF1  ; [.28E4.0020.0002] 
    // KANNADA SIGN JIHVAMULIYA

    uint32_t const cps[1] = { 0xcf1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_073)
{
    // 0CF2  ; [.28E5.0020.0002] 
    // KANNADA SIGN UPADHMANIYA

    uint32_t const cps[1] = { 0xcf2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_074)
{
    // 0D00  ; [.0000.00C4.0002] 
    // MALAYALAM SIGN COMBINING ANUSVARA ABOVE

    uint32_t const cps[1] = { 0xd00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_075)
{
    // 0D01  ; [.0000.00C3.0002] 
    // MALAYALAM SIGN CANDRABINDU

    uint32_t const cps[1] = { 0xd01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_076)
{
    // 0D02  ; [.0000.00C4.0002] 
    // MALAYALAM SIGN ANUSVARA

    uint32_t const cps[1] = { 0xd02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_077)
{
    // 0D03  ; [.0000.00C5.0002] 
    // MALAYALAM SIGN VISARGA

    uint32_t const cps[1] = { 0xd03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_078)
{
    // 0D05  ; [.28F9.0020.0002] 
    // MALAYALAM LETTER A

    uint32_t const cps[1] = { 0xd05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_079)
{
    // 0D06  ; [.28FA.0020.0002] 
    // MALAYALAM LETTER AA

    uint32_t const cps[1] = { 0xd06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_080)
{
    // 0D07  ; [.28FB.0020.0002] 
    // MALAYALAM LETTER I

    uint32_t const cps[1] = { 0xd07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_081)
{
    // 0D08  ; [.28FC.0020.0002] 
    // MALAYALAM LETTER II

    uint32_t const cps[1] = { 0xd08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_082)
{
    // 0D09  ; [.28FE.0020.0002] 
    // MALAYALAM LETTER U

    uint32_t const cps[1] = { 0xd09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_083)
{
    // 0D0A  ; [.28FF.0020.0002] 
    // MALAYALAM LETTER UU

    uint32_t const cps[1] = { 0xd0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_084)
{
    // 0D0B  ; [.2900.0020.0002] 
    // MALAYALAM LETTER VOCALIC R

    uint32_t const cps[1] = { 0xd0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2900), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_085)
{
    // 0D0C  ; [.2902.0020.0002] 
    // MALAYALAM LETTER VOCALIC L

    uint32_t const cps[1] = { 0xd0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2902), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_086)
{
    // 0D0E  ; [.2904.0020.0002] 
    // MALAYALAM LETTER E

    uint32_t const cps[1] = { 0xd0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2904), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_087)
{
    // 0D0F  ; [.2905.0020.0002] 
    // MALAYALAM LETTER EE

    uint32_t const cps[1] = { 0xd0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2905), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_088)
{
    // 0D10  ; [.2906.0020.0002] 
    // MALAYALAM LETTER AI

    uint32_t const cps[1] = { 0xd10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2906), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_089)
{
    // 0D12  ; [.2907.0020.0002] 
    // MALAYALAM LETTER O

    uint32_t const cps[1] = { 0xd12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2907), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_090)
{
    // 0D13  ; [.2908.0020.0002] 
    // MALAYALAM LETTER OO

    uint32_t const cps[1] = { 0xd13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2908), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_091)
{
    // 0D14  ; [.2909.0020.0002] 
    // MALAYALAM LETTER AU

    uint32_t const cps[1] = { 0xd14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2909), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_092)
{
    // 0D15  ; [.290A.0020.0002] 
    // MALAYALAM LETTER KA

    uint32_t const cps[1] = { 0xd15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_093)
{
    // 0D16  ; [.290B.0020.0002] 
    // MALAYALAM LETTER KHA

    uint32_t const cps[1] = { 0xd16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_094)
{
    // 0D17  ; [.290C.0020.0002] 
    // MALAYALAM LETTER GA

    uint32_t const cps[1] = { 0xd17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_095)
{
    // 0D18  ; [.290D.0020.0002] 
    // MALAYALAM LETTER GHA

    uint32_t const cps[1] = { 0xd18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_096)
{
    // 0D19  ; [.290E.0020.0002] 
    // MALAYALAM LETTER NGA

    uint32_t const cps[1] = { 0xd19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_097)
{
    // 0D1A  ; [.290F.0020.0002] 
    // MALAYALAM LETTER CA

    uint32_t const cps[1] = { 0xd1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_098)
{
    // 0D1B  ; [.2910.0020.0002] 
    // MALAYALAM LETTER CHA

    uint32_t const cps[1] = { 0xd1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2910), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_099)
{
    // 0D1C  ; [.2911.0020.0002] 
    // MALAYALAM LETTER JA

    uint32_t const cps[1] = { 0xd1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2911), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_100)
{
    // 0D1D  ; [.2912.0020.0002] 
    // MALAYALAM LETTER JHA

    uint32_t const cps[1] = { 0xd1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2912), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_101)
{
    // 0D1E  ; [.2913.0020.0002] 
    // MALAYALAM LETTER NYA

    uint32_t const cps[1] = { 0xd1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2913), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_102)
{
    // 0D1F  ; [.2914.0020.0002] 
    // MALAYALAM LETTER TTA

    uint32_t const cps[1] = { 0xd1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2914), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_103)
{
    // 0D20  ; [.2915.0020.0002] 
    // MALAYALAM LETTER TTHA

    uint32_t const cps[1] = { 0xd20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2915), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_104)
{
    // 0D21  ; [.2916.0020.0002] 
    // MALAYALAM LETTER DDA

    uint32_t const cps[1] = { 0xd21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2916), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_105)
{
    // 0D22  ; [.2917.0020.0002] 
    // MALAYALAM LETTER DDHA

    uint32_t const cps[1] = { 0xd22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2917), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_106)
{
    // 0D23  ; [.2918.0020.0002] 
    // MALAYALAM LETTER NNA

    uint32_t const cps[1] = { 0xd23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2918), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_107)
{
    // 0D24  ; [.2919.0020.0002] 
    // MALAYALAM LETTER TA

    uint32_t const cps[1] = { 0xd24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2919), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_108)
{
    // 0D25  ; [.291A.0020.0002] 
    // MALAYALAM LETTER THA

    uint32_t const cps[1] = { 0xd25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_109)
{
    // 0D26  ; [.291B.0020.0002] 
    // MALAYALAM LETTER DA

    uint32_t const cps[1] = { 0xd26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_110)
{
    // 0D27  ; [.291C.0020.0002] 
    // MALAYALAM LETTER DHA

    uint32_t const cps[1] = { 0xd27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_111)
{
    // 0D28  ; [.291D.0020.0002] 
    // MALAYALAM LETTER NA

    uint32_t const cps[1] = { 0xd28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_112)
{
    // 0D29  ; [.291E.0020.0002] 
    // MALAYALAM LETTER NNNA

    uint32_t const cps[1] = { 0xd29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_113)
{
    // 0D2A  ; [.291F.0020.0002] 
    // MALAYALAM LETTER PA

    uint32_t const cps[1] = { 0xd2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x291f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_114)
{
    // 0D2B  ; [.2920.0020.0002] 
    // MALAYALAM LETTER PHA

    uint32_t const cps[1] = { 0xd2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2920), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_115)
{
    // 0D2C  ; [.2921.0020.0002] 
    // MALAYALAM LETTER BA

    uint32_t const cps[1] = { 0xd2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2921), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_116)
{
    // 0D2D  ; [.2922.0020.0002] 
    // MALAYALAM LETTER BHA

    uint32_t const cps[1] = { 0xd2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2922), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_117)
{
    // 0D2E  ; [.2923.0020.0002] 
    // MALAYALAM LETTER MA

    uint32_t const cps[1] = { 0xd2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2923), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_118)
{
    // 0D2F  ; [.2924.0020.0002] 
    // MALAYALAM LETTER YA

    uint32_t const cps[1] = { 0xd2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2924), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_119)
{
    // 0D30  ; [.2925.0020.0002] 
    // MALAYALAM LETTER RA

    uint32_t const cps[1] = { 0xd30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2925), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_120)
{
    // 0D31  ; [.292E.0020.0002] 
    // MALAYALAM LETTER RRA

    uint32_t const cps[1] = { 0xd31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_121)
{
    // 0D32  ; [.2926.0020.0002] 
    // MALAYALAM LETTER LA

    uint32_t const cps[1] = { 0xd32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2926), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_122)
{
    // 0D33  ; [.292C.0020.0002] 
    // MALAYALAM LETTER LLA

    uint32_t const cps[1] = { 0xd33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_123)
{
    // 0D34  ; [.292D.0020.0002] 
    // MALAYALAM LETTER LLLA

    uint32_t const cps[1] = { 0xd34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_124)
{
    // 0D35  ; [.2927.0020.0002] 
    // MALAYALAM LETTER VA

    uint32_t const cps[1] = { 0xd35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2927), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_125)
{
    // 0D36  ; [.2928.0020.0002] 
    // MALAYALAM LETTER SHA

    uint32_t const cps[1] = { 0xd36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2928), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_126)
{
    // 0D37  ; [.2929.0020.0002] 
    // MALAYALAM LETTER SSA

    uint32_t const cps[1] = { 0xd37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2929), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_127)
{
    // 0D38  ; [.292A.0020.0002] 
    // MALAYALAM LETTER SA

    uint32_t const cps[1] = { 0xd38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_128)
{
    // 0D39  ; [.292B.0020.0002] 
    // MALAYALAM LETTER HA

    uint32_t const cps[1] = { 0xd39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_129)
{
    // 0D3A  ; [.292F.0020.0002] 
    // MALAYALAM LETTER TTTA

    uint32_t const cps[1] = { 0xd3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x292f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_130)
{
    // 0D3B  ; [.2941.0020.0004] 
    // MALAYALAM SIGN VERTICAL BAR VIRAMA

    uint32_t const cps[1] = { 0xd3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2941), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_131)
{
    // 0D3C  ; [.2941.0020.0004] 
    // MALAYALAM SIGN CIRCULAR VIRAMA

    uint32_t const cps[1] = { 0xd3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2941), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_132)
{
    // 0D3D  ; [.2930.0020.0002] 
    // MALAYALAM SIGN AVAGRAHA

    uint32_t const cps[1] = { 0xd3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2930), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_133)
{
    // 0D3E  ; [.2931.0020.0002] 
    // MALAYALAM VOWEL SIGN AA

    uint32_t const cps[1] = { 0xd3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2931), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_134)
{
    // 0D3F  ; [.2932.0020.0002] 
    // MALAYALAM VOWEL SIGN I

    uint32_t const cps[1] = { 0xd3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2932), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_135)
{
    // 0D40  ; [.2933.0020.0002] 
    // MALAYALAM VOWEL SIGN II

    uint32_t const cps[1] = { 0xd40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2933), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_136)
{
    // 0D41  ; [.2934.0020.0002] 
    // MALAYALAM VOWEL SIGN U

    uint32_t const cps[1] = { 0xd41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2934), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_137)
{
    // 0D42  ; [.2935.0020.0002] 
    // MALAYALAM VOWEL SIGN UU

    uint32_t const cps[1] = { 0xd42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2935), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_138)
{
    // 0D43  ; [.2936.0020.0002] 
    // MALAYALAM VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0xd43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2936), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_139)
{
    // 0D44  ; [.2937.0020.0002] 
    // MALAYALAM VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0xd44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2937), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_140)
{
    // 0D46  ; [.293A.0020.0002] 
    // MALAYALAM VOWEL SIGN E

    uint32_t const cps[1] = { 0xd46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_141)
{
    // 0D46 0D3E ; [.293D.0020.0002] 
    // MALAYALAM VOWEL SIGN O

    uint32_t const cps[1] = { 0xd4a }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_142)
{
    // 0D46 0D57 ; [.293F.0020.0002] 
    // MALAYALAM VOWEL SIGN AU

    uint32_t const cps[1] = { 0xd4c }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_143)
{
    // 0D47  ; [.293B.0020.0002] 
    // MALAYALAM VOWEL SIGN EE

    uint32_t const cps[1] = { 0xd47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_144)
{
    // 0D47 0D3E ; [.293E.0020.0002] 
    // MALAYALAM VOWEL SIGN OO

    uint32_t const cps[1] = { 0xd4b }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_145)
{
    // 0D48  ; [.293C.0020.0002] 
    // MALAYALAM VOWEL SIGN AI

    uint32_t const cps[1] = { 0xd48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_146)
{
    // 0D4A  ; [.293D.0020.0002] 
    // MALAYALAM VOWEL SIGN O

    uint32_t const cps[1] = { 0xd4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_147)
{
    // 0D4B  ; [.293E.0020.0002] 
    // MALAYALAM VOWEL SIGN OO

    uint32_t const cps[1] = { 0xd4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_148)
{
    // 0D4C  ; [.293F.0020.0002] 
    // MALAYALAM VOWEL SIGN AU

    uint32_t const cps[1] = { 0xd4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x293f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_019_149)
{
    // 0D4D  ; [.2941.0020.0002] 
    // MALAYALAM SIGN VIRAMA

    uint32_t const cps[1] = { 0xd4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2941), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

