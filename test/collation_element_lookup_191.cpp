// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_191_000)
{
    // 1F0E1 ; [*12AC.0020.0002] 
    // PLAYING CARD TRUMP-1

    uint32_t const cps[1] = { 0x1f0e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_001)
{
    // 1F0E2 ; [*12AD.0020.0002] 
    // PLAYING CARD TRUMP-2

    uint32_t const cps[1] = { 0x1f0e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_002)
{
    // 1F0E3 ; [*12AE.0020.0002] 
    // PLAYING CARD TRUMP-3

    uint32_t const cps[1] = { 0x1f0e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_003)
{
    // 1F0E4 ; [*12AF.0020.0002] 
    // PLAYING CARD TRUMP-4

    uint32_t const cps[1] = { 0x1f0e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_004)
{
    // 1F0E5 ; [*12B0.0020.0002] 
    // PLAYING CARD TRUMP-5

    uint32_t const cps[1] = { 0x1f0e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_005)
{
    // 1F0E6 ; [*12B1.0020.0002] 
    // PLAYING CARD TRUMP-6

    uint32_t const cps[1] = { 0x1f0e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_006)
{
    // 1F0E7 ; [*12B2.0020.0002] 
    // PLAYING CARD TRUMP-7

    uint32_t const cps[1] = { 0x1f0e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_007)
{
    // 1F0E8 ; [*12B3.0020.0002] 
    // PLAYING CARD TRUMP-8

    uint32_t const cps[1] = { 0x1f0e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_008)
{
    // 1F0E9 ; [*12B4.0020.0002] 
    // PLAYING CARD TRUMP-9

    uint32_t const cps[1] = { 0x1f0e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_009)
{
    // 1F0EA ; [*12B5.0020.0002] 
    // PLAYING CARD TRUMP-10

    uint32_t const cps[1] = { 0x1f0ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_010)
{
    // 1F0EB ; [*12B6.0020.0002] 
    // PLAYING CARD TRUMP-11

    uint32_t const cps[1] = { 0x1f0eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_011)
{
    // 1F0EC ; [*12B7.0020.0002] 
    // PLAYING CARD TRUMP-12

    uint32_t const cps[1] = { 0x1f0ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_012)
{
    // 1F0ED ; [*12B8.0020.0002] 
    // PLAYING CARD TRUMP-13

    uint32_t const cps[1] = { 0x1f0ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_013)
{
    // 1F0EE ; [*12B9.0020.0002] 
    // PLAYING CARD TRUMP-14

    uint32_t const cps[1] = { 0x1f0ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_014)
{
    // 1F0EF ; [*12BA.0020.0002] 
    // PLAYING CARD TRUMP-15

    uint32_t const cps[1] = { 0x1f0ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_015)
{
    // 1F0F0 ; [*12BB.0020.0002] 
    // PLAYING CARD TRUMP-16

    uint32_t const cps[1] = { 0x1f0f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_016)
{
    // 1F0F1 ; [*12BC.0020.0002] 
    // PLAYING CARD TRUMP-17

    uint32_t const cps[1] = { 0x1f0f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_017)
{
    // 1F0F2 ; [*12BD.0020.0002] 
    // PLAYING CARD TRUMP-18

    uint32_t const cps[1] = { 0x1f0f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_018)
{
    // 1F0F3 ; [*12BE.0020.0002] 
    // PLAYING CARD TRUMP-19

    uint32_t const cps[1] = { 0x1f0f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_019)
{
    // 1F0F4 ; [*12BF.0020.0002] 
    // PLAYING CARD TRUMP-20

    uint32_t const cps[1] = { 0x1f0f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_020)
{
    // 1F0F5 ; [*12C0.0020.0002] 
    // PLAYING CARD TRUMP-21

    uint32_t const cps[1] = { 0x1f0f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_021)
{
    // 1F100 ; [.1CA3.0020.0004][*0278.0020.0004] 
    // DIGIT ZERO FULL STOP

    uint32_t const cps[1] = { 0x1f100 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_022)
{
    // 1F101 ; [.1CA3.0020.0004][*0222.0020.0004] 
    // DIGIT ZERO COMMA

    uint32_t const cps[1] = { 0x1f101 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_023)
{
    // 1F102 ; [.1CA4.0020.0004][*0222.0020.0004] 
    // DIGIT ONE COMMA

    uint32_t const cps[1] = { 0x1f102 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_024)
{
    // 1F103 ; [.1CA5.0020.0004][*0222.0020.0004] 
    // DIGIT TWO COMMA

    uint32_t const cps[1] = { 0x1f103 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_025)
{
    // 1F104 ; [.1CA6.0020.0004][*0222.0020.0004] 
    // DIGIT THREE COMMA

    uint32_t const cps[1] = { 0x1f104 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_026)
{
    // 1F105 ; [.1CA7.0020.0004][*0222.0020.0004] 
    // DIGIT FOUR COMMA

    uint32_t const cps[1] = { 0x1f105 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_027)
{
    // 1F106 ; [.1CA8.0020.0004][*0222.0020.0004] 
    // DIGIT FIVE COMMA

    uint32_t const cps[1] = { 0x1f106 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_028)
{
    // 1F107 ; [.1CA9.0020.0004][*0222.0020.0004] 
    // DIGIT SIX COMMA

    uint32_t const cps[1] = { 0x1f107 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_029)
{
    // 1F108 ; [.1CAA.0020.0004][*0222.0020.0004] 
    // DIGIT SEVEN COMMA

    uint32_t const cps[1] = { 0x1f108 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_030)
{
    // 1F109 ; [.1CAB.0020.0004][*0222.0020.0004] 
    // DIGIT EIGHT COMMA

    uint32_t const cps[1] = { 0x1f109 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_031)
{
    // 1F10A ; [.1CAC.0020.0004][*0222.0020.0004] 
    // DIGIT NINE COMMA

    uint32_t const cps[1] = { 0x1f10a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x222), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_032)
{
    // 1F10B ; [.1CA3.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT ZERO

    uint32_t const cps[1] = { 0x1f10b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_033)
{
    // 1F10C ; [.1CA3.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO

    uint32_t const cps[1] = { 0x1f10c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_034)
{
    // 1F110 ; [*0318.0020.0004][.1CAD.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x1f110 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_035)
{
    // 1F111 ; [*0318.0020.0004][.1CC6.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER B

    uint32_t const cps[1] = { 0x1f111 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_036)
{
    // 1F112 ; [*0318.0020.0004][.1CE0.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x1f112 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_037)
{
    // 1F113 ; [*0318.0020.0004][.1CF5.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER D

    uint32_t const cps[1] = { 0x1f113 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_038)
{
    // 1F114 ; [*0318.0020.0004][.1D10.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x1f114 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_039)
{
    // 1F115 ; [*0318.0020.0004][.1D4B.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER F

    uint32_t const cps[1] = { 0x1f115 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_040)
{
    // 1F116 ; [*0318.0020.0004][.1D5A.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER G

    uint32_t const cps[1] = { 0x1f116 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_041)
{
    // 1F117 ; [*0318.0020.0004][.1D7E.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER H

    uint32_t const cps[1] = { 0x1f117 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_042)
{
    // 1F118 ; [*0318.0020.0004][.1D98.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x1f118 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_043)
{
    // 1F119 ; [*0318.0020.0004][.1DB2.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER J

    uint32_t const cps[1] = { 0x1f119 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_044)
{
    // 1F11A ; [*0318.0020.0004][.1DCB.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER K

    uint32_t const cps[1] = { 0x1f11a };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_045)
{
    // 1F11B ; [*0318.0020.0004][.1DDD.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER L

    uint32_t const cps[1] = { 0x1f11b };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_046)
{
    // 1F11C ; [*0318.0020.0004][.1E10.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER M

    uint32_t const cps[1] = { 0x1f11c };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_047)
{
    // 1F11D ; [*0318.0020.0004][.1E1F.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER N

    uint32_t const cps[1] = { 0x1f11d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_048)
{
    // 1F11E ; [*0318.0020.0004][.1E43.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x1f11e };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_049)
{
    // 1F11F ; [*0318.0020.0004][.1E72.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x1f11f };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_050)
{
    // 1F120 ; [*0318.0020.0004][.1E87.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER Q

    uint32_t const cps[1] = { 0x1f120 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_051)
{
    // 1F121 ; [*0318.0020.0004][.1E99.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x1f121 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_052)
{
    // 1F122 ; [*0318.0020.0004][.1ED7.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x1f122 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_053)
{
    // 1F123 ; [*0318.0020.0004][.1EFB.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER T

    uint32_t const cps[1] = { 0x1f123 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_054)
{
    // 1F124 ; [*0318.0020.0004][.1F1B.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x1f124 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_055)
{
    // 1F125 ; [*0318.0020.0004][.1F49.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0x1f125 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_056)
{
    // 1F126 ; [*0318.0020.0004][.1F5B.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0x1f126 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_057)
{
    // 1F127 ; [*0318.0020.0004][.1F65.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0x1f127 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_058)
{
    // 1F128 ; [*0318.0020.0004][.1F71.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0x1f128 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_059)
{
    // 1F129 ; [*0318.0020.0004][.1F87.0020.000A][*0319.0020.0004] 
    // PARENTHESIZED LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0x1f129 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_060)
{
    // 1F12A ; [*037A.0020.0004][.1ED7.0020.000A][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x1f12a };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_061)
{
    // 1F12B ; [.1CE0.0020.000C] 
    // CIRCLED ITALIC LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x1f12b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_062)
{
    // 1F12C ; [.1E99.0020.000C] 
    // CIRCLED ITALIC LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x1f12c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_063)
{
    // 1F12D ; [.1CE0.0020.000C][.1CF5.0020.000C] 
    // CIRCLED CD

    uint32_t const cps[1] = { 0x1f12d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xc)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_064)
{
    // 1F12E ; [.1F5B.0020.000C][.1F87.0020.000C] 
    // CIRCLED WZ

    uint32_t const cps[1] = { 0x1f12e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xc)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_065)
{
    // 1F130 ; [.1CAD.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x1f130 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_066)
{
    // 1F131 ; [.1CC6.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER B

    uint32_t const cps[1] = { 0x1f131 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_067)
{
    // 1F132 ; [.1CE0.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x1f132 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_068)
{
    // 1F133 ; [.1CF5.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER D

    uint32_t const cps[1] = { 0x1f133 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_069)
{
    // 1F134 ; [.1D10.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x1f134 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_070)
{
    // 1F135 ; [.1D4B.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER F

    uint32_t const cps[1] = { 0x1f135 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_071)
{
    // 1F136 ; [.1D5A.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER G

    uint32_t const cps[1] = { 0x1f136 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_072)
{
    // 1F137 ; [.1D7E.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER H

    uint32_t const cps[1] = { 0x1f137 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_073)
{
    // 1F138 ; [.1D98.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x1f138 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_074)
{
    // 1F139 ; [.1DB2.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER J

    uint32_t const cps[1] = { 0x1f139 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_075)
{
    // 1F13A ; [.1DCB.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER K

    uint32_t const cps[1] = { 0x1f13a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_076)
{
    // 1F13B ; [.1DDD.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER L

    uint32_t const cps[1] = { 0x1f13b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_077)
{
    // 1F13C ; [.1E10.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER M

    uint32_t const cps[1] = { 0x1f13c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_078)
{
    // 1F13D ; [.1E1F.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER N

    uint32_t const cps[1] = { 0x1f13d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_079)
{
    // 1F13E ; [.1E43.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x1f13e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_080)
{
    // 1F13F ; [.1E72.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x1f13f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_081)
{
    // 1F140 ; [.1E87.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER Q

    uint32_t const cps[1] = { 0x1f140 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_082)
{
    // 1F141 ; [.1E99.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x1f141 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_083)
{
    // 1F142 ; [.1ED7.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x1f142 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_084)
{
    // 1F143 ; [.1EFB.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER T

    uint32_t const cps[1] = { 0x1f143 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_085)
{
    // 1F144 ; [.1F1B.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x1f144 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_086)
{
    // 1F145 ; [.1F49.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0x1f145 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_087)
{
    // 1F146 ; [.1F5B.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0x1f146 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_088)
{
    // 1F147 ; [.1F65.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0x1f147 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_089)
{
    // 1F148 ; [.1F71.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0x1f148 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_090)
{
    // 1F149 ; [.1F87.0020.001D] 
    // SQUARED LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0x1f149 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_091)
{
    // 1F14A ; [.1D7E.0020.001D][.1F49.0020.001D] 
    // SQUARED HV

    uint32_t const cps[1] = { 0x1f14a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_092)
{
    // 1F14B ; [.1E10.0020.001D][.1F49.0020.001D] 
    // SQUARED MV

    uint32_t const cps[1] = { 0x1f14b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_093)
{
    // 1F14C ; [.1ED7.0020.001D][.1CF5.0020.001D] 
    // SQUARED SD

    uint32_t const cps[1] = { 0x1f14c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_094)
{
    // 1F14D ; [.1ED7.0020.001D][.1ED7.0020.001D] 
    // SQUARED SS

    uint32_t const cps[1] = { 0x1f14d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_095)
{
    // 1F14E ; [.1E72.0020.001D][.1E72.0020.001D][.1F49.0020.001D] 
    // SQUARED PPV

    uint32_t const cps[1] = { 0x1f14e };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_191_096)
{
    // 1F14F ; [.1F5B.0020.001D][.1CE0.0020.001D] 
    // SQUARED WC

    uint32_t const cps[1] = { 0x1f14f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_097)
{
    // 1F150 ; [.1CAD.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x1f150 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_098)
{
    // 1F151 ; [.1CC6.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER B

    uint32_t const cps[1] = { 0x1f151 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_099)
{
    // 1F152 ; [.1CE0.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x1f152 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_100)
{
    // 1F153 ; [.1CF5.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER D

    uint32_t const cps[1] = { 0x1f153 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_101)
{
    // 1F154 ; [.1D10.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x1f154 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_102)
{
    // 1F155 ; [.1D4B.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER F

    uint32_t const cps[1] = { 0x1f155 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_103)
{
    // 1F156 ; [.1D5A.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER G

    uint32_t const cps[1] = { 0x1f156 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_104)
{
    // 1F157 ; [.1D7E.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER H

    uint32_t const cps[1] = { 0x1f157 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_105)
{
    // 1F158 ; [.1D98.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x1f158 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_106)
{
    // 1F159 ; [.1DB2.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER J

    uint32_t const cps[1] = { 0x1f159 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_107)
{
    // 1F15A ; [.1DCB.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER K

    uint32_t const cps[1] = { 0x1f15a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_108)
{
    // 1F15B ; [.1DDD.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER L

    uint32_t const cps[1] = { 0x1f15b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_109)
{
    // 1F15C ; [.1E10.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER M

    uint32_t const cps[1] = { 0x1f15c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_110)
{
    // 1F15D ; [.1E1F.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER N

    uint32_t const cps[1] = { 0x1f15d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_111)
{
    // 1F15E ; [.1E43.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x1f15e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_112)
{
    // 1F15F ; [.1E72.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x1f15f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_113)
{
    // 1F160 ; [.1E87.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER Q

    uint32_t const cps[1] = { 0x1f160 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_114)
{
    // 1F161 ; [.1E99.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x1f161 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_115)
{
    // 1F162 ; [.1ED7.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x1f162 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_116)
{
    // 1F163 ; [.1EFB.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER T

    uint32_t const cps[1] = { 0x1f163 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_117)
{
    // 1F164 ; [.1F1B.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x1f164 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_118)
{
    // 1F165 ; [.1F49.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0x1f165 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_119)
{
    // 1F166 ; [.1F5B.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0x1f166 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_120)
{
    // 1F167 ; [.1F65.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0x1f167 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_121)
{
    // 1F168 ; [.1F71.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0x1f168 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_122)
{
    // 1F169 ; [.1F87.0020.000C] 
    // NEGATIVE CIRCLED LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0x1f169 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_123)
{
    // 1F16A ; [.1E10.0020.0014][.1CE0.0020.0014] 
    // RAISED MC SIGN

    uint32_t const cps[1] = { 0x1f16a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_124)
{
    // 1F16B ; [.1E10.0020.0014][.1CF5.0020.0014] 
    // RAISED MD SIGN

    uint32_t const cps[1] = { 0x1f16b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_191_125)
{
    // 1F170 ; [.1CAD.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x1f170 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_126)
{
    // 1F171 ; [.1CC6.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER B

    uint32_t const cps[1] = { 0x1f171 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_127)
{
    // 1F172 ; [.1CE0.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x1f172 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_128)
{
    // 1F173 ; [.1CF5.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER D

    uint32_t const cps[1] = { 0x1f173 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_129)
{
    // 1F174 ; [.1D10.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x1f174 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_130)
{
    // 1F175 ; [.1D4B.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER F

    uint32_t const cps[1] = { 0x1f175 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_131)
{
    // 1F176 ; [.1D5A.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER G

    uint32_t const cps[1] = { 0x1f176 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_132)
{
    // 1F177 ; [.1D7E.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER H

    uint32_t const cps[1] = { 0x1f177 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_133)
{
    // 1F178 ; [.1D98.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x1f178 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_134)
{
    // 1F179 ; [.1DB2.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER J

    uint32_t const cps[1] = { 0x1f179 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_135)
{
    // 1F17A ; [.1DCB.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER K

    uint32_t const cps[1] = { 0x1f17a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_136)
{
    // 1F17B ; [.1DDD.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER L

    uint32_t const cps[1] = { 0x1f17b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_137)
{
    // 1F17C ; [.1E10.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER M

    uint32_t const cps[1] = { 0x1f17c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_138)
{
    // 1F17D ; [.1E1F.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER N

    uint32_t const cps[1] = { 0x1f17d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_139)
{
    // 1F17E ; [.1E43.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x1f17e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_140)
{
    // 1F17F ; [.1E72.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x1f17f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_141)
{
    // 1F180 ; [.1E87.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER Q

    uint32_t const cps[1] = { 0x1f180 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_142)
{
    // 1F181 ; [.1E99.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x1f181 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_143)
{
    // 1F182 ; [.1ED7.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x1f182 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_144)
{
    // 1F183 ; [.1EFB.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER T

    uint32_t const cps[1] = { 0x1f183 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_145)
{
    // 1F184 ; [.1F1B.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x1f184 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_146)
{
    // 1F185 ; [.1F49.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0x1f185 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_147)
{
    // 1F186 ; [.1F5B.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0x1f186 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_148)
{
    // 1F187 ; [.1F65.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0x1f187 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_191_149)
{
    // 1F188 ; [.1F71.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0x1f188 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

