// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_030_000)
{
    // 25D3 0041;	
    // (◓) CIRCLE WITH UPPER HALF BLACK	[0902 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D3, 0x0041 };
    uint32_t const ces[9] = { 0x0902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_001)
{
    // 25D3 0062;	
    // (◓) CIRCLE WITH UPPER HALF BLACK	[0902 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D3, 0x0062 };
    uint32_t const ces[9] = { 0x0902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_002)
{
    // 25D4 0021;	
    // (◔) CIRCLE WITH UPPER RIGHT QUADRANT BLACK	[0903 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D4, 0x0021 };
    uint32_t const ces[9] = { 0x0903, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_003)
{
    // 25D4 003F;	
    // (◔) CIRCLE WITH UPPER RIGHT QUADRANT BLACK	[0903 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D4, 0x003F };
    uint32_t const ces[9] = { 0x0903, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_004)
{
    // 25D4 0061;	
    // (◔) CIRCLE WITH UPPER RIGHT QUADRANT BLACK	[0903 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D4, 0x0061 };
    uint32_t const ces[9] = { 0x0903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_005)
{
    // 25D4 0041;	
    // (◔) CIRCLE WITH UPPER RIGHT QUADRANT BLACK	[0903 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D4, 0x0041 };
    uint32_t const ces[9] = { 0x0903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_006)
{
    // 25D4 0062;	
    // (◔) CIRCLE WITH UPPER RIGHT QUADRANT BLACK	[0903 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D4, 0x0062 };
    uint32_t const ces[9] = { 0x0903, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_007)
{
    // 25D5 0021;	
    // (◕) CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK	[0904 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D5, 0x0021 };
    uint32_t const ces[9] = { 0x0904, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_008)
{
    // 25D5 003F;	
    // (◕) CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK	[0904 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D5, 0x003F };
    uint32_t const ces[9] = { 0x0904, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_009)
{
    // 25D5 0061;	
    // (◕) CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK	[0904 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D5, 0x0061 };
    uint32_t const ces[9] = { 0x0904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_010)
{
    // 25D5 0041;	
    // (◕) CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK	[0904 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D5, 0x0041 };
    uint32_t const ces[9] = { 0x0904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_011)
{
    // 25D5 0062;	
    // (◕) CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK	[0904 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D5, 0x0062 };
    uint32_t const ces[9] = { 0x0904, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_012)
{
    // 25D6 0021;	
    // (◖) LEFT HALF BLACK CIRCLE	[0905 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D6, 0x0021 };
    uint32_t const ces[9] = { 0x0905, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_013)
{
    // 25D6 003F;	
    // (◖) LEFT HALF BLACK CIRCLE	[0905 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D6, 0x003F };
    uint32_t const ces[9] = { 0x0905, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_014)
{
    // 25D6 0061;	
    // (◖) LEFT HALF BLACK CIRCLE	[0905 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D6, 0x0061 };
    uint32_t const ces[9] = { 0x0905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_015)
{
    // 25D6 0041;	
    // (◖) LEFT HALF BLACK CIRCLE	[0905 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D6, 0x0041 };
    uint32_t const ces[9] = { 0x0905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_016)
{
    // 25D6 0062;	
    // (◖) LEFT HALF BLACK CIRCLE	[0905 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D6, 0x0062 };
    uint32_t const ces[9] = { 0x0905, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_017)
{
    // 25D7 0021;	
    // (◗) RIGHT HALF BLACK CIRCLE	[0906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D7, 0x0021 };
    uint32_t const ces[9] = { 0x0906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_018)
{
    // 25D7 003F;	
    // (◗) RIGHT HALF BLACK CIRCLE	[0906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D7, 0x003F };
    uint32_t const ces[9] = { 0x0906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_019)
{
    // 25D7 0061;	
    // (◗) RIGHT HALF BLACK CIRCLE	[0906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D7, 0x0061 };
    uint32_t const ces[9] = { 0x0906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_020)
{
    // 25D7 0041;	
    // (◗) RIGHT HALF BLACK CIRCLE	[0906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D7, 0x0041 };
    uint32_t const ces[9] = { 0x0906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_021)
{
    // 25D7 0062;	
    // (◗) RIGHT HALF BLACK CIRCLE	[0906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D7, 0x0062 };
    uint32_t const ces[9] = { 0x0906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_022)
{
    // 25D8 0021;	
    // (◘) INVERSE BULLET	[0907 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D8, 0x0021 };
    uint32_t const ces[9] = { 0x0907, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_023)
{
    // 25D8 003F;	
    // (◘) INVERSE BULLET	[0907 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D8, 0x003F };
    uint32_t const ces[9] = { 0x0907, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_024)
{
    // 25D8 0061;	
    // (◘) INVERSE BULLET	[0907 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D8, 0x0061 };
    uint32_t const ces[9] = { 0x0907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_025)
{
    // 25D8 0041;	
    // (◘) INVERSE BULLET	[0907 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D8, 0x0041 };
    uint32_t const ces[9] = { 0x0907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_026)
{
    // 25D8 0062;	
    // (◘) INVERSE BULLET	[0907 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D8, 0x0062 };
    uint32_t const ces[9] = { 0x0907, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_027)
{
    // 25D9 0021;	
    // (◙) INVERSE WHITE CIRCLE	[0908 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D9, 0x0021 };
    uint32_t const ces[9] = { 0x0908, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_028)
{
    // 25D9 003F;	
    // (◙) INVERSE WHITE CIRCLE	[0908 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D9, 0x003F };
    uint32_t const ces[9] = { 0x0908, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_029)
{
    // 25D9 0061;	
    // (◙) INVERSE WHITE CIRCLE	[0908 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D9, 0x0061 };
    uint32_t const ces[9] = { 0x0908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_030)
{
    // 25D9 0041;	
    // (◙) INVERSE WHITE CIRCLE	[0908 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D9, 0x0041 };
    uint32_t const ces[9] = { 0x0908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_031)
{
    // 25D9 0062;	
    // (◙) INVERSE WHITE CIRCLE	[0908 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D9, 0x0062 };
    uint32_t const ces[9] = { 0x0908, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_032)
{
    // 25DA 0021;	
    // (◚) UPPER HALF INVERSE WHITE CIRCLE	[0909 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DA, 0x0021 };
    uint32_t const ces[9] = { 0x0909, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_033)
{
    // 25DA 003F;	
    // (◚) UPPER HALF INVERSE WHITE CIRCLE	[0909 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DA, 0x003F };
    uint32_t const ces[9] = { 0x0909, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_034)
{
    // 25DA 0061;	
    // (◚) UPPER HALF INVERSE WHITE CIRCLE	[0909 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DA, 0x0061 };
    uint32_t const ces[9] = { 0x0909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_035)
{
    // 25DA 0041;	
    // (◚) UPPER HALF INVERSE WHITE CIRCLE	[0909 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DA, 0x0041 };
    uint32_t const ces[9] = { 0x0909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_036)
{
    // 25DA 0062;	
    // (◚) UPPER HALF INVERSE WHITE CIRCLE	[0909 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DA, 0x0062 };
    uint32_t const ces[9] = { 0x0909, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_037)
{
    // 25DB 0021;	
    // (◛) LOWER HALF INVERSE WHITE CIRCLE	[090A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DB, 0x0021 };
    uint32_t const ces[9] = { 0x090A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_038)
{
    // 25DB 003F;	
    // (◛) LOWER HALF INVERSE WHITE CIRCLE	[090A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DB, 0x003F };
    uint32_t const ces[9] = { 0x090A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_039)
{
    // 25DB 0061;	
    // (◛) LOWER HALF INVERSE WHITE CIRCLE	[090A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DB, 0x0061 };
    uint32_t const ces[9] = { 0x090A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_040)
{
    // 25DB 0041;	
    // (◛) LOWER HALF INVERSE WHITE CIRCLE	[090A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DB, 0x0041 };
    uint32_t const ces[9] = { 0x090A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_041)
{
    // 25DB 0062;	
    // (◛) LOWER HALF INVERSE WHITE CIRCLE	[090A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DB, 0x0062 };
    uint32_t const ces[9] = { 0x090A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_042)
{
    // 25DC 0021;	
    // (◜) UPPER LEFT QUADRANT CIRCULAR ARC	[090B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DC, 0x0021 };
    uint32_t const ces[9] = { 0x090B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_043)
{
    // 25DC 003F;	
    // (◜) UPPER LEFT QUADRANT CIRCULAR ARC	[090B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DC, 0x003F };
    uint32_t const ces[9] = { 0x090B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_044)
{
    // 25DC 0061;	
    // (◜) UPPER LEFT QUADRANT CIRCULAR ARC	[090B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DC, 0x0061 };
    uint32_t const ces[9] = { 0x090B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_045)
{
    // 25DC 0041;	
    // (◜) UPPER LEFT QUADRANT CIRCULAR ARC	[090B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DC, 0x0041 };
    uint32_t const ces[9] = { 0x090B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_046)
{
    // 25DC 0062;	
    // (◜) UPPER LEFT QUADRANT CIRCULAR ARC	[090B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DC, 0x0062 };
    uint32_t const ces[9] = { 0x090B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_047)
{
    // 25DD 0021;	
    // (◝) UPPER RIGHT QUADRANT CIRCULAR ARC	[090C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DD, 0x0021 };
    uint32_t const ces[9] = { 0x090C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_048)
{
    // 25DD 003F;	
    // (◝) UPPER RIGHT QUADRANT CIRCULAR ARC	[090C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DD, 0x003F };
    uint32_t const ces[9] = { 0x090C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_049)
{
    // 25DD 0061;	
    // (◝) UPPER RIGHT QUADRANT CIRCULAR ARC	[090C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DD, 0x0061 };
    uint32_t const ces[9] = { 0x090C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_050)
{
    // 25DD 0041;	
    // (◝) UPPER RIGHT QUADRANT CIRCULAR ARC	[090C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DD, 0x0041 };
    uint32_t const ces[9] = { 0x090C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_051)
{
    // 25DD 0062;	
    // (◝) UPPER RIGHT QUADRANT CIRCULAR ARC	[090C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DD, 0x0062 };
    uint32_t const ces[9] = { 0x090C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_052)
{
    // 25DE 0021;	
    // (◞) LOWER RIGHT QUADRANT CIRCULAR ARC	[090D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DE, 0x0021 };
    uint32_t const ces[9] = { 0x090D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_053)
{
    // 25DE 003F;	
    // (◞) LOWER RIGHT QUADRANT CIRCULAR ARC	[090D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DE, 0x003F };
    uint32_t const ces[9] = { 0x090D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_054)
{
    // 25DE 0061;	
    // (◞) LOWER RIGHT QUADRANT CIRCULAR ARC	[090D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DE, 0x0061 };
    uint32_t const ces[9] = { 0x090D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_055)
{
    // 25DE 0041;	
    // (◞) LOWER RIGHT QUADRANT CIRCULAR ARC	[090D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DE, 0x0041 };
    uint32_t const ces[9] = { 0x090D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_056)
{
    // 25DE 0062;	
    // (◞) LOWER RIGHT QUADRANT CIRCULAR ARC	[090D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DE, 0x0062 };
    uint32_t const ces[9] = { 0x090D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_057)
{
    // 25DF 0021;	
    // (◟) LOWER LEFT QUADRANT CIRCULAR ARC	[090E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DF, 0x0021 };
    uint32_t const ces[9] = { 0x090E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_058)
{
    // 25DF 003F;	
    // (◟) LOWER LEFT QUADRANT CIRCULAR ARC	[090E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DF, 0x003F };
    uint32_t const ces[9] = { 0x090E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_059)
{
    // 25DF 0061;	
    // (◟) LOWER LEFT QUADRANT CIRCULAR ARC	[090E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DF, 0x0061 };
    uint32_t const ces[9] = { 0x090E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_060)
{
    // 25DF 0041;	
    // (◟) LOWER LEFT QUADRANT CIRCULAR ARC	[090E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25DF, 0x0041 };
    uint32_t const ces[9] = { 0x090E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_061)
{
    // 25DF 0062;	
    // (◟) LOWER LEFT QUADRANT CIRCULAR ARC	[090E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25DF, 0x0062 };
    uint32_t const ces[9] = { 0x090E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_062)
{
    // 25E0 0021;	
    // (◠) UPPER HALF CIRCLE	[090F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E0, 0x0021 };
    uint32_t const ces[9] = { 0x090F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_063)
{
    // 25E0 003F;	
    // (◠) UPPER HALF CIRCLE	[090F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E0, 0x003F };
    uint32_t const ces[9] = { 0x090F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_064)
{
    // 25E0 0061;	
    // (◠) UPPER HALF CIRCLE	[090F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E0, 0x0061 };
    uint32_t const ces[9] = { 0x090F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_065)
{
    // 25E0 0041;	
    // (◠) UPPER HALF CIRCLE	[090F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E0, 0x0041 };
    uint32_t const ces[9] = { 0x090F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_066)
{
    // 25E0 0062;	
    // (◠) UPPER HALF CIRCLE	[090F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E0, 0x0062 };
    uint32_t const ces[9] = { 0x090F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_067)
{
    // 25E1 0021;	
    // (◡) LOWER HALF CIRCLE	[0910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E1, 0x0021 };
    uint32_t const ces[9] = { 0x0910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_068)
{
    // 25E1 003F;	
    // (◡) LOWER HALF CIRCLE	[0910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E1, 0x003F };
    uint32_t const ces[9] = { 0x0910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_069)
{
    // 25E1 0061;	
    // (◡) LOWER HALF CIRCLE	[0910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E1, 0x0061 };
    uint32_t const ces[9] = { 0x0910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_070)
{
    // 25E1 0041;	
    // (◡) LOWER HALF CIRCLE	[0910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E1, 0x0041 };
    uint32_t const ces[9] = { 0x0910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_071)
{
    // 25E1 0062;	
    // (◡) LOWER HALF CIRCLE	[0910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E1, 0x0062 };
    uint32_t const ces[9] = { 0x0910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_072)
{
    // 25E2 0021;	
    // (◢) BLACK LOWER RIGHT TRIANGLE	[0911 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E2, 0x0021 };
    uint32_t const ces[9] = { 0x0911, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_073)
{
    // 25E2 003F;	
    // (◢) BLACK LOWER RIGHT TRIANGLE	[0911 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E2, 0x003F };
    uint32_t const ces[9] = { 0x0911, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_074)
{
    // 25E2 0061;	
    // (◢) BLACK LOWER RIGHT TRIANGLE	[0911 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E2, 0x0061 };
    uint32_t const ces[9] = { 0x0911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_075)
{
    // 25E2 0041;	
    // (◢) BLACK LOWER RIGHT TRIANGLE	[0911 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E2, 0x0041 };
    uint32_t const ces[9] = { 0x0911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_076)
{
    // 25E2 0062;	
    // (◢) BLACK LOWER RIGHT TRIANGLE	[0911 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E2, 0x0062 };
    uint32_t const ces[9] = { 0x0911, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_077)
{
    // 25E3 0021;	
    // (◣) BLACK LOWER LEFT TRIANGLE	[0912 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E3, 0x0021 };
    uint32_t const ces[9] = { 0x0912, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_078)
{
    // 25E3 003F;	
    // (◣) BLACK LOWER LEFT TRIANGLE	[0912 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E3, 0x003F };
    uint32_t const ces[9] = { 0x0912, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_079)
{
    // 25E3 0061;	
    // (◣) BLACK LOWER LEFT TRIANGLE	[0912 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E3, 0x0061 };
    uint32_t const ces[9] = { 0x0912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_080)
{
    // 25E3 0041;	
    // (◣) BLACK LOWER LEFT TRIANGLE	[0912 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E3, 0x0041 };
    uint32_t const ces[9] = { 0x0912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_081)
{
    // 25E3 0062;	
    // (◣) BLACK LOWER LEFT TRIANGLE	[0912 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E3, 0x0062 };
    uint32_t const ces[9] = { 0x0912, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_082)
{
    // 25E4 0021;	
    // (◤) BLACK UPPER LEFT TRIANGLE	[0913 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E4, 0x0021 };
    uint32_t const ces[9] = { 0x0913, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_083)
{
    // 25E4 003F;	
    // (◤) BLACK UPPER LEFT TRIANGLE	[0913 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E4, 0x003F };
    uint32_t const ces[9] = { 0x0913, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_084)
{
    // 25E4 0061;	
    // (◤) BLACK UPPER LEFT TRIANGLE	[0913 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E4, 0x0061 };
    uint32_t const ces[9] = { 0x0913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_085)
{
    // 25E4 0041;	
    // (◤) BLACK UPPER LEFT TRIANGLE	[0913 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E4, 0x0041 };
    uint32_t const ces[9] = { 0x0913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_086)
{
    // 25E4 0062;	
    // (◤) BLACK UPPER LEFT TRIANGLE	[0913 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E4, 0x0062 };
    uint32_t const ces[9] = { 0x0913, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_087)
{
    // 25E5 0021;	
    // (◥) BLACK UPPER RIGHT TRIANGLE	[0914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E5, 0x0021 };
    uint32_t const ces[9] = { 0x0914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_088)
{
    // 25E5 003F;	
    // (◥) BLACK UPPER RIGHT TRIANGLE	[0914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E5, 0x003F };
    uint32_t const ces[9] = { 0x0914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_089)
{
    // 25E5 0061;	
    // (◥) BLACK UPPER RIGHT TRIANGLE	[0914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E5, 0x0061 };
    uint32_t const ces[9] = { 0x0914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_090)
{
    // 25E5 0041;	
    // (◥) BLACK UPPER RIGHT TRIANGLE	[0914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E5, 0x0041 };
    uint32_t const ces[9] = { 0x0914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_091)
{
    // 25E5 0062;	
    // (◥) BLACK UPPER RIGHT TRIANGLE	[0914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E5, 0x0062 };
    uint32_t const ces[9] = { 0x0914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_092)
{
    // 25E6 0021;	
    // (◦) WHITE BULLET	[0915 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E6, 0x0021 };
    uint32_t const ces[9] = { 0x0915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_093)
{
    // 25E6 003F;	
    // (◦) WHITE BULLET	[0915 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E6, 0x003F };
    uint32_t const ces[9] = { 0x0915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_094)
{
    // 25E6 0061;	
    // (◦) WHITE BULLET	[0915 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E6, 0x0061 };
    uint32_t const ces[9] = { 0x0915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_095)
{
    // 25E6 0041;	
    // (◦) WHITE BULLET	[0915 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E6, 0x0041 };
    uint32_t const ces[9] = { 0x0915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_096)
{
    // 25E6 0062;	
    // (◦) WHITE BULLET	[0915 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E6, 0x0062 };
    uint32_t const ces[9] = { 0x0915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_097)
{
    // 25E7 0021;	
    // (◧) SQUARE WITH LEFT HALF BLACK	[0916 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E7, 0x0021 };
    uint32_t const ces[9] = { 0x0916, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_098)
{
    // 25E7 003F;	
    // (◧) SQUARE WITH LEFT HALF BLACK	[0916 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E7, 0x003F };
    uint32_t const ces[9] = { 0x0916, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_099)
{
    // 25E7 0061;	
    // (◧) SQUARE WITH LEFT HALF BLACK	[0916 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E7, 0x0061 };
    uint32_t const ces[9] = { 0x0916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_100)
{
    // 25E7 0041;	
    // (◧) SQUARE WITH LEFT HALF BLACK	[0916 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E7, 0x0041 };
    uint32_t const ces[9] = { 0x0916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_101)
{
    // 25E7 0062;	
    // (◧) SQUARE WITH LEFT HALF BLACK	[0916 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E7, 0x0062 };
    uint32_t const ces[9] = { 0x0916, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_102)
{
    // 25E8 0021;	
    // (◨) SQUARE WITH RIGHT HALF BLACK	[0917 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E8, 0x0021 };
    uint32_t const ces[9] = { 0x0917, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_103)
{
    // 25E8 003F;	
    // (◨) SQUARE WITH RIGHT HALF BLACK	[0917 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E8, 0x003F };
    uint32_t const ces[9] = { 0x0917, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_104)
{
    // 25E8 0061;	
    // (◨) SQUARE WITH RIGHT HALF BLACK	[0917 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E8, 0x0061 };
    uint32_t const ces[9] = { 0x0917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_105)
{
    // 25E8 0041;	
    // (◨) SQUARE WITH RIGHT HALF BLACK	[0917 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E8, 0x0041 };
    uint32_t const ces[9] = { 0x0917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_106)
{
    // 25E8 0062;	
    // (◨) SQUARE WITH RIGHT HALF BLACK	[0917 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E8, 0x0062 };
    uint32_t const ces[9] = { 0x0917, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_107)
{
    // 25E9 0021;	
    // (◩) SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK	[0918 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E9, 0x0021 };
    uint32_t const ces[9] = { 0x0918, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_108)
{
    // 25E9 003F;	
    // (◩) SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK	[0918 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E9, 0x003F };
    uint32_t const ces[9] = { 0x0918, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_109)
{
    // 25E9 0061;	
    // (◩) SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK	[0918 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E9, 0x0061 };
    uint32_t const ces[9] = { 0x0918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_110)
{
    // 25E9 0041;	
    // (◩) SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK	[0918 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25E9, 0x0041 };
    uint32_t const ces[9] = { 0x0918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_111)
{
    // 25E9 0062;	
    // (◩) SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK	[0918 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25E9, 0x0062 };
    uint32_t const ces[9] = { 0x0918, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_112)
{
    // 25EA 0021;	
    // (◪) SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK	[0919 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EA, 0x0021 };
    uint32_t const ces[9] = { 0x0919, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_113)
{
    // 25EA 003F;	
    // (◪) SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK	[0919 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EA, 0x003F };
    uint32_t const ces[9] = { 0x0919, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_114)
{
    // 25EA 0061;	
    // (◪) SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK	[0919 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EA, 0x0061 };
    uint32_t const ces[9] = { 0x0919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_115)
{
    // 25EA 0041;	
    // (◪) SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK	[0919 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25EA, 0x0041 };
    uint32_t const ces[9] = { 0x0919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_116)
{
    // 25EA 0062;	
    // (◪) SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK	[0919 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EA, 0x0062 };
    uint32_t const ces[9] = { 0x0919, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_117)
{
    // 25EB 0021;	
    // (◫) WHITE SQUARE WITH VERTICAL BISECTING LINE	[091A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EB, 0x0021 };
    uint32_t const ces[9] = { 0x091A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_118)
{
    // 25EB 003F;	
    // (◫) WHITE SQUARE WITH VERTICAL BISECTING LINE	[091A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EB, 0x003F };
    uint32_t const ces[9] = { 0x091A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_119)
{
    // 25EB 0061;	
    // (◫) WHITE SQUARE WITH VERTICAL BISECTING LINE	[091A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EB, 0x0061 };
    uint32_t const ces[9] = { 0x091A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_120)
{
    // 25EB 0041;	
    // (◫) WHITE SQUARE WITH VERTICAL BISECTING LINE	[091A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25EB, 0x0041 };
    uint32_t const ces[9] = { 0x091A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_121)
{
    // 25EB 0062;	
    // (◫) WHITE SQUARE WITH VERTICAL BISECTING LINE	[091A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EB, 0x0062 };
    uint32_t const ces[9] = { 0x091A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_122)
{
    // 25EC 0021;	
    // (◬) WHITE UP-POINTING TRIANGLE WITH DOT	[091B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EC, 0x0021 };
    uint32_t const ces[9] = { 0x091B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_123)
{
    // 25EC 003F;	
    // (◬) WHITE UP-POINTING TRIANGLE WITH DOT	[091B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EC, 0x003F };
    uint32_t const ces[9] = { 0x091B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_124)
{
    // 25EC 0061;	
    // (◬) WHITE UP-POINTING TRIANGLE WITH DOT	[091B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EC, 0x0061 };
    uint32_t const ces[9] = { 0x091B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_125)
{
    // 25EC 0041;	
    // (◬) WHITE UP-POINTING TRIANGLE WITH DOT	[091B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25EC, 0x0041 };
    uint32_t const ces[9] = { 0x091B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_126)
{
    // 25EC 0062;	
    // (◬) WHITE UP-POINTING TRIANGLE WITH DOT	[091B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EC, 0x0062 };
    uint32_t const ces[9] = { 0x091B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_127)
{
    // 25ED 0021;	
    // (◭) UP-POINTING TRIANGLE WITH LEFT HALF BLACK	[091C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25ED, 0x0021 };
    uint32_t const ces[9] = { 0x091C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_128)
{
    // 25ED 003F;	
    // (◭) UP-POINTING TRIANGLE WITH LEFT HALF BLACK	[091C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25ED, 0x003F };
    uint32_t const ces[9] = { 0x091C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_129)
{
    // 25ED 0061;	
    // (◭) UP-POINTING TRIANGLE WITH LEFT HALF BLACK	[091C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25ED, 0x0061 };
    uint32_t const ces[9] = { 0x091C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_130)
{
    // 25ED 0041;	
    // (◭) UP-POINTING TRIANGLE WITH LEFT HALF BLACK	[091C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25ED, 0x0041 };
    uint32_t const ces[9] = { 0x091C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_131)
{
    // 25ED 0062;	
    // (◭) UP-POINTING TRIANGLE WITH LEFT HALF BLACK	[091C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25ED, 0x0062 };
    uint32_t const ces[9] = { 0x091C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_132)
{
    // 25EE 0021;	
    // (◮) UP-POINTING TRIANGLE WITH RIGHT HALF BLACK	[091D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EE, 0x0021 };
    uint32_t const ces[9] = { 0x091D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_133)
{
    // 25EE 003F;	
    // (◮) UP-POINTING TRIANGLE WITH RIGHT HALF BLACK	[091D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EE, 0x003F };
    uint32_t const ces[9] = { 0x091D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_134)
{
    // 25EE 0061;	
    // (◮) UP-POINTING TRIANGLE WITH RIGHT HALF BLACK	[091D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EE, 0x0061 };
    uint32_t const ces[9] = { 0x091D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_135)
{
    // 25EE 0041;	
    // (◮) UP-POINTING TRIANGLE WITH RIGHT HALF BLACK	[091D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25EE, 0x0041 };
    uint32_t const ces[9] = { 0x091D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_136)
{
    // 25EE 0062;	
    // (◮) UP-POINTING TRIANGLE WITH RIGHT HALF BLACK	[091D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EE, 0x0062 };
    uint32_t const ces[9] = { 0x091D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_137)
{
    // 25EF 0021;	
    // (◯) LARGE CIRCLE	[091E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EF, 0x0021 };
    uint32_t const ces[9] = { 0x091E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_138)
{
    // 25EF 003F;	
    // (◯) LARGE CIRCLE	[091E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EF, 0x003F };
    uint32_t const ces[9] = { 0x091E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_139)
{
    // 25EF 0061;	
    // (◯) LARGE CIRCLE	[091E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EF, 0x0061 };
    uint32_t const ces[9] = { 0x091E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_140)
{
    // 25EF 0041;	
    // (◯) LARGE CIRCLE	[091E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25EF, 0x0041 };
    uint32_t const ces[9] = { 0x091E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_141)
{
    // 25EF 0062;	
    // (◯) LARGE CIRCLE	[091E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25EF, 0x0062 };
    uint32_t const ces[9] = { 0x091E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_142)
{
    // 25F0 0021;	
    // (◰) WHITE SQUARE WITH UPPER LEFT QUADRANT	[091F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F0, 0x0021 };
    uint32_t const ces[9] = { 0x091F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_143)
{
    // 25F0 003F;	
    // (◰) WHITE SQUARE WITH UPPER LEFT QUADRANT	[091F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F0, 0x003F };
    uint32_t const ces[9] = { 0x091F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_144)
{
    // 25F0 0061;	
    // (◰) WHITE SQUARE WITH UPPER LEFT QUADRANT	[091F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F0, 0x0061 };
    uint32_t const ces[9] = { 0x091F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_145)
{
    // 25F0 0041;	
    // (◰) WHITE SQUARE WITH UPPER LEFT QUADRANT	[091F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F0, 0x0041 };
    uint32_t const ces[9] = { 0x091F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_146)
{
    // 25F0 0062;	
    // (◰) WHITE SQUARE WITH UPPER LEFT QUADRANT	[091F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F0, 0x0062 };
    uint32_t const ces[9] = { 0x091F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_147)
{
    // 25F1 0021;	
    // (◱) WHITE SQUARE WITH LOWER LEFT QUADRANT	[0920 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F1, 0x0021 };
    uint32_t const ces[9] = { 0x0920, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_148)
{
    // 25F1 003F;	
    // (◱) WHITE SQUARE WITH LOWER LEFT QUADRANT	[0920 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F1, 0x003F };
    uint32_t const ces[9] = { 0x0920, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_149)
{
    // 25F1 0061;	
    // (◱) WHITE SQUARE WITH LOWER LEFT QUADRANT	[0920 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F1, 0x0061 };
    uint32_t const ces[9] = { 0x0920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_150)
{
    // 25F1 0041;	
    // (◱) WHITE SQUARE WITH LOWER LEFT QUADRANT	[0920 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F1, 0x0041 };
    uint32_t const ces[9] = { 0x0920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_151)
{
    // 25F1 0062;	
    // (◱) WHITE SQUARE WITH LOWER LEFT QUADRANT	[0920 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F1, 0x0062 };
    uint32_t const ces[9] = { 0x0920, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_152)
{
    // 25F2 0021;	
    // (◲) WHITE SQUARE WITH LOWER RIGHT QUADRANT	[0921 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F2, 0x0021 };
    uint32_t const ces[9] = { 0x0921, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_153)
{
    // 25F2 003F;	
    // (◲) WHITE SQUARE WITH LOWER RIGHT QUADRANT	[0921 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F2, 0x003F };
    uint32_t const ces[9] = { 0x0921, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_154)
{
    // 25F2 0061;	
    // (◲) WHITE SQUARE WITH LOWER RIGHT QUADRANT	[0921 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F2, 0x0061 };
    uint32_t const ces[9] = { 0x0921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_155)
{
    // 25F2 0041;	
    // (◲) WHITE SQUARE WITH LOWER RIGHT QUADRANT	[0921 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F2, 0x0041 };
    uint32_t const ces[9] = { 0x0921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_156)
{
    // 25F2 0062;	
    // (◲) WHITE SQUARE WITH LOWER RIGHT QUADRANT	[0921 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F2, 0x0062 };
    uint32_t const ces[9] = { 0x0921, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_157)
{
    // 25F3 0021;	
    // (◳) WHITE SQUARE WITH UPPER RIGHT QUADRANT	[0922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F3, 0x0021 };
    uint32_t const ces[9] = { 0x0922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_158)
{
    // 25F3 003F;	
    // (◳) WHITE SQUARE WITH UPPER RIGHT QUADRANT	[0922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F3, 0x003F };
    uint32_t const ces[9] = { 0x0922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_159)
{
    // 25F3 0061;	
    // (◳) WHITE SQUARE WITH UPPER RIGHT QUADRANT	[0922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F3, 0x0061 };
    uint32_t const ces[9] = { 0x0922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_160)
{
    // 25F3 0041;	
    // (◳) WHITE SQUARE WITH UPPER RIGHT QUADRANT	[0922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F3, 0x0041 };
    uint32_t const ces[9] = { 0x0922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_161)
{
    // 25F3 0062;	
    // (◳) WHITE SQUARE WITH UPPER RIGHT QUADRANT	[0922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F3, 0x0062 };
    uint32_t const ces[9] = { 0x0922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_162)
{
    // 25F4 0021;	
    // (◴) WHITE CIRCLE WITH UPPER LEFT QUADRANT	[0923 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F4, 0x0021 };
    uint32_t const ces[9] = { 0x0923, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_163)
{
    // 25F4 003F;	
    // (◴) WHITE CIRCLE WITH UPPER LEFT QUADRANT	[0923 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F4, 0x003F };
    uint32_t const ces[9] = { 0x0923, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_164)
{
    // 25F4 0061;	
    // (◴) WHITE CIRCLE WITH UPPER LEFT QUADRANT	[0923 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F4, 0x0061 };
    uint32_t const ces[9] = { 0x0923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_165)
{
    // 25F4 0041;	
    // (◴) WHITE CIRCLE WITH UPPER LEFT QUADRANT	[0923 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F4, 0x0041 };
    uint32_t const ces[9] = { 0x0923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_166)
{
    // 25F4 0062;	
    // (◴) WHITE CIRCLE WITH UPPER LEFT QUADRANT	[0923 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F4, 0x0062 };
    uint32_t const ces[9] = { 0x0923, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_167)
{
    // 25F5 0021;	
    // (◵) WHITE CIRCLE WITH LOWER LEFT QUADRANT	[0924 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F5, 0x0021 };
    uint32_t const ces[9] = { 0x0924, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_168)
{
    // 25F5 003F;	
    // (◵) WHITE CIRCLE WITH LOWER LEFT QUADRANT	[0924 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F5, 0x003F };
    uint32_t const ces[9] = { 0x0924, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_169)
{
    // 25F5 0061;	
    // (◵) WHITE CIRCLE WITH LOWER LEFT QUADRANT	[0924 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F5, 0x0061 };
    uint32_t const ces[9] = { 0x0924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_170)
{
    // 25F5 0041;	
    // (◵) WHITE CIRCLE WITH LOWER LEFT QUADRANT	[0924 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F5, 0x0041 };
    uint32_t const ces[9] = { 0x0924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_171)
{
    // 25F5 0062;	
    // (◵) WHITE CIRCLE WITH LOWER LEFT QUADRANT	[0924 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F5, 0x0062 };
    uint32_t const ces[9] = { 0x0924, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_172)
{
    // 25F6 0021;	
    // (◶) WHITE CIRCLE WITH LOWER RIGHT QUADRANT	[0925 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F6, 0x0021 };
    uint32_t const ces[9] = { 0x0925, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_173)
{
    // 25F6 003F;	
    // (◶) WHITE CIRCLE WITH LOWER RIGHT QUADRANT	[0925 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F6, 0x003F };
    uint32_t const ces[9] = { 0x0925, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_174)
{
    // 25F6 0061;	
    // (◶) WHITE CIRCLE WITH LOWER RIGHT QUADRANT	[0925 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F6, 0x0061 };
    uint32_t const ces[9] = { 0x0925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_175)
{
    // 25F6 0041;	
    // (◶) WHITE CIRCLE WITH LOWER RIGHT QUADRANT	[0925 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F6, 0x0041 };
    uint32_t const ces[9] = { 0x0925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_176)
{
    // 25F6 0062;	
    // (◶) WHITE CIRCLE WITH LOWER RIGHT QUADRANT	[0925 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F6, 0x0062 };
    uint32_t const ces[9] = { 0x0925, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_177)
{
    // 25F7 0021;	
    // (◷) WHITE CIRCLE WITH UPPER RIGHT QUADRANT	[0926 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F7, 0x0021 };
    uint32_t const ces[9] = { 0x0926, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_178)
{
    // 25F7 003F;	
    // (◷) WHITE CIRCLE WITH UPPER RIGHT QUADRANT	[0926 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F7, 0x003F };
    uint32_t const ces[9] = { 0x0926, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_179)
{
    // 25F7 0061;	
    // (◷) WHITE CIRCLE WITH UPPER RIGHT QUADRANT	[0926 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F7, 0x0061 };
    uint32_t const ces[9] = { 0x0926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_180)
{
    // 25F7 0041;	
    // (◷) WHITE CIRCLE WITH UPPER RIGHT QUADRANT	[0926 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F7, 0x0041 };
    uint32_t const ces[9] = { 0x0926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_181)
{
    // 25F7 0062;	
    // (◷) WHITE CIRCLE WITH UPPER RIGHT QUADRANT	[0926 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F7, 0x0062 };
    uint32_t const ces[9] = { 0x0926, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_182)
{
    // 25F8 0021;	
    // (◸) UPPER LEFT TRIANGLE	[0927 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F8, 0x0021 };
    uint32_t const ces[9] = { 0x0927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_183)
{
    // 25F8 003F;	
    // (◸) UPPER LEFT TRIANGLE	[0927 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F8, 0x003F };
    uint32_t const ces[9] = { 0x0927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_184)
{
    // 25F8 0061;	
    // (◸) UPPER LEFT TRIANGLE	[0927 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F8, 0x0061 };
    uint32_t const ces[9] = { 0x0927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_185)
{
    // 25F8 0041;	
    // (◸) UPPER LEFT TRIANGLE	[0927 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F8, 0x0041 };
    uint32_t const ces[9] = { 0x0927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_186)
{
    // 25F8 0062;	
    // (◸) UPPER LEFT TRIANGLE	[0927 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F8, 0x0062 };
    uint32_t const ces[9] = { 0x0927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_187)
{
    // 25F9 0021;	
    // (◹) UPPER RIGHT TRIANGLE	[0928 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F9, 0x0021 };
    uint32_t const ces[9] = { 0x0928, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_188)
{
    // 25F9 003F;	
    // (◹) UPPER RIGHT TRIANGLE	[0928 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F9, 0x003F };
    uint32_t const ces[9] = { 0x0928, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_189)
{
    // 25F9 0061;	
    // (◹) UPPER RIGHT TRIANGLE	[0928 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F9, 0x0061 };
    uint32_t const ces[9] = { 0x0928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_190)
{
    // 25F9 0041;	
    // (◹) UPPER RIGHT TRIANGLE	[0928 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25F9, 0x0041 };
    uint32_t const ces[9] = { 0x0928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_191)
{
    // 25F9 0062;	
    // (◹) UPPER RIGHT TRIANGLE	[0928 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25F9, 0x0062 };
    uint32_t const ces[9] = { 0x0928, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_192)
{
    // 25FA 0021;	
    // (◺) LOWER LEFT TRIANGLE	[0929 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FA, 0x0021 };
    uint32_t const ces[9] = { 0x0929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_193)
{
    // 25FA 003F;	
    // (◺) LOWER LEFT TRIANGLE	[0929 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FA, 0x003F };
    uint32_t const ces[9] = { 0x0929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_194)
{
    // 25FA 0061;	
    // (◺) LOWER LEFT TRIANGLE	[0929 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FA, 0x0061 };
    uint32_t const ces[9] = { 0x0929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_195)
{
    // 25FA 0041;	
    // (◺) LOWER LEFT TRIANGLE	[0929 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FA, 0x0041 };
    uint32_t const ces[9] = { 0x0929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_196)
{
    // 25FA 0062;	
    // (◺) LOWER LEFT TRIANGLE	[0929 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FA, 0x0062 };
    uint32_t const ces[9] = { 0x0929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_197)
{
    // 25FB 0021;	
    // (◻) WHITE MEDIUM SQUARE	[092A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FB, 0x0021 };
    uint32_t const ces[9] = { 0x092A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_198)
{
    // 25FB 003F;	
    // (◻) WHITE MEDIUM SQUARE	[092A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FB, 0x003F };
    uint32_t const ces[9] = { 0x092A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_199)
{
    // 25FB 0061;	
    // (◻) WHITE MEDIUM SQUARE	[092A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FB, 0x0061 };
    uint32_t const ces[9] = { 0x092A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_200)
{
    // 25FB 0041;	
    // (◻) WHITE MEDIUM SQUARE	[092A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FB, 0x0041 };
    uint32_t const ces[9] = { 0x092A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_201)
{
    // 25FB 0062;	
    // (◻) WHITE MEDIUM SQUARE	[092A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FB, 0x0062 };
    uint32_t const ces[9] = { 0x092A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_202)
{
    // 25FC 0021;	
    // (◼) BLACK MEDIUM SQUARE	[092B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FC, 0x0021 };
    uint32_t const ces[9] = { 0x092B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_203)
{
    // 25FC 003F;	
    // (◼) BLACK MEDIUM SQUARE	[092B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FC, 0x003F };
    uint32_t const ces[9] = { 0x092B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_204)
{
    // 25FC 0061;	
    // (◼) BLACK MEDIUM SQUARE	[092B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FC, 0x0061 };
    uint32_t const ces[9] = { 0x092B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_205)
{
    // 25FC 0041;	
    // (◼) BLACK MEDIUM SQUARE	[092B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FC, 0x0041 };
    uint32_t const ces[9] = { 0x092B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_206)
{
    // 25FC 0062;	
    // (◼) BLACK MEDIUM SQUARE	[092B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FC, 0x0062 };
    uint32_t const ces[9] = { 0x092B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_207)
{
    // 25FD 0021;	
    // (◽) WHITE MEDIUM SMALL SQUARE	[092C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FD, 0x0021 };
    uint32_t const ces[9] = { 0x092C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_208)
{
    // 25FD 003F;	
    // (◽) WHITE MEDIUM SMALL SQUARE	[092C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FD, 0x003F };
    uint32_t const ces[9] = { 0x092C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_209)
{
    // 25FD 0061;	
    // (◽) WHITE MEDIUM SMALL SQUARE	[092C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FD, 0x0061 };
    uint32_t const ces[9] = { 0x092C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_210)
{
    // 25FD 0041;	
    // (◽) WHITE MEDIUM SMALL SQUARE	[092C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FD, 0x0041 };
    uint32_t const ces[9] = { 0x092C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_211)
{
    // 25FD 0062;	
    // (◽) WHITE MEDIUM SMALL SQUARE	[092C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FD, 0x0062 };
    uint32_t const ces[9] = { 0x092C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_212)
{
    // 25FE 0021;	
    // (◾) BLACK MEDIUM SMALL SQUARE	[092D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FE, 0x0021 };
    uint32_t const ces[9] = { 0x092D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_213)
{
    // 25FE 003F;	
    // (◾) BLACK MEDIUM SMALL SQUARE	[092D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FE, 0x003F };
    uint32_t const ces[9] = { 0x092D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_214)
{
    // 25FE 0061;	
    // (◾) BLACK MEDIUM SMALL SQUARE	[092D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FE, 0x0061 };
    uint32_t const ces[9] = { 0x092D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_215)
{
    // 25FE 0041;	
    // (◾) BLACK MEDIUM SMALL SQUARE	[092D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FE, 0x0041 };
    uint32_t const ces[9] = { 0x092D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_216)
{
    // 25FE 0062;	
    // (◾) BLACK MEDIUM SMALL SQUARE	[092D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FE, 0x0062 };
    uint32_t const ces[9] = { 0x092D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_217)
{
    // 25FF 0021;	
    // (◿) LOWER RIGHT TRIANGLE	[092E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FF, 0x0021 };
    uint32_t const ces[9] = { 0x092E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_218)
{
    // 25FF 003F;	
    // (◿) LOWER RIGHT TRIANGLE	[092E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FF, 0x003F };
    uint32_t const ces[9] = { 0x092E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_219)
{
    // 25FF 0061;	
    // (◿) LOWER RIGHT TRIANGLE	[092E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FF, 0x0061 };
    uint32_t const ces[9] = { 0x092E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_220)
{
    // 25FF 0041;	
    // (◿) LOWER RIGHT TRIANGLE	[092E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25FF, 0x0041 };
    uint32_t const ces[9] = { 0x092E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_221)
{
    // 25FF 0062;	
    // (◿) LOWER RIGHT TRIANGLE	[092E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25FF, 0x0062 };
    uint32_t const ces[9] = { 0x092E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_222)
{
    // 2600 0021;	
    // (☀) BLACK SUN WITH RAYS	[092F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2600, 0x0021 };
    uint32_t const ces[9] = { 0x092F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_223)
{
    // 2600 003F;	
    // (☀) BLACK SUN WITH RAYS	[092F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2600, 0x003F };
    uint32_t const ces[9] = { 0x092F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_224)
{
    // 2600 0061;	
    // (☀) BLACK SUN WITH RAYS	[092F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2600, 0x0061 };
    uint32_t const ces[9] = { 0x092F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_225)
{
    // 2600 0041;	
    // (☀) BLACK SUN WITH RAYS	[092F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2600, 0x0041 };
    uint32_t const ces[9] = { 0x092F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_226)
{
    // 2600 0062;	
    // (☀) BLACK SUN WITH RAYS	[092F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2600, 0x0062 };
    uint32_t const ces[9] = { 0x092F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_227)
{
    // 2601 0021;	
    // (☁) CLOUD	[0930 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2601, 0x0021 };
    uint32_t const ces[9] = { 0x0930, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_228)
{
    // 2601 003F;	
    // (☁) CLOUD	[0930 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2601, 0x003F };
    uint32_t const ces[9] = { 0x0930, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_229)
{
    // 2601 0061;	
    // (☁) CLOUD	[0930 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2601, 0x0061 };
    uint32_t const ces[9] = { 0x0930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_230)
{
    // 2601 0041;	
    // (☁) CLOUD	[0930 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2601, 0x0041 };
    uint32_t const ces[9] = { 0x0930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_231)
{
    // 2601 0062;	
    // (☁) CLOUD	[0930 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2601, 0x0062 };
    uint32_t const ces[9] = { 0x0930, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_232)
{
    // 2602 0021;	
    // (☂) UMBRELLA	[0931 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2602, 0x0021 };
    uint32_t const ces[9] = { 0x0931, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_233)
{
    // 2602 003F;	
    // (☂) UMBRELLA	[0931 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2602, 0x003F };
    uint32_t const ces[9] = { 0x0931, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_234)
{
    // 2602 0061;	
    // (☂) UMBRELLA	[0931 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2602, 0x0061 };
    uint32_t const ces[9] = { 0x0931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_235)
{
    // 2602 0041;	
    // (☂) UMBRELLA	[0931 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2602, 0x0041 };
    uint32_t const ces[9] = { 0x0931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_236)
{
    // 2602 0062;	
    // (☂) UMBRELLA	[0931 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2602, 0x0062 };
    uint32_t const ces[9] = { 0x0931, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_237)
{
    // 2603 0021;	
    // (☃) SNOWMAN	[0932 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2603, 0x0021 };
    uint32_t const ces[9] = { 0x0932, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_238)
{
    // 2603 003F;	
    // (☃) SNOWMAN	[0932 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2603, 0x003F };
    uint32_t const ces[9] = { 0x0932, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_239)
{
    // 2603 0061;	
    // (☃) SNOWMAN	[0932 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2603, 0x0061 };
    uint32_t const ces[9] = { 0x0932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_240)
{
    // 2603 0041;	
    // (☃) SNOWMAN	[0932 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2603, 0x0041 };
    uint32_t const ces[9] = { 0x0932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_241)
{
    // 2603 0062;	
    // (☃) SNOWMAN	[0932 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2603, 0x0062 };
    uint32_t const ces[9] = { 0x0932, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_242)
{
    // 2604 0021;	
    // (☄) COMET	[0933 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2604, 0x0021 };
    uint32_t const ces[9] = { 0x0933, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_243)
{
    // 2604 003F;	
    // (☄) COMET	[0933 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2604, 0x003F };
    uint32_t const ces[9] = { 0x0933, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_244)
{
    // 2604 0061;	
    // (☄) COMET	[0933 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2604, 0x0061 };
    uint32_t const ces[9] = { 0x0933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_245)
{
    // 2604 0041;	
    // (☄) COMET	[0933 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2604, 0x0041 };
    uint32_t const ces[9] = { 0x0933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_246)
{
    // 2604 0062;	
    // (☄) COMET	[0933 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2604, 0x0062 };
    uint32_t const ces[9] = { 0x0933, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_247)
{
    // 2605 0021;	
    // (★) BLACK STAR	[0934 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2605, 0x0021 };
    uint32_t const ces[9] = { 0x0934, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_248)
{
    // 2605 003F;	
    // (★) BLACK STAR	[0934 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2605, 0x003F };
    uint32_t const ces[9] = { 0x0934, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_249)
{
    // 2605 0061;	
    // (★) BLACK STAR	[0934 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2605, 0x0061 };
    uint32_t const ces[9] = { 0x0934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_250)
{
    // 2605 0041;	
    // (★) BLACK STAR	[0934 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2605, 0x0041 };
    uint32_t const ces[9] = { 0x0934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_251)
{
    // 2605 0062;	
    // (★) BLACK STAR	[0934 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2605, 0x0062 };
    uint32_t const ces[9] = { 0x0934, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_252)
{
    // 2606 0021;	
    // (☆) WHITE STAR	[0935 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2606, 0x0021 };
    uint32_t const ces[9] = { 0x0935, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_253)
{
    // 2606 003F;	
    // (☆) WHITE STAR	[0935 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2606, 0x003F };
    uint32_t const ces[9] = { 0x0935, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_254)
{
    // 2606 0061;	
    // (☆) WHITE STAR	[0935 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2606, 0x0061 };
    uint32_t const ces[9] = { 0x0935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_255)
{
    // 2606 0041;	
    // (☆) WHITE STAR	[0935 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2606, 0x0041 };
    uint32_t const ces[9] = { 0x0935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_256)
{
    // 2606 0062;	
    // (☆) WHITE STAR	[0935 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2606, 0x0062 };
    uint32_t const ces[9] = { 0x0935, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_257)
{
    // 2607 0021;	
    // (☇) LIGHTNING	[0936 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2607, 0x0021 };
    uint32_t const ces[9] = { 0x0936, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_258)
{
    // 2607 003F;	
    // (☇) LIGHTNING	[0936 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2607, 0x003F };
    uint32_t const ces[9] = { 0x0936, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_259)
{
    // 2607 0061;	
    // (☇) LIGHTNING	[0936 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2607, 0x0061 };
    uint32_t const ces[9] = { 0x0936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_260)
{
    // 2607 0041;	
    // (☇) LIGHTNING	[0936 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2607, 0x0041 };
    uint32_t const ces[9] = { 0x0936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_261)
{
    // 2607 0062;	
    // (☇) LIGHTNING	[0936 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2607, 0x0062 };
    uint32_t const ces[9] = { 0x0936, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_262)
{
    // 2608 0021;	
    // (☈) THUNDERSTORM	[0937 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2608, 0x0021 };
    uint32_t const ces[9] = { 0x0937, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_263)
{
    // 2608 003F;	
    // (☈) THUNDERSTORM	[0937 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2608, 0x003F };
    uint32_t const ces[9] = { 0x0937, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_264)
{
    // 2608 0061;	
    // (☈) THUNDERSTORM	[0937 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2608, 0x0061 };
    uint32_t const ces[9] = { 0x0937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_265)
{
    // 2608 0041;	
    // (☈) THUNDERSTORM	[0937 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2608, 0x0041 };
    uint32_t const ces[9] = { 0x0937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_266)
{
    // 2608 0062;	
    // (☈) THUNDERSTORM	[0937 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2608, 0x0062 };
    uint32_t const ces[9] = { 0x0937, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_267)
{
    // 2609 0021;	
    // (☉) SUN	[0938 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2609, 0x0021 };
    uint32_t const ces[9] = { 0x0938, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_268)
{
    // 2609 003F;	
    // (☉) SUN	[0938 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2609, 0x003F };
    uint32_t const ces[9] = { 0x0938, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_269)
{
    // 2609 0061;	
    // (☉) SUN	[0938 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2609, 0x0061 };
    uint32_t const ces[9] = { 0x0938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_270)
{
    // 2609 0041;	
    // (☉) SUN	[0938 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2609, 0x0041 };
    uint32_t const ces[9] = { 0x0938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_271)
{
    // 2609 0062;	
    // (☉) SUN	[0938 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2609, 0x0062 };
    uint32_t const ces[9] = { 0x0938, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_272)
{
    // 260A 0021;	
    // (☊) ASCENDING NODE	[0939 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260A, 0x0021 };
    uint32_t const ces[9] = { 0x0939, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_273)
{
    // 260A 003F;	
    // (☊) ASCENDING NODE	[0939 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260A, 0x003F };
    uint32_t const ces[9] = { 0x0939, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_274)
{
    // 260A 0061;	
    // (☊) ASCENDING NODE	[0939 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260A, 0x0061 };
    uint32_t const ces[9] = { 0x0939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_275)
{
    // 260A 0041;	
    // (☊) ASCENDING NODE	[0939 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260A, 0x0041 };
    uint32_t const ces[9] = { 0x0939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_276)
{
    // 260A 0062;	
    // (☊) ASCENDING NODE	[0939 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260A, 0x0062 };
    uint32_t const ces[9] = { 0x0939, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_277)
{
    // 260B 0021;	
    // (☋) DESCENDING NODE	[093A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260B, 0x0021 };
    uint32_t const ces[9] = { 0x093A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_278)
{
    // 260B 003F;	
    // (☋) DESCENDING NODE	[093A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260B, 0x003F };
    uint32_t const ces[9] = { 0x093A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_279)
{
    // 260B 0061;	
    // (☋) DESCENDING NODE	[093A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260B, 0x0061 };
    uint32_t const ces[9] = { 0x093A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_280)
{
    // 260B 0041;	
    // (☋) DESCENDING NODE	[093A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260B, 0x0041 };
    uint32_t const ces[9] = { 0x093A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_281)
{
    // 260B 0062;	
    // (☋) DESCENDING NODE	[093A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260B, 0x0062 };
    uint32_t const ces[9] = { 0x093A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_282)
{
    // 260C 0021;	
    // (☌) CONJUNCTION	[093B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260C, 0x0021 };
    uint32_t const ces[9] = { 0x093B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_283)
{
    // 260C 003F;	
    // (☌) CONJUNCTION	[093B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260C, 0x003F };
    uint32_t const ces[9] = { 0x093B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_284)
{
    // 260C 0061;	
    // (☌) CONJUNCTION	[093B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260C, 0x0061 };
    uint32_t const ces[9] = { 0x093B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_285)
{
    // 260C 0041;	
    // (☌) CONJUNCTION	[093B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260C, 0x0041 };
    uint32_t const ces[9] = { 0x093B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_286)
{
    // 260C 0062;	
    // (☌) CONJUNCTION	[093B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260C, 0x0062 };
    uint32_t const ces[9] = { 0x093B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_287)
{
    // 260D 0021;	
    // (☍) OPPOSITION	[093C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260D, 0x0021 };
    uint32_t const ces[9] = { 0x093C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_288)
{
    // 260D 003F;	
    // (☍) OPPOSITION	[093C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260D, 0x003F };
    uint32_t const ces[9] = { 0x093C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_289)
{
    // 260D 0061;	
    // (☍) OPPOSITION	[093C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260D, 0x0061 };
    uint32_t const ces[9] = { 0x093C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_290)
{
    // 260D 0041;	
    // (☍) OPPOSITION	[093C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260D, 0x0041 };
    uint32_t const ces[9] = { 0x093C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_291)
{
    // 260D 0062;	
    // (☍) OPPOSITION	[093C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260D, 0x0062 };
    uint32_t const ces[9] = { 0x093C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_292)
{
    // 260E 0021;	
    // (☎) BLACK TELEPHONE	[093D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260E, 0x0021 };
    uint32_t const ces[9] = { 0x093D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_293)
{
    // 260E 003F;	
    // (☎) BLACK TELEPHONE	[093D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260E, 0x003F };
    uint32_t const ces[9] = { 0x093D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_294)
{
    // 260E 0061;	
    // (☎) BLACK TELEPHONE	[093D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260E, 0x0061 };
    uint32_t const ces[9] = { 0x093D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_295)
{
    // 260E 0041;	
    // (☎) BLACK TELEPHONE	[093D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260E, 0x0041 };
    uint32_t const ces[9] = { 0x093D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_296)
{
    // 260E 0062;	
    // (☎) BLACK TELEPHONE	[093D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260E, 0x0062 };
    uint32_t const ces[9] = { 0x093D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_297)
{
    // 260F 0021;	
    // (☏) WHITE TELEPHONE	[093E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260F, 0x0021 };
    uint32_t const ces[9] = { 0x093E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_298)
{
    // 260F 003F;	
    // (☏) WHITE TELEPHONE	[093E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260F, 0x003F };
    uint32_t const ces[9] = { 0x093E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_299)
{
    // 260F 0061;	
    // (☏) WHITE TELEPHONE	[093E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260F, 0x0061 };
    uint32_t const ces[9] = { 0x093E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_300)
{
    // 260F 0041;	
    // (☏) WHITE TELEPHONE	[093E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x260F, 0x0041 };
    uint32_t const ces[9] = { 0x093E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_301)
{
    // 260F 0062;	
    // (☏) WHITE TELEPHONE	[093E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x260F, 0x0062 };
    uint32_t const ces[9] = { 0x093E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_302)
{
    // 2610 0021;	
    // (☐) BALLOT BOX	[093F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2610, 0x0021 };
    uint32_t const ces[9] = { 0x093F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_303)
{
    // 2610 003F;	
    // (☐) BALLOT BOX	[093F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2610, 0x003F };
    uint32_t const ces[9] = { 0x093F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_304)
{
    // 2610 0061;	
    // (☐) BALLOT BOX	[093F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2610, 0x0061 };
    uint32_t const ces[9] = { 0x093F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_305)
{
    // 2610 0041;	
    // (☐) BALLOT BOX	[093F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2610, 0x0041 };
    uint32_t const ces[9] = { 0x093F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_306)
{
    // 2610 0062;	
    // (☐) BALLOT BOX	[093F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2610, 0x0062 };
    uint32_t const ces[9] = { 0x093F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_307)
{
    // 2611 0021;	
    // (☑) BALLOT BOX WITH CHECK	[0940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2611, 0x0021 };
    uint32_t const ces[9] = { 0x0940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_308)
{
    // 2611 003F;	
    // (☑) BALLOT BOX WITH CHECK	[0940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2611, 0x003F };
    uint32_t const ces[9] = { 0x0940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_309)
{
    // 2611 0061;	
    // (☑) BALLOT BOX WITH CHECK	[0940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2611, 0x0061 };
    uint32_t const ces[9] = { 0x0940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_310)
{
    // 2611 0041;	
    // (☑) BALLOT BOX WITH CHECK	[0940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2611, 0x0041 };
    uint32_t const ces[9] = { 0x0940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_311)
{
    // 2611 0062;	
    // (☑) BALLOT BOX WITH CHECK	[0940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2611, 0x0062 };
    uint32_t const ces[9] = { 0x0940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_312)
{
    // 2612 0021;	
    // (☒) BALLOT BOX WITH X	[0941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2612, 0x0021 };
    uint32_t const ces[9] = { 0x0941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_313)
{
    // 2612 003F;	
    // (☒) BALLOT BOX WITH X	[0941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2612, 0x003F };
    uint32_t const ces[9] = { 0x0941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_314)
{
    // 2612 0061;	
    // (☒) BALLOT BOX WITH X	[0941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2612, 0x0061 };
    uint32_t const ces[9] = { 0x0941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_315)
{
    // 2612 0041;	
    // (☒) BALLOT BOX WITH X	[0941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2612, 0x0041 };
    uint32_t const ces[9] = { 0x0941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_316)
{
    // 2612 0062;	
    // (☒) BALLOT BOX WITH X	[0941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2612, 0x0062 };
    uint32_t const ces[9] = { 0x0941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_317)
{
    // 2613 0021;	
    // (☓) SALTIRE	[0942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2613, 0x0021 };
    uint32_t const ces[9] = { 0x0942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_318)
{
    // 2613 003F;	
    // (☓) SALTIRE	[0942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2613, 0x003F };
    uint32_t const ces[9] = { 0x0942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_319)
{
    // 2613 0061;	
    // (☓) SALTIRE	[0942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2613, 0x0061 };
    uint32_t const ces[9] = { 0x0942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_320)
{
    // 2613 0041;	
    // (☓) SALTIRE	[0942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2613, 0x0041 };
    uint32_t const ces[9] = { 0x0942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_321)
{
    // 2613 0062;	
    // (☓) SALTIRE	[0942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2613, 0x0062 };
    uint32_t const ces[9] = { 0x0942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_322)
{
    // 2614 0021;	
    // (☔) UMBRELLA WITH RAIN DROPS	[0943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2614, 0x0021 };
    uint32_t const ces[9] = { 0x0943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_323)
{
    // 2614 003F;	
    // (☔) UMBRELLA WITH RAIN DROPS	[0943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2614, 0x003F };
    uint32_t const ces[9] = { 0x0943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_324)
{
    // 2614 0061;	
    // (☔) UMBRELLA WITH RAIN DROPS	[0943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2614, 0x0061 };
    uint32_t const ces[9] = { 0x0943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_325)
{
    // 2614 0041;	
    // (☔) UMBRELLA WITH RAIN DROPS	[0943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2614, 0x0041 };
    uint32_t const ces[9] = { 0x0943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_326)
{
    // 2614 0062;	
    // (☔) UMBRELLA WITH RAIN DROPS	[0943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2614, 0x0062 };
    uint32_t const ces[9] = { 0x0943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_327)
{
    // 2615 0021;	
    // (☕) HOT BEVERAGE	[0944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2615, 0x0021 };
    uint32_t const ces[9] = { 0x0944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_328)
{
    // 2615 003F;	
    // (☕) HOT BEVERAGE	[0944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2615, 0x003F };
    uint32_t const ces[9] = { 0x0944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_329)
{
    // 2615 0061;	
    // (☕) HOT BEVERAGE	[0944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2615, 0x0061 };
    uint32_t const ces[9] = { 0x0944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_330)
{
    // 2615 0041;	
    // (☕) HOT BEVERAGE	[0944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2615, 0x0041 };
    uint32_t const ces[9] = { 0x0944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_331)
{
    // 2615 0062;	
    // (☕) HOT BEVERAGE	[0944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2615, 0x0062 };
    uint32_t const ces[9] = { 0x0944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_332)
{
    // 2616 0021;	
    // (☖) WHITE SHOGI PIECE	[0945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2616, 0x0021 };
    uint32_t const ces[9] = { 0x0945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_333)
{
    // 2616 003F;	
    // (☖) WHITE SHOGI PIECE	[0945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2616, 0x003F };
    uint32_t const ces[9] = { 0x0945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_334)
{
    // 2616 0061;	
    // (☖) WHITE SHOGI PIECE	[0945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2616, 0x0061 };
    uint32_t const ces[9] = { 0x0945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_335)
{
    // 2616 0041;	
    // (☖) WHITE SHOGI PIECE	[0945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2616, 0x0041 };
    uint32_t const ces[9] = { 0x0945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_336)
{
    // 2616 0062;	
    // (☖) WHITE SHOGI PIECE	[0945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2616, 0x0062 };
    uint32_t const ces[9] = { 0x0945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_337)
{
    // 2617 0021;	
    // (☗) BLACK SHOGI PIECE	[0946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2617, 0x0021 };
    uint32_t const ces[9] = { 0x0946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_338)
{
    // 2617 003F;	
    // (☗) BLACK SHOGI PIECE	[0946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2617, 0x003F };
    uint32_t const ces[9] = { 0x0946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_339)
{
    // 2617 0061;	
    // (☗) BLACK SHOGI PIECE	[0946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2617, 0x0061 };
    uint32_t const ces[9] = { 0x0946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_340)
{
    // 2617 0041;	
    // (☗) BLACK SHOGI PIECE	[0946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2617, 0x0041 };
    uint32_t const ces[9] = { 0x0946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_341)
{
    // 2617 0062;	
    // (☗) BLACK SHOGI PIECE	[0946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2617, 0x0062 };
    uint32_t const ces[9] = { 0x0946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_342)
{
    // 2618 0021;	
    // (☘) SHAMROCK	[0947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2618, 0x0021 };
    uint32_t const ces[9] = { 0x0947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_343)
{
    // 2618 003F;	
    // (☘) SHAMROCK	[0947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2618, 0x003F };
    uint32_t const ces[9] = { 0x0947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_344)
{
    // 2618 0061;	
    // (☘) SHAMROCK	[0947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2618, 0x0061 };
    uint32_t const ces[9] = { 0x0947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_345)
{
    // 2618 0041;	
    // (☘) SHAMROCK	[0947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2618, 0x0041 };
    uint32_t const ces[9] = { 0x0947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_346)
{
    // 2618 0062;	
    // (☘) SHAMROCK	[0947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2618, 0x0062 };
    uint32_t const ces[9] = { 0x0947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_347)
{
    // 2619 0021;	
    // (☙) REVERSED ROTATED FLORAL HEART BULLET	[0948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2619, 0x0021 };
    uint32_t const ces[9] = { 0x0948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_348)
{
    // 2619 003F;	
    // (☙) REVERSED ROTATED FLORAL HEART BULLET	[0948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2619, 0x003F };
    uint32_t const ces[9] = { 0x0948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_349)
{
    // 2619 0061;	
    // (☙) REVERSED ROTATED FLORAL HEART BULLET	[0948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2619, 0x0061 };
    uint32_t const ces[9] = { 0x0948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_350)
{
    // 2619 0041;	
    // (☙) REVERSED ROTATED FLORAL HEART BULLET	[0948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2619, 0x0041 };
    uint32_t const ces[9] = { 0x0948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_351)
{
    // 2619 0062;	
    // (☙) REVERSED ROTATED FLORAL HEART BULLET	[0948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2619, 0x0062 };
    uint32_t const ces[9] = { 0x0948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_352)
{
    // 261A 0021;	
    // (☚) BLACK LEFT POINTING INDEX	[0949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261A, 0x0021 };
    uint32_t const ces[9] = { 0x0949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_353)
{
    // 261A 003F;	
    // (☚) BLACK LEFT POINTING INDEX	[0949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261A, 0x003F };
    uint32_t const ces[9] = { 0x0949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_354)
{
    // 261A 0061;	
    // (☚) BLACK LEFT POINTING INDEX	[0949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261A, 0x0061 };
    uint32_t const ces[9] = { 0x0949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_355)
{
    // 261A 0041;	
    // (☚) BLACK LEFT POINTING INDEX	[0949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261A, 0x0041 };
    uint32_t const ces[9] = { 0x0949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_356)
{
    // 261A 0062;	
    // (☚) BLACK LEFT POINTING INDEX	[0949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261A, 0x0062 };
    uint32_t const ces[9] = { 0x0949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_357)
{
    // 261B 0021;	
    // (☛) BLACK RIGHT POINTING INDEX	[094A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261B, 0x0021 };
    uint32_t const ces[9] = { 0x094A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_358)
{
    // 261B 003F;	
    // (☛) BLACK RIGHT POINTING INDEX	[094A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261B, 0x003F };
    uint32_t const ces[9] = { 0x094A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_359)
{
    // 261B 0061;	
    // (☛) BLACK RIGHT POINTING INDEX	[094A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261B, 0x0061 };
    uint32_t const ces[9] = { 0x094A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_360)
{
    // 261B 0041;	
    // (☛) BLACK RIGHT POINTING INDEX	[094A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261B, 0x0041 };
    uint32_t const ces[9] = { 0x094A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_361)
{
    // 261B 0062;	
    // (☛) BLACK RIGHT POINTING INDEX	[094A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261B, 0x0062 };
    uint32_t const ces[9] = { 0x094A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_362)
{
    // 261C 0021;	
    // (☜) WHITE LEFT POINTING INDEX	[094B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261C, 0x0021 };
    uint32_t const ces[9] = { 0x094B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_363)
{
    // 261C 003F;	
    // (☜) WHITE LEFT POINTING INDEX	[094B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261C, 0x003F };
    uint32_t const ces[9] = { 0x094B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_364)
{
    // 261C 0061;	
    // (☜) WHITE LEFT POINTING INDEX	[094B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261C, 0x0061 };
    uint32_t const ces[9] = { 0x094B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_365)
{
    // 261C 0041;	
    // (☜) WHITE LEFT POINTING INDEX	[094B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261C, 0x0041 };
    uint32_t const ces[9] = { 0x094B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_366)
{
    // 261C 0062;	
    // (☜) WHITE LEFT POINTING INDEX	[094B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261C, 0x0062 };
    uint32_t const ces[9] = { 0x094B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_367)
{
    // 261D 0021;	
    // (☝) WHITE UP POINTING INDEX	[094C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261D, 0x0021 };
    uint32_t const ces[9] = { 0x094C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_368)
{
    // 261D 003F;	
    // (☝) WHITE UP POINTING INDEX	[094C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261D, 0x003F };
    uint32_t const ces[9] = { 0x094C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_369)
{
    // 261D 0061;	
    // (☝) WHITE UP POINTING INDEX	[094C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261D, 0x0061 };
    uint32_t const ces[9] = { 0x094C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_370)
{
    // 261D 0041;	
    // (☝) WHITE UP POINTING INDEX	[094C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261D, 0x0041 };
    uint32_t const ces[9] = { 0x094C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_371)
{
    // 261D 0062;	
    // (☝) WHITE UP POINTING INDEX	[094C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261D, 0x0062 };
    uint32_t const ces[9] = { 0x094C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_372)
{
    // 261E 0021;	
    // (☞) WHITE RIGHT POINTING INDEX	[094D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261E, 0x0021 };
    uint32_t const ces[9] = { 0x094D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_373)
{
    // 261E 003F;	
    // (☞) WHITE RIGHT POINTING INDEX	[094D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261E, 0x003F };
    uint32_t const ces[9] = { 0x094D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_374)
{
    // 261E 0061;	
    // (☞) WHITE RIGHT POINTING INDEX	[094D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261E, 0x0061 };
    uint32_t const ces[9] = { 0x094D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_375)
{
    // 261E 0041;	
    // (☞) WHITE RIGHT POINTING INDEX	[094D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261E, 0x0041 };
    uint32_t const ces[9] = { 0x094D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_376)
{
    // 261E 0062;	
    // (☞) WHITE RIGHT POINTING INDEX	[094D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261E, 0x0062 };
    uint32_t const ces[9] = { 0x094D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_377)
{
    // 261F 0021;	
    // (☟) WHITE DOWN POINTING INDEX	[094E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261F, 0x0021 };
    uint32_t const ces[9] = { 0x094E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_378)
{
    // 261F 003F;	
    // (☟) WHITE DOWN POINTING INDEX	[094E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261F, 0x003F };
    uint32_t const ces[9] = { 0x094E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_379)
{
    // 261F 0061;	
    // (☟) WHITE DOWN POINTING INDEX	[094E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261F, 0x0061 };
    uint32_t const ces[9] = { 0x094E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_380)
{
    // 261F 0041;	
    // (☟) WHITE DOWN POINTING INDEX	[094E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x261F, 0x0041 };
    uint32_t const ces[9] = { 0x094E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_381)
{
    // 261F 0062;	
    // (☟) WHITE DOWN POINTING INDEX	[094E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x261F, 0x0062 };
    uint32_t const ces[9] = { 0x094E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_382)
{
    // 2620 0021;	
    // (☠) SKULL AND CROSSBONES	[094F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2620, 0x0021 };
    uint32_t const ces[9] = { 0x094F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_383)
{
    // 2620 003F;	
    // (☠) SKULL AND CROSSBONES	[094F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2620, 0x003F };
    uint32_t const ces[9] = { 0x094F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_384)
{
    // 2620 0061;	
    // (☠) SKULL AND CROSSBONES	[094F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2620, 0x0061 };
    uint32_t const ces[9] = { 0x094F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_385)
{
    // 2620 0041;	
    // (☠) SKULL AND CROSSBONES	[094F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2620, 0x0041 };
    uint32_t const ces[9] = { 0x094F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_386)
{
    // 2620 0062;	
    // (☠) SKULL AND CROSSBONES	[094F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2620, 0x0062 };
    uint32_t const ces[9] = { 0x094F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_387)
{
    // 2621 0021;	
    // (☡) CAUTION SIGN	[0950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2621, 0x0021 };
    uint32_t const ces[9] = { 0x0950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_388)
{
    // 2621 003F;	
    // (☡) CAUTION SIGN	[0950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2621, 0x003F };
    uint32_t const ces[9] = { 0x0950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_389)
{
    // 2621 0061;	
    // (☡) CAUTION SIGN	[0950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2621, 0x0061 };
    uint32_t const ces[9] = { 0x0950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_390)
{
    // 2621 0041;	
    // (☡) CAUTION SIGN	[0950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2621, 0x0041 };
    uint32_t const ces[9] = { 0x0950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_391)
{
    // 2621 0062;	
    // (☡) CAUTION SIGN	[0950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2621, 0x0062 };
    uint32_t const ces[9] = { 0x0950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_392)
{
    // 2622 0021;	
    // (☢) RADIOACTIVE SIGN	[0951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2622, 0x0021 };
    uint32_t const ces[9] = { 0x0951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_393)
{
    // 2622 003F;	
    // (☢) RADIOACTIVE SIGN	[0951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2622, 0x003F };
    uint32_t const ces[9] = { 0x0951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_394)
{
    // 2622 0061;	
    // (☢) RADIOACTIVE SIGN	[0951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2622, 0x0061 };
    uint32_t const ces[9] = { 0x0951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_395)
{
    // 2622 0041;	
    // (☢) RADIOACTIVE SIGN	[0951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2622, 0x0041 };
    uint32_t const ces[9] = { 0x0951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_396)
{
    // 2622 0062;	
    // (☢) RADIOACTIVE SIGN	[0951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2622, 0x0062 };
    uint32_t const ces[9] = { 0x0951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_397)
{
    // 2623 0021;	
    // (☣) BIOHAZARD SIGN	[0952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2623, 0x0021 };
    uint32_t const ces[9] = { 0x0952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_398)
{
    // 2623 003F;	
    // (☣) BIOHAZARD SIGN	[0952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2623, 0x003F };
    uint32_t const ces[9] = { 0x0952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_399)
{
    // 2623 0061;	
    // (☣) BIOHAZARD SIGN	[0952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2623, 0x0061 };
    uint32_t const ces[9] = { 0x0952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_400)
{
    // 2623 0041;	
    // (☣) BIOHAZARD SIGN	[0952 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2623, 0x0041 };
    uint32_t const ces[9] = { 0x0952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_401)
{
    // 2623 0062;	
    // (☣) BIOHAZARD SIGN	[0952 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2623, 0x0062 };
    uint32_t const ces[9] = { 0x0952, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_402)
{
    // 2624 0021;	
    // (☤) CADUCEUS	[0953 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2624, 0x0021 };
    uint32_t const ces[9] = { 0x0953, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_403)
{
    // 2624 003F;	
    // (☤) CADUCEUS	[0953 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2624, 0x003F };
    uint32_t const ces[9] = { 0x0953, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_404)
{
    // 2624 0061;	
    // (☤) CADUCEUS	[0953 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2624, 0x0061 };
    uint32_t const ces[9] = { 0x0953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_405)
{
    // 2624 0041;	
    // (☤) CADUCEUS	[0953 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2624, 0x0041 };
    uint32_t const ces[9] = { 0x0953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_406)
{
    // 2624 0062;	
    // (☤) CADUCEUS	[0953 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2624, 0x0062 };
    uint32_t const ces[9] = { 0x0953, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_407)
{
    // 2625 0021;	
    // (☥) ANKH	[0954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2625, 0x0021 };
    uint32_t const ces[9] = { 0x0954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_408)
{
    // 2625 003F;	
    // (☥) ANKH	[0954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2625, 0x003F };
    uint32_t const ces[9] = { 0x0954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_409)
{
    // 2625 0061;	
    // (☥) ANKH	[0954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2625, 0x0061 };
    uint32_t const ces[9] = { 0x0954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_410)
{
    // 2625 0041;	
    // (☥) ANKH	[0954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2625, 0x0041 };
    uint32_t const ces[9] = { 0x0954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_411)
{
    // 2625 0062;	
    // (☥) ANKH	[0954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2625, 0x0062 };
    uint32_t const ces[9] = { 0x0954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_412)
{
    // 2626 0021;	
    // (☦) ORTHODOX CROSS	[0955 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2626, 0x0021 };
    uint32_t const ces[9] = { 0x0955, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_413)
{
    // 2626 003F;	
    // (☦) ORTHODOX CROSS	[0955 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2626, 0x003F };
    uint32_t const ces[9] = { 0x0955, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_414)
{
    // 2626 0061;	
    // (☦) ORTHODOX CROSS	[0955 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2626, 0x0061 };
    uint32_t const ces[9] = { 0x0955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_415)
{
    // 2626 0041;	
    // (☦) ORTHODOX CROSS	[0955 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2626, 0x0041 };
    uint32_t const ces[9] = { 0x0955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_416)
{
    // 2626 0062;	
    // (☦) ORTHODOX CROSS	[0955 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2626, 0x0062 };
    uint32_t const ces[9] = { 0x0955, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_417)
{
    // 2627 0021;	
    // (☧) CHI RHO	[0956 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2627, 0x0021 };
    uint32_t const ces[9] = { 0x0956, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_418)
{
    // 2627 003F;	
    // (☧) CHI RHO	[0956 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2627, 0x003F };
    uint32_t const ces[9] = { 0x0956, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_419)
{
    // 2627 0061;	
    // (☧) CHI RHO	[0956 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2627, 0x0061 };
    uint32_t const ces[9] = { 0x0956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_420)
{
    // 2627 0041;	
    // (☧) CHI RHO	[0956 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2627, 0x0041 };
    uint32_t const ces[9] = { 0x0956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_421)
{
    // 2627 0062;	
    // (☧) CHI RHO	[0956 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2627, 0x0062 };
    uint32_t const ces[9] = { 0x0956, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_422)
{
    // 2628 0021;	
    // (☨) CROSS OF LORRAINE	[0957 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2628, 0x0021 };
    uint32_t const ces[9] = { 0x0957, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_423)
{
    // 2628 003F;	
    // (☨) CROSS OF LORRAINE	[0957 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2628, 0x003F };
    uint32_t const ces[9] = { 0x0957, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_424)
{
    // 2628 0061;	
    // (☨) CROSS OF LORRAINE	[0957 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2628, 0x0061 };
    uint32_t const ces[9] = { 0x0957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_425)
{
    // 2628 0041;	
    // (☨) CROSS OF LORRAINE	[0957 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2628, 0x0041 };
    uint32_t const ces[9] = { 0x0957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_426)
{
    // 2628 0062;	
    // (☨) CROSS OF LORRAINE	[0957 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2628, 0x0062 };
    uint32_t const ces[9] = { 0x0957, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_427)
{
    // 2629 0021;	
    // (☩) CROSS OF JERUSALEM	[0958 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2629, 0x0021 };
    uint32_t const ces[9] = { 0x0958, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_428)
{
    // 2629 003F;	
    // (☩) CROSS OF JERUSALEM	[0958 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2629, 0x003F };
    uint32_t const ces[9] = { 0x0958, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_429)
{
    // 2629 0061;	
    // (☩) CROSS OF JERUSALEM	[0958 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2629, 0x0061 };
    uint32_t const ces[9] = { 0x0958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_430)
{
    // 2629 0041;	
    // (☩) CROSS OF JERUSALEM	[0958 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2629, 0x0041 };
    uint32_t const ces[9] = { 0x0958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_431)
{
    // 2629 0062;	
    // (☩) CROSS OF JERUSALEM	[0958 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2629, 0x0062 };
    uint32_t const ces[9] = { 0x0958, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_432)
{
    // 262A 0021;	
    // (☪) STAR AND CRESCENT	[0959 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262A, 0x0021 };
    uint32_t const ces[9] = { 0x0959, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_433)
{
    // 262A 003F;	
    // (☪) STAR AND CRESCENT	[0959 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262A, 0x003F };
    uint32_t const ces[9] = { 0x0959, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_434)
{
    // 262A 0061;	
    // (☪) STAR AND CRESCENT	[0959 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262A, 0x0061 };
    uint32_t const ces[9] = { 0x0959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_435)
{
    // 262A 0041;	
    // (☪) STAR AND CRESCENT	[0959 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262A, 0x0041 };
    uint32_t const ces[9] = { 0x0959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_436)
{
    // 262A 0062;	
    // (☪) STAR AND CRESCENT	[0959 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262A, 0x0062 };
    uint32_t const ces[9] = { 0x0959, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_437)
{
    // 262B 0021;	
    // (☫) FARSI SYMBOL	[095A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262B, 0x0021 };
    uint32_t const ces[9] = { 0x095A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_438)
{
    // 262B 003F;	
    // (☫) FARSI SYMBOL	[095A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262B, 0x003F };
    uint32_t const ces[9] = { 0x095A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_439)
{
    // 262B 0061;	
    // (☫) FARSI SYMBOL	[095A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262B, 0x0061 };
    uint32_t const ces[9] = { 0x095A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_440)
{
    // 262B 0041;	
    // (☫) FARSI SYMBOL	[095A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262B, 0x0041 };
    uint32_t const ces[9] = { 0x095A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_441)
{
    // 262B 0062;	
    // (☫) FARSI SYMBOL	[095A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262B, 0x0062 };
    uint32_t const ces[9] = { 0x095A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_442)
{
    // 262C 0021;	
    // (☬) ADI SHAKTI	[095B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262C, 0x0021 };
    uint32_t const ces[9] = { 0x095B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_443)
{
    // 262C 003F;	
    // (☬) ADI SHAKTI	[095B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262C, 0x003F };
    uint32_t const ces[9] = { 0x095B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_444)
{
    // 262C 0061;	
    // (☬) ADI SHAKTI	[095B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262C, 0x0061 };
    uint32_t const ces[9] = { 0x095B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_445)
{
    // 262C 0041;	
    // (☬) ADI SHAKTI	[095B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262C, 0x0041 };
    uint32_t const ces[9] = { 0x095B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_446)
{
    // 262C 0062;	
    // (☬) ADI SHAKTI	[095B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262C, 0x0062 };
    uint32_t const ces[9] = { 0x095B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_447)
{
    // 262D 0021;	
    // (☭) HAMMER AND SICKLE	[095C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262D, 0x0021 };
    uint32_t const ces[9] = { 0x095C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_448)
{
    // 262D 003F;	
    // (☭) HAMMER AND SICKLE	[095C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262D, 0x003F };
    uint32_t const ces[9] = { 0x095C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_449)
{
    // 262D 0061;	
    // (☭) HAMMER AND SICKLE	[095C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262D, 0x0061 };
    uint32_t const ces[9] = { 0x095C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_450)
{
    // 262D 0041;	
    // (☭) HAMMER AND SICKLE	[095C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262D, 0x0041 };
    uint32_t const ces[9] = { 0x095C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_451)
{
    // 262D 0062;	
    // (☭) HAMMER AND SICKLE	[095C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262D, 0x0062 };
    uint32_t const ces[9] = { 0x095C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_452)
{
    // 262E 0021;	
    // (☮) PEACE SYMBOL	[095D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262E, 0x0021 };
    uint32_t const ces[9] = { 0x095D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_453)
{
    // 262E 003F;	
    // (☮) PEACE SYMBOL	[095D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262E, 0x003F };
    uint32_t const ces[9] = { 0x095D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_454)
{
    // 262E 0061;	
    // (☮) PEACE SYMBOL	[095D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262E, 0x0061 };
    uint32_t const ces[9] = { 0x095D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_455)
{
    // 262E 0041;	
    // (☮) PEACE SYMBOL	[095D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262E, 0x0041 };
    uint32_t const ces[9] = { 0x095D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_456)
{
    // 262E 0062;	
    // (☮) PEACE SYMBOL	[095D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262E, 0x0062 };
    uint32_t const ces[9] = { 0x095D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_457)
{
    // 262F 0021;	
    // (☯) YIN YANG	[095E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262F, 0x0021 };
    uint32_t const ces[9] = { 0x095E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_458)
{
    // 262F 003F;	
    // (☯) YIN YANG	[095E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262F, 0x003F };
    uint32_t const ces[9] = { 0x095E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_459)
{
    // 262F 0061;	
    // (☯) YIN YANG	[095E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262F, 0x0061 };
    uint32_t const ces[9] = { 0x095E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_460)
{
    // 262F 0041;	
    // (☯) YIN YANG	[095E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x262F, 0x0041 };
    uint32_t const ces[9] = { 0x095E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_461)
{
    // 262F 0062;	
    // (☯) YIN YANG	[095E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x262F, 0x0062 };
    uint32_t const ces[9] = { 0x095E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_462)
{
    // 2638 0021;	
    // (☸) WHEEL OF DHARMA	[095F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2638, 0x0021 };
    uint32_t const ces[9] = { 0x095F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_463)
{
    // 2638 003F;	
    // (☸) WHEEL OF DHARMA	[095F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2638, 0x003F };
    uint32_t const ces[9] = { 0x095F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_464)
{
    // 2638 0061;	
    // (☸) WHEEL OF DHARMA	[095F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2638, 0x0061 };
    uint32_t const ces[9] = { 0x095F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_465)
{
    // 2638 0041;	
    // (☸) WHEEL OF DHARMA	[095F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2638, 0x0041 };
    uint32_t const ces[9] = { 0x095F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_466)
{
    // 2638 0062;	
    // (☸) WHEEL OF DHARMA	[095F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2638, 0x0062 };
    uint32_t const ces[9] = { 0x095F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_467)
{
    // 2639 0021;	
    // (☹) WHITE FROWNING FACE	[0960 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2639, 0x0021 };
    uint32_t const ces[9] = { 0x0960, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_468)
{
    // 2639 003F;	
    // (☹) WHITE FROWNING FACE	[0960 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2639, 0x003F };
    uint32_t const ces[9] = { 0x0960, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_469)
{
    // 2639 0061;	
    // (☹) WHITE FROWNING FACE	[0960 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2639, 0x0061 };
    uint32_t const ces[9] = { 0x0960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_470)
{
    // 2639 0041;	
    // (☹) WHITE FROWNING FACE	[0960 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2639, 0x0041 };
    uint32_t const ces[9] = { 0x0960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_471)
{
    // 2639 0062;	
    // (☹) WHITE FROWNING FACE	[0960 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2639, 0x0062 };
    uint32_t const ces[9] = { 0x0960, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_472)
{
    // 263A 0021;	
    // (☺) WHITE SMILING FACE	[0961 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263A, 0x0021 };
    uint32_t const ces[9] = { 0x0961, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_473)
{
    // 263A 003F;	
    // (☺) WHITE SMILING FACE	[0961 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263A, 0x003F };
    uint32_t const ces[9] = { 0x0961, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_474)
{
    // 263A 0061;	
    // (☺) WHITE SMILING FACE	[0961 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263A, 0x0061 };
    uint32_t const ces[9] = { 0x0961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_475)
{
    // 263A 0041;	
    // (☺) WHITE SMILING FACE	[0961 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263A, 0x0041 };
    uint32_t const ces[9] = { 0x0961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_476)
{
    // 263A 0062;	
    // (☺) WHITE SMILING FACE	[0961 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263A, 0x0062 };
    uint32_t const ces[9] = { 0x0961, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_477)
{
    // 263B 0021;	
    // (☻) BLACK SMILING FACE	[0962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263B, 0x0021 };
    uint32_t const ces[9] = { 0x0962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_478)
{
    // 263B 003F;	
    // (☻) BLACK SMILING FACE	[0962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263B, 0x003F };
    uint32_t const ces[9] = { 0x0962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_479)
{
    // 263B 0061;	
    // (☻) BLACK SMILING FACE	[0962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263B, 0x0061 };
    uint32_t const ces[9] = { 0x0962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_480)
{
    // 263B 0041;	
    // (☻) BLACK SMILING FACE	[0962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263B, 0x0041 };
    uint32_t const ces[9] = { 0x0962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_481)
{
    // 263B 0062;	
    // (☻) BLACK SMILING FACE	[0962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263B, 0x0062 };
    uint32_t const ces[9] = { 0x0962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_482)
{
    // 263C 0021;	
    // (☼) WHITE SUN WITH RAYS	[0963 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263C, 0x0021 };
    uint32_t const ces[9] = { 0x0963, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_483)
{
    // 263C 003F;	
    // (☼) WHITE SUN WITH RAYS	[0963 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263C, 0x003F };
    uint32_t const ces[9] = { 0x0963, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_484)
{
    // 263C 0061;	
    // (☼) WHITE SUN WITH RAYS	[0963 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263C, 0x0061 };
    uint32_t const ces[9] = { 0x0963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_485)
{
    // 263C 0041;	
    // (☼) WHITE SUN WITH RAYS	[0963 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263C, 0x0041 };
    uint32_t const ces[9] = { 0x0963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_486)
{
    // 263C 0062;	
    // (☼) WHITE SUN WITH RAYS	[0963 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263C, 0x0062 };
    uint32_t const ces[9] = { 0x0963, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_487)
{
    // 263D 0021;	
    // (☽) FIRST QUARTER MOON	[0964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263D, 0x0021 };
    uint32_t const ces[9] = { 0x0964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_488)
{
    // 263D 003F;	
    // (☽) FIRST QUARTER MOON	[0964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263D, 0x003F };
    uint32_t const ces[9] = { 0x0964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_489)
{
    // 263D 0061;	
    // (☽) FIRST QUARTER MOON	[0964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263D, 0x0061 };
    uint32_t const ces[9] = { 0x0964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_490)
{
    // 263D 0041;	
    // (☽) FIRST QUARTER MOON	[0964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263D, 0x0041 };
    uint32_t const ces[9] = { 0x0964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_491)
{
    // 263D 0062;	
    // (☽) FIRST QUARTER MOON	[0964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263D, 0x0062 };
    uint32_t const ces[9] = { 0x0964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_492)
{
    // 263E 0021;	
    // (☾) LAST QUARTER MOON	[0965 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263E, 0x0021 };
    uint32_t const ces[9] = { 0x0965, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_493)
{
    // 263E 003F;	
    // (☾) LAST QUARTER MOON	[0965 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263E, 0x003F };
    uint32_t const ces[9] = { 0x0965, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_494)
{
    // 263E 0061;	
    // (☾) LAST QUARTER MOON	[0965 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263E, 0x0061 };
    uint32_t const ces[9] = { 0x0965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_495)
{
    // 263E 0041;	
    // (☾) LAST QUARTER MOON	[0965 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x263E, 0x0041 };
    uint32_t const ces[9] = { 0x0965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_496)
{
    // 263E 0062;	
    // (☾) LAST QUARTER MOON	[0965 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263E, 0x0062 };
    uint32_t const ces[9] = { 0x0965, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_497)
{
    // 263F 0021;	
    // (☿) MERCURY	[0966 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263F, 0x0021 };
    uint32_t const ces[9] = { 0x0966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_498)
{
    // 263F 003F;	
    // (☿) MERCURY	[0966 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263F, 0x003F };
    uint32_t const ces[9] = { 0x0966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_030_499)
{
    // 263F 0061;	
    // (☿) MERCURY	[0966 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x263F, 0x0061 };
    uint32_t const ces[9] = { 0x0966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

