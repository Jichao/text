// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_221_000)
{
    // 1518 0041;	
    // (ᔘ) CANADIAN SYLLABICS WEST-CREE SHWE	[3627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1518, 0x0041 };
    uint32_t const ces[9] = { 0x3627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_001)
{
    // 1518 0062;	
    // (ᔘ) CANADIAN SYLLABICS WEST-CREE SHWE	[3627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1518, 0x0062 };
    uint32_t const ces[9] = { 0x3627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_002)
{
    // 1519 0021;	
    // (ᔙ) CANADIAN SYLLABICS SHWI	[3628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1519, 0x0021 };
    uint32_t const ces[9] = { 0x3628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_003)
{
    // 1519 003F;	
    // (ᔙ) CANADIAN SYLLABICS SHWI	[3628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1519, 0x003F };
    uint32_t const ces[9] = { 0x3628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_004)
{
    // 1519 0061;	
    // (ᔙ) CANADIAN SYLLABICS SHWI	[3628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1519, 0x0061 };
    uint32_t const ces[9] = { 0x3628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_005)
{
    // 1519 0041;	
    // (ᔙ) CANADIAN SYLLABICS SHWI	[3628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1519, 0x0041 };
    uint32_t const ces[9] = { 0x3628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_006)
{
    // 1519 0062;	
    // (ᔙ) CANADIAN SYLLABICS SHWI	[3628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1519, 0x0062 };
    uint32_t const ces[9] = { 0x3628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_007)
{
    // 151A 0021;	
    // (ᔚ) CANADIAN SYLLABICS WEST-CREE SHWI	[3629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151A, 0x0021 };
    uint32_t const ces[9] = { 0x3629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_008)
{
    // 151A 003F;	
    // (ᔚ) CANADIAN SYLLABICS WEST-CREE SHWI	[3629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151A, 0x003F };
    uint32_t const ces[9] = { 0x3629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_009)
{
    // 151A 0061;	
    // (ᔚ) CANADIAN SYLLABICS WEST-CREE SHWI	[3629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151A, 0x0061 };
    uint32_t const ces[9] = { 0x3629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_010)
{
    // 151A 0041;	
    // (ᔚ) CANADIAN SYLLABICS WEST-CREE SHWI	[3629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151A, 0x0041 };
    uint32_t const ces[9] = { 0x3629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_011)
{
    // 151A 0062;	
    // (ᔚ) CANADIAN SYLLABICS WEST-CREE SHWI	[3629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151A, 0x0062 };
    uint32_t const ces[9] = { 0x3629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_012)
{
    // 151B 0021;	
    // (ᔛ) CANADIAN SYLLABICS SHWII	[362A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151B, 0x0021 };
    uint32_t const ces[9] = { 0x362A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_013)
{
    // 151B 003F;	
    // (ᔛ) CANADIAN SYLLABICS SHWII	[362A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151B, 0x003F };
    uint32_t const ces[9] = { 0x362A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_014)
{
    // 151B 0061;	
    // (ᔛ) CANADIAN SYLLABICS SHWII	[362A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151B, 0x0061 };
    uint32_t const ces[9] = { 0x362A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_015)
{
    // 151B 0041;	
    // (ᔛ) CANADIAN SYLLABICS SHWII	[362A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151B, 0x0041 };
    uint32_t const ces[9] = { 0x362A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_016)
{
    // 151B 0062;	
    // (ᔛ) CANADIAN SYLLABICS SHWII	[362A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151B, 0x0062 };
    uint32_t const ces[9] = { 0x362A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_017)
{
    // 151C 0021;	
    // (ᔜ) CANADIAN SYLLABICS WEST-CREE SHWII	[362B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151C, 0x0021 };
    uint32_t const ces[9] = { 0x362B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_018)
{
    // 151C 003F;	
    // (ᔜ) CANADIAN SYLLABICS WEST-CREE SHWII	[362B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151C, 0x003F };
    uint32_t const ces[9] = { 0x362B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_019)
{
    // 151C 0061;	
    // (ᔜ) CANADIAN SYLLABICS WEST-CREE SHWII	[362B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151C, 0x0061 };
    uint32_t const ces[9] = { 0x362B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_020)
{
    // 151C 0041;	
    // (ᔜ) CANADIAN SYLLABICS WEST-CREE SHWII	[362B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151C, 0x0041 };
    uint32_t const ces[9] = { 0x362B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_021)
{
    // 151C 0062;	
    // (ᔜ) CANADIAN SYLLABICS WEST-CREE SHWII	[362B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151C, 0x0062 };
    uint32_t const ces[9] = { 0x362B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_022)
{
    // 151D 0021;	
    // (ᔝ) CANADIAN SYLLABICS SHWO	[362C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151D, 0x0021 };
    uint32_t const ces[9] = { 0x362C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_023)
{
    // 151D 003F;	
    // (ᔝ) CANADIAN SYLLABICS SHWO	[362C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151D, 0x003F };
    uint32_t const ces[9] = { 0x362C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_024)
{
    // 151D 0061;	
    // (ᔝ) CANADIAN SYLLABICS SHWO	[362C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151D, 0x0061 };
    uint32_t const ces[9] = { 0x362C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_025)
{
    // 151D 0041;	
    // (ᔝ) CANADIAN SYLLABICS SHWO	[362C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151D, 0x0041 };
    uint32_t const ces[9] = { 0x362C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_026)
{
    // 151D 0062;	
    // (ᔝ) CANADIAN SYLLABICS SHWO	[362C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151D, 0x0062 };
    uint32_t const ces[9] = { 0x362C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_027)
{
    // 151E 0021;	
    // (ᔞ) CANADIAN SYLLABICS WEST-CREE SHWO	[362D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151E, 0x0021 };
    uint32_t const ces[9] = { 0x362D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_028)
{
    // 151E 003F;	
    // (ᔞ) CANADIAN SYLLABICS WEST-CREE SHWO	[362D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151E, 0x003F };
    uint32_t const ces[9] = { 0x362D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_029)
{
    // 151E 0061;	
    // (ᔞ) CANADIAN SYLLABICS WEST-CREE SHWO	[362D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151E, 0x0061 };
    uint32_t const ces[9] = { 0x362D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_030)
{
    // 151E 0041;	
    // (ᔞ) CANADIAN SYLLABICS WEST-CREE SHWO	[362D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151E, 0x0041 };
    uint32_t const ces[9] = { 0x362D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_031)
{
    // 151E 0062;	
    // (ᔞ) CANADIAN SYLLABICS WEST-CREE SHWO	[362D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151E, 0x0062 };
    uint32_t const ces[9] = { 0x362D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_032)
{
    // 151F 0021;	
    // (ᔟ) CANADIAN SYLLABICS SHWOO	[362E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151F, 0x0021 };
    uint32_t const ces[9] = { 0x362E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_033)
{
    // 151F 003F;	
    // (ᔟ) CANADIAN SYLLABICS SHWOO	[362E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151F, 0x003F };
    uint32_t const ces[9] = { 0x362E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_034)
{
    // 151F 0061;	
    // (ᔟ) CANADIAN SYLLABICS SHWOO	[362E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151F, 0x0061 };
    uint32_t const ces[9] = { 0x362E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_035)
{
    // 151F 0041;	
    // (ᔟ) CANADIAN SYLLABICS SHWOO	[362E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x151F, 0x0041 };
    uint32_t const ces[9] = { 0x362E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_036)
{
    // 151F 0062;	
    // (ᔟ) CANADIAN SYLLABICS SHWOO	[362E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x151F, 0x0062 };
    uint32_t const ces[9] = { 0x362E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_037)
{
    // 1520 0021;	
    // (ᔠ) CANADIAN SYLLABICS WEST-CREE SHWOO	[362F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1520, 0x0021 };
    uint32_t const ces[9] = { 0x362F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_038)
{
    // 1520 003F;	
    // (ᔠ) CANADIAN SYLLABICS WEST-CREE SHWOO	[362F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1520, 0x003F };
    uint32_t const ces[9] = { 0x362F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_039)
{
    // 1520 0061;	
    // (ᔠ) CANADIAN SYLLABICS WEST-CREE SHWOO	[362F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1520, 0x0061 };
    uint32_t const ces[9] = { 0x362F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_040)
{
    // 1520 0041;	
    // (ᔠ) CANADIAN SYLLABICS WEST-CREE SHWOO	[362F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1520, 0x0041 };
    uint32_t const ces[9] = { 0x362F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_041)
{
    // 1520 0062;	
    // (ᔠ) CANADIAN SYLLABICS WEST-CREE SHWOO	[362F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1520, 0x0062 };
    uint32_t const ces[9] = { 0x362F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_042)
{
    // 1521 0021;	
    // (ᔡ) CANADIAN SYLLABICS SHWA	[3630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1521, 0x0021 };
    uint32_t const ces[9] = { 0x3630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_043)
{
    // 1521 003F;	
    // (ᔡ) CANADIAN SYLLABICS SHWA	[3630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1521, 0x003F };
    uint32_t const ces[9] = { 0x3630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_044)
{
    // 1521 0061;	
    // (ᔡ) CANADIAN SYLLABICS SHWA	[3630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1521, 0x0061 };
    uint32_t const ces[9] = { 0x3630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_045)
{
    // 1521 0041;	
    // (ᔡ) CANADIAN SYLLABICS SHWA	[3630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1521, 0x0041 };
    uint32_t const ces[9] = { 0x3630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_046)
{
    // 1521 0062;	
    // (ᔡ) CANADIAN SYLLABICS SHWA	[3630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1521, 0x0062 };
    uint32_t const ces[9] = { 0x3630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_047)
{
    // 1522 0021;	
    // (ᔢ) CANADIAN SYLLABICS WEST-CREE SHWA	[3631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1522, 0x0021 };
    uint32_t const ces[9] = { 0x3631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_048)
{
    // 1522 003F;	
    // (ᔢ) CANADIAN SYLLABICS WEST-CREE SHWA	[3631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1522, 0x003F };
    uint32_t const ces[9] = { 0x3631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_049)
{
    // 1522 0061;	
    // (ᔢ) CANADIAN SYLLABICS WEST-CREE SHWA	[3631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1522, 0x0061 };
    uint32_t const ces[9] = { 0x3631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_050)
{
    // 1522 0041;	
    // (ᔢ) CANADIAN SYLLABICS WEST-CREE SHWA	[3631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1522, 0x0041 };
    uint32_t const ces[9] = { 0x3631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_051)
{
    // 1522 0062;	
    // (ᔢ) CANADIAN SYLLABICS WEST-CREE SHWA	[3631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1522, 0x0062 };
    uint32_t const ces[9] = { 0x3631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_052)
{
    // 1523 0021;	
    // (ᔣ) CANADIAN SYLLABICS SHWAA	[3632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1523, 0x0021 };
    uint32_t const ces[9] = { 0x3632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_053)
{
    // 1523 003F;	
    // (ᔣ) CANADIAN SYLLABICS SHWAA	[3632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1523, 0x003F };
    uint32_t const ces[9] = { 0x3632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_054)
{
    // 1523 0061;	
    // (ᔣ) CANADIAN SYLLABICS SHWAA	[3632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1523, 0x0061 };
    uint32_t const ces[9] = { 0x3632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_055)
{
    // 1523 0041;	
    // (ᔣ) CANADIAN SYLLABICS SHWAA	[3632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1523, 0x0041 };
    uint32_t const ces[9] = { 0x3632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_056)
{
    // 1523 0062;	
    // (ᔣ) CANADIAN SYLLABICS SHWAA	[3632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1523, 0x0062 };
    uint32_t const ces[9] = { 0x3632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_057)
{
    // 1524 0021;	
    // (ᔤ) CANADIAN SYLLABICS WEST-CREE SHWAA	[3633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1524, 0x0021 };
    uint32_t const ces[9] = { 0x3633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_058)
{
    // 1524 003F;	
    // (ᔤ) CANADIAN SYLLABICS WEST-CREE SHWAA	[3633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1524, 0x003F };
    uint32_t const ces[9] = { 0x3633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_059)
{
    // 1524 0061;	
    // (ᔤ) CANADIAN SYLLABICS WEST-CREE SHWAA	[3633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1524, 0x0061 };
    uint32_t const ces[9] = { 0x3633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_060)
{
    // 1524 0041;	
    // (ᔤ) CANADIAN SYLLABICS WEST-CREE SHWAA	[3633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1524, 0x0041 };
    uint32_t const ces[9] = { 0x3633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_061)
{
    // 1524 0062;	
    // (ᔤ) CANADIAN SYLLABICS WEST-CREE SHWAA	[3633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1524, 0x0062 };
    uint32_t const ces[9] = { 0x3633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_062)
{
    // 1525 0021;	
    // (ᔥ) CANADIAN SYLLABICS SH	[3634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1525, 0x0021 };
    uint32_t const ces[9] = { 0x3634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_063)
{
    // 1525 003F;	
    // (ᔥ) CANADIAN SYLLABICS SH	[3634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1525, 0x003F };
    uint32_t const ces[9] = { 0x3634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_064)
{
    // 1525 0061;	
    // (ᔥ) CANADIAN SYLLABICS SH	[3634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1525, 0x0061 };
    uint32_t const ces[9] = { 0x3634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_065)
{
    // 1525 0041;	
    // (ᔥ) CANADIAN SYLLABICS SH	[3634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1525, 0x0041 };
    uint32_t const ces[9] = { 0x3634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_066)
{
    // 1525 0062;	
    // (ᔥ) CANADIAN SYLLABICS SH	[3634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1525, 0x0062 };
    uint32_t const ces[9] = { 0x3634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_067)
{
    // 1526 0021;	
    // (ᔦ) CANADIAN SYLLABICS YE	[3635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1526, 0x0021 };
    uint32_t const ces[9] = { 0x3635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_068)
{
    // 1526 003F;	
    // (ᔦ) CANADIAN SYLLABICS YE	[3635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1526, 0x003F };
    uint32_t const ces[9] = { 0x3635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_069)
{
    // 1526 0061;	
    // (ᔦ) CANADIAN SYLLABICS YE	[3635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1526, 0x0061 };
    uint32_t const ces[9] = { 0x3635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_070)
{
    // 1526 0041;	
    // (ᔦ) CANADIAN SYLLABICS YE	[3635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1526, 0x0041 };
    uint32_t const ces[9] = { 0x3635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_071)
{
    // 1526 0062;	
    // (ᔦ) CANADIAN SYLLABICS YE	[3635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1526, 0x0062 };
    uint32_t const ces[9] = { 0x3635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_072)
{
    // 1527 0021;	
    // (ᔧ) CANADIAN SYLLABICS YAAI	[3636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1527, 0x0021 };
    uint32_t const ces[9] = { 0x3636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_073)
{
    // 1527 003F;	
    // (ᔧ) CANADIAN SYLLABICS YAAI	[3636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1527, 0x003F };
    uint32_t const ces[9] = { 0x3636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_074)
{
    // 1527 0061;	
    // (ᔧ) CANADIAN SYLLABICS YAAI	[3636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1527, 0x0061 };
    uint32_t const ces[9] = { 0x3636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_075)
{
    // 1527 0041;	
    // (ᔧ) CANADIAN SYLLABICS YAAI	[3636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1527, 0x0041 };
    uint32_t const ces[9] = { 0x3636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_076)
{
    // 1527 0062;	
    // (ᔧ) CANADIAN SYLLABICS YAAI	[3636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1527, 0x0062 };
    uint32_t const ces[9] = { 0x3636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_077)
{
    // 1528 0021;	
    // (ᔨ) CANADIAN SYLLABICS YI	[3637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1528, 0x0021 };
    uint32_t const ces[9] = { 0x3637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_078)
{
    // 1528 003F;	
    // (ᔨ) CANADIAN SYLLABICS YI	[3637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1528, 0x003F };
    uint32_t const ces[9] = { 0x3637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_079)
{
    // 1528 0061;	
    // (ᔨ) CANADIAN SYLLABICS YI	[3637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1528, 0x0061 };
    uint32_t const ces[9] = { 0x3637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_080)
{
    // 1528 0041;	
    // (ᔨ) CANADIAN SYLLABICS YI	[3637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1528, 0x0041 };
    uint32_t const ces[9] = { 0x3637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_081)
{
    // 1528 0062;	
    // (ᔨ) CANADIAN SYLLABICS YI	[3637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1528, 0x0062 };
    uint32_t const ces[9] = { 0x3637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_082)
{
    // 1529 0021;	
    // (ᔩ) CANADIAN SYLLABICS YII	[3638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1529, 0x0021 };
    uint32_t const ces[9] = { 0x3638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_083)
{
    // 1529 003F;	
    // (ᔩ) CANADIAN SYLLABICS YII	[3638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1529, 0x003F };
    uint32_t const ces[9] = { 0x3638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_084)
{
    // 1529 0061;	
    // (ᔩ) CANADIAN SYLLABICS YII	[3638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1529, 0x0061 };
    uint32_t const ces[9] = { 0x3638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_085)
{
    // 1529 0041;	
    // (ᔩ) CANADIAN SYLLABICS YII	[3638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1529, 0x0041 };
    uint32_t const ces[9] = { 0x3638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_086)
{
    // 1529 0062;	
    // (ᔩ) CANADIAN SYLLABICS YII	[3638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1529, 0x0062 };
    uint32_t const ces[9] = { 0x3638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_087)
{
    // 152A 0021;	
    // (ᔪ) CANADIAN SYLLABICS YO	[3639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152A, 0x0021 };
    uint32_t const ces[9] = { 0x3639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_088)
{
    // 152A 003F;	
    // (ᔪ) CANADIAN SYLLABICS YO	[3639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152A, 0x003F };
    uint32_t const ces[9] = { 0x3639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_089)
{
    // 152A 0061;	
    // (ᔪ) CANADIAN SYLLABICS YO	[3639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152A, 0x0061 };
    uint32_t const ces[9] = { 0x3639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_090)
{
    // 152A 0041;	
    // (ᔪ) CANADIAN SYLLABICS YO	[3639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152A, 0x0041 };
    uint32_t const ces[9] = { 0x3639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_091)
{
    // 152A 0062;	
    // (ᔪ) CANADIAN SYLLABICS YO	[3639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152A, 0x0062 };
    uint32_t const ces[9] = { 0x3639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_092)
{
    // 152B 0021;	
    // (ᔫ) CANADIAN SYLLABICS YOO	[363A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152B, 0x0021 };
    uint32_t const ces[9] = { 0x363A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_093)
{
    // 152B 003F;	
    // (ᔫ) CANADIAN SYLLABICS YOO	[363A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152B, 0x003F };
    uint32_t const ces[9] = { 0x363A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_094)
{
    // 152B 0061;	
    // (ᔫ) CANADIAN SYLLABICS YOO	[363A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152B, 0x0061 };
    uint32_t const ces[9] = { 0x363A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_095)
{
    // 152B 0041;	
    // (ᔫ) CANADIAN SYLLABICS YOO	[363A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152B, 0x0041 };
    uint32_t const ces[9] = { 0x363A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_096)
{
    // 152B 0062;	
    // (ᔫ) CANADIAN SYLLABICS YOO	[363A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152B, 0x0062 };
    uint32_t const ces[9] = { 0x363A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_097)
{
    // 152C 0021;	
    // (ᔬ) CANADIAN SYLLABICS Y-CREE YOO	[363B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152C, 0x0021 };
    uint32_t const ces[9] = { 0x363B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_098)
{
    // 152C 003F;	
    // (ᔬ) CANADIAN SYLLABICS Y-CREE YOO	[363B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152C, 0x003F };
    uint32_t const ces[9] = { 0x363B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_099)
{
    // 152C 0061;	
    // (ᔬ) CANADIAN SYLLABICS Y-CREE YOO	[363B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152C, 0x0061 };
    uint32_t const ces[9] = { 0x363B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_100)
{
    // 152C 0041;	
    // (ᔬ) CANADIAN SYLLABICS Y-CREE YOO	[363B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152C, 0x0041 };
    uint32_t const ces[9] = { 0x363B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_101)
{
    // 152C 0062;	
    // (ᔬ) CANADIAN SYLLABICS Y-CREE YOO	[363B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152C, 0x0062 };
    uint32_t const ces[9] = { 0x363B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_102)
{
    // 152D 0021;	
    // (ᔭ) CANADIAN SYLLABICS YA	[363C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152D, 0x0021 };
    uint32_t const ces[9] = { 0x363C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_103)
{
    // 152D 003F;	
    // (ᔭ) CANADIAN SYLLABICS YA	[363C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152D, 0x003F };
    uint32_t const ces[9] = { 0x363C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_104)
{
    // 152D 0061;	
    // (ᔭ) CANADIAN SYLLABICS YA	[363C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152D, 0x0061 };
    uint32_t const ces[9] = { 0x363C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_105)
{
    // 152D 0041;	
    // (ᔭ) CANADIAN SYLLABICS YA	[363C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152D, 0x0041 };
    uint32_t const ces[9] = { 0x363C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_106)
{
    // 152D 0062;	
    // (ᔭ) CANADIAN SYLLABICS YA	[363C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152D, 0x0062 };
    uint32_t const ces[9] = { 0x363C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_107)
{
    // 152E 0021;	
    // (ᔮ) CANADIAN SYLLABICS YAA	[363D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152E, 0x0021 };
    uint32_t const ces[9] = { 0x363D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_108)
{
    // 152E 003F;	
    // (ᔮ) CANADIAN SYLLABICS YAA	[363D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152E, 0x003F };
    uint32_t const ces[9] = { 0x363D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_109)
{
    // 152E 0061;	
    // (ᔮ) CANADIAN SYLLABICS YAA	[363D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152E, 0x0061 };
    uint32_t const ces[9] = { 0x363D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_110)
{
    // 152E 0041;	
    // (ᔮ) CANADIAN SYLLABICS YAA	[363D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152E, 0x0041 };
    uint32_t const ces[9] = { 0x363D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_111)
{
    // 152E 0062;	
    // (ᔮ) CANADIAN SYLLABICS YAA	[363D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152E, 0x0062 };
    uint32_t const ces[9] = { 0x363D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_112)
{
    // 152F 0021;	
    // (ᔯ) CANADIAN SYLLABICS YWE	[363E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152F, 0x0021 };
    uint32_t const ces[9] = { 0x363E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_113)
{
    // 152F 003F;	
    // (ᔯ) CANADIAN SYLLABICS YWE	[363E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152F, 0x003F };
    uint32_t const ces[9] = { 0x363E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_114)
{
    // 152F 0061;	
    // (ᔯ) CANADIAN SYLLABICS YWE	[363E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152F, 0x0061 };
    uint32_t const ces[9] = { 0x363E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_115)
{
    // 152F 0041;	
    // (ᔯ) CANADIAN SYLLABICS YWE	[363E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x152F, 0x0041 };
    uint32_t const ces[9] = { 0x363E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_116)
{
    // 152F 0062;	
    // (ᔯ) CANADIAN SYLLABICS YWE	[363E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x152F, 0x0062 };
    uint32_t const ces[9] = { 0x363E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_117)
{
    // 1530 0021;	
    // (ᔰ) CANADIAN SYLLABICS WEST-CREE YWE	[363F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1530, 0x0021 };
    uint32_t const ces[9] = { 0x363F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_118)
{
    // 1530 003F;	
    // (ᔰ) CANADIAN SYLLABICS WEST-CREE YWE	[363F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1530, 0x003F };
    uint32_t const ces[9] = { 0x363F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_119)
{
    // 1530 0061;	
    // (ᔰ) CANADIAN SYLLABICS WEST-CREE YWE	[363F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1530, 0x0061 };
    uint32_t const ces[9] = { 0x363F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_120)
{
    // 1530 0041;	
    // (ᔰ) CANADIAN SYLLABICS WEST-CREE YWE	[363F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1530, 0x0041 };
    uint32_t const ces[9] = { 0x363F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_121)
{
    // 1530 0062;	
    // (ᔰ) CANADIAN SYLLABICS WEST-CREE YWE	[363F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1530, 0x0062 };
    uint32_t const ces[9] = { 0x363F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_122)
{
    // 1531 0021;	
    // (ᔱ) CANADIAN SYLLABICS YWI	[3640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1531, 0x0021 };
    uint32_t const ces[9] = { 0x3640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_123)
{
    // 1531 003F;	
    // (ᔱ) CANADIAN SYLLABICS YWI	[3640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1531, 0x003F };
    uint32_t const ces[9] = { 0x3640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_124)
{
    // 1531 0061;	
    // (ᔱ) CANADIAN SYLLABICS YWI	[3640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1531, 0x0061 };
    uint32_t const ces[9] = { 0x3640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_125)
{
    // 1531 0041;	
    // (ᔱ) CANADIAN SYLLABICS YWI	[3640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1531, 0x0041 };
    uint32_t const ces[9] = { 0x3640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_126)
{
    // 1531 0062;	
    // (ᔱ) CANADIAN SYLLABICS YWI	[3640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1531, 0x0062 };
    uint32_t const ces[9] = { 0x3640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_127)
{
    // 1532 0021;	
    // (ᔲ) CANADIAN SYLLABICS WEST-CREE YWI	[3641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1532, 0x0021 };
    uint32_t const ces[9] = { 0x3641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_128)
{
    // 1532 003F;	
    // (ᔲ) CANADIAN SYLLABICS WEST-CREE YWI	[3641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1532, 0x003F };
    uint32_t const ces[9] = { 0x3641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_129)
{
    // 1532 0061;	
    // (ᔲ) CANADIAN SYLLABICS WEST-CREE YWI	[3641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1532, 0x0061 };
    uint32_t const ces[9] = { 0x3641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_130)
{
    // 1532 0041;	
    // (ᔲ) CANADIAN SYLLABICS WEST-CREE YWI	[3641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1532, 0x0041 };
    uint32_t const ces[9] = { 0x3641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_131)
{
    // 1532 0062;	
    // (ᔲ) CANADIAN SYLLABICS WEST-CREE YWI	[3641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1532, 0x0062 };
    uint32_t const ces[9] = { 0x3641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_132)
{
    // 1533 0021;	
    // (ᔳ) CANADIAN SYLLABICS YWII	[3642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1533, 0x0021 };
    uint32_t const ces[9] = { 0x3642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_133)
{
    // 1533 003F;	
    // (ᔳ) CANADIAN SYLLABICS YWII	[3642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1533, 0x003F };
    uint32_t const ces[9] = { 0x3642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_134)
{
    // 1533 0061;	
    // (ᔳ) CANADIAN SYLLABICS YWII	[3642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1533, 0x0061 };
    uint32_t const ces[9] = { 0x3642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_135)
{
    // 1533 0041;	
    // (ᔳ) CANADIAN SYLLABICS YWII	[3642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1533, 0x0041 };
    uint32_t const ces[9] = { 0x3642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_136)
{
    // 1533 0062;	
    // (ᔳ) CANADIAN SYLLABICS YWII	[3642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1533, 0x0062 };
    uint32_t const ces[9] = { 0x3642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_137)
{
    // 1534 0021;	
    // (ᔴ) CANADIAN SYLLABICS WEST-CREE YWII	[3643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1534, 0x0021 };
    uint32_t const ces[9] = { 0x3643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_138)
{
    // 1534 003F;	
    // (ᔴ) CANADIAN SYLLABICS WEST-CREE YWII	[3643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1534, 0x003F };
    uint32_t const ces[9] = { 0x3643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_139)
{
    // 1534 0061;	
    // (ᔴ) CANADIAN SYLLABICS WEST-CREE YWII	[3643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1534, 0x0061 };
    uint32_t const ces[9] = { 0x3643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_140)
{
    // 1534 0041;	
    // (ᔴ) CANADIAN SYLLABICS WEST-CREE YWII	[3643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1534, 0x0041 };
    uint32_t const ces[9] = { 0x3643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_141)
{
    // 1534 0062;	
    // (ᔴ) CANADIAN SYLLABICS WEST-CREE YWII	[3643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1534, 0x0062 };
    uint32_t const ces[9] = { 0x3643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_142)
{
    // 1535 0021;	
    // (ᔵ) CANADIAN SYLLABICS YWO	[3644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1535, 0x0021 };
    uint32_t const ces[9] = { 0x3644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_143)
{
    // 1535 003F;	
    // (ᔵ) CANADIAN SYLLABICS YWO	[3644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1535, 0x003F };
    uint32_t const ces[9] = { 0x3644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_144)
{
    // 1535 0061;	
    // (ᔵ) CANADIAN SYLLABICS YWO	[3644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1535, 0x0061 };
    uint32_t const ces[9] = { 0x3644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_145)
{
    // 1535 0041;	
    // (ᔵ) CANADIAN SYLLABICS YWO	[3644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1535, 0x0041 };
    uint32_t const ces[9] = { 0x3644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_146)
{
    // 1535 0062;	
    // (ᔵ) CANADIAN SYLLABICS YWO	[3644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1535, 0x0062 };
    uint32_t const ces[9] = { 0x3644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_147)
{
    // 1536 0021;	
    // (ᔶ) CANADIAN SYLLABICS WEST-CREE YWO	[3645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1536, 0x0021 };
    uint32_t const ces[9] = { 0x3645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_148)
{
    // 1536 003F;	
    // (ᔶ) CANADIAN SYLLABICS WEST-CREE YWO	[3645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1536, 0x003F };
    uint32_t const ces[9] = { 0x3645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_149)
{
    // 1536 0061;	
    // (ᔶ) CANADIAN SYLLABICS WEST-CREE YWO	[3645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1536, 0x0061 };
    uint32_t const ces[9] = { 0x3645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_150)
{
    // 1536 0041;	
    // (ᔶ) CANADIAN SYLLABICS WEST-CREE YWO	[3645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1536, 0x0041 };
    uint32_t const ces[9] = { 0x3645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_151)
{
    // 1536 0062;	
    // (ᔶ) CANADIAN SYLLABICS WEST-CREE YWO	[3645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1536, 0x0062 };
    uint32_t const ces[9] = { 0x3645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_152)
{
    // 1537 0021;	
    // (ᔷ) CANADIAN SYLLABICS YWOO	[3646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1537, 0x0021 };
    uint32_t const ces[9] = { 0x3646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_153)
{
    // 1537 003F;	
    // (ᔷ) CANADIAN SYLLABICS YWOO	[3646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1537, 0x003F };
    uint32_t const ces[9] = { 0x3646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_154)
{
    // 1537 0061;	
    // (ᔷ) CANADIAN SYLLABICS YWOO	[3646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1537, 0x0061 };
    uint32_t const ces[9] = { 0x3646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_155)
{
    // 1537 0041;	
    // (ᔷ) CANADIAN SYLLABICS YWOO	[3646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1537, 0x0041 };
    uint32_t const ces[9] = { 0x3646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_156)
{
    // 1537 0062;	
    // (ᔷ) CANADIAN SYLLABICS YWOO	[3646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1537, 0x0062 };
    uint32_t const ces[9] = { 0x3646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_157)
{
    // 1538 0021;	
    // (ᔸ) CANADIAN SYLLABICS WEST-CREE YWOO	[3647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1538, 0x0021 };
    uint32_t const ces[9] = { 0x3647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_158)
{
    // 1538 003F;	
    // (ᔸ) CANADIAN SYLLABICS WEST-CREE YWOO	[3647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1538, 0x003F };
    uint32_t const ces[9] = { 0x3647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_159)
{
    // 1538 0061;	
    // (ᔸ) CANADIAN SYLLABICS WEST-CREE YWOO	[3647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1538, 0x0061 };
    uint32_t const ces[9] = { 0x3647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_160)
{
    // 1538 0041;	
    // (ᔸ) CANADIAN SYLLABICS WEST-CREE YWOO	[3647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1538, 0x0041 };
    uint32_t const ces[9] = { 0x3647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_161)
{
    // 1538 0062;	
    // (ᔸ) CANADIAN SYLLABICS WEST-CREE YWOO	[3647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1538, 0x0062 };
    uint32_t const ces[9] = { 0x3647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_162)
{
    // 1539 0021;	
    // (ᔹ) CANADIAN SYLLABICS YWA	[3648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1539, 0x0021 };
    uint32_t const ces[9] = { 0x3648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_163)
{
    // 1539 003F;	
    // (ᔹ) CANADIAN SYLLABICS YWA	[3648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1539, 0x003F };
    uint32_t const ces[9] = { 0x3648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_164)
{
    // 1539 0061;	
    // (ᔹ) CANADIAN SYLLABICS YWA	[3648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1539, 0x0061 };
    uint32_t const ces[9] = { 0x3648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_165)
{
    // 1539 0041;	
    // (ᔹ) CANADIAN SYLLABICS YWA	[3648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1539, 0x0041 };
    uint32_t const ces[9] = { 0x3648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_166)
{
    // 1539 0062;	
    // (ᔹ) CANADIAN SYLLABICS YWA	[3648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1539, 0x0062 };
    uint32_t const ces[9] = { 0x3648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_167)
{
    // 153A 0021;	
    // (ᔺ) CANADIAN SYLLABICS WEST-CREE YWA	[3649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153A, 0x0021 };
    uint32_t const ces[9] = { 0x3649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_168)
{
    // 153A 003F;	
    // (ᔺ) CANADIAN SYLLABICS WEST-CREE YWA	[3649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153A, 0x003F };
    uint32_t const ces[9] = { 0x3649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_169)
{
    // 153A 0061;	
    // (ᔺ) CANADIAN SYLLABICS WEST-CREE YWA	[3649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153A, 0x0061 };
    uint32_t const ces[9] = { 0x3649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_170)
{
    // 153A 0041;	
    // (ᔺ) CANADIAN SYLLABICS WEST-CREE YWA	[3649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153A, 0x0041 };
    uint32_t const ces[9] = { 0x3649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_171)
{
    // 153A 0062;	
    // (ᔺ) CANADIAN SYLLABICS WEST-CREE YWA	[3649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153A, 0x0062 };
    uint32_t const ces[9] = { 0x3649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_172)
{
    // 153B 0021;	
    // (ᔻ) CANADIAN SYLLABICS YWAA	[364A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153B, 0x0021 };
    uint32_t const ces[9] = { 0x364A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_173)
{
    // 153B 003F;	
    // (ᔻ) CANADIAN SYLLABICS YWAA	[364A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153B, 0x003F };
    uint32_t const ces[9] = { 0x364A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_174)
{
    // 153B 0061;	
    // (ᔻ) CANADIAN SYLLABICS YWAA	[364A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153B, 0x0061 };
    uint32_t const ces[9] = { 0x364A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_175)
{
    // 153B 0041;	
    // (ᔻ) CANADIAN SYLLABICS YWAA	[364A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153B, 0x0041 };
    uint32_t const ces[9] = { 0x364A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_176)
{
    // 153B 0062;	
    // (ᔻ) CANADIAN SYLLABICS YWAA	[364A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153B, 0x0062 };
    uint32_t const ces[9] = { 0x364A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_177)
{
    // 153C 0021;	
    // (ᔼ) CANADIAN SYLLABICS WEST-CREE YWAA	[364B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153C, 0x0021 };
    uint32_t const ces[9] = { 0x364B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_178)
{
    // 153C 003F;	
    // (ᔼ) CANADIAN SYLLABICS WEST-CREE YWAA	[364B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153C, 0x003F };
    uint32_t const ces[9] = { 0x364B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_179)
{
    // 153C 0061;	
    // (ᔼ) CANADIAN SYLLABICS WEST-CREE YWAA	[364B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153C, 0x0061 };
    uint32_t const ces[9] = { 0x364B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_180)
{
    // 153C 0041;	
    // (ᔼ) CANADIAN SYLLABICS WEST-CREE YWAA	[364B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153C, 0x0041 };
    uint32_t const ces[9] = { 0x364B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_181)
{
    // 153C 0062;	
    // (ᔼ) CANADIAN SYLLABICS WEST-CREE YWAA	[364B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153C, 0x0062 };
    uint32_t const ces[9] = { 0x364B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_182)
{
    // 153D 0021;	
    // (ᔽ) CANADIAN SYLLABICS NASKAPI YWAA	[364C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153D, 0x0021 };
    uint32_t const ces[9] = { 0x364C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_183)
{
    // 153D 003F;	
    // (ᔽ) CANADIAN SYLLABICS NASKAPI YWAA	[364C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153D, 0x003F };
    uint32_t const ces[9] = { 0x364C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_184)
{
    // 153D 0061;	
    // (ᔽ) CANADIAN SYLLABICS NASKAPI YWAA	[364C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153D, 0x0061 };
    uint32_t const ces[9] = { 0x364C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_185)
{
    // 153D 0041;	
    // (ᔽ) CANADIAN SYLLABICS NASKAPI YWAA	[364C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153D, 0x0041 };
    uint32_t const ces[9] = { 0x364C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_186)
{
    // 153D 0062;	
    // (ᔽ) CANADIAN SYLLABICS NASKAPI YWAA	[364C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153D, 0x0062 };
    uint32_t const ces[9] = { 0x364C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_187)
{
    // 153E 0021;	
    // (ᔾ) CANADIAN SYLLABICS Y	[364D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153E, 0x0021 };
    uint32_t const ces[9] = { 0x364D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_188)
{
    // 153E 003F;	
    // (ᔾ) CANADIAN SYLLABICS Y	[364D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153E, 0x003F };
    uint32_t const ces[9] = { 0x364D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_189)
{
    // 153E 0061;	
    // (ᔾ) CANADIAN SYLLABICS Y	[364D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153E, 0x0061 };
    uint32_t const ces[9] = { 0x364D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_190)
{
    // 153E 0041;	
    // (ᔾ) CANADIAN SYLLABICS Y	[364D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153E, 0x0041 };
    uint32_t const ces[9] = { 0x364D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_191)
{
    // 153E 0062;	
    // (ᔾ) CANADIAN SYLLABICS Y	[364D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153E, 0x0062 };
    uint32_t const ces[9] = { 0x364D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_192)
{
    // 153F 0021;	
    // (ᔿ) CANADIAN SYLLABICS BIBLE-CREE Y	[364E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153F, 0x0021 };
    uint32_t const ces[9] = { 0x364E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_193)
{
    // 153F 003F;	
    // (ᔿ) CANADIAN SYLLABICS BIBLE-CREE Y	[364E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153F, 0x003F };
    uint32_t const ces[9] = { 0x364E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_194)
{
    // 153F 0061;	
    // (ᔿ) CANADIAN SYLLABICS BIBLE-CREE Y	[364E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153F, 0x0061 };
    uint32_t const ces[9] = { 0x364E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_195)
{
    // 153F 0041;	
    // (ᔿ) CANADIAN SYLLABICS BIBLE-CREE Y	[364E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x153F, 0x0041 };
    uint32_t const ces[9] = { 0x364E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_196)
{
    // 153F 0062;	
    // (ᔿ) CANADIAN SYLLABICS BIBLE-CREE Y	[364E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x153F, 0x0062 };
    uint32_t const ces[9] = { 0x364E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_197)
{
    // 1540 0021;	
    // (ᕀ) CANADIAN SYLLABICS WEST-CREE Y	[364F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1540, 0x0021 };
    uint32_t const ces[9] = { 0x364F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_198)
{
    // 1540 003F;	
    // (ᕀ) CANADIAN SYLLABICS WEST-CREE Y	[364F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1540, 0x003F };
    uint32_t const ces[9] = { 0x364F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_199)
{
    // 1540 0061;	
    // (ᕀ) CANADIAN SYLLABICS WEST-CREE Y	[364F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1540, 0x0061 };
    uint32_t const ces[9] = { 0x364F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_200)
{
    // 1540 0041;	
    // (ᕀ) CANADIAN SYLLABICS WEST-CREE Y	[364F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1540, 0x0041 };
    uint32_t const ces[9] = { 0x364F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_201)
{
    // 1540 0062;	
    // (ᕀ) CANADIAN SYLLABICS WEST-CREE Y	[364F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1540, 0x0062 };
    uint32_t const ces[9] = { 0x364F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_202)
{
    // 1541 0021;	
    // (ᕁ) CANADIAN SYLLABICS SAYISI YI	[3650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1541, 0x0021 };
    uint32_t const ces[9] = { 0x3650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_203)
{
    // 1541 003F;	
    // (ᕁ) CANADIAN SYLLABICS SAYISI YI	[3650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1541, 0x003F };
    uint32_t const ces[9] = { 0x3650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_204)
{
    // 1541 0061;	
    // (ᕁ) CANADIAN SYLLABICS SAYISI YI	[3650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1541, 0x0061 };
    uint32_t const ces[9] = { 0x3650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_205)
{
    // 1541 0041;	
    // (ᕁ) CANADIAN SYLLABICS SAYISI YI	[3650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1541, 0x0041 };
    uint32_t const ces[9] = { 0x3650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_206)
{
    // 1541 0062;	
    // (ᕁ) CANADIAN SYLLABICS SAYISI YI	[3650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1541, 0x0062 };
    uint32_t const ces[9] = { 0x3650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_207)
{
    // 1542 0021;	
    // (ᕂ) CANADIAN SYLLABICS RE	[3651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1542, 0x0021 };
    uint32_t const ces[9] = { 0x3651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_208)
{
    // 1542 003F;	
    // (ᕂ) CANADIAN SYLLABICS RE	[3651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1542, 0x003F };
    uint32_t const ces[9] = { 0x3651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_209)
{
    // 1542 0061;	
    // (ᕂ) CANADIAN SYLLABICS RE	[3651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1542, 0x0061 };
    uint32_t const ces[9] = { 0x3651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_210)
{
    // 1542 0041;	
    // (ᕂ) CANADIAN SYLLABICS RE	[3651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1542, 0x0041 };
    uint32_t const ces[9] = { 0x3651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_211)
{
    // 1542 0062;	
    // (ᕂ) CANADIAN SYLLABICS RE	[3651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1542, 0x0062 };
    uint32_t const ces[9] = { 0x3651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_212)
{
    // 1543 0021;	
    // (ᕃ) CANADIAN SYLLABICS R-CREE RE	[3652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1543, 0x0021 };
    uint32_t const ces[9] = { 0x3652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_213)
{
    // 1543 003F;	
    // (ᕃ) CANADIAN SYLLABICS R-CREE RE	[3652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1543, 0x003F };
    uint32_t const ces[9] = { 0x3652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_214)
{
    // 1543 0061;	
    // (ᕃ) CANADIAN SYLLABICS R-CREE RE	[3652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1543, 0x0061 };
    uint32_t const ces[9] = { 0x3652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_215)
{
    // 1543 0041;	
    // (ᕃ) CANADIAN SYLLABICS R-CREE RE	[3652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1543, 0x0041 };
    uint32_t const ces[9] = { 0x3652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_216)
{
    // 1543 0062;	
    // (ᕃ) CANADIAN SYLLABICS R-CREE RE	[3652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1543, 0x0062 };
    uint32_t const ces[9] = { 0x3652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_217)
{
    // 1544 0021;	
    // (ᕄ) CANADIAN SYLLABICS WEST-CREE LE	[3653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1544, 0x0021 };
    uint32_t const ces[9] = { 0x3653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_218)
{
    // 1544 003F;	
    // (ᕄ) CANADIAN SYLLABICS WEST-CREE LE	[3653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1544, 0x003F };
    uint32_t const ces[9] = { 0x3653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_219)
{
    // 1544 0061;	
    // (ᕄ) CANADIAN SYLLABICS WEST-CREE LE	[3653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1544, 0x0061 };
    uint32_t const ces[9] = { 0x3653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_220)
{
    // 1544 0041;	
    // (ᕄ) CANADIAN SYLLABICS WEST-CREE LE	[3653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1544, 0x0041 };
    uint32_t const ces[9] = { 0x3653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_221)
{
    // 1544 0062;	
    // (ᕄ) CANADIAN SYLLABICS WEST-CREE LE	[3653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1544, 0x0062 };
    uint32_t const ces[9] = { 0x3653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_222)
{
    // 1545 0021;	
    // (ᕅ) CANADIAN SYLLABICS RAAI	[3654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1545, 0x0021 };
    uint32_t const ces[9] = { 0x3654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_223)
{
    // 1545 003F;	
    // (ᕅ) CANADIAN SYLLABICS RAAI	[3654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1545, 0x003F };
    uint32_t const ces[9] = { 0x3654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_224)
{
    // 1545 0061;	
    // (ᕅ) CANADIAN SYLLABICS RAAI	[3654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1545, 0x0061 };
    uint32_t const ces[9] = { 0x3654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_225)
{
    // 1545 0041;	
    // (ᕅ) CANADIAN SYLLABICS RAAI	[3654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1545, 0x0041 };
    uint32_t const ces[9] = { 0x3654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_226)
{
    // 1545 0062;	
    // (ᕅ) CANADIAN SYLLABICS RAAI	[3654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1545, 0x0062 };
    uint32_t const ces[9] = { 0x3654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_227)
{
    // 1546 0021;	
    // (ᕆ) CANADIAN SYLLABICS RI	[3655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1546, 0x0021 };
    uint32_t const ces[9] = { 0x3655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_228)
{
    // 1546 003F;	
    // (ᕆ) CANADIAN SYLLABICS RI	[3655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1546, 0x003F };
    uint32_t const ces[9] = { 0x3655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_229)
{
    // 1546 0061;	
    // (ᕆ) CANADIAN SYLLABICS RI	[3655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1546, 0x0061 };
    uint32_t const ces[9] = { 0x3655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_230)
{
    // 1546 0041;	
    // (ᕆ) CANADIAN SYLLABICS RI	[3655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1546, 0x0041 };
    uint32_t const ces[9] = { 0x3655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_231)
{
    // 1546 0062;	
    // (ᕆ) CANADIAN SYLLABICS RI	[3655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1546, 0x0062 };
    uint32_t const ces[9] = { 0x3655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_232)
{
    // 1547 0021;	
    // (ᕇ) CANADIAN SYLLABICS RII	[3656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1547, 0x0021 };
    uint32_t const ces[9] = { 0x3656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_233)
{
    // 1547 003F;	
    // (ᕇ) CANADIAN SYLLABICS RII	[3656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1547, 0x003F };
    uint32_t const ces[9] = { 0x3656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_234)
{
    // 1547 0061;	
    // (ᕇ) CANADIAN SYLLABICS RII	[3656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1547, 0x0061 };
    uint32_t const ces[9] = { 0x3656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_235)
{
    // 1547 0041;	
    // (ᕇ) CANADIAN SYLLABICS RII	[3656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1547, 0x0041 };
    uint32_t const ces[9] = { 0x3656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_236)
{
    // 1547 0062;	
    // (ᕇ) CANADIAN SYLLABICS RII	[3656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1547, 0x0062 };
    uint32_t const ces[9] = { 0x3656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_237)
{
    // 1548 0021;	
    // (ᕈ) CANADIAN SYLLABICS RO	[3657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1548, 0x0021 };
    uint32_t const ces[9] = { 0x3657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_238)
{
    // 1548 003F;	
    // (ᕈ) CANADIAN SYLLABICS RO	[3657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1548, 0x003F };
    uint32_t const ces[9] = { 0x3657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_239)
{
    // 1548 0061;	
    // (ᕈ) CANADIAN SYLLABICS RO	[3657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1548, 0x0061 };
    uint32_t const ces[9] = { 0x3657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_240)
{
    // 1548 0041;	
    // (ᕈ) CANADIAN SYLLABICS RO	[3657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1548, 0x0041 };
    uint32_t const ces[9] = { 0x3657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_241)
{
    // 1548 0062;	
    // (ᕈ) CANADIAN SYLLABICS RO	[3657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1548, 0x0062 };
    uint32_t const ces[9] = { 0x3657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_242)
{
    // 1549 0021;	
    // (ᕉ) CANADIAN SYLLABICS ROO	[3658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1549, 0x0021 };
    uint32_t const ces[9] = { 0x3658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_243)
{
    // 1549 003F;	
    // (ᕉ) CANADIAN SYLLABICS ROO	[3658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1549, 0x003F };
    uint32_t const ces[9] = { 0x3658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_244)
{
    // 1549 0061;	
    // (ᕉ) CANADIAN SYLLABICS ROO	[3658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1549, 0x0061 };
    uint32_t const ces[9] = { 0x3658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_245)
{
    // 1549 0041;	
    // (ᕉ) CANADIAN SYLLABICS ROO	[3658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1549, 0x0041 };
    uint32_t const ces[9] = { 0x3658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_246)
{
    // 1549 0062;	
    // (ᕉ) CANADIAN SYLLABICS ROO	[3658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1549, 0x0062 };
    uint32_t const ces[9] = { 0x3658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_247)
{
    // 154A 0021;	
    // (ᕊ) CANADIAN SYLLABICS WEST-CREE LO	[3659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154A, 0x0021 };
    uint32_t const ces[9] = { 0x3659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_248)
{
    // 154A 003F;	
    // (ᕊ) CANADIAN SYLLABICS WEST-CREE LO	[3659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154A, 0x003F };
    uint32_t const ces[9] = { 0x3659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_249)
{
    // 154A 0061;	
    // (ᕊ) CANADIAN SYLLABICS WEST-CREE LO	[3659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154A, 0x0061 };
    uint32_t const ces[9] = { 0x3659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_250)
{
    // 154A 0041;	
    // (ᕊ) CANADIAN SYLLABICS WEST-CREE LO	[3659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154A, 0x0041 };
    uint32_t const ces[9] = { 0x3659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_251)
{
    // 154A 0062;	
    // (ᕊ) CANADIAN SYLLABICS WEST-CREE LO	[3659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154A, 0x0062 };
    uint32_t const ces[9] = { 0x3659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_252)
{
    // 154B 0021;	
    // (ᕋ) CANADIAN SYLLABICS RA	[365A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154B, 0x0021 };
    uint32_t const ces[9] = { 0x365A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_253)
{
    // 154B 003F;	
    // (ᕋ) CANADIAN SYLLABICS RA	[365A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154B, 0x003F };
    uint32_t const ces[9] = { 0x365A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_254)
{
    // 154B 0061;	
    // (ᕋ) CANADIAN SYLLABICS RA	[365A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154B, 0x0061 };
    uint32_t const ces[9] = { 0x365A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_255)
{
    // 154B 0041;	
    // (ᕋ) CANADIAN SYLLABICS RA	[365A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154B, 0x0041 };
    uint32_t const ces[9] = { 0x365A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_256)
{
    // 154B 0062;	
    // (ᕋ) CANADIAN SYLLABICS RA	[365A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154B, 0x0062 };
    uint32_t const ces[9] = { 0x365A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_257)
{
    // 154C 0021;	
    // (ᕌ) CANADIAN SYLLABICS RAA	[365B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154C, 0x0021 };
    uint32_t const ces[9] = { 0x365B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_258)
{
    // 154C 003F;	
    // (ᕌ) CANADIAN SYLLABICS RAA	[365B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154C, 0x003F };
    uint32_t const ces[9] = { 0x365B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_259)
{
    // 154C 0061;	
    // (ᕌ) CANADIAN SYLLABICS RAA	[365B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154C, 0x0061 };
    uint32_t const ces[9] = { 0x365B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_260)
{
    // 154C 0041;	
    // (ᕌ) CANADIAN SYLLABICS RAA	[365B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154C, 0x0041 };
    uint32_t const ces[9] = { 0x365B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_261)
{
    // 154C 0062;	
    // (ᕌ) CANADIAN SYLLABICS RAA	[365B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154C, 0x0062 };
    uint32_t const ces[9] = { 0x365B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_262)
{
    // 154D 0021;	
    // (ᕍ) CANADIAN SYLLABICS WEST-CREE LA	[365C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154D, 0x0021 };
    uint32_t const ces[9] = { 0x365C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_263)
{
    // 154D 003F;	
    // (ᕍ) CANADIAN SYLLABICS WEST-CREE LA	[365C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154D, 0x003F };
    uint32_t const ces[9] = { 0x365C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_264)
{
    // 154D 0061;	
    // (ᕍ) CANADIAN SYLLABICS WEST-CREE LA	[365C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154D, 0x0061 };
    uint32_t const ces[9] = { 0x365C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_265)
{
    // 154D 0041;	
    // (ᕍ) CANADIAN SYLLABICS WEST-CREE LA	[365C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154D, 0x0041 };
    uint32_t const ces[9] = { 0x365C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_266)
{
    // 154D 0062;	
    // (ᕍ) CANADIAN SYLLABICS WEST-CREE LA	[365C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154D, 0x0062 };
    uint32_t const ces[9] = { 0x365C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_267)
{
    // 154E 0021;	
    // (ᕎ) CANADIAN SYLLABICS RWAA	[365D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154E, 0x0021 };
    uint32_t const ces[9] = { 0x365D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_268)
{
    // 154E 003F;	
    // (ᕎ) CANADIAN SYLLABICS RWAA	[365D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154E, 0x003F };
    uint32_t const ces[9] = { 0x365D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_269)
{
    // 154E 0061;	
    // (ᕎ) CANADIAN SYLLABICS RWAA	[365D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154E, 0x0061 };
    uint32_t const ces[9] = { 0x365D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_270)
{
    // 154E 0041;	
    // (ᕎ) CANADIAN SYLLABICS RWAA	[365D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154E, 0x0041 };
    uint32_t const ces[9] = { 0x365D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_271)
{
    // 154E 0062;	
    // (ᕎ) CANADIAN SYLLABICS RWAA	[365D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154E, 0x0062 };
    uint32_t const ces[9] = { 0x365D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_272)
{
    // 154F 0021;	
    // (ᕏ) CANADIAN SYLLABICS WEST-CREE RWAA	[365E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154F, 0x0021 };
    uint32_t const ces[9] = { 0x365E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_273)
{
    // 154F 003F;	
    // (ᕏ) CANADIAN SYLLABICS WEST-CREE RWAA	[365E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154F, 0x003F };
    uint32_t const ces[9] = { 0x365E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_274)
{
    // 154F 0061;	
    // (ᕏ) CANADIAN SYLLABICS WEST-CREE RWAA	[365E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154F, 0x0061 };
    uint32_t const ces[9] = { 0x365E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_275)
{
    // 154F 0041;	
    // (ᕏ) CANADIAN SYLLABICS WEST-CREE RWAA	[365E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x154F, 0x0041 };
    uint32_t const ces[9] = { 0x365E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_276)
{
    // 154F 0062;	
    // (ᕏ) CANADIAN SYLLABICS WEST-CREE RWAA	[365E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x154F, 0x0062 };
    uint32_t const ces[9] = { 0x365E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_277)
{
    // 1550 0021;	
    // (ᕐ) CANADIAN SYLLABICS R	[365F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1550, 0x0021 };
    uint32_t const ces[9] = { 0x365F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_278)
{
    // 1550 003F;	
    // (ᕐ) CANADIAN SYLLABICS R	[365F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1550, 0x003F };
    uint32_t const ces[9] = { 0x365F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_279)
{
    // 1550 0061;	
    // (ᕐ) CANADIAN SYLLABICS R	[365F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1550, 0x0061 };
    uint32_t const ces[9] = { 0x365F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_280)
{
    // 1550 0041;	
    // (ᕐ) CANADIAN SYLLABICS R	[365F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1550, 0x0041 };
    uint32_t const ces[9] = { 0x365F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_281)
{
    // 1550 0062;	
    // (ᕐ) CANADIAN SYLLABICS R	[365F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1550, 0x0062 };
    uint32_t const ces[9] = { 0x365F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_282)
{
    // 1551 0021;	
    // (ᕑ) CANADIAN SYLLABICS WEST-CREE R	[3660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1551, 0x0021 };
    uint32_t const ces[9] = { 0x3660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_283)
{
    // 1551 003F;	
    // (ᕑ) CANADIAN SYLLABICS WEST-CREE R	[3660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1551, 0x003F };
    uint32_t const ces[9] = { 0x3660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_284)
{
    // 1551 0061;	
    // (ᕑ) CANADIAN SYLLABICS WEST-CREE R	[3660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1551, 0x0061 };
    uint32_t const ces[9] = { 0x3660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_285)
{
    // 1551 0041;	
    // (ᕑ) CANADIAN SYLLABICS WEST-CREE R	[3660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1551, 0x0041 };
    uint32_t const ces[9] = { 0x3660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_286)
{
    // 1551 0062;	
    // (ᕑ) CANADIAN SYLLABICS WEST-CREE R	[3660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1551, 0x0062 };
    uint32_t const ces[9] = { 0x3660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_287)
{
    // 1552 0021;	
    // (ᕒ) CANADIAN SYLLABICS MEDIAL R	[3661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1552, 0x0021 };
    uint32_t const ces[9] = { 0x3661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_288)
{
    // 1552 003F;	
    // (ᕒ) CANADIAN SYLLABICS MEDIAL R	[3661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1552, 0x003F };
    uint32_t const ces[9] = { 0x3661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_289)
{
    // 1552 0061;	
    // (ᕒ) CANADIAN SYLLABICS MEDIAL R	[3661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1552, 0x0061 };
    uint32_t const ces[9] = { 0x3661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_290)
{
    // 1552 0041;	
    // (ᕒ) CANADIAN SYLLABICS MEDIAL R	[3661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1552, 0x0041 };
    uint32_t const ces[9] = { 0x3661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_291)
{
    // 1552 0062;	
    // (ᕒ) CANADIAN SYLLABICS MEDIAL R	[3661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1552, 0x0062 };
    uint32_t const ces[9] = { 0x3661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_292)
{
    // 1553 0021;	
    // (ᕓ) CANADIAN SYLLABICS FE	[3662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1553, 0x0021 };
    uint32_t const ces[9] = { 0x3662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_293)
{
    // 1553 003F;	
    // (ᕓ) CANADIAN SYLLABICS FE	[3662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1553, 0x003F };
    uint32_t const ces[9] = { 0x3662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_294)
{
    // 1553 0061;	
    // (ᕓ) CANADIAN SYLLABICS FE	[3662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1553, 0x0061 };
    uint32_t const ces[9] = { 0x3662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_295)
{
    // 1553 0041;	
    // (ᕓ) CANADIAN SYLLABICS FE	[3662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1553, 0x0041 };
    uint32_t const ces[9] = { 0x3662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_296)
{
    // 1553 0062;	
    // (ᕓ) CANADIAN SYLLABICS FE	[3662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1553, 0x0062 };
    uint32_t const ces[9] = { 0x3662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_297)
{
    // 1554 0021;	
    // (ᕔ) CANADIAN SYLLABICS FAAI	[3663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1554, 0x0021 };
    uint32_t const ces[9] = { 0x3663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_298)
{
    // 1554 003F;	
    // (ᕔ) CANADIAN SYLLABICS FAAI	[3663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1554, 0x003F };
    uint32_t const ces[9] = { 0x3663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_299)
{
    // 1554 0061;	
    // (ᕔ) CANADIAN SYLLABICS FAAI	[3663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1554, 0x0061 };
    uint32_t const ces[9] = { 0x3663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_300)
{
    // 1554 0041;	
    // (ᕔ) CANADIAN SYLLABICS FAAI	[3663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1554, 0x0041 };
    uint32_t const ces[9] = { 0x3663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_301)
{
    // 1554 0062;	
    // (ᕔ) CANADIAN SYLLABICS FAAI	[3663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1554, 0x0062 };
    uint32_t const ces[9] = { 0x3663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_302)
{
    // 1555 0021;	
    // (ᕕ) CANADIAN SYLLABICS FI	[3664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1555, 0x0021 };
    uint32_t const ces[9] = { 0x3664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_303)
{
    // 1555 003F;	
    // (ᕕ) CANADIAN SYLLABICS FI	[3664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1555, 0x003F };
    uint32_t const ces[9] = { 0x3664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_304)
{
    // 1555 0061;	
    // (ᕕ) CANADIAN SYLLABICS FI	[3664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1555, 0x0061 };
    uint32_t const ces[9] = { 0x3664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_305)
{
    // 1555 0041;	
    // (ᕕ) CANADIAN SYLLABICS FI	[3664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1555, 0x0041 };
    uint32_t const ces[9] = { 0x3664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_306)
{
    // 1555 0062;	
    // (ᕕ) CANADIAN SYLLABICS FI	[3664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1555, 0x0062 };
    uint32_t const ces[9] = { 0x3664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_307)
{
    // 1556 0021;	
    // (ᕖ) CANADIAN SYLLABICS FII	[3665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1556, 0x0021 };
    uint32_t const ces[9] = { 0x3665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_308)
{
    // 1556 003F;	
    // (ᕖ) CANADIAN SYLLABICS FII	[3665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1556, 0x003F };
    uint32_t const ces[9] = { 0x3665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_309)
{
    // 1556 0061;	
    // (ᕖ) CANADIAN SYLLABICS FII	[3665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1556, 0x0061 };
    uint32_t const ces[9] = { 0x3665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_310)
{
    // 1556 0041;	
    // (ᕖ) CANADIAN SYLLABICS FII	[3665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1556, 0x0041 };
    uint32_t const ces[9] = { 0x3665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_311)
{
    // 1556 0062;	
    // (ᕖ) CANADIAN SYLLABICS FII	[3665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1556, 0x0062 };
    uint32_t const ces[9] = { 0x3665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_312)
{
    // 1557 0021;	
    // (ᕗ) CANADIAN SYLLABICS FO	[3666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1557, 0x0021 };
    uint32_t const ces[9] = { 0x3666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_313)
{
    // 1557 003F;	
    // (ᕗ) CANADIAN SYLLABICS FO	[3666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1557, 0x003F };
    uint32_t const ces[9] = { 0x3666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_314)
{
    // 1557 0061;	
    // (ᕗ) CANADIAN SYLLABICS FO	[3666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1557, 0x0061 };
    uint32_t const ces[9] = { 0x3666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_315)
{
    // 1557 0041;	
    // (ᕗ) CANADIAN SYLLABICS FO	[3666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1557, 0x0041 };
    uint32_t const ces[9] = { 0x3666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_316)
{
    // 1557 0062;	
    // (ᕗ) CANADIAN SYLLABICS FO	[3666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1557, 0x0062 };
    uint32_t const ces[9] = { 0x3666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_317)
{
    // 1558 0021;	
    // (ᕘ) CANADIAN SYLLABICS FOO	[3667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1558, 0x0021 };
    uint32_t const ces[9] = { 0x3667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_318)
{
    // 1558 003F;	
    // (ᕘ) CANADIAN SYLLABICS FOO	[3667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1558, 0x003F };
    uint32_t const ces[9] = { 0x3667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_319)
{
    // 1558 0061;	
    // (ᕘ) CANADIAN SYLLABICS FOO	[3667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1558, 0x0061 };
    uint32_t const ces[9] = { 0x3667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_320)
{
    // 1558 0041;	
    // (ᕘ) CANADIAN SYLLABICS FOO	[3667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1558, 0x0041 };
    uint32_t const ces[9] = { 0x3667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_321)
{
    // 1558 0062;	
    // (ᕘ) CANADIAN SYLLABICS FOO	[3667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1558, 0x0062 };
    uint32_t const ces[9] = { 0x3667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_322)
{
    // 1559 0021;	
    // (ᕙ) CANADIAN SYLLABICS FA	[3668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1559, 0x0021 };
    uint32_t const ces[9] = { 0x3668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_323)
{
    // 1559 003F;	
    // (ᕙ) CANADIAN SYLLABICS FA	[3668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1559, 0x003F };
    uint32_t const ces[9] = { 0x3668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_324)
{
    // 1559 0061;	
    // (ᕙ) CANADIAN SYLLABICS FA	[3668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1559, 0x0061 };
    uint32_t const ces[9] = { 0x3668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_325)
{
    // 1559 0041;	
    // (ᕙ) CANADIAN SYLLABICS FA	[3668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1559, 0x0041 };
    uint32_t const ces[9] = { 0x3668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_326)
{
    // 1559 0062;	
    // (ᕙ) CANADIAN SYLLABICS FA	[3668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1559, 0x0062 };
    uint32_t const ces[9] = { 0x3668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_327)
{
    // 155A 0021;	
    // (ᕚ) CANADIAN SYLLABICS FAA	[3669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155A, 0x0021 };
    uint32_t const ces[9] = { 0x3669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_328)
{
    // 155A 003F;	
    // (ᕚ) CANADIAN SYLLABICS FAA	[3669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155A, 0x003F };
    uint32_t const ces[9] = { 0x3669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_329)
{
    // 155A 0061;	
    // (ᕚ) CANADIAN SYLLABICS FAA	[3669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155A, 0x0061 };
    uint32_t const ces[9] = { 0x3669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_330)
{
    // 155A 0041;	
    // (ᕚ) CANADIAN SYLLABICS FAA	[3669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155A, 0x0041 };
    uint32_t const ces[9] = { 0x3669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_331)
{
    // 155A 0062;	
    // (ᕚ) CANADIAN SYLLABICS FAA	[3669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155A, 0x0062 };
    uint32_t const ces[9] = { 0x3669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_332)
{
    // 155B 0021;	
    // (ᕛ) CANADIAN SYLLABICS FWAA	[366A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155B, 0x0021 };
    uint32_t const ces[9] = { 0x366A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_333)
{
    // 155B 003F;	
    // (ᕛ) CANADIAN SYLLABICS FWAA	[366A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155B, 0x003F };
    uint32_t const ces[9] = { 0x366A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_334)
{
    // 155B 0061;	
    // (ᕛ) CANADIAN SYLLABICS FWAA	[366A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155B, 0x0061 };
    uint32_t const ces[9] = { 0x366A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_335)
{
    // 155B 0041;	
    // (ᕛ) CANADIAN SYLLABICS FWAA	[366A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155B, 0x0041 };
    uint32_t const ces[9] = { 0x366A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_336)
{
    // 155B 0062;	
    // (ᕛ) CANADIAN SYLLABICS FWAA	[366A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155B, 0x0062 };
    uint32_t const ces[9] = { 0x366A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_337)
{
    // 155C 0021;	
    // (ᕜ) CANADIAN SYLLABICS WEST-CREE FWAA	[366B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155C, 0x0021 };
    uint32_t const ces[9] = { 0x366B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_338)
{
    // 155C 003F;	
    // (ᕜ) CANADIAN SYLLABICS WEST-CREE FWAA	[366B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155C, 0x003F };
    uint32_t const ces[9] = { 0x366B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_339)
{
    // 155C 0061;	
    // (ᕜ) CANADIAN SYLLABICS WEST-CREE FWAA	[366B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155C, 0x0061 };
    uint32_t const ces[9] = { 0x366B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_340)
{
    // 155C 0041;	
    // (ᕜ) CANADIAN SYLLABICS WEST-CREE FWAA	[366B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155C, 0x0041 };
    uint32_t const ces[9] = { 0x366B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_341)
{
    // 155C 0062;	
    // (ᕜ) CANADIAN SYLLABICS WEST-CREE FWAA	[366B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155C, 0x0062 };
    uint32_t const ces[9] = { 0x366B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_342)
{
    // 155D 0021;	
    // (ᕝ) CANADIAN SYLLABICS F	[366C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155D, 0x0021 };
    uint32_t const ces[9] = { 0x366C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_343)
{
    // 155D 003F;	
    // (ᕝ) CANADIAN SYLLABICS F	[366C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155D, 0x003F };
    uint32_t const ces[9] = { 0x366C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_344)
{
    // 155D 0061;	
    // (ᕝ) CANADIAN SYLLABICS F	[366C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155D, 0x0061 };
    uint32_t const ces[9] = { 0x366C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_345)
{
    // 155D 0041;	
    // (ᕝ) CANADIAN SYLLABICS F	[366C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155D, 0x0041 };
    uint32_t const ces[9] = { 0x366C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_346)
{
    // 155D 0062;	
    // (ᕝ) CANADIAN SYLLABICS F	[366C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155D, 0x0062 };
    uint32_t const ces[9] = { 0x366C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_347)
{
    // 155E 0021;	
    // (ᕞ) CANADIAN SYLLABICS THE	[366D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155E, 0x0021 };
    uint32_t const ces[9] = { 0x366D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_348)
{
    // 155E 003F;	
    // (ᕞ) CANADIAN SYLLABICS THE	[366D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155E, 0x003F };
    uint32_t const ces[9] = { 0x366D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_349)
{
    // 155E 0061;	
    // (ᕞ) CANADIAN SYLLABICS THE	[366D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155E, 0x0061 };
    uint32_t const ces[9] = { 0x366D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_350)
{
    // 155E 0041;	
    // (ᕞ) CANADIAN SYLLABICS THE	[366D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155E, 0x0041 };
    uint32_t const ces[9] = { 0x366D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_351)
{
    // 155E 0062;	
    // (ᕞ) CANADIAN SYLLABICS THE	[366D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155E, 0x0062 };
    uint32_t const ces[9] = { 0x366D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_352)
{
    // 155F 0021;	
    // (ᕟ) CANADIAN SYLLABICS N-CREE THE	[366E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155F, 0x0021 };
    uint32_t const ces[9] = { 0x366E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_353)
{
    // 155F 003F;	
    // (ᕟ) CANADIAN SYLLABICS N-CREE THE	[366E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155F, 0x003F };
    uint32_t const ces[9] = { 0x366E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_354)
{
    // 155F 0061;	
    // (ᕟ) CANADIAN SYLLABICS N-CREE THE	[366E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155F, 0x0061 };
    uint32_t const ces[9] = { 0x366E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_355)
{
    // 155F 0041;	
    // (ᕟ) CANADIAN SYLLABICS N-CREE THE	[366E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x155F, 0x0041 };
    uint32_t const ces[9] = { 0x366E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_356)
{
    // 155F 0062;	
    // (ᕟ) CANADIAN SYLLABICS N-CREE THE	[366E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x155F, 0x0062 };
    uint32_t const ces[9] = { 0x366E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_357)
{
    // 1560 0021;	
    // (ᕠ) CANADIAN SYLLABICS THI	[366F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1560, 0x0021 };
    uint32_t const ces[9] = { 0x366F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_358)
{
    // 1560 003F;	
    // (ᕠ) CANADIAN SYLLABICS THI	[366F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1560, 0x003F };
    uint32_t const ces[9] = { 0x366F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_359)
{
    // 1560 0061;	
    // (ᕠ) CANADIAN SYLLABICS THI	[366F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1560, 0x0061 };
    uint32_t const ces[9] = { 0x366F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_360)
{
    // 1560 0041;	
    // (ᕠ) CANADIAN SYLLABICS THI	[366F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1560, 0x0041 };
    uint32_t const ces[9] = { 0x366F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_361)
{
    // 1560 0062;	
    // (ᕠ) CANADIAN SYLLABICS THI	[366F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1560, 0x0062 };
    uint32_t const ces[9] = { 0x366F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_362)
{
    // 1561 0021;	
    // (ᕡ) CANADIAN SYLLABICS N-CREE THI	[3670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1561, 0x0021 };
    uint32_t const ces[9] = { 0x3670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_363)
{
    // 1561 003F;	
    // (ᕡ) CANADIAN SYLLABICS N-CREE THI	[3670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1561, 0x003F };
    uint32_t const ces[9] = { 0x3670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_364)
{
    // 1561 0061;	
    // (ᕡ) CANADIAN SYLLABICS N-CREE THI	[3670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1561, 0x0061 };
    uint32_t const ces[9] = { 0x3670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_365)
{
    // 1561 0041;	
    // (ᕡ) CANADIAN SYLLABICS N-CREE THI	[3670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1561, 0x0041 };
    uint32_t const ces[9] = { 0x3670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_366)
{
    // 1561 0062;	
    // (ᕡ) CANADIAN SYLLABICS N-CREE THI	[3670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1561, 0x0062 };
    uint32_t const ces[9] = { 0x3670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_367)
{
    // 1562 0021;	
    // (ᕢ) CANADIAN SYLLABICS THII	[3671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1562, 0x0021 };
    uint32_t const ces[9] = { 0x3671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_368)
{
    // 1562 003F;	
    // (ᕢ) CANADIAN SYLLABICS THII	[3671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1562, 0x003F };
    uint32_t const ces[9] = { 0x3671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_369)
{
    // 1562 0061;	
    // (ᕢ) CANADIAN SYLLABICS THII	[3671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1562, 0x0061 };
    uint32_t const ces[9] = { 0x3671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_370)
{
    // 1562 0041;	
    // (ᕢ) CANADIAN SYLLABICS THII	[3671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1562, 0x0041 };
    uint32_t const ces[9] = { 0x3671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_371)
{
    // 1562 0062;	
    // (ᕢ) CANADIAN SYLLABICS THII	[3671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1562, 0x0062 };
    uint32_t const ces[9] = { 0x3671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_372)
{
    // 1563 0021;	
    // (ᕣ) CANADIAN SYLLABICS N-CREE THII	[3672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1563, 0x0021 };
    uint32_t const ces[9] = { 0x3672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_373)
{
    // 1563 003F;	
    // (ᕣ) CANADIAN SYLLABICS N-CREE THII	[3672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1563, 0x003F };
    uint32_t const ces[9] = { 0x3672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_374)
{
    // 1563 0061;	
    // (ᕣ) CANADIAN SYLLABICS N-CREE THII	[3672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1563, 0x0061 };
    uint32_t const ces[9] = { 0x3672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_375)
{
    // 1563 0041;	
    // (ᕣ) CANADIAN SYLLABICS N-CREE THII	[3672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1563, 0x0041 };
    uint32_t const ces[9] = { 0x3672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_376)
{
    // 1563 0062;	
    // (ᕣ) CANADIAN SYLLABICS N-CREE THII	[3672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1563, 0x0062 };
    uint32_t const ces[9] = { 0x3672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_377)
{
    // 1564 0021;	
    // (ᕤ) CANADIAN SYLLABICS THO	[3673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1564, 0x0021 };
    uint32_t const ces[9] = { 0x3673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_378)
{
    // 1564 003F;	
    // (ᕤ) CANADIAN SYLLABICS THO	[3673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1564, 0x003F };
    uint32_t const ces[9] = { 0x3673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_379)
{
    // 1564 0061;	
    // (ᕤ) CANADIAN SYLLABICS THO	[3673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1564, 0x0061 };
    uint32_t const ces[9] = { 0x3673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_380)
{
    // 1564 0041;	
    // (ᕤ) CANADIAN SYLLABICS THO	[3673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1564, 0x0041 };
    uint32_t const ces[9] = { 0x3673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_381)
{
    // 1564 0062;	
    // (ᕤ) CANADIAN SYLLABICS THO	[3673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1564, 0x0062 };
    uint32_t const ces[9] = { 0x3673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_382)
{
    // 1565 0021;	
    // (ᕥ) CANADIAN SYLLABICS THOO	[3674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1565, 0x0021 };
    uint32_t const ces[9] = { 0x3674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_383)
{
    // 1565 003F;	
    // (ᕥ) CANADIAN SYLLABICS THOO	[3674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1565, 0x003F };
    uint32_t const ces[9] = { 0x3674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_384)
{
    // 1565 0061;	
    // (ᕥ) CANADIAN SYLLABICS THOO	[3674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1565, 0x0061 };
    uint32_t const ces[9] = { 0x3674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_385)
{
    // 1565 0041;	
    // (ᕥ) CANADIAN SYLLABICS THOO	[3674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1565, 0x0041 };
    uint32_t const ces[9] = { 0x3674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_386)
{
    // 1565 0062;	
    // (ᕥ) CANADIAN SYLLABICS THOO	[3674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1565, 0x0062 };
    uint32_t const ces[9] = { 0x3674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_387)
{
    // 1566 0021;	
    // (ᕦ) CANADIAN SYLLABICS THA	[3675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1566, 0x0021 };
    uint32_t const ces[9] = { 0x3675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_388)
{
    // 1566 003F;	
    // (ᕦ) CANADIAN SYLLABICS THA	[3675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1566, 0x003F };
    uint32_t const ces[9] = { 0x3675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_389)
{
    // 1566 0061;	
    // (ᕦ) CANADIAN SYLLABICS THA	[3675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1566, 0x0061 };
    uint32_t const ces[9] = { 0x3675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_390)
{
    // 1566 0041;	
    // (ᕦ) CANADIAN SYLLABICS THA	[3675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1566, 0x0041 };
    uint32_t const ces[9] = { 0x3675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_391)
{
    // 1566 0062;	
    // (ᕦ) CANADIAN SYLLABICS THA	[3675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1566, 0x0062 };
    uint32_t const ces[9] = { 0x3675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_392)
{
    // 1567 0021;	
    // (ᕧ) CANADIAN SYLLABICS THAA	[3676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1567, 0x0021 };
    uint32_t const ces[9] = { 0x3676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_393)
{
    // 1567 003F;	
    // (ᕧ) CANADIAN SYLLABICS THAA	[3676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1567, 0x003F };
    uint32_t const ces[9] = { 0x3676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_394)
{
    // 1567 0061;	
    // (ᕧ) CANADIAN SYLLABICS THAA	[3676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1567, 0x0061 };
    uint32_t const ces[9] = { 0x3676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_395)
{
    // 1567 0041;	
    // (ᕧ) CANADIAN SYLLABICS THAA	[3676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1567, 0x0041 };
    uint32_t const ces[9] = { 0x3676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_396)
{
    // 1567 0062;	
    // (ᕧ) CANADIAN SYLLABICS THAA	[3676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1567, 0x0062 };
    uint32_t const ces[9] = { 0x3676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_397)
{
    // 1568 0021;	
    // (ᕨ) CANADIAN SYLLABICS THWAA	[3677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1568, 0x0021 };
    uint32_t const ces[9] = { 0x3677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_398)
{
    // 1568 003F;	
    // (ᕨ) CANADIAN SYLLABICS THWAA	[3677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1568, 0x003F };
    uint32_t const ces[9] = { 0x3677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_399)
{
    // 1568 0061;	
    // (ᕨ) CANADIAN SYLLABICS THWAA	[3677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1568, 0x0061 };
    uint32_t const ces[9] = { 0x3677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_400)
{
    // 1568 0041;	
    // (ᕨ) CANADIAN SYLLABICS THWAA	[3677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1568, 0x0041 };
    uint32_t const ces[9] = { 0x3677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_401)
{
    // 1568 0062;	
    // (ᕨ) CANADIAN SYLLABICS THWAA	[3677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1568, 0x0062 };
    uint32_t const ces[9] = { 0x3677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_402)
{
    // 1569 0021;	
    // (ᕩ) CANADIAN SYLLABICS WEST-CREE THWAA	[3678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1569, 0x0021 };
    uint32_t const ces[9] = { 0x3678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_403)
{
    // 1569 003F;	
    // (ᕩ) CANADIAN SYLLABICS WEST-CREE THWAA	[3678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1569, 0x003F };
    uint32_t const ces[9] = { 0x3678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_404)
{
    // 1569 0061;	
    // (ᕩ) CANADIAN SYLLABICS WEST-CREE THWAA	[3678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1569, 0x0061 };
    uint32_t const ces[9] = { 0x3678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_405)
{
    // 1569 0041;	
    // (ᕩ) CANADIAN SYLLABICS WEST-CREE THWAA	[3678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1569, 0x0041 };
    uint32_t const ces[9] = { 0x3678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_406)
{
    // 1569 0062;	
    // (ᕩ) CANADIAN SYLLABICS WEST-CREE THWAA	[3678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1569, 0x0062 };
    uint32_t const ces[9] = { 0x3678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_407)
{
    // 156A 0021;	
    // (ᕪ) CANADIAN SYLLABICS TH	[3679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156A, 0x0021 };
    uint32_t const ces[9] = { 0x3679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_408)
{
    // 156A 003F;	
    // (ᕪ) CANADIAN SYLLABICS TH	[3679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156A, 0x003F };
    uint32_t const ces[9] = { 0x3679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_409)
{
    // 156A 0061;	
    // (ᕪ) CANADIAN SYLLABICS TH	[3679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156A, 0x0061 };
    uint32_t const ces[9] = { 0x3679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_410)
{
    // 156A 0041;	
    // (ᕪ) CANADIAN SYLLABICS TH	[3679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156A, 0x0041 };
    uint32_t const ces[9] = { 0x3679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_411)
{
    // 156A 0062;	
    // (ᕪ) CANADIAN SYLLABICS TH	[3679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156A, 0x0062 };
    uint32_t const ces[9] = { 0x3679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_412)
{
    // 156B 0021;	
    // (ᕫ) CANADIAN SYLLABICS TTHE	[367A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156B, 0x0021 };
    uint32_t const ces[9] = { 0x367A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_413)
{
    // 156B 003F;	
    // (ᕫ) CANADIAN SYLLABICS TTHE	[367A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156B, 0x003F };
    uint32_t const ces[9] = { 0x367A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_414)
{
    // 156B 0061;	
    // (ᕫ) CANADIAN SYLLABICS TTHE	[367A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156B, 0x0061 };
    uint32_t const ces[9] = { 0x367A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_415)
{
    // 156B 0041;	
    // (ᕫ) CANADIAN SYLLABICS TTHE	[367A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156B, 0x0041 };
    uint32_t const ces[9] = { 0x367A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_416)
{
    // 156B 0062;	
    // (ᕫ) CANADIAN SYLLABICS TTHE	[367A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156B, 0x0062 };
    uint32_t const ces[9] = { 0x367A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_417)
{
    // 156C 0021;	
    // (ᕬ) CANADIAN SYLLABICS TTHI	[367B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156C, 0x0021 };
    uint32_t const ces[9] = { 0x367B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_418)
{
    // 156C 003F;	
    // (ᕬ) CANADIAN SYLLABICS TTHI	[367B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156C, 0x003F };
    uint32_t const ces[9] = { 0x367B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_419)
{
    // 156C 0061;	
    // (ᕬ) CANADIAN SYLLABICS TTHI	[367B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156C, 0x0061 };
    uint32_t const ces[9] = { 0x367B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_420)
{
    // 156C 0041;	
    // (ᕬ) CANADIAN SYLLABICS TTHI	[367B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156C, 0x0041 };
    uint32_t const ces[9] = { 0x367B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_421)
{
    // 156C 0062;	
    // (ᕬ) CANADIAN SYLLABICS TTHI	[367B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156C, 0x0062 };
    uint32_t const ces[9] = { 0x367B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_422)
{
    // 156D 0021;	
    // (ᕭ) CANADIAN SYLLABICS TTHO	[367C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156D, 0x0021 };
    uint32_t const ces[9] = { 0x367C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_423)
{
    // 156D 003F;	
    // (ᕭ) CANADIAN SYLLABICS TTHO	[367C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156D, 0x003F };
    uint32_t const ces[9] = { 0x367C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_424)
{
    // 156D 0061;	
    // (ᕭ) CANADIAN SYLLABICS TTHO	[367C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156D, 0x0061 };
    uint32_t const ces[9] = { 0x367C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_425)
{
    // 156D 0041;	
    // (ᕭ) CANADIAN SYLLABICS TTHO	[367C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156D, 0x0041 };
    uint32_t const ces[9] = { 0x367C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_426)
{
    // 156D 0062;	
    // (ᕭ) CANADIAN SYLLABICS TTHO	[367C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156D, 0x0062 };
    uint32_t const ces[9] = { 0x367C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_427)
{
    // 156E 0021;	
    // (ᕮ) CANADIAN SYLLABICS TTHA	[367D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156E, 0x0021 };
    uint32_t const ces[9] = { 0x367D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_428)
{
    // 156E 003F;	
    // (ᕮ) CANADIAN SYLLABICS TTHA	[367D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156E, 0x003F };
    uint32_t const ces[9] = { 0x367D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_429)
{
    // 156E 0061;	
    // (ᕮ) CANADIAN SYLLABICS TTHA	[367D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156E, 0x0061 };
    uint32_t const ces[9] = { 0x367D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_430)
{
    // 156E 0041;	
    // (ᕮ) CANADIAN SYLLABICS TTHA	[367D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156E, 0x0041 };
    uint32_t const ces[9] = { 0x367D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_431)
{
    // 156E 0062;	
    // (ᕮ) CANADIAN SYLLABICS TTHA	[367D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156E, 0x0062 };
    uint32_t const ces[9] = { 0x367D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_432)
{
    // 156F 0021;	
    // (ᕯ) CANADIAN SYLLABICS TTH	[367E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156F, 0x0021 };
    uint32_t const ces[9] = { 0x367E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_433)
{
    // 156F 003F;	
    // (ᕯ) CANADIAN SYLLABICS TTH	[367E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156F, 0x003F };
    uint32_t const ces[9] = { 0x367E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_434)
{
    // 156F 0061;	
    // (ᕯ) CANADIAN SYLLABICS TTH	[367E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156F, 0x0061 };
    uint32_t const ces[9] = { 0x367E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_435)
{
    // 156F 0041;	
    // (ᕯ) CANADIAN SYLLABICS TTH	[367E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x156F, 0x0041 };
    uint32_t const ces[9] = { 0x367E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_436)
{
    // 156F 0062;	
    // (ᕯ) CANADIAN SYLLABICS TTH	[367E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x156F, 0x0062 };
    uint32_t const ces[9] = { 0x367E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_437)
{
    // 1570 0021;	
    // (ᕰ) CANADIAN SYLLABICS TYE	[367F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1570, 0x0021 };
    uint32_t const ces[9] = { 0x367F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_438)
{
    // 1570 003F;	
    // (ᕰ) CANADIAN SYLLABICS TYE	[367F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1570, 0x003F };
    uint32_t const ces[9] = { 0x367F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_439)
{
    // 1570 0061;	
    // (ᕰ) CANADIAN SYLLABICS TYE	[367F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1570, 0x0061 };
    uint32_t const ces[9] = { 0x367F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_440)
{
    // 1570 0041;	
    // (ᕰ) CANADIAN SYLLABICS TYE	[367F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1570, 0x0041 };
    uint32_t const ces[9] = { 0x367F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_441)
{
    // 1570 0062;	
    // (ᕰ) CANADIAN SYLLABICS TYE	[367F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1570, 0x0062 };
    uint32_t const ces[9] = { 0x367F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_442)
{
    // 1571 0021;	
    // (ᕱ) CANADIAN SYLLABICS TYI	[3680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1571, 0x0021 };
    uint32_t const ces[9] = { 0x3680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_443)
{
    // 1571 003F;	
    // (ᕱ) CANADIAN SYLLABICS TYI	[3680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1571, 0x003F };
    uint32_t const ces[9] = { 0x3680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_444)
{
    // 1571 0061;	
    // (ᕱ) CANADIAN SYLLABICS TYI	[3680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1571, 0x0061 };
    uint32_t const ces[9] = { 0x3680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_445)
{
    // 1571 0041;	
    // (ᕱ) CANADIAN SYLLABICS TYI	[3680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1571, 0x0041 };
    uint32_t const ces[9] = { 0x3680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_446)
{
    // 1571 0062;	
    // (ᕱ) CANADIAN SYLLABICS TYI	[3680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1571, 0x0062 };
    uint32_t const ces[9] = { 0x3680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_447)
{
    // 1572 0021;	
    // (ᕲ) CANADIAN SYLLABICS TYO	[3681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1572, 0x0021 };
    uint32_t const ces[9] = { 0x3681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_448)
{
    // 1572 003F;	
    // (ᕲ) CANADIAN SYLLABICS TYO	[3681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1572, 0x003F };
    uint32_t const ces[9] = { 0x3681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_449)
{
    // 1572 0061;	
    // (ᕲ) CANADIAN SYLLABICS TYO	[3681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1572, 0x0061 };
    uint32_t const ces[9] = { 0x3681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_450)
{
    // 1572 0041;	
    // (ᕲ) CANADIAN SYLLABICS TYO	[3681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1572, 0x0041 };
    uint32_t const ces[9] = { 0x3681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_451)
{
    // 1572 0062;	
    // (ᕲ) CANADIAN SYLLABICS TYO	[3681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1572, 0x0062 };
    uint32_t const ces[9] = { 0x3681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_452)
{
    // 1573 0021;	
    // (ᕳ) CANADIAN SYLLABICS TYA	[3682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1573, 0x0021 };
    uint32_t const ces[9] = { 0x3682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_453)
{
    // 1573 003F;	
    // (ᕳ) CANADIAN SYLLABICS TYA	[3682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1573, 0x003F };
    uint32_t const ces[9] = { 0x3682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_454)
{
    // 1573 0061;	
    // (ᕳ) CANADIAN SYLLABICS TYA	[3682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1573, 0x0061 };
    uint32_t const ces[9] = { 0x3682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_455)
{
    // 1573 0041;	
    // (ᕳ) CANADIAN SYLLABICS TYA	[3682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1573, 0x0041 };
    uint32_t const ces[9] = { 0x3682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_456)
{
    // 1573 0062;	
    // (ᕳ) CANADIAN SYLLABICS TYA	[3682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1573, 0x0062 };
    uint32_t const ces[9] = { 0x3682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_457)
{
    // 1574 0021;	
    // (ᕴ) CANADIAN SYLLABICS NUNAVIK HE	[3683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1574, 0x0021 };
    uint32_t const ces[9] = { 0x3683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_458)
{
    // 1574 003F;	
    // (ᕴ) CANADIAN SYLLABICS NUNAVIK HE	[3683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1574, 0x003F };
    uint32_t const ces[9] = { 0x3683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_459)
{
    // 1574 0061;	
    // (ᕴ) CANADIAN SYLLABICS NUNAVIK HE	[3683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1574, 0x0061 };
    uint32_t const ces[9] = { 0x3683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_460)
{
    // 1574 0041;	
    // (ᕴ) CANADIAN SYLLABICS NUNAVIK HE	[3683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1574, 0x0041 };
    uint32_t const ces[9] = { 0x3683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_461)
{
    // 1574 0062;	
    // (ᕴ) CANADIAN SYLLABICS NUNAVIK HE	[3683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1574, 0x0062 };
    uint32_t const ces[9] = { 0x3683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_462)
{
    // 1575 0021;	
    // (ᕵ) CANADIAN SYLLABICS NUNAVIK HI	[3684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1575, 0x0021 };
    uint32_t const ces[9] = { 0x3684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_463)
{
    // 1575 003F;	
    // (ᕵ) CANADIAN SYLLABICS NUNAVIK HI	[3684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1575, 0x003F };
    uint32_t const ces[9] = { 0x3684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_464)
{
    // 1575 0061;	
    // (ᕵ) CANADIAN SYLLABICS NUNAVIK HI	[3684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1575, 0x0061 };
    uint32_t const ces[9] = { 0x3684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_465)
{
    // 1575 0041;	
    // (ᕵ) CANADIAN SYLLABICS NUNAVIK HI	[3684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1575, 0x0041 };
    uint32_t const ces[9] = { 0x3684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_466)
{
    // 1575 0062;	
    // (ᕵ) CANADIAN SYLLABICS NUNAVIK HI	[3684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1575, 0x0062 };
    uint32_t const ces[9] = { 0x3684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_467)
{
    // 1576 0021;	
    // (ᕶ) CANADIAN SYLLABICS NUNAVIK HII	[3685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1576, 0x0021 };
    uint32_t const ces[9] = { 0x3685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_468)
{
    // 1576 003F;	
    // (ᕶ) CANADIAN SYLLABICS NUNAVIK HII	[3685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1576, 0x003F };
    uint32_t const ces[9] = { 0x3685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_469)
{
    // 1576 0061;	
    // (ᕶ) CANADIAN SYLLABICS NUNAVIK HII	[3685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1576, 0x0061 };
    uint32_t const ces[9] = { 0x3685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_470)
{
    // 1576 0041;	
    // (ᕶ) CANADIAN SYLLABICS NUNAVIK HII	[3685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1576, 0x0041 };
    uint32_t const ces[9] = { 0x3685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_471)
{
    // 1576 0062;	
    // (ᕶ) CANADIAN SYLLABICS NUNAVIK HII	[3685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1576, 0x0062 };
    uint32_t const ces[9] = { 0x3685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_472)
{
    // 1577 0021;	
    // (ᕷ) CANADIAN SYLLABICS NUNAVIK HO	[3686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1577, 0x0021 };
    uint32_t const ces[9] = { 0x3686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_473)
{
    // 1577 003F;	
    // (ᕷ) CANADIAN SYLLABICS NUNAVIK HO	[3686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1577, 0x003F };
    uint32_t const ces[9] = { 0x3686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_474)
{
    // 1577 0061;	
    // (ᕷ) CANADIAN SYLLABICS NUNAVIK HO	[3686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1577, 0x0061 };
    uint32_t const ces[9] = { 0x3686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_475)
{
    // 1577 0041;	
    // (ᕷ) CANADIAN SYLLABICS NUNAVIK HO	[3686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1577, 0x0041 };
    uint32_t const ces[9] = { 0x3686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_476)
{
    // 1577 0062;	
    // (ᕷ) CANADIAN SYLLABICS NUNAVIK HO	[3686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1577, 0x0062 };
    uint32_t const ces[9] = { 0x3686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_477)
{
    // 1578 0021;	
    // (ᕸ) CANADIAN SYLLABICS NUNAVIK HOO	[3687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1578, 0x0021 };
    uint32_t const ces[9] = { 0x3687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_478)
{
    // 1578 003F;	
    // (ᕸ) CANADIAN SYLLABICS NUNAVIK HOO	[3687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1578, 0x003F };
    uint32_t const ces[9] = { 0x3687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_479)
{
    // 1578 0061;	
    // (ᕸ) CANADIAN SYLLABICS NUNAVIK HOO	[3687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1578, 0x0061 };
    uint32_t const ces[9] = { 0x3687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_480)
{
    // 1578 0041;	
    // (ᕸ) CANADIAN SYLLABICS NUNAVIK HOO	[3687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1578, 0x0041 };
    uint32_t const ces[9] = { 0x3687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_481)
{
    // 1578 0062;	
    // (ᕸ) CANADIAN SYLLABICS NUNAVIK HOO	[3687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1578, 0x0062 };
    uint32_t const ces[9] = { 0x3687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_482)
{
    // 1579 0021;	
    // (ᕹ) CANADIAN SYLLABICS NUNAVIK HA	[3688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1579, 0x0021 };
    uint32_t const ces[9] = { 0x3688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_483)
{
    // 1579 003F;	
    // (ᕹ) CANADIAN SYLLABICS NUNAVIK HA	[3688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1579, 0x003F };
    uint32_t const ces[9] = { 0x3688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_484)
{
    // 1579 0061;	
    // (ᕹ) CANADIAN SYLLABICS NUNAVIK HA	[3688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1579, 0x0061 };
    uint32_t const ces[9] = { 0x3688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_485)
{
    // 1579 0041;	
    // (ᕹ) CANADIAN SYLLABICS NUNAVIK HA	[3688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1579, 0x0041 };
    uint32_t const ces[9] = { 0x3688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_486)
{
    // 1579 0062;	
    // (ᕹ) CANADIAN SYLLABICS NUNAVIK HA	[3688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1579, 0x0062 };
    uint32_t const ces[9] = { 0x3688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_487)
{
    // 157A 0021;	
    // (ᕺ) CANADIAN SYLLABICS NUNAVIK HAA	[3689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157A, 0x0021 };
    uint32_t const ces[9] = { 0x3689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_488)
{
    // 157A 003F;	
    // (ᕺ) CANADIAN SYLLABICS NUNAVIK HAA	[3689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157A, 0x003F };
    uint32_t const ces[9] = { 0x3689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_489)
{
    // 157A 0061;	
    // (ᕺ) CANADIAN SYLLABICS NUNAVIK HAA	[3689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157A, 0x0061 };
    uint32_t const ces[9] = { 0x3689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_490)
{
    // 157A 0041;	
    // (ᕺ) CANADIAN SYLLABICS NUNAVIK HAA	[3689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157A, 0x0041 };
    uint32_t const ces[9] = { 0x3689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_491)
{
    // 157A 0062;	
    // (ᕺ) CANADIAN SYLLABICS NUNAVIK HAA	[3689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157A, 0x0062 };
    uint32_t const ces[9] = { 0x3689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_492)
{
    // 157B 0021;	
    // (ᕻ) CANADIAN SYLLABICS NUNAVIK H	[368A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157B, 0x0021 };
    uint32_t const ces[9] = { 0x368A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_493)
{
    // 157B 003F;	
    // (ᕻ) CANADIAN SYLLABICS NUNAVIK H	[368A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157B, 0x003F };
    uint32_t const ces[9] = { 0x368A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_494)
{
    // 157B 0061;	
    // (ᕻ) CANADIAN SYLLABICS NUNAVIK H	[368A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157B, 0x0061 };
    uint32_t const ces[9] = { 0x368A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_495)
{
    // 157B 0041;	
    // (ᕻ) CANADIAN SYLLABICS NUNAVIK H	[368A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157B, 0x0041 };
    uint32_t const ces[9] = { 0x368A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_496)
{
    // 157B 0062;	
    // (ᕻ) CANADIAN SYLLABICS NUNAVIK H	[368A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157B, 0x0062 };
    uint32_t const ces[9] = { 0x368A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_497)
{
    // 157D 0021;	
    // (ᕽ) CANADIAN SYLLABICS HK	[368B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157D, 0x0021 };
    uint32_t const ces[9] = { 0x368B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_498)
{
    // 157D 003F;	
    // (ᕽ) CANADIAN SYLLABICS HK	[368B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157D, 0x003F };
    uint32_t const ces[9] = { 0x368B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_221_499)
{
    // 157D 0061;	
    // (ᕽ) CANADIAN SYLLABICS HK	[368B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157D, 0x0061 };
    uint32_t const ces[9] = { 0x368B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

