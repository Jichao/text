// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_000_000)
{
    // 0338 0334;	
    // (̸) COMBINING LONG SOLIDUS OVERLAY	[| 002F 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0338, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_001)
{
    // 0336 0334;	
    // (̶) COMBINING LONG STROKE OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0336, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_002)
{
    // 0337 0334;	
    // (̷) COMBINING SHORT SOLIDUS OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0337, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_003)
{
    // 20D8 0334;	
    // (⃘) COMBINING RING OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20D8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_004)
{
    // 20D9 0334;	
    // (⃙) COMBINING CLOCKWISE RING OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20D9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_005)
{
    // 20DA 0334;	
    // (⃚) COMBINING ANTICLOCKWISE RING OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20DA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_006)
{
    // 20E5 0334;	
    // (⃥) COMBINING REVERSE SOLIDUS OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20E5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_007)
{
    // 20EA 0334;	
    // (⃪) COMBINING LEFTWARDS ARROW OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20EA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_008)
{
    // 20EB 0334;	
    // (⃫) COMBINING LONG DOUBLE SOLIDUS OVERLAY	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20EB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_009)
{
    // 1BC9E 0334;	
    // (𛲞) DUPLOYAN DOUBLE MARK	[| 0035 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0035, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_010)
{
    // 0335 0334;	
    // (̵) COMBINING SHORT STROKE OVERLAY	[| 0039 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0335, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0039, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_011)
{
    // 0334 0591;	
    // (֑) HEBREW ACCENT ETNAHTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0591 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_012)
{
    // 0591 0334;	
    // (֑) HEBREW ACCENT ETNAHTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0591, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_013)
{
    // 0334 0592;	
    // (֒) HEBREW ACCENT SEGOL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0592 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_014)
{
    // 0592 0334;	
    // (֒) HEBREW ACCENT SEGOL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0592, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_015)
{
    // 0334 0593;	
    // (֓) HEBREW ACCENT SHALSHELET	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0593 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_016)
{
    // 0593 0334;	
    // (֓) HEBREW ACCENT SHALSHELET	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0593, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_017)
{
    // 0334 0594;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0594 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_018)
{
    // 0594 0334;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0594, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_019)
{
    // 0334 0595;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0595 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_020)
{
    // 0595 0334;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0595, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_021)
{
    // 0334 0596;	
    // (֖) HEBREW ACCENT TIPEHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0596 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_022)
{
    // 0596 0334;	
    // (֖) HEBREW ACCENT TIPEHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0596, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_023)
{
    // 0334 0597;	
    // (֗) HEBREW ACCENT REVIA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0597 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_024)
{
    // 0597 0334;	
    // (֗) HEBREW ACCENT REVIA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0597, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_025)
{
    // 0334 0598;	
    // (֘) HEBREW ACCENT ZARQA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0598 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_026)
{
    // 0598 0334;	
    // (֘) HEBREW ACCENT ZARQA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0598, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_027)
{
    // 0334 0599;	
    // (֙) HEBREW ACCENT PASHTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0599 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_028)
{
    // 0599 0334;	
    // (֙) HEBREW ACCENT PASHTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0599, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_029)
{
    // 0334 059A;	
    // (֚) HEBREW ACCENT YETIV	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_030)
{
    // 059A 0334;	
    // (֚) HEBREW ACCENT YETIV	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_031)
{
    // 0334 059B;	
    // (֛) HEBREW ACCENT TEVIR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_032)
{
    // 059B 0334;	
    // (֛) HEBREW ACCENT TEVIR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_033)
{
    // 0334 059C;	
    // (֜) HEBREW ACCENT GERESH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059C };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_034)
{
    // 059C 0334;	
    // (֜) HEBREW ACCENT GERESH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059C, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_035)
{
    // 0334 059D;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059D };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_036)
{
    // 059D 0334;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059D, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_037)
{
    // 0334 059E;	
    // (֞) HEBREW ACCENT GERSHAYIM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059E };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_038)
{
    // 059E 0334;	
    // (֞) HEBREW ACCENT GERSHAYIM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059E, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_039)
{
    // 0334 059F;	
    // (֟) HEBREW ACCENT QARNEY PARA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x059F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_040)
{
    // 059F 0334;	
    // (֟) HEBREW ACCENT QARNEY PARA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x059F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_041)
{
    // 0334 05A0;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_042)
{
    // 05A0 0334;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_043)
{
    // 0334 05A1;	
    // (֡) HEBREW ACCENT PAZER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_044)
{
    // 05A1 0334;	
    // (֡) HEBREW ACCENT PAZER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_045)
{
    // 0334 05A2;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A2 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_046)
{
    // 05A2 0334;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_047)
{
    // 0334 05A3;	
    // (֣) HEBREW ACCENT MUNAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A3 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_048)
{
    // 05A3 0334;	
    // (֣) HEBREW ACCENT MUNAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_049)
{
    // 0334 05A4;	
    // (֤) HEBREW ACCENT MAHAPAKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_050)
{
    // 05A4 0334;	
    // (֤) HEBREW ACCENT MAHAPAKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_051)
{
    // 0334 05A5;	
    // (֥) HEBREW ACCENT MERKHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_052)
{
    // 05A5 0334;	
    // (֥) HEBREW ACCENT MERKHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_053)
{
    // 0334 05A6;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_054)
{
    // 05A6 0334;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_055)
{
    // 0334 05A7;	
    // (֧) HEBREW ACCENT DARGA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_056)
{
    // 05A7 0334;	
    // (֧) HEBREW ACCENT DARGA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_057)
{
    // 0334 05A8;	
    // (֨) HEBREW ACCENT QADMA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_058)
{
    // 05A8 0334;	
    // (֨) HEBREW ACCENT QADMA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_059)
{
    // 0334 05A9;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05A9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_060)
{
    // 05A9 0334;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05A9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_061)
{
    // 0334 05AA;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_062)
{
    // 05AA 0334;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_063)
{
    // 0334 05AB;	
    // (֫) HEBREW ACCENT OLE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_064)
{
    // 05AB 0334;	
    // (֫) HEBREW ACCENT OLE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_065)
{
    // 0334 05AC;	
    // (֬) HEBREW ACCENT ILUY	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_066)
{
    // 05AC 0334;	
    // (֬) HEBREW ACCENT ILUY	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_067)
{
    // 0334 05AD;	
    // (֭) HEBREW ACCENT DEHI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AD };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_068)
{
    // 05AD 0334;	
    // (֭) HEBREW ACCENT DEHI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AD, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_069)
{
    // 0334 05AE;	
    // (֮) HEBREW ACCENT ZINOR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AE };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_070)
{
    // 05AE 0334;	
    // (֮) HEBREW ACCENT ZINOR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AE, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_071)
{
    // 0334 05AF;	
    // (֯) HEBREW MARK MASORA CIRCLE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05AF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_072)
{
    // 05AF 0334;	
    // (֯) HEBREW MARK MASORA CIRCLE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05AF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_073)
{
    // 0334 05BD;	
    // (ֽ) HEBREW POINT METEG	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05BD };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_074)
{
    // 05BD 0334;	
    // (ֽ) HEBREW POINT METEG	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05BD, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_075)
{
    // 0334 05C4;	
    // (ׄ) HEBREW MARK UPPER DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05C4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_076)
{
    // 05C4 0334;	
    // (ׄ) HEBREW MARK UPPER DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05C4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_077)
{
    // 0334 05C5;	
    // (ׅ) HEBREW MARK LOWER DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05C5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_078)
{
    // 05C5 0334;	
    // (ׅ) HEBREW MARK LOWER DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x05C5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_079)
{
    // 0334 0610;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0610 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_080)
{
    // 0610 0334;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0610, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_081)
{
    // 0334 0611;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0611 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_082)
{
    // 0611 0334;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0611, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_083)
{
    // 0334 0612;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0612 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_084)
{
    // 0612 0334;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0612, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_085)
{
    // 0334 0613;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0613 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_086)
{
    // 0613 0334;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0613, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_087)
{
    // 0334 0614;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0614 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_088)
{
    // 0614 0334;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0614, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_089)
{
    // 0334 0615;	
    // (ؕ) ARABIC SMALL HIGH TAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0615 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_090)
{
    // 0615 0334;	
    // (ؕ) ARABIC SMALL HIGH TAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0615, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_091)
{
    // 0334 0616;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0616 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_092)
{
    // 0616 0334;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0616, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_093)
{
    // 0334 0617;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0617 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_094)
{
    // 0617 0334;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0617, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_095)
{
    // 0334 0618;	
    // (ؘ) ARABIC SMALL FATHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0618 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_096)
{
    // 0618 0334;	
    // (ؘ) ARABIC SMALL FATHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0618, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_097)
{
    // 0334 0619;	
    // (ؙ) ARABIC SMALL DAMMA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0619 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_098)
{
    // 0619 0334;	
    // (ؙ) ARABIC SMALL DAMMA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0619, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_099)
{
    // 0334 061A;	
    // (ؚ) ARABIC SMALL KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x061A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_100)
{
    // 061A 0334;	
    // (ؚ) ARABIC SMALL KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x061A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_101)
{
    // 0334 06D6;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06D6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_102)
{
    // 06D6 0334;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06D6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_103)
{
    // 0334 06D7;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06D7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_104)
{
    // 06D7 0334;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06D7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_105)
{
    // 0334 06D8;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06D8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_106)
{
    // 06D8 0334;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06D8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_107)
{
    // 0334 06D9;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06D9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_108)
{
    // 06D9 0334;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06D9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_109)
{
    // 0334 06DA;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06DA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_110)
{
    // 06DA 0334;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06DA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_111)
{
    // 0334 06DB;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06DB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_112)
{
    // 06DB 0334;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06DB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_113)
{
    // 0334 06DC;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06DC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_114)
{
    // 06DC 0334;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06DC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_115)
{
    // 0334 06DF;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06DF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_116)
{
    // 06DF 0334;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06DF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_117)
{
    // 0334 06E0;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_118)
{
    // 06E0 0334;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_119)
{
    // 0334 06E1;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_120)
{
    // 06E1 0334;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_121)
{
    // 0334 06E2;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E2 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_122)
{
    // 06E2 0334;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_123)
{
    // 0334 06E3;	
    // (ۣ) ARABIC SMALL LOW SEEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E3 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_124)
{
    // 06E3 0334;	
    // (ۣ) ARABIC SMALL LOW SEEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_125)
{
    // 0334 06E4;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_126)
{
    // 06E4 0334;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_127)
{
    // 0334 06E7;	
    // (ۧ) ARABIC SMALL HIGH YEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_128)
{
    // 06E7 0334;	
    // (ۧ) ARABIC SMALL HIGH YEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_129)
{
    // 0334 06E8;	
    // (ۨ) ARABIC SMALL HIGH NOON	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06E8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_130)
{
    // 06E8 0334;	
    // (ۨ) ARABIC SMALL HIGH NOON	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06E8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_131)
{
    // 0334 06EA;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06EA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_132)
{
    // 06EA 0334;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06EA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_133)
{
    // 0334 06EB;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06EB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_134)
{
    // 06EB 0334;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06EB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_135)
{
    // 0334 06EC;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06EC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_136)
{
    // 06EC 0334;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06EC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_137)
{
    // 0334 06ED;	
    // (ۭ) ARABIC SMALL LOW MEEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x06ED };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_138)
{
    // 06ED 0334;	
    // (ۭ) ARABIC SMALL LOW MEEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x06ED, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_139)
{
    // 0334 0740;	
    // (݀) SYRIAC FEMININE DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0740 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_140)
{
    // 0740 0334;	
    // (݀) SYRIAC FEMININE DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0740, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_141)
{
    // 0334 0743;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0743 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_142)
{
    // 0743 0334;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0743, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_143)
{
    // 0334 0744;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0744 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_144)
{
    // 0744 0334;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0744, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_145)
{
    // 0334 0747;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0747 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_146)
{
    // 0747 0334;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0747, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_147)
{
    // 0334 0748;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0748 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_148)
{
    // 0748 0334;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0748, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_149)
{
    // 0334 0749;	
    // (݉) SYRIAC MUSIC	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0749 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_150)
{
    // 0749 0334;	
    // (݉) SYRIAC MUSIC	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0749, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_151)
{
    // 0334 074A;	
    // (݊) SYRIAC BARREKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x074A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_152)
{
    // 074A 0334;	
    // (݊) SYRIAC BARREKH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x074A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_153)
{
    // 0334 08D4;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_154)
{
    // 08D4 0334;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_155)
{
    // 0334 08D5;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_156)
{
    // 08D5 0334;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_157)
{
    // 0334 08D6;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_158)
{
    // 08D6 0334;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_159)
{
    // 0334 08D7;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_160)
{
    // 08D7 0334;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_161)
{
    // 0334 08D8;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_162)
{
    // 08D8 0334;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_163)
{
    // 0334 08D9;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08D9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_164)
{
    // 08D9 0334;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08D9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_165)
{
    // 0334 08DA;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_166)
{
    // 08DA 0334;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_167)
{
    // 0334 08DB;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_168)
{
    // 08DB 0334;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_169)
{
    // 0334 08DC;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_170)
{
    // 08DC 0334;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_171)
{
    // 0334 08DD;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DD };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_172)
{
    // 08DD 0334;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DD, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_173)
{
    // 0334 08DE;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DE };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_174)
{
    // 08DE 0334;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DE, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_175)
{
    // 0334 08DF;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08DF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_176)
{
    // 08DF 0334;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08DF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_177)
{
    // 0334 08E0;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_178)
{
    // 08E0 0334;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08E0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_179)
{
    // 0334 08E1;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_180)
{
    // 08E1 0334;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08E1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_181)
{
    // 0334 08EA;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08EA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_182)
{
    // 08EA 0334;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08EA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_183)
{
    // 0334 08EB;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08EB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_184)
{
    // 08EB 0334;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08EB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_185)
{
    // 0334 08EC;	
    // (࣬) ARABIC TONE LOOP ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08EC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_186)
{
    // 08EC 0334;	
    // (࣬) ARABIC TONE LOOP ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08EC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_187)
{
    // 0334 08ED;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08ED };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_188)
{
    // 08ED 0334;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08ED, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_189)
{
    // 0334 08EE;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08EE };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_190)
{
    // 08EE 0334;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08EE, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_191)
{
    // 0334 08EF;	
    // (࣯) ARABIC TONE LOOP BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08EF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_192)
{
    // 08EF 0334;	
    // (࣯) ARABIC TONE LOOP BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08EF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_193)
{
    // 0334 08F3;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F3 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_194)
{
    // 08F3 0334;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x08F3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_195)
{
    // 0334 0951;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0951 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_196)
{
    // 0951 0334;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0951, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_197)
{
    // 0334 0952;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0952 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_198)
{
    // 0952 0334;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0952, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_199)
{
    // 0334 0F18;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F18 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_200)
{
    // 0F18 0334;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F18, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_201)
{
    // 0334 0F19;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F19 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_202)
{
    // 0F19 0334;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F19, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_203)
{
    // 0334 0F35;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F35 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_204)
{
    // 0F35 0334;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F35, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_205)
{
    // 0334 0F37;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F37 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_206)
{
    // 0F37 0334;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F37, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_207)
{
    // 0334 0F82;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F82 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_208)
{
    // 0F82 0334;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F82, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_209)
{
    // 0334 0F83;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F83 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_210)
{
    // 0F83 0334;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F83, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_211)
{
    // 0334 0F86;	
    // (྆) TIBETAN SIGN LCI RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F86 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_212)
{
    // 0F86 0334;	
    // (྆) TIBETAN SIGN LCI RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F86, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_213)
{
    // 0334 0F87;	
    // (྇) TIBETAN SIGN YANG RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F87 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_214)
{
    // 0F87 0334;	
    // (྇) TIBETAN SIGN YANG RTAGS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0F87, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_215)
{
    // 0334 0FC6;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0FC6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_216)
{
    // 0FC6 0334;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0FC6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_217)
{
    // 0334 1A7F;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A7F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_218)
{
    // 1A7F 0334;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1A7F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_219)
{
    // 0334 1B6B;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B6B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_220)
{
    // 1B6B 0334;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B6B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_221)
{
    // 0334 1B6C;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B6C };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_222)
{
    // 1B6C 0334;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B6C, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_223)
{
    // 0334 1B6D;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B6D };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_224)
{
    // 1B6D 0334;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B6D, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_225)
{
    // 0334 1B6E;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B6E };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_226)
{
    // 1B6E 0334;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B6E, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_227)
{
    // 0334 1B6F;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B6F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_228)
{
    // 1B6F 0334;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B6F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_229)
{
    // 0334 1B70;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B70 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_230)
{
    // 1B70 0334;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B70, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_231)
{
    // 0334 1B71;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B71 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_232)
{
    // 1B71 0334;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B71, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_233)
{
    // 0334 1B72;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B72 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_234)
{
    // 1B72 0334;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B72, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_235)
{
    // 0334 1B73;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B73 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_236)
{
    // 1B73 0334;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1B73, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_237)
{
    // 0334 1CD0;	
    // (᳐) VEDIC TONE KARSHANA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_238)
{
    // 1CD0 0334;	
    // (᳐) VEDIC TONE KARSHANA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_239)
{
    // 0334 1CD1;	
    // (᳑) VEDIC TONE SHARA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_240)
{
    // 1CD1 0334;	
    // (᳑) VEDIC TONE SHARA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_241)
{
    // 0334 1CD2;	
    // (᳒) VEDIC TONE PRENKHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD2 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_242)
{
    // 1CD2 0334;	
    // (᳒) VEDIC TONE PRENKHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_243)
{
    // 0334 1CD5;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_244)
{
    // 1CD5 0334;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_245)
{
    // 0334 1CD6;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_246)
{
    // 1CD6 0334;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_247)
{
    // 0334 1CD7;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_248)
{
    // 1CD7 0334;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_249)
{
    // 0334 1CD8;	
    // (᳘) VEDIC TONE CANDRA BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_250)
{
    // 1CD8 0334;	
    // (᳘) VEDIC TONE CANDRA BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_251)
{
    // 0334 1CD9;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CD9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_252)
{
    // 1CD9 0334;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_253)
{
    // 0334 1CDA;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_254)
{
    // 1CDA 0334;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_255)
{
    // 0334 1CDB;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_256)
{
    // 1CDB 0334;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_257)
{
    // 0334 1CDC;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_258)
{
    // 1CDC 0334;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_259)
{
    // 0334 1CDD;	
    // (᳝) VEDIC TONE DOT BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDD };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_260)
{
    // 1CDD 0334;	
    // (᳝) VEDIC TONE DOT BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDD, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_261)
{
    // 0334 1CDE;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDE };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_262)
{
    // 1CDE 0334;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDE, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_263)
{
    // 0334 1CDF;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CDF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_264)
{
    // 1CDF 0334;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CDF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_265)
{
    // 0334 1CE0;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CE0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_266)
{
    // 1CE0 0334;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_267)
{
    // 0334 1CF4;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CF4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_268)
{
    // 1CF4 0334;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CF4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_269)
{
    // 0334 1CF8;	
    // (᳸) VEDIC TONE RING ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CF8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_270)
{
    // 1CF8 0334;	
    // (᳸) VEDIC TONE RING ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CF8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_271)
{
    // 0334 1CF9;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CF9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_272)
{
    // 1CF9 0334;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CF9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_273)
{
    // 0334 2D7F;	
    // (⵿) TIFINAGH CONSONANT JOINER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x2D7F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_274)
{
    // 2D7F 0334;	
    // (⵿) TIFINAGH CONSONANT JOINER	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x2D7F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_275)
{
    // 0334 A8E0;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_276)
{
    // A8E0 0334;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_277)
{
    // 0334 A8E1;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_278)
{
    // A8E1 0334;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_279)
{
    // 0334 A8E2;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E2 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_280)
{
    // A8E2 0334;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_281)
{
    // 0334 A8E3;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E3 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_282)
{
    // A8E3 0334;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_283)
{
    // 0334 A8E4;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_284)
{
    // A8E4 0334;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_285)
{
    // 0334 A8E5;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_286)
{
    // A8E5 0334;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_287)
{
    // 0334 A8E6;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_288)
{
    // A8E6 0334;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_289)
{
    // 0334 A8E7;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E7 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_290)
{
    // A8E7 0334;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_291)
{
    // 0334 A8E8;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E8 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_292)
{
    // A8E8 0334;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_293)
{
    // 0334 A8E9;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8E9 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_294)
{
    // A8E9 0334;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8E9, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_295)
{
    // 0334 A8EA;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8EA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_296)
{
    // A8EA 0334;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8EA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_297)
{
    // 0334 A8EB;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8EB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_298)
{
    // A8EB 0334;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8EB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_299)
{
    // 0334 A8EC;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8EC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_300)
{
    // A8EC 0334;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8EC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_301)
{
    // 0334 A8ED;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8ED };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_302)
{
    // A8ED 0334;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8ED, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_303)
{
    // 0334 A8EE;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8EE };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_304)
{
    // A8EE 0334;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8EE, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_305)
{
    // 0334 A8EF;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8EF };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_306)
{
    // A8EF 0334;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8EF, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_307)
{
    // 0334 A8F0;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8F0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_308)
{
    // A8F0 0334;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8F0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_309)
{
    // 0334 A8F1;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA8F1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_310)
{
    // A8F1 0334;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xA8F1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_311)
{
    // 0334 FE21;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE21 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_312)
{
    // FE21 0334;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE21, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_313)
{
    // 0334 FE23;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE23 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_314)
{
    // FE23 0334;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE23, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_315)
{
    // 0334 FE24;	
    // (︤) COMBINING MACRON LEFT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE24 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_316)
{
    // FE24 0334;	
    // (︤) COMBINING MACRON LEFT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE24, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_317)
{
    // 0334 FE25;	
    // (︥) COMBINING MACRON RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE25 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_318)
{
    // FE25 0334;	
    // (︥) COMBINING MACRON RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE25, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_319)
{
    // 0334 FE26;	
    // (︦) COMBINING CONJOINING MACRON	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE26 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_320)
{
    // FE26 0334;	
    // (︦) COMBINING CONJOINING MACRON	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE26, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_321)
{
    // 0334 FE28;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE28 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_322)
{
    // FE28 0334;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE28, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_323)
{
    // 0334 FE2A;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_324)
{
    // FE2A 0334;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE2A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_325)
{
    // 0334 FE2B;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_326)
{
    // FE2B 0334;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE2B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_327)
{
    // 0334 FE2C;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2C };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_328)
{
    // FE2C 0334;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE2C, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_329)
{
    // 0334 FE2D;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2D };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_330)
{
    // FE2D 0334;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE2D, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_331)
{
    // 0334 FE2F;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_332)
{
    // FE2F 0334;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[| 004A | 0002 |]

    uint32_t cps[2] = { 0xFE2F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_333)
{
    // 0334 102E0;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x102E0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_334)
{
    // 102E0 0334;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x102E0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_335)
{
    // 0334 11366;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11366 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_336)
{
    // 11366 0334;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11366, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_337)
{
    // 0334 11367;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11367 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_338)
{
    // 11367 0334;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11367, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_339)
{
    // 0334 11368;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11368 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_340)
{
    // 11368 0334;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11368, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_341)
{
    // 0334 11369;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11369 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_342)
{
    // 11369 0334;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11369, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_343)
{
    // 0334 1136A;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1136A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_344)
{
    // 1136A 0334;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1136A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_345)
{
    // 0334 1136B;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1136B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_346)
{
    // 1136B 0334;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1136B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_347)
{
    // 0334 1136C;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1136C };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_348)
{
    // 1136C 0334;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1136C, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_349)
{
    // 0334 11370;	
    // (𑍰) COMBINING GRANTHA LETTER A	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11370 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_350)
{
    // 11370 0334;	
    // (𑍰) COMBINING GRANTHA LETTER A	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11370, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_351)
{
    // 0334 11371;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11371 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_352)
{
    // 11371 0334;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11371, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_353)
{
    // 0334 11372;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11372 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_354)
{
    // 11372 0334;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11372, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_355)
{
    // 0334 11373;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11373 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_356)
{
    // 11373 0334;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11373, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_357)
{
    // 0334 11374;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11374 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_358)
{
    // 11374 0334;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x11374, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_359)
{
    // 0334 1D165;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D165 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_360)
{
    // 1D165 0334;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D165, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_361)
{
    // 0334 1D166;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D166 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_362)
{
    // 1D166 0334;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D166, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_363)
{
    // 0334 1D16D;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D16D };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_364)
{
    // 1D16D 0334;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D16D, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_365)
{
    // 0334 1D16E;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D16E };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_366)
{
    // 1D16E 0334;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D16E, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_367)
{
    // 0334 1D16F;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D16F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_368)
{
    // 1D16F 0334;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D16F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_369)
{
    // 0334 1D170;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D170 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_370)
{
    // 1D170 0334;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D170, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_371)
{
    // 0334 1D171;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D171 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_372)
{
    // 1D171 0334;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D171, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_373)
{
    // 0334 1D172;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D172 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_374)
{
    // 1D172 0334;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D172, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_375)
{
    // 0334 1D17B;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D17B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_376)
{
    // 1D17B 0334;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D17B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_377)
{
    // 0334 1D17C;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D17C };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_378)
{
    // 1D17C 0334;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D17C, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_379)
{
    // 0334 1D17D;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D17D };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_380)
{
    // 1D17D 0334;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D17D, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_381)
{
    // 0334 1D17E;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D17E };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_382)
{
    // 1D17E 0334;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D17E, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_383)
{
    // 0334 1D17F;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D17F };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_384)
{
    // 1D17F 0334;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D17F, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_385)
{
    // 0334 1D180;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D180 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_386)
{
    // 1D180 0334;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D180, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_387)
{
    // 0334 1D181;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D181 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_388)
{
    // 1D181 0334;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D181, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_389)
{
    // 0334 1D182;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D182 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_390)
{
    // 1D182 0334;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D182, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_391)
{
    // 0334 1D185;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D185 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_392)
{
    // 1D185 0334;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D185, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_393)
{
    // 0334 1D186;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D186 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_394)
{
    // 1D186 0334;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D186, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_395)
{
    // 0334 1D187;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D187 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_396)
{
    // 1D187 0334;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D187, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_397)
{
    // 0334 1D188;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D188 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_398)
{
    // 1D188 0334;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D188, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_399)
{
    // 0334 1D189;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D189 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_400)
{
    // 1D189 0334;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D189, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_401)
{
    // 0334 1D18A;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D18A };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_402)
{
    // 1D18A 0334;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D18A, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_403)
{
    // 0334 1D18B;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D18B };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_404)
{
    // 1D18B 0334;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D18B, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_405)
{
    // 0334 1D1AA;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D1AA };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_406)
{
    // 1D1AA 0334;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D1AA, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_407)
{
    // 0334 1D1AB;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D1AB };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_408)
{
    // 1D1AB 0334;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D1AB, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_409)
{
    // 0334 1D1AC;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D1AC };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_410)
{
    // 1D1AC 0334;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D1AC, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_411)
{
    // 0334 1D1AD;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D1AD };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_412)
{
    // 1D1AD 0334;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D1AD, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_413)
{
    // 0334 1D242;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D242 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_414)
{
    // 1D242 0334;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D242, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_415)
{
    // 0334 1D243;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D243 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_416)
{
    // 1D243 0334;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D243, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_417)
{
    // 0334 1D244;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1D244 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_418)
{
    // 1D244 0334;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D244, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_419)
{
    // 0334 1E8D0;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D0 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_420)
{
    // 1E8D0 0334;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D0, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_421)
{
    // 0334 1E8D1;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D1 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_422)
{
    // 1E8D1 0334;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D1, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_423)
{
    // 0334 1E8D2;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D2 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_424)
{
    // 1E8D2 0334;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_425)
{
    // 0334 1E8D3;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D3 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_426)
{
    // 1E8D3 0334;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_427)
{
    // 0334 1E8D4;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D4 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_428)
{
    // 1E8D4 0334;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_429)
{
    // 0334 1E8D5;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D5 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_430)
{
    // 1E8D5 0334;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_431)
{
    // 0334 1E8D6;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E8D6 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_432)
{
    // 1E8D6 0334;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1E8D6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_433)
{
    // 1CD4 0334;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CD4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_434)
{
    // 1CE2 0334;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE2, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_435)
{
    // 1CE3 0334;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE3, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_436)
{
    // 1CE4 0334;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE4, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_437)
{
    // 1CE5 0334;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE5, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_438)
{
    // 1CE6 0334;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE6, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_439)
{
    // 1CE7 0334;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE7, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_440)
{
    // 1CE8 0334;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1CE8, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_441)
{
    // 1D167 0334;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D167, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_442)
{
    // 1D168 0334;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D168, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_443)
{
    // 1D169 0334;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[| 004A | 0002 |]

    uint32_t cps[2] = { 0x1D169, 0x0334 };
    uint32_t const ces[5] = { 0x0000, 0x004A, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_444)
{
    // 0332 0334;	
    // (̲) COMBINING LOW LINE	[| 004A 0021 | 0002 0002 |]

    uint32_t cps[2] = { 0x0332, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0021, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_445)
{
    // 0334 0332;	
    // (̲) COMBINING LOW LINE	[| 004A 0021 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0332 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0021, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_446)
{
    // 0313 0334;	
    // (̓) COMBINING COMMA ABOVE	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0313, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_447)
{
    // 0334 0313;	
    // (̓) COMBINING COMMA ABOVE	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0313 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_448)
{
    // 0334 0343;	
    // (̓) COMBINING GREEK KORONIS	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0343 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_449)
{
    // 0343 0334;	
    // (̓) COMBINING GREEK KORONIS	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0343, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_450)
{
    // 0334 0486;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0486 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_451)
{
    // 0486 0334;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0486, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_452)
{
    // 0334 2CF1;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x2CF1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_453)
{
    // 2CF1 0334;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[| 004A 0022 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_454)
{
    // 0314 0334;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x0314, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_455)
{
    // 0334 0314;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0314 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_456)
{
    // 0334 0485;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0485 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_457)
{
    // 0485 0334;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x0485, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_458)
{
    // 0334 2CF0;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x2CF0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_459)
{
    // 2CF0 0334;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[| 004A 0023 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_460)
{
    // 0301 0334;	
    // (́) COMBINING ACUTE ACCENT	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0301, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_461)
{
    // 0334 0301;	
    // (́) COMBINING ACUTE ACCENT	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0301 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_462)
{
    // 0334 0341;	
    // (́) COMBINING ACUTE TONE MARK	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0341 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_463)
{
    // 0341 0334;	
    // (́) COMBINING ACUTE TONE MARK	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0341, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_464)
{
    // 0334 0954;	
    // (॔) DEVANAGARI ACUTE ACCENT	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0954 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_465)
{
    // 0954 0334;	
    // (॔) DEVANAGARI ACUTE ACCENT	[| 004A 0024 | 0002 0002 |]

    uint32_t cps[2] = { 0x0954, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_466)
{
    // 0300 0334;	
    // (̀) COMBINING GRAVE ACCENT	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0300, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_467)
{
    // 0334 0300;	
    // (̀) COMBINING GRAVE ACCENT	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0300 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_468)
{
    // 0334 0340;	
    // (̀) COMBINING GRAVE TONE MARK	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0340 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_469)
{
    // 0340 0334;	
    // (̀) COMBINING GRAVE TONE MARK	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0340, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_470)
{
    // 0334 0953;	
    // (॓) DEVANAGARI GRAVE ACCENT	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0953 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_471)
{
    // 0953 0334;	
    // (॓) DEVANAGARI GRAVE ACCENT	[| 004A 0025 | 0002 0002 |]

    uint32_t cps[2] = { 0x0953, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_472)
{
    // 0306 0334;	
    // (̆) COMBINING BREVE	[| 004A 0026 | 0002 0002 |]

    uint32_t cps[2] = { 0x0306, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_473)
{
    // 0334 0306;	
    // (̆) COMBINING BREVE	[| 004A 0026 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0306 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_474)
{
    // 0302 0334;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[| 004A 0027 | 0002 0002 |]

    uint32_t cps[2] = { 0x0302, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_475)
{
    // 0334 0302;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[| 004A 0027 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0302 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_476)
{
    // 030C 0334;	
    // (̌) COMBINING CARON	[| 004A 0028 | 0002 0002 |]

    uint32_t cps[2] = { 0x030C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_477)
{
    // 0334 030C;	
    // (̌) COMBINING CARON	[| 004A 0028 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_478)
{
    // 030A 0334;	
    // (̊) COMBINING RING ABOVE	[| 004A 0029 | 0002 0002 |]

    uint32_t cps[2] = { 0x030A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_479)
{
    // 0334 030A;	
    // (̊) COMBINING RING ABOVE	[| 004A 0029 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_480)
{
    // 0334 0342;	
    // (͂) COMBINING GREEK PERISPOMENI	[| 004A 002A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0342 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_481)
{
    // 0342 0334;	
    // (͂) COMBINING GREEK PERISPOMENI	[| 004A 002A | 0002 0002 |]

    uint32_t cps[2] = { 0x0342, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_482)
{
    // 0308 0334;	
    // (̈) COMBINING DIAERESIS	[| 004A 002B | 0002 0002 |]

    uint32_t cps[2] = { 0x0308, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_483)
{
    // 0334 0308;	
    // (̈) COMBINING DIAERESIS	[| 004A 002B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0308 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_484)
{
    // 0308 0301 0334;	
    // (̈́) COMBINING DIAERESIS, COMBINING ACUTE ACCENT	[| 004A 002B 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0308, 0x0301, 0x0334 };
    uint32_t const ces[9] = { 0x0000, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_485)
{
    // 0308 0341 0334;	
    // (̈́) COMBINING DIAERESIS, COMBINING ACUTE TONE MARK	[| 004A 002B 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0308, 0x0341, 0x0334 };
    uint32_t const ces[9] = { 0x0000, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_486)
{
    // 0334 0344;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[| 004A 002B 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0344 };
    uint32_t const ces[9] = { 0x0000, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_487)
{
    // 0344 0334;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[| 004A 002B 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0344, 0x0334 };
    uint32_t const ces[9] = { 0x0000, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_488)
{
    // 030B 0334;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[| 004A 002C | 0002 0002 |]

    uint32_t cps[2] = { 0x030B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_489)
{
    // 0334 030B;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[| 004A 002C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_490)
{
    // 0303 0334;	
    // (̃) COMBINING TILDE	[| 004A 002D | 0002 0002 |]

    uint32_t cps[2] = { 0x0303, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_491)
{
    // 0334 0303;	
    // (̃) COMBINING TILDE	[| 004A 002D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0303 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_492)
{
    // 0307 0334;	
    // (̇) COMBINING DOT ABOVE	[| 004A 002E | 0002 0002 |]

    uint32_t cps[2] = { 0x0307, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_493)
{
    // 0334 0307;	
    // (̇) COMBINING DOT ABOVE	[| 004A 002E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0307 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_494)
{
    // 0327 0334;	
    // (̧) COMBINING CEDILLA	[| 004A 0030 | 0002 0002 |]

    uint32_t cps[2] = { 0x0327, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_495)
{
    // 0334 0327;	
    // (̧) COMBINING CEDILLA	[| 004A 0030 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0327 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_496)
{
    // 0328 0334;	
    // (̨) COMBINING OGONEK	[| 004A 0031 | 0002 0002 |]

    uint32_t cps[2] = { 0x0328, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_497)
{
    // 0334 0328;	
    // (̨) COMBINING OGONEK	[| 004A 0031 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0328 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_498)
{
    // 0304 0334;	
    // (̄) COMBINING MACRON	[| 004A 0032 | 0002 0002 |]

    uint32_t cps[2] = { 0x0304, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_000_499)
{
    // 0334 0304;	
    // (̄) COMBINING MACRON	[| 004A 0032 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0304 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

