// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_178_000)
{
    // 1131D 003F;	
    // (ëåù) GRANTHA LETTER JHA	[2B7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131D, 0x003F };
    uint32_t const ces[9] = { 0x2B7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_001)
{
    // 1131D 0061;	
    // (ëåù) GRANTHA LETTER JHA	[2B7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131D, 0x0061 };
    uint32_t const ces[9] = { 0x2B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_002)
{
    // 1131D 0041;	
    // (ëåù) GRANTHA LETTER JHA	[2B7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131D, 0x0041 };
    uint32_t const ces[9] = { 0x2B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_003)
{
    // 1131D 0062;	
    // (ëåù) GRANTHA LETTER JHA	[2B7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131D, 0x0062 };
    uint32_t const ces[9] = { 0x2B7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_004)
{
    // 1131E 0021;	
    // (ëåû) GRANTHA LETTER NYA	[2B7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131E, 0x0021 };
    uint32_t const ces[9] = { 0x2B7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_005)
{
    // 1131E 003F;	
    // (ëåû) GRANTHA LETTER NYA	[2B7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131E, 0x003F };
    uint32_t const ces[9] = { 0x2B7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_006)
{
    // 1131E 0061;	
    // (ëåû) GRANTHA LETTER NYA	[2B7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131E, 0x0061 };
    uint32_t const ces[9] = { 0x2B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_007)
{
    // 1131E 0041;	
    // (ëåû) GRANTHA LETTER NYA	[2B7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131E, 0x0041 };
    uint32_t const ces[9] = { 0x2B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_008)
{
    // 1131E 0062;	
    // (ëåû) GRANTHA LETTER NYA	[2B7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131E, 0x0062 };
    uint32_t const ces[9] = { 0x2B7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_009)
{
    // 1131F 0021;	
    // (ëåü) GRANTHA LETTER TTA	[2B7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131F, 0x0021 };
    uint32_t const ces[9] = { 0x2B7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_010)
{
    // 1131F 003F;	
    // (ëåü) GRANTHA LETTER TTA	[2B7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131F, 0x003F };
    uint32_t const ces[9] = { 0x2B7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_011)
{
    // 1131F 0061;	
    // (ëåü) GRANTHA LETTER TTA	[2B7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131F, 0x0061 };
    uint32_t const ces[9] = { 0x2B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_012)
{
    // 1131F 0041;	
    // (ëåü) GRANTHA LETTER TTA	[2B7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131F, 0x0041 };
    uint32_t const ces[9] = { 0x2B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_013)
{
    // 1131F 0062;	
    // (ëåü) GRANTHA LETTER TTA	[2B7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131F, 0x0062 };
    uint32_t const ces[9] = { 0x2B7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_014)
{
    // 11320 0021;	
    // (ëå†) GRANTHA LETTER TTHA	[2B80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11320, 0x0021 };
    uint32_t const ces[9] = { 0x2B80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_015)
{
    // 11320 003F;	
    // (ëå†) GRANTHA LETTER TTHA	[2B80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11320, 0x003F };
    uint32_t const ces[9] = { 0x2B80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_016)
{
    // 11320 0061;	
    // (ëå†) GRANTHA LETTER TTHA	[2B80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11320, 0x0061 };
    uint32_t const ces[9] = { 0x2B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_017)
{
    // 11320 0041;	
    // (ëå†) GRANTHA LETTER TTHA	[2B80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11320, 0x0041 };
    uint32_t const ces[9] = { 0x2B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_018)
{
    // 11320 0062;	
    // (ëå†) GRANTHA LETTER TTHA	[2B80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11320, 0x0062 };
    uint32_t const ces[9] = { 0x2B80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_019)
{
    // 11321 0021;	
    // (ëå°) GRANTHA LETTER DDA	[2B81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11321, 0x0021 };
    uint32_t const ces[9] = { 0x2B81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_020)
{
    // 11321 003F;	
    // (ëå°) GRANTHA LETTER DDA	[2B81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11321, 0x003F };
    uint32_t const ces[9] = { 0x2B81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_021)
{
    // 11321 0061;	
    // (ëå°) GRANTHA LETTER DDA	[2B81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11321, 0x0061 };
    uint32_t const ces[9] = { 0x2B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_022)
{
    // 11321 0041;	
    // (ëå°) GRANTHA LETTER DDA	[2B81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11321, 0x0041 };
    uint32_t const ces[9] = { 0x2B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_023)
{
    // 11321 0062;	
    // (ëå°) GRANTHA LETTER DDA	[2B81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11321, 0x0062 };
    uint32_t const ces[9] = { 0x2B81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_024)
{
    // 11322 0021;	
    // (ëå¢) GRANTHA LETTER DDHA	[2B82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11322, 0x0021 };
    uint32_t const ces[9] = { 0x2B82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_025)
{
    // 11322 003F;	
    // (ëå¢) GRANTHA LETTER DDHA	[2B82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11322, 0x003F };
    uint32_t const ces[9] = { 0x2B82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_026)
{
    // 11322 0061;	
    // (ëå¢) GRANTHA LETTER DDHA	[2B82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11322, 0x0061 };
    uint32_t const ces[9] = { 0x2B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_027)
{
    // 11322 0041;	
    // (ëå¢) GRANTHA LETTER DDHA	[2B82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11322, 0x0041 };
    uint32_t const ces[9] = { 0x2B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_028)
{
    // 11322 0062;	
    // (ëå¢) GRANTHA LETTER DDHA	[2B82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11322, 0x0062 };
    uint32_t const ces[9] = { 0x2B82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_029)
{
    // 11323 0021;	
    // (ëå£) GRANTHA LETTER NNA	[2B83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11323, 0x0021 };
    uint32_t const ces[9] = { 0x2B83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_030)
{
    // 11323 003F;	
    // (ëå£) GRANTHA LETTER NNA	[2B83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11323, 0x003F };
    uint32_t const ces[9] = { 0x2B83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_031)
{
    // 11323 0061;	
    // (ëå£) GRANTHA LETTER NNA	[2B83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11323, 0x0061 };
    uint32_t const ces[9] = { 0x2B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_032)
{
    // 11323 0041;	
    // (ëå£) GRANTHA LETTER NNA	[2B83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11323, 0x0041 };
    uint32_t const ces[9] = { 0x2B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_033)
{
    // 11323 0062;	
    // (ëå£) GRANTHA LETTER NNA	[2B83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11323, 0x0062 };
    uint32_t const ces[9] = { 0x2B83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_034)
{
    // 11324 0021;	
    // (ëå§) GRANTHA LETTER TA	[2B84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11324, 0x0021 };
    uint32_t const ces[9] = { 0x2B84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_035)
{
    // 11324 003F;	
    // (ëå§) GRANTHA LETTER TA	[2B84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11324, 0x003F };
    uint32_t const ces[9] = { 0x2B84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_036)
{
    // 11324 0061;	
    // (ëå§) GRANTHA LETTER TA	[2B84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11324, 0x0061 };
    uint32_t const ces[9] = { 0x2B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_037)
{
    // 11324 0041;	
    // (ëå§) GRANTHA LETTER TA	[2B84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11324, 0x0041 };
    uint32_t const ces[9] = { 0x2B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_038)
{
    // 11324 0062;	
    // (ëå§) GRANTHA LETTER TA	[2B84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11324, 0x0062 };
    uint32_t const ces[9] = { 0x2B84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_039)
{
    // 11325 0021;	
    // (ëå•) GRANTHA LETTER THA	[2B85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11325, 0x0021 };
    uint32_t const ces[9] = { 0x2B85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_040)
{
    // 11325 003F;	
    // (ëå•) GRANTHA LETTER THA	[2B85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11325, 0x003F };
    uint32_t const ces[9] = { 0x2B85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_041)
{
    // 11325 0061;	
    // (ëå•) GRANTHA LETTER THA	[2B85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11325, 0x0061 };
    uint32_t const ces[9] = { 0x2B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_042)
{
    // 11325 0041;	
    // (ëå•) GRANTHA LETTER THA	[2B85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11325, 0x0041 };
    uint32_t const ces[9] = { 0x2B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_043)
{
    // 11325 0062;	
    // (ëå•) GRANTHA LETTER THA	[2B85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11325, 0x0062 };
    uint32_t const ces[9] = { 0x2B85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_044)
{
    // 11326 0021;	
    // (ëå¶) GRANTHA LETTER DA	[2B86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11326, 0x0021 };
    uint32_t const ces[9] = { 0x2B86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_045)
{
    // 11326 003F;	
    // (ëå¶) GRANTHA LETTER DA	[2B86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11326, 0x003F };
    uint32_t const ces[9] = { 0x2B86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_046)
{
    // 11326 0061;	
    // (ëå¶) GRANTHA LETTER DA	[2B86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11326, 0x0061 };
    uint32_t const ces[9] = { 0x2B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_047)
{
    // 11326 0041;	
    // (ëå¶) GRANTHA LETTER DA	[2B86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11326, 0x0041 };
    uint32_t const ces[9] = { 0x2B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_048)
{
    // 11326 0062;	
    // (ëå¶) GRANTHA LETTER DA	[2B86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11326, 0x0062 };
    uint32_t const ces[9] = { 0x2B86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_049)
{
    // 11327 0021;	
    // (ëåß) GRANTHA LETTER DHA	[2B87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11327, 0x0021 };
    uint32_t const ces[9] = { 0x2B87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_050)
{
    // 11327 003F;	
    // (ëåß) GRANTHA LETTER DHA	[2B87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11327, 0x003F };
    uint32_t const ces[9] = { 0x2B87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_051)
{
    // 11327 0061;	
    // (ëåß) GRANTHA LETTER DHA	[2B87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11327, 0x0061 };
    uint32_t const ces[9] = { 0x2B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_052)
{
    // 11327 0041;	
    // (ëåß) GRANTHA LETTER DHA	[2B87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11327, 0x0041 };
    uint32_t const ces[9] = { 0x2B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_053)
{
    // 11327 0062;	
    // (ëåß) GRANTHA LETTER DHA	[2B87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11327, 0x0062 };
    uint32_t const ces[9] = { 0x2B87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_054)
{
    // 11328 0021;	
    // (ëå®) GRANTHA LETTER NA	[2B88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11328, 0x0021 };
    uint32_t const ces[9] = { 0x2B88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_055)
{
    // 11328 003F;	
    // (ëå®) GRANTHA LETTER NA	[2B88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11328, 0x003F };
    uint32_t const ces[9] = { 0x2B88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_056)
{
    // 11328 0061;	
    // (ëå®) GRANTHA LETTER NA	[2B88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11328, 0x0061 };
    uint32_t const ces[9] = { 0x2B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_057)
{
    // 11328 0041;	
    // (ëå®) GRANTHA LETTER NA	[2B88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11328, 0x0041 };
    uint32_t const ces[9] = { 0x2B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_058)
{
    // 11328 0062;	
    // (ëå®) GRANTHA LETTER NA	[2B88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11328, 0x0062 };
    uint32_t const ces[9] = { 0x2B88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_059)
{
    // 1132A 0021;	
    // (ëå™) GRANTHA LETTER PA	[2B89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132A, 0x0021 };
    uint32_t const ces[9] = { 0x2B89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_060)
{
    // 1132A 003F;	
    // (ëå™) GRANTHA LETTER PA	[2B89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132A, 0x003F };
    uint32_t const ces[9] = { 0x2B89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_061)
{
    // 1132A 0061;	
    // (ëå™) GRANTHA LETTER PA	[2B89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132A, 0x0061 };
    uint32_t const ces[9] = { 0x2B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_062)
{
    // 1132A 0041;	
    // (ëå™) GRANTHA LETTER PA	[2B89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132A, 0x0041 };
    uint32_t const ces[9] = { 0x2B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_063)
{
    // 1132A 0062;	
    // (ëå™) GRANTHA LETTER PA	[2B89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132A, 0x0062 };
    uint32_t const ces[9] = { 0x2B89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_064)
{
    // 1132B 0021;	
    // (ëå´) GRANTHA LETTER PHA	[2B8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132B, 0x0021 };
    uint32_t const ces[9] = { 0x2B8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_065)
{
    // 1132B 003F;	
    // (ëå´) GRANTHA LETTER PHA	[2B8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132B, 0x003F };
    uint32_t const ces[9] = { 0x2B8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_066)
{
    // 1132B 0061;	
    // (ëå´) GRANTHA LETTER PHA	[2B8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132B, 0x0061 };
    uint32_t const ces[9] = { 0x2B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_067)
{
    // 1132B 0041;	
    // (ëå´) GRANTHA LETTER PHA	[2B8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132B, 0x0041 };
    uint32_t const ces[9] = { 0x2B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_068)
{
    // 1132B 0062;	
    // (ëå´) GRANTHA LETTER PHA	[2B8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132B, 0x0062 };
    uint32_t const ces[9] = { 0x2B8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_069)
{
    // 1132C 0021;	
    // (ëå¨) GRANTHA LETTER BA	[2B8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132C, 0x0021 };
    uint32_t const ces[9] = { 0x2B8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_070)
{
    // 1132C 003F;	
    // (ëå¨) GRANTHA LETTER BA	[2B8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132C, 0x003F };
    uint32_t const ces[9] = { 0x2B8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_071)
{
    // 1132C 0061;	
    // (ëå¨) GRANTHA LETTER BA	[2B8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132C, 0x0061 };
    uint32_t const ces[9] = { 0x2B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_072)
{
    // 1132C 0041;	
    // (ëå¨) GRANTHA LETTER BA	[2B8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132C, 0x0041 };
    uint32_t const ces[9] = { 0x2B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_073)
{
    // 1132C 0062;	
    // (ëå¨) GRANTHA LETTER BA	[2B8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132C, 0x0062 };
    uint32_t const ces[9] = { 0x2B8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_074)
{
    // 1132D 0021;	
    // (ëå≠) GRANTHA LETTER BHA	[2B8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132D, 0x0021 };
    uint32_t const ces[9] = { 0x2B8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_075)
{
    // 1132D 003F;	
    // (ëå≠) GRANTHA LETTER BHA	[2B8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132D, 0x003F };
    uint32_t const ces[9] = { 0x2B8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_076)
{
    // 1132D 0061;	
    // (ëå≠) GRANTHA LETTER BHA	[2B8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132D, 0x0061 };
    uint32_t const ces[9] = { 0x2B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_077)
{
    // 1132D 0041;	
    // (ëå≠) GRANTHA LETTER BHA	[2B8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132D, 0x0041 };
    uint32_t const ces[9] = { 0x2B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_078)
{
    // 1132D 0062;	
    // (ëå≠) GRANTHA LETTER BHA	[2B8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132D, 0x0062 };
    uint32_t const ces[9] = { 0x2B8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_079)
{
    // 1132E 0021;	
    // (ëåÆ) GRANTHA LETTER MA	[2B8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132E, 0x0021 };
    uint32_t const ces[9] = { 0x2B8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_080)
{
    // 1132E 003F;	
    // (ëåÆ) GRANTHA LETTER MA	[2B8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132E, 0x003F };
    uint32_t const ces[9] = { 0x2B8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_081)
{
    // 1132E 0061;	
    // (ëåÆ) GRANTHA LETTER MA	[2B8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132E, 0x0061 };
    uint32_t const ces[9] = { 0x2B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_082)
{
    // 1132E 0041;	
    // (ëåÆ) GRANTHA LETTER MA	[2B8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132E, 0x0041 };
    uint32_t const ces[9] = { 0x2B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_083)
{
    // 1132E 0062;	
    // (ëåÆ) GRANTHA LETTER MA	[2B8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132E, 0x0062 };
    uint32_t const ces[9] = { 0x2B8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_084)
{
    // 1132F 0021;	
    // (ëåØ) GRANTHA LETTER YA	[2B8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132F, 0x0021 };
    uint32_t const ces[9] = { 0x2B8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_085)
{
    // 1132F 003F;	
    // (ëåØ) GRANTHA LETTER YA	[2B8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132F, 0x003F };
    uint32_t const ces[9] = { 0x2B8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_086)
{
    // 1132F 0061;	
    // (ëåØ) GRANTHA LETTER YA	[2B8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132F, 0x0061 };
    uint32_t const ces[9] = { 0x2B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_087)
{
    // 1132F 0041;	
    // (ëåØ) GRANTHA LETTER YA	[2B8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132F, 0x0041 };
    uint32_t const ces[9] = { 0x2B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_088)
{
    // 1132F 0062;	
    // (ëåØ) GRANTHA LETTER YA	[2B8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132F, 0x0062 };
    uint32_t const ces[9] = { 0x2B8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_089)
{
    // 11330 0021;	
    // (ëå∞) GRANTHA LETTER RA	[2B8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11330, 0x0021 };
    uint32_t const ces[9] = { 0x2B8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_090)
{
    // 11330 003F;	
    // (ëå∞) GRANTHA LETTER RA	[2B8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11330, 0x003F };
    uint32_t const ces[9] = { 0x2B8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_091)
{
    // 11330 0061;	
    // (ëå∞) GRANTHA LETTER RA	[2B8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11330, 0x0061 };
    uint32_t const ces[9] = { 0x2B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_092)
{
    // 11330 0041;	
    // (ëå∞) GRANTHA LETTER RA	[2B8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11330, 0x0041 };
    uint32_t const ces[9] = { 0x2B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_093)
{
    // 11330 0062;	
    // (ëå∞) GRANTHA LETTER RA	[2B8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11330, 0x0062 };
    uint32_t const ces[9] = { 0x2B8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_094)
{
    // 11332 0021;	
    // (ëå≤) GRANTHA LETTER LA	[2B90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11332, 0x0021 };
    uint32_t const ces[9] = { 0x2B90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_095)
{
    // 11332 003F;	
    // (ëå≤) GRANTHA LETTER LA	[2B90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11332, 0x003F };
    uint32_t const ces[9] = { 0x2B90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_096)
{
    // 11332 0061;	
    // (ëå≤) GRANTHA LETTER LA	[2B90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11332, 0x0061 };
    uint32_t const ces[9] = { 0x2B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_097)
{
    // 11332 0041;	
    // (ëå≤) GRANTHA LETTER LA	[2B90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11332, 0x0041 };
    uint32_t const ces[9] = { 0x2B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_098)
{
    // 11332 0062;	
    // (ëå≤) GRANTHA LETTER LA	[2B90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11332, 0x0062 };
    uint32_t const ces[9] = { 0x2B90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_099)
{
    // 11333 0021;	
    // (ëå≥) GRANTHA LETTER LLA	[2B91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11333, 0x0021 };
    uint32_t const ces[9] = { 0x2B91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_100)
{
    // 11333 003F;	
    // (ëå≥) GRANTHA LETTER LLA	[2B91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11333, 0x003F };
    uint32_t const ces[9] = { 0x2B91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_101)
{
    // 11333 0061;	
    // (ëå≥) GRANTHA LETTER LLA	[2B91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11333, 0x0061 };
    uint32_t const ces[9] = { 0x2B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_102)
{
    // 11333 0041;	
    // (ëå≥) GRANTHA LETTER LLA	[2B91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11333, 0x0041 };
    uint32_t const ces[9] = { 0x2B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_103)
{
    // 11333 0062;	
    // (ëå≥) GRANTHA LETTER LLA	[2B91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11333, 0x0062 };
    uint32_t const ces[9] = { 0x2B91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_104)
{
    // 11335 0021;	
    // (ëåµ) GRANTHA LETTER VA	[2B92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11335, 0x0021 };
    uint32_t const ces[9] = { 0x2B92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_105)
{
    // 11335 003F;	
    // (ëåµ) GRANTHA LETTER VA	[2B92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11335, 0x003F };
    uint32_t const ces[9] = { 0x2B92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_106)
{
    // 11335 0061;	
    // (ëåµ) GRANTHA LETTER VA	[2B92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11335, 0x0061 };
    uint32_t const ces[9] = { 0x2B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_107)
{
    // 11335 0041;	
    // (ëåµ) GRANTHA LETTER VA	[2B92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11335, 0x0041 };
    uint32_t const ces[9] = { 0x2B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_108)
{
    // 11335 0062;	
    // (ëåµ) GRANTHA LETTER VA	[2B92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11335, 0x0062 };
    uint32_t const ces[9] = { 0x2B92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_109)
{
    // 11336 0021;	
    // (ëå∂) GRANTHA LETTER SHA	[2B93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11336, 0x0021 };
    uint32_t const ces[9] = { 0x2B93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_110)
{
    // 11336 003F;	
    // (ëå∂) GRANTHA LETTER SHA	[2B93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11336, 0x003F };
    uint32_t const ces[9] = { 0x2B93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_111)
{
    // 11336 0061;	
    // (ëå∂) GRANTHA LETTER SHA	[2B93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11336, 0x0061 };
    uint32_t const ces[9] = { 0x2B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_112)
{
    // 11336 0041;	
    // (ëå∂) GRANTHA LETTER SHA	[2B93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11336, 0x0041 };
    uint32_t const ces[9] = { 0x2B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_113)
{
    // 11336 0062;	
    // (ëå∂) GRANTHA LETTER SHA	[2B93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11336, 0x0062 };
    uint32_t const ces[9] = { 0x2B93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_114)
{
    // 11337 0021;	
    // (ëå∑) GRANTHA LETTER SSA	[2B94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11337, 0x0021 };
    uint32_t const ces[9] = { 0x2B94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_115)
{
    // 11337 003F;	
    // (ëå∑) GRANTHA LETTER SSA	[2B94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11337, 0x003F };
    uint32_t const ces[9] = { 0x2B94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_116)
{
    // 11337 0061;	
    // (ëå∑) GRANTHA LETTER SSA	[2B94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11337, 0x0061 };
    uint32_t const ces[9] = { 0x2B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_117)
{
    // 11337 0041;	
    // (ëå∑) GRANTHA LETTER SSA	[2B94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11337, 0x0041 };
    uint32_t const ces[9] = { 0x2B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_118)
{
    // 11337 0062;	
    // (ëå∑) GRANTHA LETTER SSA	[2B94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11337, 0x0062 };
    uint32_t const ces[9] = { 0x2B94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_119)
{
    // 11338 0021;	
    // (ëå∏) GRANTHA LETTER SA	[2B95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11338, 0x0021 };
    uint32_t const ces[9] = { 0x2B95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_120)
{
    // 11338 003F;	
    // (ëå∏) GRANTHA LETTER SA	[2B95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11338, 0x003F };
    uint32_t const ces[9] = { 0x2B95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_121)
{
    // 11338 0061;	
    // (ëå∏) GRANTHA LETTER SA	[2B95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11338, 0x0061 };
    uint32_t const ces[9] = { 0x2B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_122)
{
    // 11338 0041;	
    // (ëå∏) GRANTHA LETTER SA	[2B95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11338, 0x0041 };
    uint32_t const ces[9] = { 0x2B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_123)
{
    // 11338 0062;	
    // (ëå∏) GRANTHA LETTER SA	[2B95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11338, 0x0062 };
    uint32_t const ces[9] = { 0x2B95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_124)
{
    // 11339 0021;	
    // (ëåπ) GRANTHA LETTER HA	[2B96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11339, 0x0021 };
    uint32_t const ces[9] = { 0x2B96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_125)
{
    // 11339 003F;	
    // (ëåπ) GRANTHA LETTER HA	[2B96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11339, 0x003F };
    uint32_t const ces[9] = { 0x2B96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_126)
{
    // 11339 0061;	
    // (ëåπ) GRANTHA LETTER HA	[2B96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11339, 0x0061 };
    uint32_t const ces[9] = { 0x2B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_127)
{
    // 11339 0041;	
    // (ëåπ) GRANTHA LETTER HA	[2B96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11339, 0x0041 };
    uint32_t const ces[9] = { 0x2B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_128)
{
    // 11339 0062;	
    // (ëåπ) GRANTHA LETTER HA	[2B96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11339, 0x0062 };
    uint32_t const ces[9] = { 0x2B96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_129)
{
    // 1133D 0021;	
    // (ëåΩ) GRANTHA SIGN AVAGRAHA	[2B97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133D, 0x0021 };
    uint32_t const ces[9] = { 0x2B97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_130)
{
    // 1133D 003F;	
    // (ëåΩ) GRANTHA SIGN AVAGRAHA	[2B97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133D, 0x003F };
    uint32_t const ces[9] = { 0x2B97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_131)
{
    // 1133D 0061;	
    // (ëåΩ) GRANTHA SIGN AVAGRAHA	[2B97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133D, 0x0061 };
    uint32_t const ces[9] = { 0x2B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_132)
{
    // 1133D 0041;	
    // (ëåΩ) GRANTHA SIGN AVAGRAHA	[2B97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1133D, 0x0041 };
    uint32_t const ces[9] = { 0x2B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_133)
{
    // 1133D 0062;	
    // (ëåΩ) GRANTHA SIGN AVAGRAHA	[2B97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133D, 0x0062 };
    uint32_t const ces[9] = { 0x2B97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_134)
{
    // 1135E 0021;	
    // (ëçû) GRANTHA LETTER VEDIC ANUSVARA	[2B98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135E, 0x0021 };
    uint32_t const ces[9] = { 0x2B98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_135)
{
    // 1135E 003F;	
    // (ëçû) GRANTHA LETTER VEDIC ANUSVARA	[2B98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135E, 0x003F };
    uint32_t const ces[9] = { 0x2B98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_136)
{
    // 1135E 0061;	
    // (ëçû) GRANTHA LETTER VEDIC ANUSVARA	[2B98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135E, 0x0061 };
    uint32_t const ces[9] = { 0x2B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_137)
{
    // 1135E 0041;	
    // (ëçû) GRANTHA LETTER VEDIC ANUSVARA	[2B98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1135E, 0x0041 };
    uint32_t const ces[9] = { 0x2B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_138)
{
    // 1135E 0062;	
    // (ëçû) GRANTHA LETTER VEDIC ANUSVARA	[2B98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135E, 0x0062 };
    uint32_t const ces[9] = { 0x2B98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_139)
{
    // 1135F 0021;	
    // (ëçü) GRANTHA LETTER VEDIC DOUBLE ANUSVARA	[2B99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135F, 0x0021 };
    uint32_t const ces[9] = { 0x2B99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_140)
{
    // 1135F 003F;	
    // (ëçü) GRANTHA LETTER VEDIC DOUBLE ANUSVARA	[2B99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135F, 0x003F };
    uint32_t const ces[9] = { 0x2B99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_141)
{
    // 1135F 0061;	
    // (ëçü) GRANTHA LETTER VEDIC DOUBLE ANUSVARA	[2B99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135F, 0x0061 };
    uint32_t const ces[9] = { 0x2B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_142)
{
    // 1135F 0041;	
    // (ëçü) GRANTHA LETTER VEDIC DOUBLE ANUSVARA	[2B99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1135F, 0x0041 };
    uint32_t const ces[9] = { 0x2B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_143)
{
    // 1135F 0062;	
    // (ëçü) GRANTHA LETTER VEDIC DOUBLE ANUSVARA	[2B99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135F, 0x0062 };
    uint32_t const ces[9] = { 0x2B99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_144)
{
    // 1133E 0021;	
    // (ëåæ) GRANTHA VOWEL SIGN AA	[2B9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133E, 0x0021 };
    uint32_t const ces[9] = { 0x2B9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_145)
{
    // 1133E 003F;	
    // (ëåæ) GRANTHA VOWEL SIGN AA	[2B9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133E, 0x003F };
    uint32_t const ces[9] = { 0x2B9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_146)
{
    // 1133E 0061;	
    // (ëåæ) GRANTHA VOWEL SIGN AA	[2B9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133E, 0x0061 };
    uint32_t const ces[9] = { 0x2B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_147)
{
    // 1133E 0041;	
    // (ëåæ) GRANTHA VOWEL SIGN AA	[2B9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1133E, 0x0041 };
    uint32_t const ces[9] = { 0x2B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_148)
{
    // 1133E 0062;	
    // (ëåæ) GRANTHA VOWEL SIGN AA	[2B9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133E, 0x0062 };
    uint32_t const ces[9] = { 0x2B9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_149)
{
    // 1133F 0021;	
    // (ëåø) GRANTHA VOWEL SIGN I	[2B9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133F, 0x0021 };
    uint32_t const ces[9] = { 0x2B9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_150)
{
    // 1133F 003F;	
    // (ëåø) GRANTHA VOWEL SIGN I	[2B9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133F, 0x003F };
    uint32_t const ces[9] = { 0x2B9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_151)
{
    // 1133F 0061;	
    // (ëåø) GRANTHA VOWEL SIGN I	[2B9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133F, 0x0061 };
    uint32_t const ces[9] = { 0x2B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_152)
{
    // 1133F 0041;	
    // (ëåø) GRANTHA VOWEL SIGN I	[2B9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1133F, 0x0041 };
    uint32_t const ces[9] = { 0x2B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_153)
{
    // 1133F 0062;	
    // (ëåø) GRANTHA VOWEL SIGN I	[2B9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133F, 0x0062 };
    uint32_t const ces[9] = { 0x2B9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_154)
{
    // 11340 0021;	
    // (ëçÄ) GRANTHA VOWEL SIGN II	[2B9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11340, 0x0021 };
    uint32_t const ces[9] = { 0x2B9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_155)
{
    // 11340 003F;	
    // (ëçÄ) GRANTHA VOWEL SIGN II	[2B9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11340, 0x003F };
    uint32_t const ces[9] = { 0x2B9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_156)
{
    // 11340 0061;	
    // (ëçÄ) GRANTHA VOWEL SIGN II	[2B9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11340, 0x0061 };
    uint32_t const ces[9] = { 0x2B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_157)
{
    // 11340 0041;	
    // (ëçÄ) GRANTHA VOWEL SIGN II	[2B9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11340, 0x0041 };
    uint32_t const ces[9] = { 0x2B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_158)
{
    // 11340 0062;	
    // (ëçÄ) GRANTHA VOWEL SIGN II	[2B9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11340, 0x0062 };
    uint32_t const ces[9] = { 0x2B9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_159)
{
    // 11341 0021;	
    // (ëçÅ) GRANTHA VOWEL SIGN U	[2B9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11341, 0x0021 };
    uint32_t const ces[9] = { 0x2B9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_160)
{
    // 11341 003F;	
    // (ëçÅ) GRANTHA VOWEL SIGN U	[2B9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11341, 0x003F };
    uint32_t const ces[9] = { 0x2B9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_161)
{
    // 11341 0061;	
    // (ëçÅ) GRANTHA VOWEL SIGN U	[2B9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11341, 0x0061 };
    uint32_t const ces[9] = { 0x2B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_162)
{
    // 11341 0041;	
    // (ëçÅ) GRANTHA VOWEL SIGN U	[2B9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11341, 0x0041 };
    uint32_t const ces[9] = { 0x2B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_163)
{
    // 11341 0062;	
    // (ëçÅ) GRANTHA VOWEL SIGN U	[2B9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11341, 0x0062 };
    uint32_t const ces[9] = { 0x2B9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_164)
{
    // 11342 0021;	
    // (ëçÇ) GRANTHA VOWEL SIGN UU	[2B9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11342, 0x0021 };
    uint32_t const ces[9] = { 0x2B9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_165)
{
    // 11342 003F;	
    // (ëçÇ) GRANTHA VOWEL SIGN UU	[2B9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11342, 0x003F };
    uint32_t const ces[9] = { 0x2B9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_166)
{
    // 11342 0061;	
    // (ëçÇ) GRANTHA VOWEL SIGN UU	[2B9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11342, 0x0061 };
    uint32_t const ces[9] = { 0x2B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_167)
{
    // 11342 0041;	
    // (ëçÇ) GRANTHA VOWEL SIGN UU	[2B9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11342, 0x0041 };
    uint32_t const ces[9] = { 0x2B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_168)
{
    // 11342 0062;	
    // (ëçÇ) GRANTHA VOWEL SIGN UU	[2B9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11342, 0x0062 };
    uint32_t const ces[9] = { 0x2B9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_169)
{
    // 11343 0021;	
    // (ëçÉ) GRANTHA VOWEL SIGN VOCALIC R	[2B9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11343, 0x0021 };
    uint32_t const ces[9] = { 0x2B9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_170)
{
    // 11343 003F;	
    // (ëçÉ) GRANTHA VOWEL SIGN VOCALIC R	[2B9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11343, 0x003F };
    uint32_t const ces[9] = { 0x2B9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_171)
{
    // 11343 0061;	
    // (ëçÉ) GRANTHA VOWEL SIGN VOCALIC R	[2B9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11343, 0x0061 };
    uint32_t const ces[9] = { 0x2B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_172)
{
    // 11343 0041;	
    // (ëçÉ) GRANTHA VOWEL SIGN VOCALIC R	[2B9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11343, 0x0041 };
    uint32_t const ces[9] = { 0x2B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_173)
{
    // 11343 0062;	
    // (ëçÉ) GRANTHA VOWEL SIGN VOCALIC R	[2B9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11343, 0x0062 };
    uint32_t const ces[9] = { 0x2B9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_174)
{
    // 11344 0021;	
    // (ëçÑ) GRANTHA VOWEL SIGN VOCALIC RR	[2BA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11344, 0x0021 };
    uint32_t const ces[9] = { 0x2BA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_175)
{
    // 11344 003F;	
    // (ëçÑ) GRANTHA VOWEL SIGN VOCALIC RR	[2BA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11344, 0x003F };
    uint32_t const ces[9] = { 0x2BA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_176)
{
    // 11344 0061;	
    // (ëçÑ) GRANTHA VOWEL SIGN VOCALIC RR	[2BA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11344, 0x0061 };
    uint32_t const ces[9] = { 0x2BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_177)
{
    // 11344 0041;	
    // (ëçÑ) GRANTHA VOWEL SIGN VOCALIC RR	[2BA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11344, 0x0041 };
    uint32_t const ces[9] = { 0x2BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_178)
{
    // 11344 0062;	
    // (ëçÑ) GRANTHA VOWEL SIGN VOCALIC RR	[2BA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11344, 0x0062 };
    uint32_t const ces[9] = { 0x2BA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_179)
{
    // 11362 0021;	
    // (ëç¢) GRANTHA VOWEL SIGN VOCALIC L	[2BA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11362, 0x0021 };
    uint32_t const ces[9] = { 0x2BA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_180)
{
    // 11362 003F;	
    // (ëç¢) GRANTHA VOWEL SIGN VOCALIC L	[2BA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11362, 0x003F };
    uint32_t const ces[9] = { 0x2BA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_181)
{
    // 11362 0061;	
    // (ëç¢) GRANTHA VOWEL SIGN VOCALIC L	[2BA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11362, 0x0061 };
    uint32_t const ces[9] = { 0x2BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_182)
{
    // 11362 0041;	
    // (ëç¢) GRANTHA VOWEL SIGN VOCALIC L	[2BA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11362, 0x0041 };
    uint32_t const ces[9] = { 0x2BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_183)
{
    // 11362 0062;	
    // (ëç¢) GRANTHA VOWEL SIGN VOCALIC L	[2BA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11362, 0x0062 };
    uint32_t const ces[9] = { 0x2BA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_184)
{
    // 11363 0021;	
    // (ëç£) GRANTHA VOWEL SIGN VOCALIC LL	[2BA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11363, 0x0021 };
    uint32_t const ces[9] = { 0x2BA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_185)
{
    // 11363 003F;	
    // (ëç£) GRANTHA VOWEL SIGN VOCALIC LL	[2BA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11363, 0x003F };
    uint32_t const ces[9] = { 0x2BA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_186)
{
    // 11363 0061;	
    // (ëç£) GRANTHA VOWEL SIGN VOCALIC LL	[2BA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11363, 0x0061 };
    uint32_t const ces[9] = { 0x2BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_187)
{
    // 11363 0041;	
    // (ëç£) GRANTHA VOWEL SIGN VOCALIC LL	[2BA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11363, 0x0041 };
    uint32_t const ces[9] = { 0x2BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_188)
{
    // 11363 0062;	
    // (ëç£) GRANTHA VOWEL SIGN VOCALIC LL	[2BA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11363, 0x0062 };
    uint32_t const ces[9] = { 0x2BA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_189)
{
    // 11347 0021;	
    // (ëçá) GRANTHA VOWEL SIGN EE	[2BA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11347, 0x0021 };
    uint32_t const ces[9] = { 0x2BA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_190)
{
    // 11347 003F;	
    // (ëçá) GRANTHA VOWEL SIGN EE	[2BA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11347, 0x003F };
    uint32_t const ces[9] = { 0x2BA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_191)
{
    // 11347 0061;	
    // (ëçá) GRANTHA VOWEL SIGN EE	[2BA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11347, 0x0061 };
    uint32_t const ces[9] = { 0x2BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_192)
{
    // 11347 0041;	
    // (ëçá) GRANTHA VOWEL SIGN EE	[2BA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11347, 0x0041 };
    uint32_t const ces[9] = { 0x2BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_193)
{
    // 11347 0062;	
    // (ëçá) GRANTHA VOWEL SIGN EE	[2BA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11347, 0x0062 };
    uint32_t const ces[9] = { 0x2BA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_194)
{
    // 11347 0001 1133E 0061;	
    // (ëçá'\u0001'ëåæ) GRANTHA VOWEL SIGN EE, <START OF HEADING>, GRANTHA VOWEL SIGN AA	[2BA3 2B9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x0001, 0x1133E, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_195)
{
    // 11347 0591 1133E 0061;	
    // (ëçá÷ëëåæ) GRANTHA VOWEL SIGN EE, HEBREW ACCENT ETNAHTA, GRANTHA VOWEL SIGN AA	[2BA3 2B9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x0591, 0x1133E, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_196)
{
    // 11347 1D165 1133E 0061;	
    // (ëçáùÖ•ëåæ) GRANTHA VOWEL SIGN EE, MUSICAL SYMBOL COMBINING STEM, GRANTHA VOWEL SIGN AA	[2BA3 2B9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x1D165, 0x1133E, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_197)
{
    // 11347 0001 11357 0061;	
    // (ëçá'\u0001'ëçó) GRANTHA VOWEL SIGN EE, <START OF HEADING>, GRANTHA AU LENGTH MARK	[2BA3 2BA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x0001, 0x11357, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_198)
{
    // 11347 0591 11357 0061;	
    // (ëçá÷ëëçó) GRANTHA VOWEL SIGN EE, HEBREW ACCENT ETNAHTA, GRANTHA AU LENGTH MARK	[2BA3 2BA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x0591, 0x11357, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_199)
{
    // 11347 1D165 11357 0061;	
    // (ëçáùÖ•ëçó) GRANTHA VOWEL SIGN EE, MUSICAL SYMBOL COMBINING STEM, GRANTHA AU LENGTH MARK	[2BA3 2BA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x11347, 0x1D165, 0x11357, 0x0061 };
    uint32_t const ces[12] = { 0x2BA3, 0x2BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_200)
{
    // 11348 0021;	
    // (ëçà) GRANTHA VOWEL SIGN AI	[2BA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11348, 0x0021 };
    uint32_t const ces[9] = { 0x2BA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_201)
{
    // 11348 003F;	
    // (ëçà) GRANTHA VOWEL SIGN AI	[2BA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11348, 0x003F };
    uint32_t const ces[9] = { 0x2BA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_202)
{
    // 11348 0061;	
    // (ëçà) GRANTHA VOWEL SIGN AI	[2BA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11348, 0x0061 };
    uint32_t const ces[9] = { 0x2BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_203)
{
    // 11348 0041;	
    // (ëçà) GRANTHA VOWEL SIGN AI	[2BA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11348, 0x0041 };
    uint32_t const ces[9] = { 0x2BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_204)
{
    // 11348 0062;	
    // (ëçà) GRANTHA VOWEL SIGN AI	[2BA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11348, 0x0062 };
    uint32_t const ces[9] = { 0x2BA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_205)
{
    // 11347 1133E 0021;	
    // (ëçã) GRANTHA VOWEL SIGN EE, GRANTHA VOWEL SIGN AA	[2BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x1133E, 0x0021 };
    uint32_t const ces[9] = { 0x2BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_206)
{
    // 1134B 0021;	
    // (ëçã) GRANTHA VOWEL SIGN OO	[2BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134B, 0x0021 };
    uint32_t const ces[9] = { 0x2BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_207)
{
    // 11347 1133E 003F;	
    // (ëçã) GRANTHA VOWEL SIGN EE, GRANTHA VOWEL SIGN AA	[2BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x1133E, 0x003F };
    uint32_t const ces[9] = { 0x2BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_208)
{
    // 1134B 003F;	
    // (ëçã) GRANTHA VOWEL SIGN OO	[2BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134B, 0x003F };
    uint32_t const ces[9] = { 0x2BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_209)
{
    // 11347 1133E 0061;	
    // (ëçã) GRANTHA VOWEL SIGN EE, GRANTHA VOWEL SIGN AA	[2BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x1133E, 0x0061 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_210)
{
    // 1134B 0061;	
    // (ëçã) GRANTHA VOWEL SIGN OO	[2BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134B, 0x0061 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_211)
{
    // 11347 1133E 0041;	
    // (ëçã) GRANTHA VOWEL SIGN EE, GRANTHA VOWEL SIGN AA	[2BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x11347, 0x1133E, 0x0041 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_212)
{
    // 1134B 0041;	
    // (ëçã) GRANTHA VOWEL SIGN OO	[2BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1134B, 0x0041 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_213)
{
    // 11347 1133E 0062;	
    // (ëçã) GRANTHA VOWEL SIGN EE, GRANTHA VOWEL SIGN AA	[2BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x1133E, 0x0062 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_214)
{
    // 1134B 0062;	
    // (ëçã) GRANTHA VOWEL SIGN OO	[2BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134B, 0x0062 };
    uint32_t const ces[9] = { 0x2BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_215)
{
    // 11347 11357 0021;	
    // (ëçå) GRANTHA VOWEL SIGN EE, GRANTHA AU LENGTH MARK	[2BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x11357, 0x0021 };
    uint32_t const ces[9] = { 0x2BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_216)
{
    // 1134C 0021;	
    // (ëçå) GRANTHA VOWEL SIGN AU	[2BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134C, 0x0021 };
    uint32_t const ces[9] = { 0x2BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_217)
{
    // 11347 11357 003F;	
    // (ëçå) GRANTHA VOWEL SIGN EE, GRANTHA AU LENGTH MARK	[2BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x11357, 0x003F };
    uint32_t const ces[9] = { 0x2BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_218)
{
    // 1134C 003F;	
    // (ëçå) GRANTHA VOWEL SIGN AU	[2BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134C, 0x003F };
    uint32_t const ces[9] = { 0x2BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_219)
{
    // 11347 11357 0061;	
    // (ëçå) GRANTHA VOWEL SIGN EE, GRANTHA AU LENGTH MARK	[2BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x11357, 0x0061 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_220)
{
    // 1134C 0061;	
    // (ëçå) GRANTHA VOWEL SIGN AU	[2BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134C, 0x0061 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_221)
{
    // 11347 11357 0041;	
    // (ëçå) GRANTHA VOWEL SIGN EE, GRANTHA AU LENGTH MARK	[2BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x11347, 0x11357, 0x0041 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_222)
{
    // 1134C 0041;	
    // (ëçå) GRANTHA VOWEL SIGN AU	[2BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1134C, 0x0041 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_223)
{
    // 11347 11357 0062;	
    // (ëçå) GRANTHA VOWEL SIGN EE, GRANTHA AU LENGTH MARK	[2BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x11347, 0x11357, 0x0062 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_224)
{
    // 1134C 0062;	
    // (ëçå) GRANTHA VOWEL SIGN AU	[2BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134C, 0x0062 };
    uint32_t const ces[9] = { 0x2BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_225)
{
    // 0334 1134D;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1134D };
    uint32_t const ces[8] = { 0x2BA7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_226)
{
    // 1134D 0334;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134D, 0x0334 };
    uint32_t const ces[8] = { 0x2BA7, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_227)
{
    // 1134D 0021;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134D, 0x0021 };
    uint32_t const ces[9] = { 0x2BA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_228)
{
    // 1134D 003F;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134D, 0x003F };
    uint32_t const ces[9] = { 0x2BA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_229)
{
    // 1134D 0061;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134D, 0x0061 };
    uint32_t const ces[9] = { 0x2BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_230)
{
    // 1134D 0041;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1134D, 0x0041 };
    uint32_t const ces[9] = { 0x2BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_231)
{
    // 1134D 0062;	
    // (ëçç) GRANTHA SIGN VIRAMA	[2BA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134D, 0x0062 };
    uint32_t const ces[9] = { 0x2BA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_232)
{
    // 11357 0021;	
    // (ëçó) GRANTHA AU LENGTH MARK	[2BA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11357, 0x0021 };
    uint32_t const ces[9] = { 0x2BA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_233)
{
    // 11357 003F;	
    // (ëçó) GRANTHA AU LENGTH MARK	[2BA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11357, 0x003F };
    uint32_t const ces[9] = { 0x2BA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_234)
{
    // 11357 0061;	
    // (ëçó) GRANTHA AU LENGTH MARK	[2BA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11357, 0x0061 };
    uint32_t const ces[9] = { 0x2BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_235)
{
    // 11357 0041;	
    // (ëçó) GRANTHA AU LENGTH MARK	[2BA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11357, 0x0041 };
    uint32_t const ces[9] = { 0x2BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_236)
{
    // 11357 0062;	
    // (ëçó) GRANTHA AU LENGTH MARK	[2BA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11357, 0x0062 };
    uint32_t const ces[9] = { 0x2BA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_237)
{
    // 1135D 0021;	
    // (ëçù) GRANTHA SIGN PLUTA	[2BA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135D, 0x0021 };
    uint32_t const ces[9] = { 0x2BA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_238)
{
    // 1135D 003F;	
    // (ëçù) GRANTHA SIGN PLUTA	[2BA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135D, 0x003F };
    uint32_t const ces[9] = { 0x2BA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_239)
{
    // 1135D 0061;	
    // (ëçù) GRANTHA SIGN PLUTA	[2BA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135D, 0x0061 };
    uint32_t const ces[9] = { 0x2BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_240)
{
    // 1135D 0041;	
    // (ëçù) GRANTHA SIGN PLUTA	[2BA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1135D, 0x0041 };
    uint32_t const ces[9] = { 0x2BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_241)
{
    // 1135D 0062;	
    // (ëçù) GRANTHA SIGN PLUTA	[2BA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135D, 0x0062 };
    uint32_t const ces[9] = { 0x2BA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_242)
{
    // 11449 0021;	
    // (ëëâ) NEWA OM	[2BAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11449, 0x0021 };
    uint32_t const ces[9] = { 0x2BAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_243)
{
    // 11449 003F;	
    // (ëëâ) NEWA OM	[2BAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11449, 0x003F };
    uint32_t const ces[9] = { 0x2BAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_244)
{
    // 11449 0061;	
    // (ëëâ) NEWA OM	[2BAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11449, 0x0061 };
    uint32_t const ces[9] = { 0x2BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_245)
{
    // 11449 0041;	
    // (ëëâ) NEWA OM	[2BAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11449, 0x0041 };
    uint32_t const ces[9] = { 0x2BAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_246)
{
    // 11449 0062;	
    // (ëëâ) NEWA OM	[2BAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11449, 0x0062 };
    uint32_t const ces[9] = { 0x2BAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_247)
{
    // 1144A 0021;	
    // (ëëä) NEWA SIDDHI	[2BAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144A, 0x0021 };
    uint32_t const ces[9] = { 0x2BAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_248)
{
    // 1144A 003F;	
    // (ëëä) NEWA SIDDHI	[2BAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144A, 0x003F };
    uint32_t const ces[9] = { 0x2BAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_249)
{
    // 1144A 0061;	
    // (ëëä) NEWA SIDDHI	[2BAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144A, 0x0061 };
    uint32_t const ces[9] = { 0x2BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_250)
{
    // 1144A 0041;	
    // (ëëä) NEWA SIDDHI	[2BAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1144A, 0x0041 };
    uint32_t const ces[9] = { 0x2BAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_251)
{
    // 1144A 0062;	
    // (ëëä) NEWA SIDDHI	[2BAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144A, 0x0062 };
    uint32_t const ces[9] = { 0x2BAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_252)
{
    // 11400 0021;	
    // (ëêÄ) NEWA LETTER A	[2BAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11400, 0x0021 };
    uint32_t const ces[9] = { 0x2BAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_253)
{
    // 11400 003F;	
    // (ëêÄ) NEWA LETTER A	[2BAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11400, 0x003F };
    uint32_t const ces[9] = { 0x2BAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_254)
{
    // 11400 0061;	
    // (ëêÄ) NEWA LETTER A	[2BAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11400, 0x0061 };
    uint32_t const ces[9] = { 0x2BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_255)
{
    // 11400 0041;	
    // (ëêÄ) NEWA LETTER A	[2BAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11400, 0x0041 };
    uint32_t const ces[9] = { 0x2BAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_256)
{
    // 11400 0062;	
    // (ëêÄ) NEWA LETTER A	[2BAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11400, 0x0062 };
    uint32_t const ces[9] = { 0x2BAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_257)
{
    // 11401 0021;	
    // (ëêÅ) NEWA LETTER AA	[2BAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11401, 0x0021 };
    uint32_t const ces[9] = { 0x2BAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_258)
{
    // 11401 003F;	
    // (ëêÅ) NEWA LETTER AA	[2BAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11401, 0x003F };
    uint32_t const ces[9] = { 0x2BAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_259)
{
    // 11401 0061;	
    // (ëêÅ) NEWA LETTER AA	[2BAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11401, 0x0061 };
    uint32_t const ces[9] = { 0x2BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_260)
{
    // 11401 0041;	
    // (ëêÅ) NEWA LETTER AA	[2BAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11401, 0x0041 };
    uint32_t const ces[9] = { 0x2BAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_261)
{
    // 11401 0062;	
    // (ëêÅ) NEWA LETTER AA	[2BAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11401, 0x0062 };
    uint32_t const ces[9] = { 0x2BAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_262)
{
    // 11402 0021;	
    // (ëêÇ) NEWA LETTER I	[2BAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11402, 0x0021 };
    uint32_t const ces[9] = { 0x2BAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_263)
{
    // 11402 003F;	
    // (ëêÇ) NEWA LETTER I	[2BAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11402, 0x003F };
    uint32_t const ces[9] = { 0x2BAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_264)
{
    // 11402 0061;	
    // (ëêÇ) NEWA LETTER I	[2BAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11402, 0x0061 };
    uint32_t const ces[9] = { 0x2BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_265)
{
    // 11402 0041;	
    // (ëêÇ) NEWA LETTER I	[2BAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11402, 0x0041 };
    uint32_t const ces[9] = { 0x2BAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_266)
{
    // 11402 0062;	
    // (ëêÇ) NEWA LETTER I	[2BAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11402, 0x0062 };
    uint32_t const ces[9] = { 0x2BAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_267)
{
    // 11403 0021;	
    // (ëêÉ) NEWA LETTER II	[2BAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11403, 0x0021 };
    uint32_t const ces[9] = { 0x2BAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_268)
{
    // 11403 003F;	
    // (ëêÉ) NEWA LETTER II	[2BAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11403, 0x003F };
    uint32_t const ces[9] = { 0x2BAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_269)
{
    // 11403 0061;	
    // (ëêÉ) NEWA LETTER II	[2BAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11403, 0x0061 };
    uint32_t const ces[9] = { 0x2BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_270)
{
    // 11403 0041;	
    // (ëêÉ) NEWA LETTER II	[2BAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11403, 0x0041 };
    uint32_t const ces[9] = { 0x2BAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_271)
{
    // 11403 0062;	
    // (ëêÉ) NEWA LETTER II	[2BAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11403, 0x0062 };
    uint32_t const ces[9] = { 0x2BAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_272)
{
    // 11404 0021;	
    // (ëêÑ) NEWA LETTER U	[2BB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11404, 0x0021 };
    uint32_t const ces[9] = { 0x2BB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_273)
{
    // 11404 003F;	
    // (ëêÑ) NEWA LETTER U	[2BB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11404, 0x003F };
    uint32_t const ces[9] = { 0x2BB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_274)
{
    // 11404 0061;	
    // (ëêÑ) NEWA LETTER U	[2BB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11404, 0x0061 };
    uint32_t const ces[9] = { 0x2BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_275)
{
    // 11404 0041;	
    // (ëêÑ) NEWA LETTER U	[2BB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11404, 0x0041 };
    uint32_t const ces[9] = { 0x2BB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_276)
{
    // 11404 0062;	
    // (ëêÑ) NEWA LETTER U	[2BB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11404, 0x0062 };
    uint32_t const ces[9] = { 0x2BB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_277)
{
    // 11405 0021;	
    // (ëêÖ) NEWA LETTER UU	[2BB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11405, 0x0021 };
    uint32_t const ces[9] = { 0x2BB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_278)
{
    // 11405 003F;	
    // (ëêÖ) NEWA LETTER UU	[2BB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11405, 0x003F };
    uint32_t const ces[9] = { 0x2BB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_279)
{
    // 11405 0061;	
    // (ëêÖ) NEWA LETTER UU	[2BB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11405, 0x0061 };
    uint32_t const ces[9] = { 0x2BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_280)
{
    // 11405 0041;	
    // (ëêÖ) NEWA LETTER UU	[2BB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11405, 0x0041 };
    uint32_t const ces[9] = { 0x2BB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_281)
{
    // 11405 0062;	
    // (ëêÖ) NEWA LETTER UU	[2BB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11405, 0x0062 };
    uint32_t const ces[9] = { 0x2BB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_282)
{
    // 11406 0021;	
    // (ëêÜ) NEWA LETTER VOCALIC R	[2BB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11406, 0x0021 };
    uint32_t const ces[9] = { 0x2BB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_283)
{
    // 11406 003F;	
    // (ëêÜ) NEWA LETTER VOCALIC R	[2BB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11406, 0x003F };
    uint32_t const ces[9] = { 0x2BB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_284)
{
    // 11406 0061;	
    // (ëêÜ) NEWA LETTER VOCALIC R	[2BB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11406, 0x0061 };
    uint32_t const ces[9] = { 0x2BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_285)
{
    // 11406 0041;	
    // (ëêÜ) NEWA LETTER VOCALIC R	[2BB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11406, 0x0041 };
    uint32_t const ces[9] = { 0x2BB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_286)
{
    // 11406 0062;	
    // (ëêÜ) NEWA LETTER VOCALIC R	[2BB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11406, 0x0062 };
    uint32_t const ces[9] = { 0x2BB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_287)
{
    // 11407 0021;	
    // (ëêá) NEWA LETTER VOCALIC RR	[2BB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11407, 0x0021 };
    uint32_t const ces[9] = { 0x2BB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_288)
{
    // 11407 003F;	
    // (ëêá) NEWA LETTER VOCALIC RR	[2BB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11407, 0x003F };
    uint32_t const ces[9] = { 0x2BB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_289)
{
    // 11407 0061;	
    // (ëêá) NEWA LETTER VOCALIC RR	[2BB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11407, 0x0061 };
    uint32_t const ces[9] = { 0x2BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_290)
{
    // 11407 0041;	
    // (ëêá) NEWA LETTER VOCALIC RR	[2BB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11407, 0x0041 };
    uint32_t const ces[9] = { 0x2BB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_291)
{
    // 11407 0062;	
    // (ëêá) NEWA LETTER VOCALIC RR	[2BB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11407, 0x0062 };
    uint32_t const ces[9] = { 0x2BB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_292)
{
    // 11408 0021;	
    // (ëêà) NEWA LETTER VOCALIC L	[2BB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11408, 0x0021 };
    uint32_t const ces[9] = { 0x2BB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_293)
{
    // 11408 003F;	
    // (ëêà) NEWA LETTER VOCALIC L	[2BB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11408, 0x003F };
    uint32_t const ces[9] = { 0x2BB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_294)
{
    // 11408 0061;	
    // (ëêà) NEWA LETTER VOCALIC L	[2BB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11408, 0x0061 };
    uint32_t const ces[9] = { 0x2BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_295)
{
    // 11408 0041;	
    // (ëêà) NEWA LETTER VOCALIC L	[2BB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11408, 0x0041 };
    uint32_t const ces[9] = { 0x2BB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_296)
{
    // 11408 0062;	
    // (ëêà) NEWA LETTER VOCALIC L	[2BB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11408, 0x0062 };
    uint32_t const ces[9] = { 0x2BB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_297)
{
    // 11409 0021;	
    // (ëêâ) NEWA LETTER VOCALIC LL	[2BB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11409, 0x0021 };
    uint32_t const ces[9] = { 0x2BB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_298)
{
    // 11409 003F;	
    // (ëêâ) NEWA LETTER VOCALIC LL	[2BB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11409, 0x003F };
    uint32_t const ces[9] = { 0x2BB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_299)
{
    // 11409 0061;	
    // (ëêâ) NEWA LETTER VOCALIC LL	[2BB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11409, 0x0061 };
    uint32_t const ces[9] = { 0x2BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_300)
{
    // 11409 0041;	
    // (ëêâ) NEWA LETTER VOCALIC LL	[2BB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11409, 0x0041 };
    uint32_t const ces[9] = { 0x2BB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_301)
{
    // 11409 0062;	
    // (ëêâ) NEWA LETTER VOCALIC LL	[2BB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11409, 0x0062 };
    uint32_t const ces[9] = { 0x2BB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_302)
{
    // 1140A 0021;	
    // (ëêä) NEWA LETTER E	[2BB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140A, 0x0021 };
    uint32_t const ces[9] = { 0x2BB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_303)
{
    // 1140A 003F;	
    // (ëêä) NEWA LETTER E	[2BB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140A, 0x003F };
    uint32_t const ces[9] = { 0x2BB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_304)
{
    // 1140A 0061;	
    // (ëêä) NEWA LETTER E	[2BB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140A, 0x0061 };
    uint32_t const ces[9] = { 0x2BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_305)
{
    // 1140A 0041;	
    // (ëêä) NEWA LETTER E	[2BB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140A, 0x0041 };
    uint32_t const ces[9] = { 0x2BB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_306)
{
    // 1140A 0062;	
    // (ëêä) NEWA LETTER E	[2BB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140A, 0x0062 };
    uint32_t const ces[9] = { 0x2BB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_307)
{
    // 1140B 0021;	
    // (ëêã) NEWA LETTER AI	[2BB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140B, 0x0021 };
    uint32_t const ces[9] = { 0x2BB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_308)
{
    // 1140B 003F;	
    // (ëêã) NEWA LETTER AI	[2BB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140B, 0x003F };
    uint32_t const ces[9] = { 0x2BB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_309)
{
    // 1140B 0061;	
    // (ëêã) NEWA LETTER AI	[2BB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140B, 0x0061 };
    uint32_t const ces[9] = { 0x2BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_310)
{
    // 1140B 0041;	
    // (ëêã) NEWA LETTER AI	[2BB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140B, 0x0041 };
    uint32_t const ces[9] = { 0x2BB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_311)
{
    // 1140B 0062;	
    // (ëêã) NEWA LETTER AI	[2BB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140B, 0x0062 };
    uint32_t const ces[9] = { 0x2BB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_312)
{
    // 1140C 0021;	
    // (ëêå) NEWA LETTER O	[2BB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140C, 0x0021 };
    uint32_t const ces[9] = { 0x2BB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_313)
{
    // 1140C 003F;	
    // (ëêå) NEWA LETTER O	[2BB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140C, 0x003F };
    uint32_t const ces[9] = { 0x2BB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_314)
{
    // 1140C 0061;	
    // (ëêå) NEWA LETTER O	[2BB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140C, 0x0061 };
    uint32_t const ces[9] = { 0x2BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_315)
{
    // 1140C 0041;	
    // (ëêå) NEWA LETTER O	[2BB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140C, 0x0041 };
    uint32_t const ces[9] = { 0x2BB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_316)
{
    // 1140C 0062;	
    // (ëêå) NEWA LETTER O	[2BB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140C, 0x0062 };
    uint32_t const ces[9] = { 0x2BB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_317)
{
    // 1140D 0021;	
    // (ëêç) NEWA LETTER AU	[2BB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140D, 0x0021 };
    uint32_t const ces[9] = { 0x2BB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_318)
{
    // 1140D 003F;	
    // (ëêç) NEWA LETTER AU	[2BB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140D, 0x003F };
    uint32_t const ces[9] = { 0x2BB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_319)
{
    // 1140D 0061;	
    // (ëêç) NEWA LETTER AU	[2BB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140D, 0x0061 };
    uint32_t const ces[9] = { 0x2BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_320)
{
    // 1140D 0041;	
    // (ëêç) NEWA LETTER AU	[2BB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140D, 0x0041 };
    uint32_t const ces[9] = { 0x2BB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_321)
{
    // 1140D 0062;	
    // (ëêç) NEWA LETTER AU	[2BB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140D, 0x0062 };
    uint32_t const ces[9] = { 0x2BB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_322)
{
    // 1140E 0021;	
    // (ëêé) NEWA LETTER KA	[2BBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140E, 0x0021 };
    uint32_t const ces[9] = { 0x2BBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_323)
{
    // 1140E 003F;	
    // (ëêé) NEWA LETTER KA	[2BBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140E, 0x003F };
    uint32_t const ces[9] = { 0x2BBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_324)
{
    // 1140E 0061;	
    // (ëêé) NEWA LETTER KA	[2BBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140E, 0x0061 };
    uint32_t const ces[9] = { 0x2BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_325)
{
    // 1140E 0041;	
    // (ëêé) NEWA LETTER KA	[2BBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140E, 0x0041 };
    uint32_t const ces[9] = { 0x2BBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_326)
{
    // 1140E 0062;	
    // (ëêé) NEWA LETTER KA	[2BBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140E, 0x0062 };
    uint32_t const ces[9] = { 0x2BBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_327)
{
    // 1140F 0021;	
    // (ëêè) NEWA LETTER KHA	[2BBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140F, 0x0021 };
    uint32_t const ces[9] = { 0x2BBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_328)
{
    // 1140F 003F;	
    // (ëêè) NEWA LETTER KHA	[2BBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140F, 0x003F };
    uint32_t const ces[9] = { 0x2BBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_329)
{
    // 1140F 0061;	
    // (ëêè) NEWA LETTER KHA	[2BBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140F, 0x0061 };
    uint32_t const ces[9] = { 0x2BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_330)
{
    // 1140F 0041;	
    // (ëêè) NEWA LETTER KHA	[2BBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140F, 0x0041 };
    uint32_t const ces[9] = { 0x2BBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_331)
{
    // 1140F 0062;	
    // (ëêè) NEWA LETTER KHA	[2BBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140F, 0x0062 };
    uint32_t const ces[9] = { 0x2BBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_332)
{
    // 11410 0021;	
    // (ëêê) NEWA LETTER GA	[2BBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11410, 0x0021 };
    uint32_t const ces[9] = { 0x2BBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_333)
{
    // 11410 003F;	
    // (ëêê) NEWA LETTER GA	[2BBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11410, 0x003F };
    uint32_t const ces[9] = { 0x2BBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_334)
{
    // 11410 0061;	
    // (ëêê) NEWA LETTER GA	[2BBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11410, 0x0061 };
    uint32_t const ces[9] = { 0x2BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_335)
{
    // 11410 0041;	
    // (ëêê) NEWA LETTER GA	[2BBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11410, 0x0041 };
    uint32_t const ces[9] = { 0x2BBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_336)
{
    // 11410 0062;	
    // (ëêê) NEWA LETTER GA	[2BBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11410, 0x0062 };
    uint32_t const ces[9] = { 0x2BBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_337)
{
    // 11411 0021;	
    // (ëêë) NEWA LETTER GHA	[2BBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11411, 0x0021 };
    uint32_t const ces[9] = { 0x2BBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_338)
{
    // 11411 003F;	
    // (ëêë) NEWA LETTER GHA	[2BBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11411, 0x003F };
    uint32_t const ces[9] = { 0x2BBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_339)
{
    // 11411 0061;	
    // (ëêë) NEWA LETTER GHA	[2BBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11411, 0x0061 };
    uint32_t const ces[9] = { 0x2BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_340)
{
    // 11411 0041;	
    // (ëêë) NEWA LETTER GHA	[2BBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11411, 0x0041 };
    uint32_t const ces[9] = { 0x2BBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_341)
{
    // 11411 0062;	
    // (ëêë) NEWA LETTER GHA	[2BBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11411, 0x0062 };
    uint32_t const ces[9] = { 0x2BBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_342)
{
    // 11412 0021;	
    // (ëêí) NEWA LETTER NGA	[2BBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11412, 0x0021 };
    uint32_t const ces[9] = { 0x2BBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_343)
{
    // 11412 003F;	
    // (ëêí) NEWA LETTER NGA	[2BBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11412, 0x003F };
    uint32_t const ces[9] = { 0x2BBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_344)
{
    // 11412 0061;	
    // (ëêí) NEWA LETTER NGA	[2BBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11412, 0x0061 };
    uint32_t const ces[9] = { 0x2BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_345)
{
    // 11412 0041;	
    // (ëêí) NEWA LETTER NGA	[2BBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11412, 0x0041 };
    uint32_t const ces[9] = { 0x2BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_346)
{
    // 11412 0062;	
    // (ëêí) NEWA LETTER NGA	[2BBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11412, 0x0062 };
    uint32_t const ces[9] = { 0x2BBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_347)
{
    // 11413 0021;	
    // (ëêì) NEWA LETTER NGHA	[2BBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11413, 0x0021 };
    uint32_t const ces[9] = { 0x2BBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_348)
{
    // 11413 003F;	
    // (ëêì) NEWA LETTER NGHA	[2BBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11413, 0x003F };
    uint32_t const ces[9] = { 0x2BBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_349)
{
    // 11413 0061;	
    // (ëêì) NEWA LETTER NGHA	[2BBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11413, 0x0061 };
    uint32_t const ces[9] = { 0x2BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_350)
{
    // 11413 0041;	
    // (ëêì) NEWA LETTER NGHA	[2BBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11413, 0x0041 };
    uint32_t const ces[9] = { 0x2BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_351)
{
    // 11413 0062;	
    // (ëêì) NEWA LETTER NGHA	[2BBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11413, 0x0062 };
    uint32_t const ces[9] = { 0x2BBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_352)
{
    // 11414 0021;	
    // (ëêî) NEWA LETTER CA	[2BC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11414, 0x0021 };
    uint32_t const ces[9] = { 0x2BC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_353)
{
    // 11414 003F;	
    // (ëêî) NEWA LETTER CA	[2BC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11414, 0x003F };
    uint32_t const ces[9] = { 0x2BC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_354)
{
    // 11414 0061;	
    // (ëêî) NEWA LETTER CA	[2BC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11414, 0x0061 };
    uint32_t const ces[9] = { 0x2BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_355)
{
    // 11414 0041;	
    // (ëêî) NEWA LETTER CA	[2BC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11414, 0x0041 };
    uint32_t const ces[9] = { 0x2BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_356)
{
    // 11414 0062;	
    // (ëêî) NEWA LETTER CA	[2BC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11414, 0x0062 };
    uint32_t const ces[9] = { 0x2BC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_357)
{
    // 11415 0021;	
    // (ëêï) NEWA LETTER CHA	[2BC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11415, 0x0021 };
    uint32_t const ces[9] = { 0x2BC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_358)
{
    // 11415 003F;	
    // (ëêï) NEWA LETTER CHA	[2BC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11415, 0x003F };
    uint32_t const ces[9] = { 0x2BC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_359)
{
    // 11415 0061;	
    // (ëêï) NEWA LETTER CHA	[2BC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11415, 0x0061 };
    uint32_t const ces[9] = { 0x2BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_360)
{
    // 11415 0041;	
    // (ëêï) NEWA LETTER CHA	[2BC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11415, 0x0041 };
    uint32_t const ces[9] = { 0x2BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_361)
{
    // 11415 0062;	
    // (ëêï) NEWA LETTER CHA	[2BC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11415, 0x0062 };
    uint32_t const ces[9] = { 0x2BC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_362)
{
    // 11416 0021;	
    // (ëêñ) NEWA LETTER JA	[2BC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11416, 0x0021 };
    uint32_t const ces[9] = { 0x2BC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_363)
{
    // 11416 003F;	
    // (ëêñ) NEWA LETTER JA	[2BC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11416, 0x003F };
    uint32_t const ces[9] = { 0x2BC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_364)
{
    // 11416 0061;	
    // (ëêñ) NEWA LETTER JA	[2BC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11416, 0x0061 };
    uint32_t const ces[9] = { 0x2BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_365)
{
    // 11416 0041;	
    // (ëêñ) NEWA LETTER JA	[2BC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11416, 0x0041 };
    uint32_t const ces[9] = { 0x2BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_366)
{
    // 11416 0062;	
    // (ëêñ) NEWA LETTER JA	[2BC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11416, 0x0062 };
    uint32_t const ces[9] = { 0x2BC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_367)
{
    // 11417 0021;	
    // (ëêó) NEWA LETTER JHA	[2BC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11417, 0x0021 };
    uint32_t const ces[9] = { 0x2BC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_368)
{
    // 11417 003F;	
    // (ëêó) NEWA LETTER JHA	[2BC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11417, 0x003F };
    uint32_t const ces[9] = { 0x2BC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_369)
{
    // 11417 0061;	
    // (ëêó) NEWA LETTER JHA	[2BC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11417, 0x0061 };
    uint32_t const ces[9] = { 0x2BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_370)
{
    // 11417 0041;	
    // (ëêó) NEWA LETTER JHA	[2BC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11417, 0x0041 };
    uint32_t const ces[9] = { 0x2BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_371)
{
    // 11417 0062;	
    // (ëêó) NEWA LETTER JHA	[2BC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11417, 0x0062 };
    uint32_t const ces[9] = { 0x2BC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_372)
{
    // 11418 0021;	
    // (ëêò) NEWA LETTER NYA	[2BC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11418, 0x0021 };
    uint32_t const ces[9] = { 0x2BC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_373)
{
    // 11418 003F;	
    // (ëêò) NEWA LETTER NYA	[2BC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11418, 0x003F };
    uint32_t const ces[9] = { 0x2BC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_374)
{
    // 11418 0061;	
    // (ëêò) NEWA LETTER NYA	[2BC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11418, 0x0061 };
    uint32_t const ces[9] = { 0x2BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_375)
{
    // 11418 0041;	
    // (ëêò) NEWA LETTER NYA	[2BC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11418, 0x0041 };
    uint32_t const ces[9] = { 0x2BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_376)
{
    // 11418 0062;	
    // (ëêò) NEWA LETTER NYA	[2BC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11418, 0x0062 };
    uint32_t const ces[9] = { 0x2BC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_377)
{
    // 11419 0021;	
    // (ëêô) NEWA LETTER NYHA	[2BC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11419, 0x0021 };
    uint32_t const ces[9] = { 0x2BC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_378)
{
    // 11419 003F;	
    // (ëêô) NEWA LETTER NYHA	[2BC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11419, 0x003F };
    uint32_t const ces[9] = { 0x2BC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_379)
{
    // 11419 0061;	
    // (ëêô) NEWA LETTER NYHA	[2BC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11419, 0x0061 };
    uint32_t const ces[9] = { 0x2BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_380)
{
    // 11419 0041;	
    // (ëêô) NEWA LETTER NYHA	[2BC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11419, 0x0041 };
    uint32_t const ces[9] = { 0x2BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_381)
{
    // 11419 0062;	
    // (ëêô) NEWA LETTER NYHA	[2BC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11419, 0x0062 };
    uint32_t const ces[9] = { 0x2BC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_382)
{
    // 1141A 0021;	
    // (ëêö) NEWA LETTER TTA	[2BC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141A, 0x0021 };
    uint32_t const ces[9] = { 0x2BC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_383)
{
    // 1141A 003F;	
    // (ëêö) NEWA LETTER TTA	[2BC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141A, 0x003F };
    uint32_t const ces[9] = { 0x2BC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_384)
{
    // 1141A 0061;	
    // (ëêö) NEWA LETTER TTA	[2BC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141A, 0x0061 };
    uint32_t const ces[9] = { 0x2BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_385)
{
    // 1141A 0041;	
    // (ëêö) NEWA LETTER TTA	[2BC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141A, 0x0041 };
    uint32_t const ces[9] = { 0x2BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_386)
{
    // 1141A 0062;	
    // (ëêö) NEWA LETTER TTA	[2BC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141A, 0x0062 };
    uint32_t const ces[9] = { 0x2BC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_387)
{
    // 1141B 0021;	
    // (ëêõ) NEWA LETTER TTHA	[2BC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141B, 0x0021 };
    uint32_t const ces[9] = { 0x2BC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_388)
{
    // 1141B 003F;	
    // (ëêõ) NEWA LETTER TTHA	[2BC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141B, 0x003F };
    uint32_t const ces[9] = { 0x2BC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_389)
{
    // 1141B 0061;	
    // (ëêõ) NEWA LETTER TTHA	[2BC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141B, 0x0061 };
    uint32_t const ces[9] = { 0x2BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_390)
{
    // 1141B 0041;	
    // (ëêõ) NEWA LETTER TTHA	[2BC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141B, 0x0041 };
    uint32_t const ces[9] = { 0x2BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_391)
{
    // 1141B 0062;	
    // (ëêõ) NEWA LETTER TTHA	[2BC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141B, 0x0062 };
    uint32_t const ces[9] = { 0x2BC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_392)
{
    // 1141C 0021;	
    // (ëêú) NEWA LETTER DDA	[2BC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141C, 0x0021 };
    uint32_t const ces[9] = { 0x2BC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_393)
{
    // 1141C 003F;	
    // (ëêú) NEWA LETTER DDA	[2BC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141C, 0x003F };
    uint32_t const ces[9] = { 0x2BC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_394)
{
    // 1141C 0061;	
    // (ëêú) NEWA LETTER DDA	[2BC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141C, 0x0061 };
    uint32_t const ces[9] = { 0x2BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_395)
{
    // 1141C 0041;	
    // (ëêú) NEWA LETTER DDA	[2BC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141C, 0x0041 };
    uint32_t const ces[9] = { 0x2BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_396)
{
    // 1141C 0062;	
    // (ëêú) NEWA LETTER DDA	[2BC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141C, 0x0062 };
    uint32_t const ces[9] = { 0x2BC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_397)
{
    // 1141D 0021;	
    // (ëêù) NEWA LETTER DDHA	[2BC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141D, 0x0021 };
    uint32_t const ces[9] = { 0x2BC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_398)
{
    // 1141D 003F;	
    // (ëêù) NEWA LETTER DDHA	[2BC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141D, 0x003F };
    uint32_t const ces[9] = { 0x2BC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_399)
{
    // 1141D 0061;	
    // (ëêù) NEWA LETTER DDHA	[2BC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141D, 0x0061 };
    uint32_t const ces[9] = { 0x2BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_400)
{
    // 1141D 0041;	
    // (ëêù) NEWA LETTER DDHA	[2BC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141D, 0x0041 };
    uint32_t const ces[9] = { 0x2BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_401)
{
    // 1141D 0062;	
    // (ëêù) NEWA LETTER DDHA	[2BC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141D, 0x0062 };
    uint32_t const ces[9] = { 0x2BC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_402)
{
    // 1141E 0021;	
    // (ëêû) NEWA LETTER NNA	[2BCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141E, 0x0021 };
    uint32_t const ces[9] = { 0x2BCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_403)
{
    // 1141E 003F;	
    // (ëêû) NEWA LETTER NNA	[2BCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141E, 0x003F };
    uint32_t const ces[9] = { 0x2BCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_404)
{
    // 1141E 0061;	
    // (ëêû) NEWA LETTER NNA	[2BCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141E, 0x0061 };
    uint32_t const ces[9] = { 0x2BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_405)
{
    // 1141E 0041;	
    // (ëêû) NEWA LETTER NNA	[2BCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141E, 0x0041 };
    uint32_t const ces[9] = { 0x2BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_406)
{
    // 1141E 0062;	
    // (ëêû) NEWA LETTER NNA	[2BCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141E, 0x0062 };
    uint32_t const ces[9] = { 0x2BCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_407)
{
    // 1141F 0021;	
    // (ëêü) NEWA LETTER TA	[2BCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141F, 0x0021 };
    uint32_t const ces[9] = { 0x2BCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_408)
{
    // 1141F 003F;	
    // (ëêü) NEWA LETTER TA	[2BCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141F, 0x003F };
    uint32_t const ces[9] = { 0x2BCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_409)
{
    // 1141F 0061;	
    // (ëêü) NEWA LETTER TA	[2BCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141F, 0x0061 };
    uint32_t const ces[9] = { 0x2BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_410)
{
    // 1141F 0041;	
    // (ëêü) NEWA LETTER TA	[2BCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141F, 0x0041 };
    uint32_t const ces[9] = { 0x2BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_411)
{
    // 1141F 0062;	
    // (ëêü) NEWA LETTER TA	[2BCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141F, 0x0062 };
    uint32_t const ces[9] = { 0x2BCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_412)
{
    // 11420 0021;	
    // (ëê†) NEWA LETTER THA	[2BCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11420, 0x0021 };
    uint32_t const ces[9] = { 0x2BCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_413)
{
    // 11420 003F;	
    // (ëê†) NEWA LETTER THA	[2BCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11420, 0x003F };
    uint32_t const ces[9] = { 0x2BCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_414)
{
    // 11420 0061;	
    // (ëê†) NEWA LETTER THA	[2BCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11420, 0x0061 };
    uint32_t const ces[9] = { 0x2BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_415)
{
    // 11420 0041;	
    // (ëê†) NEWA LETTER THA	[2BCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11420, 0x0041 };
    uint32_t const ces[9] = { 0x2BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_416)
{
    // 11420 0062;	
    // (ëê†) NEWA LETTER THA	[2BCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11420, 0x0062 };
    uint32_t const ces[9] = { 0x2BCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_417)
{
    // 11421 0021;	
    // (ëê°) NEWA LETTER DA	[2BCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11421, 0x0021 };
    uint32_t const ces[9] = { 0x2BCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_418)
{
    // 11421 003F;	
    // (ëê°) NEWA LETTER DA	[2BCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11421, 0x003F };
    uint32_t const ces[9] = { 0x2BCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_419)
{
    // 11421 0061;	
    // (ëê°) NEWA LETTER DA	[2BCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11421, 0x0061 };
    uint32_t const ces[9] = { 0x2BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_420)
{
    // 11421 0041;	
    // (ëê°) NEWA LETTER DA	[2BCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11421, 0x0041 };
    uint32_t const ces[9] = { 0x2BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_421)
{
    // 11421 0062;	
    // (ëê°) NEWA LETTER DA	[2BCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11421, 0x0062 };
    uint32_t const ces[9] = { 0x2BCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_422)
{
    // 11422 0021;	
    // (ëê¢) NEWA LETTER DHA	[2BCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11422, 0x0021 };
    uint32_t const ces[9] = { 0x2BCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_423)
{
    // 11422 003F;	
    // (ëê¢) NEWA LETTER DHA	[2BCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11422, 0x003F };
    uint32_t const ces[9] = { 0x2BCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_424)
{
    // 11422 0061;	
    // (ëê¢) NEWA LETTER DHA	[2BCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11422, 0x0061 };
    uint32_t const ces[9] = { 0x2BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_425)
{
    // 11422 0041;	
    // (ëê¢) NEWA LETTER DHA	[2BCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11422, 0x0041 };
    uint32_t const ces[9] = { 0x2BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_426)
{
    // 11422 0062;	
    // (ëê¢) NEWA LETTER DHA	[2BCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11422, 0x0062 };
    uint32_t const ces[9] = { 0x2BCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_427)
{
    // 11423 0021;	
    // (ëê£) NEWA LETTER NA	[2BCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11423, 0x0021 };
    uint32_t const ces[9] = { 0x2BCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_428)
{
    // 11423 003F;	
    // (ëê£) NEWA LETTER NA	[2BCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11423, 0x003F };
    uint32_t const ces[9] = { 0x2BCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_429)
{
    // 11423 0061;	
    // (ëê£) NEWA LETTER NA	[2BCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11423, 0x0061 };
    uint32_t const ces[9] = { 0x2BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_430)
{
    // 11423 0041;	
    // (ëê£) NEWA LETTER NA	[2BCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11423, 0x0041 };
    uint32_t const ces[9] = { 0x2BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_431)
{
    // 11423 0062;	
    // (ëê£) NEWA LETTER NA	[2BCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11423, 0x0062 };
    uint32_t const ces[9] = { 0x2BCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_432)
{
    // 11424 0021;	
    // (ëê§) NEWA LETTER NHA	[2BD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11424, 0x0021 };
    uint32_t const ces[9] = { 0x2BD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_433)
{
    // 11424 003F;	
    // (ëê§) NEWA LETTER NHA	[2BD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11424, 0x003F };
    uint32_t const ces[9] = { 0x2BD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_434)
{
    // 11424 0061;	
    // (ëê§) NEWA LETTER NHA	[2BD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11424, 0x0061 };
    uint32_t const ces[9] = { 0x2BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_435)
{
    // 11424 0041;	
    // (ëê§) NEWA LETTER NHA	[2BD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11424, 0x0041 };
    uint32_t const ces[9] = { 0x2BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_436)
{
    // 11424 0062;	
    // (ëê§) NEWA LETTER NHA	[2BD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11424, 0x0062 };
    uint32_t const ces[9] = { 0x2BD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_437)
{
    // 11425 0021;	
    // (ëê•) NEWA LETTER PA	[2BD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11425, 0x0021 };
    uint32_t const ces[9] = { 0x2BD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_438)
{
    // 11425 003F;	
    // (ëê•) NEWA LETTER PA	[2BD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11425, 0x003F };
    uint32_t const ces[9] = { 0x2BD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_439)
{
    // 11425 0061;	
    // (ëê•) NEWA LETTER PA	[2BD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11425, 0x0061 };
    uint32_t const ces[9] = { 0x2BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_440)
{
    // 11425 0041;	
    // (ëê•) NEWA LETTER PA	[2BD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11425, 0x0041 };
    uint32_t const ces[9] = { 0x2BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_441)
{
    // 11425 0062;	
    // (ëê•) NEWA LETTER PA	[2BD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11425, 0x0062 };
    uint32_t const ces[9] = { 0x2BD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_442)
{
    // 11426 0021;	
    // (ëê¶) NEWA LETTER PHA	[2BD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11426, 0x0021 };
    uint32_t const ces[9] = { 0x2BD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_443)
{
    // 11426 003F;	
    // (ëê¶) NEWA LETTER PHA	[2BD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11426, 0x003F };
    uint32_t const ces[9] = { 0x2BD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_444)
{
    // 11426 0061;	
    // (ëê¶) NEWA LETTER PHA	[2BD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11426, 0x0061 };
    uint32_t const ces[9] = { 0x2BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_445)
{
    // 11426 0041;	
    // (ëê¶) NEWA LETTER PHA	[2BD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11426, 0x0041 };
    uint32_t const ces[9] = { 0x2BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_446)
{
    // 11426 0062;	
    // (ëê¶) NEWA LETTER PHA	[2BD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11426, 0x0062 };
    uint32_t const ces[9] = { 0x2BD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_447)
{
    // 11427 0021;	
    // (ëêß) NEWA LETTER BA	[2BD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11427, 0x0021 };
    uint32_t const ces[9] = { 0x2BD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_448)
{
    // 11427 003F;	
    // (ëêß) NEWA LETTER BA	[2BD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11427, 0x003F };
    uint32_t const ces[9] = { 0x2BD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_449)
{
    // 11427 0061;	
    // (ëêß) NEWA LETTER BA	[2BD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11427, 0x0061 };
    uint32_t const ces[9] = { 0x2BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_450)
{
    // 11427 0041;	
    // (ëêß) NEWA LETTER BA	[2BD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11427, 0x0041 };
    uint32_t const ces[9] = { 0x2BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_451)
{
    // 11427 0062;	
    // (ëêß) NEWA LETTER BA	[2BD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11427, 0x0062 };
    uint32_t const ces[9] = { 0x2BD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_452)
{
    // 11428 0021;	
    // (ëê®) NEWA LETTER BHA	[2BD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11428, 0x0021 };
    uint32_t const ces[9] = { 0x2BD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_453)
{
    // 11428 003F;	
    // (ëê®) NEWA LETTER BHA	[2BD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11428, 0x003F };
    uint32_t const ces[9] = { 0x2BD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_454)
{
    // 11428 0061;	
    // (ëê®) NEWA LETTER BHA	[2BD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11428, 0x0061 };
    uint32_t const ces[9] = { 0x2BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_455)
{
    // 11428 0041;	
    // (ëê®) NEWA LETTER BHA	[2BD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11428, 0x0041 };
    uint32_t const ces[9] = { 0x2BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_456)
{
    // 11428 0062;	
    // (ëê®) NEWA LETTER BHA	[2BD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11428, 0x0062 };
    uint32_t const ces[9] = { 0x2BD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_457)
{
    // 11429 0021;	
    // (ëê©) NEWA LETTER MA	[2BD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11429, 0x0021 };
    uint32_t const ces[9] = { 0x2BD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_458)
{
    // 11429 003F;	
    // (ëê©) NEWA LETTER MA	[2BD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11429, 0x003F };
    uint32_t const ces[9] = { 0x2BD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_459)
{
    // 11429 0061;	
    // (ëê©) NEWA LETTER MA	[2BD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11429, 0x0061 };
    uint32_t const ces[9] = { 0x2BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_460)
{
    // 11429 0041;	
    // (ëê©) NEWA LETTER MA	[2BD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11429, 0x0041 };
    uint32_t const ces[9] = { 0x2BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_461)
{
    // 11429 0062;	
    // (ëê©) NEWA LETTER MA	[2BD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11429, 0x0062 };
    uint32_t const ces[9] = { 0x2BD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_462)
{
    // 1142A 0021;	
    // (ëê™) NEWA LETTER MHA	[2BD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142A, 0x0021 };
    uint32_t const ces[9] = { 0x2BD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_463)
{
    // 1142A 003F;	
    // (ëê™) NEWA LETTER MHA	[2BD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142A, 0x003F };
    uint32_t const ces[9] = { 0x2BD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_464)
{
    // 1142A 0061;	
    // (ëê™) NEWA LETTER MHA	[2BD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142A, 0x0061 };
    uint32_t const ces[9] = { 0x2BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_465)
{
    // 1142A 0041;	
    // (ëê™) NEWA LETTER MHA	[2BD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142A, 0x0041 };
    uint32_t const ces[9] = { 0x2BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_466)
{
    // 1142A 0062;	
    // (ëê™) NEWA LETTER MHA	[2BD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142A, 0x0062 };
    uint32_t const ces[9] = { 0x2BD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_467)
{
    // 1142B 0021;	
    // (ëê´) NEWA LETTER YA	[2BD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142B, 0x0021 };
    uint32_t const ces[9] = { 0x2BD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_468)
{
    // 1142B 003F;	
    // (ëê´) NEWA LETTER YA	[2BD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142B, 0x003F };
    uint32_t const ces[9] = { 0x2BD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_469)
{
    // 1142B 0061;	
    // (ëê´) NEWA LETTER YA	[2BD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142B, 0x0061 };
    uint32_t const ces[9] = { 0x2BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_470)
{
    // 1142B 0041;	
    // (ëê´) NEWA LETTER YA	[2BD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142B, 0x0041 };
    uint32_t const ces[9] = { 0x2BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_471)
{
    // 1142B 0062;	
    // (ëê´) NEWA LETTER YA	[2BD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142B, 0x0062 };
    uint32_t const ces[9] = { 0x2BD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_472)
{
    // 1142C 0021;	
    // (ëê¨) NEWA LETTER RA	[2BD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142C, 0x0021 };
    uint32_t const ces[9] = { 0x2BD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_473)
{
    // 1142C 003F;	
    // (ëê¨) NEWA LETTER RA	[2BD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142C, 0x003F };
    uint32_t const ces[9] = { 0x2BD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_474)
{
    // 1142C 0061;	
    // (ëê¨) NEWA LETTER RA	[2BD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142C, 0x0061 };
    uint32_t const ces[9] = { 0x2BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_475)
{
    // 1142C 0041;	
    // (ëê¨) NEWA LETTER RA	[2BD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142C, 0x0041 };
    uint32_t const ces[9] = { 0x2BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_476)
{
    // 1142C 0062;	
    // (ëê¨) NEWA LETTER RA	[2BD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142C, 0x0062 };
    uint32_t const ces[9] = { 0x2BD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_477)
{
    // 1142D 0021;	
    // (ëê≠) NEWA LETTER RHA	[2BD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142D, 0x0021 };
    uint32_t const ces[9] = { 0x2BD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_478)
{
    // 1142D 003F;	
    // (ëê≠) NEWA LETTER RHA	[2BD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142D, 0x003F };
    uint32_t const ces[9] = { 0x2BD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_479)
{
    // 1142D 0061;	
    // (ëê≠) NEWA LETTER RHA	[2BD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142D, 0x0061 };
    uint32_t const ces[9] = { 0x2BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_480)
{
    // 1142D 0041;	
    // (ëê≠) NEWA LETTER RHA	[2BD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142D, 0x0041 };
    uint32_t const ces[9] = { 0x2BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_481)
{
    // 1142D 0062;	
    // (ëê≠) NEWA LETTER RHA	[2BD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142D, 0x0062 };
    uint32_t const ces[9] = { 0x2BD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_482)
{
    // 1142E 0021;	
    // (ëêÆ) NEWA LETTER LA	[2BDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142E, 0x0021 };
    uint32_t const ces[9] = { 0x2BDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_483)
{
    // 1142E 003F;	
    // (ëêÆ) NEWA LETTER LA	[2BDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142E, 0x003F };
    uint32_t const ces[9] = { 0x2BDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_484)
{
    // 1142E 0061;	
    // (ëêÆ) NEWA LETTER LA	[2BDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142E, 0x0061 };
    uint32_t const ces[9] = { 0x2BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_485)
{
    // 1142E 0041;	
    // (ëêÆ) NEWA LETTER LA	[2BDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142E, 0x0041 };
    uint32_t const ces[9] = { 0x2BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_486)
{
    // 1142E 0062;	
    // (ëêÆ) NEWA LETTER LA	[2BDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142E, 0x0062 };
    uint32_t const ces[9] = { 0x2BDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_487)
{
    // 1142F 0021;	
    // (ëêØ) NEWA LETTER LHA	[2BDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142F, 0x0021 };
    uint32_t const ces[9] = { 0x2BDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_488)
{
    // 1142F 003F;	
    // (ëêØ) NEWA LETTER LHA	[2BDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142F, 0x003F };
    uint32_t const ces[9] = { 0x2BDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_489)
{
    // 1142F 0061;	
    // (ëêØ) NEWA LETTER LHA	[2BDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142F, 0x0061 };
    uint32_t const ces[9] = { 0x2BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_490)
{
    // 1142F 0041;	
    // (ëêØ) NEWA LETTER LHA	[2BDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142F, 0x0041 };
    uint32_t const ces[9] = { 0x2BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_491)
{
    // 1142F 0062;	
    // (ëêØ) NEWA LETTER LHA	[2BDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142F, 0x0062 };
    uint32_t const ces[9] = { 0x2BDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_492)
{
    // 11430 0021;	
    // (ëê∞) NEWA LETTER WA	[2BDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11430, 0x0021 };
    uint32_t const ces[9] = { 0x2BDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_493)
{
    // 11430 003F;	
    // (ëê∞) NEWA LETTER WA	[2BDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11430, 0x003F };
    uint32_t const ces[9] = { 0x2BDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_494)
{
    // 11430 0061;	
    // (ëê∞) NEWA LETTER WA	[2BDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11430, 0x0061 };
    uint32_t const ces[9] = { 0x2BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_495)
{
    // 11430 0041;	
    // (ëê∞) NEWA LETTER WA	[2BDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11430, 0x0041 };
    uint32_t const ces[9] = { 0x2BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_496)
{
    // 11430 0062;	
    // (ëê∞) NEWA LETTER WA	[2BDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11430, 0x0062 };
    uint32_t const ces[9] = { 0x2BDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_497)
{
    // 11431 0021;	
    // (ëê±) NEWA LETTER SHA	[2BDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11431, 0x0021 };
    uint32_t const ces[9] = { 0x2BDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_498)
{
    // 11431 003F;	
    // (ëê±) NEWA LETTER SHA	[2BDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11431, 0x003F };
    uint32_t const ces[9] = { 0x2BDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_178_499)
{
    // 11431 0061;	
    // (ëê±) NEWA LETTER SHA	[2BDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11431, 0x0061 };
    uint32_t const ces[9] = { 0x2BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

