// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_064_000)
{
    // 1F987 0041;	
    // (🦇) BAT	[1632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F987, 0x0041 };
    uint32_t const ces[9] = { 0x1632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_001)
{
    // 1F987 0062;	
    // (🦇) BAT	[1632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F987, 0x0062 };
    uint32_t const ces[9] = { 0x1632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_002)
{
    // 1F988 0021;	
    // (🦈) SHARK	[1633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F988, 0x0021 };
    uint32_t const ces[9] = { 0x1633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_003)
{
    // 1F988 003F;	
    // (🦈) SHARK	[1633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F988, 0x003F };
    uint32_t const ces[9] = { 0x1633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_004)
{
    // 1F988 0061;	
    // (🦈) SHARK	[1633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F988, 0x0061 };
    uint32_t const ces[9] = { 0x1633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_005)
{
    // 1F988 0041;	
    // (🦈) SHARK	[1633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F988, 0x0041 };
    uint32_t const ces[9] = { 0x1633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_006)
{
    // 1F988 0062;	
    // (🦈) SHARK	[1633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F988, 0x0062 };
    uint32_t const ces[9] = { 0x1633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_007)
{
    // 1F989 0021;	
    // (🦉) OWL	[1634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F989, 0x0021 };
    uint32_t const ces[9] = { 0x1634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_008)
{
    // 1F989 003F;	
    // (🦉) OWL	[1634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F989, 0x003F };
    uint32_t const ces[9] = { 0x1634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_009)
{
    // 1F989 0061;	
    // (🦉) OWL	[1634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F989, 0x0061 };
    uint32_t const ces[9] = { 0x1634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_010)
{
    // 1F989 0041;	
    // (🦉) OWL	[1634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F989, 0x0041 };
    uint32_t const ces[9] = { 0x1634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_011)
{
    // 1F989 0062;	
    // (🦉) OWL	[1634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F989, 0x0062 };
    uint32_t const ces[9] = { 0x1634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_012)
{
    // 1F98A 0021;	
    // (🦊) FOX FACE	[1635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98A, 0x0021 };
    uint32_t const ces[9] = { 0x1635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_013)
{
    // 1F98A 003F;	
    // (🦊) FOX FACE	[1635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98A, 0x003F };
    uint32_t const ces[9] = { 0x1635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_014)
{
    // 1F98A 0061;	
    // (🦊) FOX FACE	[1635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98A, 0x0061 };
    uint32_t const ces[9] = { 0x1635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_015)
{
    // 1F98A 0041;	
    // (🦊) FOX FACE	[1635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98A, 0x0041 };
    uint32_t const ces[9] = { 0x1635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_016)
{
    // 1F98A 0062;	
    // (🦊) FOX FACE	[1635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98A, 0x0062 };
    uint32_t const ces[9] = { 0x1635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_017)
{
    // 1F98B 0021;	
    // (🦋) BUTTERFLY	[1636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98B, 0x0021 };
    uint32_t const ces[9] = { 0x1636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_018)
{
    // 1F98B 003F;	
    // (🦋) BUTTERFLY	[1636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98B, 0x003F };
    uint32_t const ces[9] = { 0x1636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_019)
{
    // 1F98B 0061;	
    // (🦋) BUTTERFLY	[1636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98B, 0x0061 };
    uint32_t const ces[9] = { 0x1636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_020)
{
    // 1F98B 0041;	
    // (🦋) BUTTERFLY	[1636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98B, 0x0041 };
    uint32_t const ces[9] = { 0x1636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_021)
{
    // 1F98B 0062;	
    // (🦋) BUTTERFLY	[1636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98B, 0x0062 };
    uint32_t const ces[9] = { 0x1636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_022)
{
    // 1F98C 0021;	
    // (🦌) DEER	[1637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98C, 0x0021 };
    uint32_t const ces[9] = { 0x1637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_023)
{
    // 1F98C 003F;	
    // (🦌) DEER	[1637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98C, 0x003F };
    uint32_t const ces[9] = { 0x1637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_024)
{
    // 1F98C 0061;	
    // (🦌) DEER	[1637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98C, 0x0061 };
    uint32_t const ces[9] = { 0x1637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_025)
{
    // 1F98C 0041;	
    // (🦌) DEER	[1637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98C, 0x0041 };
    uint32_t const ces[9] = { 0x1637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_026)
{
    // 1F98C 0062;	
    // (🦌) DEER	[1637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98C, 0x0062 };
    uint32_t const ces[9] = { 0x1637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_027)
{
    // 1F98D 0021;	
    // (🦍) GORILLA	[1638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98D, 0x0021 };
    uint32_t const ces[9] = { 0x1638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_028)
{
    // 1F98D 003F;	
    // (🦍) GORILLA	[1638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98D, 0x003F };
    uint32_t const ces[9] = { 0x1638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_029)
{
    // 1F98D 0061;	
    // (🦍) GORILLA	[1638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98D, 0x0061 };
    uint32_t const ces[9] = { 0x1638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_030)
{
    // 1F98D 0041;	
    // (🦍) GORILLA	[1638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98D, 0x0041 };
    uint32_t const ces[9] = { 0x1638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_031)
{
    // 1F98D 0062;	
    // (🦍) GORILLA	[1638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98D, 0x0062 };
    uint32_t const ces[9] = { 0x1638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_032)
{
    // 1F98E 0021;	
    // (🦎) LIZARD	[1639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98E, 0x0021 };
    uint32_t const ces[9] = { 0x1639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_033)
{
    // 1F98E 003F;	
    // (🦎) LIZARD	[1639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98E, 0x003F };
    uint32_t const ces[9] = { 0x1639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_034)
{
    // 1F98E 0061;	
    // (🦎) LIZARD	[1639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98E, 0x0061 };
    uint32_t const ces[9] = { 0x1639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_035)
{
    // 1F98E 0041;	
    // (🦎) LIZARD	[1639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98E, 0x0041 };
    uint32_t const ces[9] = { 0x1639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_036)
{
    // 1F98E 0062;	
    // (🦎) LIZARD	[1639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98E, 0x0062 };
    uint32_t const ces[9] = { 0x1639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_037)
{
    // 1F98F 0021;	
    // (🦏) RHINOCEROS	[163A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98F, 0x0021 };
    uint32_t const ces[9] = { 0x163A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_038)
{
    // 1F98F 003F;	
    // (🦏) RHINOCEROS	[163A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98F, 0x003F };
    uint32_t const ces[9] = { 0x163A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_039)
{
    // 1F98F 0061;	
    // (🦏) RHINOCEROS	[163A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98F, 0x0061 };
    uint32_t const ces[9] = { 0x163A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_040)
{
    // 1F98F 0041;	
    // (🦏) RHINOCEROS	[163A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F98F, 0x0041 };
    uint32_t const ces[9] = { 0x163A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_041)
{
    // 1F98F 0062;	
    // (🦏) RHINOCEROS	[163A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F98F, 0x0062 };
    uint32_t const ces[9] = { 0x163A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_042)
{
    // 1F990 0021;	
    // (🦐) SHRIMP	[163B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F990, 0x0021 };
    uint32_t const ces[9] = { 0x163B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_043)
{
    // 1F990 003F;	
    // (🦐) SHRIMP	[163B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F990, 0x003F };
    uint32_t const ces[9] = { 0x163B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_044)
{
    // 1F990 0061;	
    // (🦐) SHRIMP	[163B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F990, 0x0061 };
    uint32_t const ces[9] = { 0x163B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_045)
{
    // 1F990 0041;	
    // (🦐) SHRIMP	[163B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F990, 0x0041 };
    uint32_t const ces[9] = { 0x163B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_046)
{
    // 1F990 0062;	
    // (🦐) SHRIMP	[163B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F990, 0x0062 };
    uint32_t const ces[9] = { 0x163B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_047)
{
    // 1F991 0021;	
    // (🦑) SQUID	[163C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F991, 0x0021 };
    uint32_t const ces[9] = { 0x163C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_048)
{
    // 1F991 003F;	
    // (🦑) SQUID	[163C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F991, 0x003F };
    uint32_t const ces[9] = { 0x163C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_049)
{
    // 1F991 0061;	
    // (🦑) SQUID	[163C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F991, 0x0061 };
    uint32_t const ces[9] = { 0x163C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_050)
{
    // 1F991 0041;	
    // (🦑) SQUID	[163C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F991, 0x0041 };
    uint32_t const ces[9] = { 0x163C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_051)
{
    // 1F991 0062;	
    // (🦑) SQUID	[163C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F991, 0x0062 };
    uint32_t const ces[9] = { 0x163C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_052)
{
    // 1F992 0021;	
    // (🦒) GIRAFFE FACE	[163D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F992, 0x0021 };
    uint32_t const ces[9] = { 0x163D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_053)
{
    // 1F992 003F;	
    // (🦒) GIRAFFE FACE	[163D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F992, 0x003F };
    uint32_t const ces[9] = { 0x163D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_054)
{
    // 1F992 0061;	
    // (🦒) GIRAFFE FACE	[163D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F992, 0x0061 };
    uint32_t const ces[9] = { 0x163D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_055)
{
    // 1F992 0041;	
    // (🦒) GIRAFFE FACE	[163D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F992, 0x0041 };
    uint32_t const ces[9] = { 0x163D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_056)
{
    // 1F992 0062;	
    // (🦒) GIRAFFE FACE	[163D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F992, 0x0062 };
    uint32_t const ces[9] = { 0x163D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_057)
{
    // 1F993 0021;	
    // (🦓) ZEBRA FACE	[163E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F993, 0x0021 };
    uint32_t const ces[9] = { 0x163E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_058)
{
    // 1F993 003F;	
    // (🦓) ZEBRA FACE	[163E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F993, 0x003F };
    uint32_t const ces[9] = { 0x163E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_059)
{
    // 1F993 0061;	
    // (🦓) ZEBRA FACE	[163E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F993, 0x0061 };
    uint32_t const ces[9] = { 0x163E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_060)
{
    // 1F993 0041;	
    // (🦓) ZEBRA FACE	[163E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F993, 0x0041 };
    uint32_t const ces[9] = { 0x163E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_061)
{
    // 1F993 0062;	
    // (🦓) ZEBRA FACE	[163E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F993, 0x0062 };
    uint32_t const ces[9] = { 0x163E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_062)
{
    // 1F994 0021;	
    // (🦔) HEDGEHOG	[163F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F994, 0x0021 };
    uint32_t const ces[9] = { 0x163F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_063)
{
    // 1F994 003F;	
    // (🦔) HEDGEHOG	[163F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F994, 0x003F };
    uint32_t const ces[9] = { 0x163F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_064)
{
    // 1F994 0061;	
    // (🦔) HEDGEHOG	[163F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F994, 0x0061 };
    uint32_t const ces[9] = { 0x163F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_065)
{
    // 1F994 0041;	
    // (🦔) HEDGEHOG	[163F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F994, 0x0041 };
    uint32_t const ces[9] = { 0x163F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_066)
{
    // 1F994 0062;	
    // (🦔) HEDGEHOG	[163F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F994, 0x0062 };
    uint32_t const ces[9] = { 0x163F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_067)
{
    // 1F995 0021;	
    // (🦕) SAUROPOD	[1640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F995, 0x0021 };
    uint32_t const ces[9] = { 0x1640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_068)
{
    // 1F995 003F;	
    // (🦕) SAUROPOD	[1640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F995, 0x003F };
    uint32_t const ces[9] = { 0x1640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_069)
{
    // 1F995 0061;	
    // (🦕) SAUROPOD	[1640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F995, 0x0061 };
    uint32_t const ces[9] = { 0x1640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_070)
{
    // 1F995 0041;	
    // (🦕) SAUROPOD	[1640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F995, 0x0041 };
    uint32_t const ces[9] = { 0x1640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_071)
{
    // 1F995 0062;	
    // (🦕) SAUROPOD	[1640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F995, 0x0062 };
    uint32_t const ces[9] = { 0x1640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_072)
{
    // 1F996 0021;	
    // (🦖) T-REX	[1641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F996, 0x0021 };
    uint32_t const ces[9] = { 0x1641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_073)
{
    // 1F996 003F;	
    // (🦖) T-REX	[1641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F996, 0x003F };
    uint32_t const ces[9] = { 0x1641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_074)
{
    // 1F996 0061;	
    // (🦖) T-REX	[1641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F996, 0x0061 };
    uint32_t const ces[9] = { 0x1641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_075)
{
    // 1F996 0041;	
    // (🦖) T-REX	[1641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F996, 0x0041 };
    uint32_t const ces[9] = { 0x1641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_076)
{
    // 1F996 0062;	
    // (🦖) T-REX	[1641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F996, 0x0062 };
    uint32_t const ces[9] = { 0x1641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_077)
{
    // 1F997 0021;	
    // (🦗) CRICKET	[1642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F997, 0x0021 };
    uint32_t const ces[9] = { 0x1642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_078)
{
    // 1F997 003F;	
    // (🦗) CRICKET	[1642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F997, 0x003F };
    uint32_t const ces[9] = { 0x1642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_079)
{
    // 1F997 0061;	
    // (🦗) CRICKET	[1642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F997, 0x0061 };
    uint32_t const ces[9] = { 0x1642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_080)
{
    // 1F997 0041;	
    // (🦗) CRICKET	[1642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F997, 0x0041 };
    uint32_t const ces[9] = { 0x1642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_081)
{
    // 1F997 0062;	
    // (🦗) CRICKET	[1642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F997, 0x0062 };
    uint32_t const ces[9] = { 0x1642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_082)
{
    // 1F9C0 0021;	
    // (🧀) CHEESE WEDGE	[1643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9C0, 0x0021 };
    uint32_t const ces[9] = { 0x1643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_083)
{
    // 1F9C0 003F;	
    // (🧀) CHEESE WEDGE	[1643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9C0, 0x003F };
    uint32_t const ces[9] = { 0x1643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_084)
{
    // 1F9C0 0061;	
    // (🧀) CHEESE WEDGE	[1643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9C0, 0x0061 };
    uint32_t const ces[9] = { 0x1643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_085)
{
    // 1F9C0 0041;	
    // (🧀) CHEESE WEDGE	[1643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9C0, 0x0041 };
    uint32_t const ces[9] = { 0x1643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_086)
{
    // 1F9C0 0062;	
    // (🧀) CHEESE WEDGE	[1643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9C0, 0x0062 };
    uint32_t const ces[9] = { 0x1643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_087)
{
    // 1F9D0 0021;	
    // (🧐) FACE WITH MONOCLE	[1644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D0, 0x0021 };
    uint32_t const ces[9] = { 0x1644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_088)
{
    // 1F9D0 003F;	
    // (🧐) FACE WITH MONOCLE	[1644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D0, 0x003F };
    uint32_t const ces[9] = { 0x1644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_089)
{
    // 1F9D0 0061;	
    // (🧐) FACE WITH MONOCLE	[1644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D0, 0x0061 };
    uint32_t const ces[9] = { 0x1644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_090)
{
    // 1F9D0 0041;	
    // (🧐) FACE WITH MONOCLE	[1644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D0, 0x0041 };
    uint32_t const ces[9] = { 0x1644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_091)
{
    // 1F9D0 0062;	
    // (🧐) FACE WITH MONOCLE	[1644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D0, 0x0062 };
    uint32_t const ces[9] = { 0x1644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_092)
{
    // 1F9D1 0021;	
    // (🧑) ADULT	[1645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D1, 0x0021 };
    uint32_t const ces[9] = { 0x1645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_093)
{
    // 1F9D1 003F;	
    // (🧑) ADULT	[1645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D1, 0x003F };
    uint32_t const ces[9] = { 0x1645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_094)
{
    // 1F9D1 0061;	
    // (🧑) ADULT	[1645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D1, 0x0061 };
    uint32_t const ces[9] = { 0x1645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_095)
{
    // 1F9D1 0041;	
    // (🧑) ADULT	[1645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D1, 0x0041 };
    uint32_t const ces[9] = { 0x1645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_096)
{
    // 1F9D1 0062;	
    // (🧑) ADULT	[1645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D1, 0x0062 };
    uint32_t const ces[9] = { 0x1645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_097)
{
    // 1F9D2 0021;	
    // (🧒) CHILD	[1646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D2, 0x0021 };
    uint32_t const ces[9] = { 0x1646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_098)
{
    // 1F9D2 003F;	
    // (🧒) CHILD	[1646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D2, 0x003F };
    uint32_t const ces[9] = { 0x1646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_099)
{
    // 1F9D2 0061;	
    // (🧒) CHILD	[1646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D2, 0x0061 };
    uint32_t const ces[9] = { 0x1646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_100)
{
    // 1F9D2 0041;	
    // (🧒) CHILD	[1646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D2, 0x0041 };
    uint32_t const ces[9] = { 0x1646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_101)
{
    // 1F9D2 0062;	
    // (🧒) CHILD	[1646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D2, 0x0062 };
    uint32_t const ces[9] = { 0x1646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_102)
{
    // 1F9D3 0021;	
    // (🧓) OLDER ADULT	[1647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D3, 0x0021 };
    uint32_t const ces[9] = { 0x1647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_103)
{
    // 1F9D3 003F;	
    // (🧓) OLDER ADULT	[1647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D3, 0x003F };
    uint32_t const ces[9] = { 0x1647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_104)
{
    // 1F9D3 0061;	
    // (🧓) OLDER ADULT	[1647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D3, 0x0061 };
    uint32_t const ces[9] = { 0x1647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_105)
{
    // 1F9D3 0041;	
    // (🧓) OLDER ADULT	[1647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D3, 0x0041 };
    uint32_t const ces[9] = { 0x1647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_106)
{
    // 1F9D3 0062;	
    // (🧓) OLDER ADULT	[1647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D3, 0x0062 };
    uint32_t const ces[9] = { 0x1647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_107)
{
    // 1F9D4 0021;	
    // (🧔) BEARDED PERSON	[1648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D4, 0x0021 };
    uint32_t const ces[9] = { 0x1648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_108)
{
    // 1F9D4 003F;	
    // (🧔) BEARDED PERSON	[1648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D4, 0x003F };
    uint32_t const ces[9] = { 0x1648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_109)
{
    // 1F9D4 0061;	
    // (🧔) BEARDED PERSON	[1648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D4, 0x0061 };
    uint32_t const ces[9] = { 0x1648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_110)
{
    // 1F9D4 0041;	
    // (🧔) BEARDED PERSON	[1648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D4, 0x0041 };
    uint32_t const ces[9] = { 0x1648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_111)
{
    // 1F9D4 0062;	
    // (🧔) BEARDED PERSON	[1648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D4, 0x0062 };
    uint32_t const ces[9] = { 0x1648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_112)
{
    // 1F9D5 0021;	
    // (🧕) PERSON WITH HEADSCARF	[1649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D5, 0x0021 };
    uint32_t const ces[9] = { 0x1649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_113)
{
    // 1F9D5 003F;	
    // (🧕) PERSON WITH HEADSCARF	[1649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D5, 0x003F };
    uint32_t const ces[9] = { 0x1649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_114)
{
    // 1F9D5 0061;	
    // (🧕) PERSON WITH HEADSCARF	[1649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D5, 0x0061 };
    uint32_t const ces[9] = { 0x1649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_115)
{
    // 1F9D5 0041;	
    // (🧕) PERSON WITH HEADSCARF	[1649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D5, 0x0041 };
    uint32_t const ces[9] = { 0x1649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_116)
{
    // 1F9D5 0062;	
    // (🧕) PERSON WITH HEADSCARF	[1649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D5, 0x0062 };
    uint32_t const ces[9] = { 0x1649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_117)
{
    // 1F9D6 0021;	
    // (🧖) PERSON IN STEAMY ROOM	[164A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D6, 0x0021 };
    uint32_t const ces[9] = { 0x164A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_118)
{
    // 1F9D6 003F;	
    // (🧖) PERSON IN STEAMY ROOM	[164A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D6, 0x003F };
    uint32_t const ces[9] = { 0x164A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_119)
{
    // 1F9D6 0061;	
    // (🧖) PERSON IN STEAMY ROOM	[164A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D6, 0x0061 };
    uint32_t const ces[9] = { 0x164A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_120)
{
    // 1F9D6 0041;	
    // (🧖) PERSON IN STEAMY ROOM	[164A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D6, 0x0041 };
    uint32_t const ces[9] = { 0x164A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_121)
{
    // 1F9D6 0062;	
    // (🧖) PERSON IN STEAMY ROOM	[164A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D6, 0x0062 };
    uint32_t const ces[9] = { 0x164A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_122)
{
    // 1F9D7 0021;	
    // (🧗) PERSON CLIMBING	[164B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D7, 0x0021 };
    uint32_t const ces[9] = { 0x164B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_123)
{
    // 1F9D7 003F;	
    // (🧗) PERSON CLIMBING	[164B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D7, 0x003F };
    uint32_t const ces[9] = { 0x164B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_124)
{
    // 1F9D7 0061;	
    // (🧗) PERSON CLIMBING	[164B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D7, 0x0061 };
    uint32_t const ces[9] = { 0x164B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_125)
{
    // 1F9D7 0041;	
    // (🧗) PERSON CLIMBING	[164B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D7, 0x0041 };
    uint32_t const ces[9] = { 0x164B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_126)
{
    // 1F9D7 0062;	
    // (🧗) PERSON CLIMBING	[164B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D7, 0x0062 };
    uint32_t const ces[9] = { 0x164B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_127)
{
    // 1F9D8 0021;	
    // (🧘) PERSON IN LOTUS POSITION	[164C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D8, 0x0021 };
    uint32_t const ces[9] = { 0x164C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_128)
{
    // 1F9D8 003F;	
    // (🧘) PERSON IN LOTUS POSITION	[164C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D8, 0x003F };
    uint32_t const ces[9] = { 0x164C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_129)
{
    // 1F9D8 0061;	
    // (🧘) PERSON IN LOTUS POSITION	[164C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D8, 0x0061 };
    uint32_t const ces[9] = { 0x164C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_130)
{
    // 1F9D8 0041;	
    // (🧘) PERSON IN LOTUS POSITION	[164C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D8, 0x0041 };
    uint32_t const ces[9] = { 0x164C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_131)
{
    // 1F9D8 0062;	
    // (🧘) PERSON IN LOTUS POSITION	[164C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D8, 0x0062 };
    uint32_t const ces[9] = { 0x164C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_132)
{
    // 1F9D9 0021;	
    // (🧙) MAGE	[164D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D9, 0x0021 };
    uint32_t const ces[9] = { 0x164D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_133)
{
    // 1F9D9 003F;	
    // (🧙) MAGE	[164D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D9, 0x003F };
    uint32_t const ces[9] = { 0x164D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_134)
{
    // 1F9D9 0061;	
    // (🧙) MAGE	[164D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D9, 0x0061 };
    uint32_t const ces[9] = { 0x164D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_135)
{
    // 1F9D9 0041;	
    // (🧙) MAGE	[164D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9D9, 0x0041 };
    uint32_t const ces[9] = { 0x164D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_136)
{
    // 1F9D9 0062;	
    // (🧙) MAGE	[164D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9D9, 0x0062 };
    uint32_t const ces[9] = { 0x164D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_137)
{
    // 1F9DA 0021;	
    // (🧚) FAIRY	[164E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DA, 0x0021 };
    uint32_t const ces[9] = { 0x164E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_138)
{
    // 1F9DA 003F;	
    // (🧚) FAIRY	[164E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DA, 0x003F };
    uint32_t const ces[9] = { 0x164E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_139)
{
    // 1F9DA 0061;	
    // (🧚) FAIRY	[164E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DA, 0x0061 };
    uint32_t const ces[9] = { 0x164E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_140)
{
    // 1F9DA 0041;	
    // (🧚) FAIRY	[164E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DA, 0x0041 };
    uint32_t const ces[9] = { 0x164E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_141)
{
    // 1F9DA 0062;	
    // (🧚) FAIRY	[164E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DA, 0x0062 };
    uint32_t const ces[9] = { 0x164E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_142)
{
    // 1F9DB 0021;	
    // (🧛) VAMPIRE	[164F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DB, 0x0021 };
    uint32_t const ces[9] = { 0x164F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_143)
{
    // 1F9DB 003F;	
    // (🧛) VAMPIRE	[164F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DB, 0x003F };
    uint32_t const ces[9] = { 0x164F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_144)
{
    // 1F9DB 0061;	
    // (🧛) VAMPIRE	[164F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DB, 0x0061 };
    uint32_t const ces[9] = { 0x164F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_145)
{
    // 1F9DB 0041;	
    // (🧛) VAMPIRE	[164F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DB, 0x0041 };
    uint32_t const ces[9] = { 0x164F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_146)
{
    // 1F9DB 0062;	
    // (🧛) VAMPIRE	[164F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DB, 0x0062 };
    uint32_t const ces[9] = { 0x164F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_147)
{
    // 1F9DC 0021;	
    // (🧜) MERPERSON	[1650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DC, 0x0021 };
    uint32_t const ces[9] = { 0x1650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_148)
{
    // 1F9DC 003F;	
    // (🧜) MERPERSON	[1650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DC, 0x003F };
    uint32_t const ces[9] = { 0x1650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_149)
{
    // 1F9DC 0061;	
    // (🧜) MERPERSON	[1650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DC, 0x0061 };
    uint32_t const ces[9] = { 0x1650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_150)
{
    // 1F9DC 0041;	
    // (🧜) MERPERSON	[1650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DC, 0x0041 };
    uint32_t const ces[9] = { 0x1650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_151)
{
    // 1F9DC 0062;	
    // (🧜) MERPERSON	[1650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DC, 0x0062 };
    uint32_t const ces[9] = { 0x1650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_152)
{
    // 1F9DD 0021;	
    // (🧝) ELF	[1651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DD, 0x0021 };
    uint32_t const ces[9] = { 0x1651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_153)
{
    // 1F9DD 003F;	
    // (🧝) ELF	[1651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DD, 0x003F };
    uint32_t const ces[9] = { 0x1651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_154)
{
    // 1F9DD 0061;	
    // (🧝) ELF	[1651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DD, 0x0061 };
    uint32_t const ces[9] = { 0x1651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_155)
{
    // 1F9DD 0041;	
    // (🧝) ELF	[1651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DD, 0x0041 };
    uint32_t const ces[9] = { 0x1651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_156)
{
    // 1F9DD 0062;	
    // (🧝) ELF	[1651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DD, 0x0062 };
    uint32_t const ces[9] = { 0x1651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_157)
{
    // 1F9DE 0021;	
    // (🧞) GENIE	[1652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DE, 0x0021 };
    uint32_t const ces[9] = { 0x1652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_158)
{
    // 1F9DE 003F;	
    // (🧞) GENIE	[1652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DE, 0x003F };
    uint32_t const ces[9] = { 0x1652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_159)
{
    // 1F9DE 0061;	
    // (🧞) GENIE	[1652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DE, 0x0061 };
    uint32_t const ces[9] = { 0x1652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_160)
{
    // 1F9DE 0041;	
    // (🧞) GENIE	[1652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DE, 0x0041 };
    uint32_t const ces[9] = { 0x1652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_161)
{
    // 1F9DE 0062;	
    // (🧞) GENIE	[1652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DE, 0x0062 };
    uint32_t const ces[9] = { 0x1652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_162)
{
    // 1F9DF 0021;	
    // (🧟) ZOMBIE	[1653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DF, 0x0021 };
    uint32_t const ces[9] = { 0x1653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_163)
{
    // 1F9DF 003F;	
    // (🧟) ZOMBIE	[1653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DF, 0x003F };
    uint32_t const ces[9] = { 0x1653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_164)
{
    // 1F9DF 0061;	
    // (🧟) ZOMBIE	[1653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DF, 0x0061 };
    uint32_t const ces[9] = { 0x1653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_165)
{
    // 1F9DF 0041;	
    // (🧟) ZOMBIE	[1653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9DF, 0x0041 };
    uint32_t const ces[9] = { 0x1653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_166)
{
    // 1F9DF 0062;	
    // (🧟) ZOMBIE	[1653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9DF, 0x0062 };
    uint32_t const ces[9] = { 0x1653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_167)
{
    // 1F9E0 0021;	
    // (🧠) BRAIN	[1654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E0, 0x0021 };
    uint32_t const ces[9] = { 0x1654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_168)
{
    // 1F9E0 003F;	
    // (🧠) BRAIN	[1654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E0, 0x003F };
    uint32_t const ces[9] = { 0x1654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_169)
{
    // 1F9E0 0061;	
    // (🧠) BRAIN	[1654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E0, 0x0061 };
    uint32_t const ces[9] = { 0x1654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_170)
{
    // 1F9E0 0041;	
    // (🧠) BRAIN	[1654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E0, 0x0041 };
    uint32_t const ces[9] = { 0x1654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_171)
{
    // 1F9E0 0062;	
    // (🧠) BRAIN	[1654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E0, 0x0062 };
    uint32_t const ces[9] = { 0x1654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_172)
{
    // 1F9E1 0021;	
    // (🧡) ORANGE HEART	[1655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E1, 0x0021 };
    uint32_t const ces[9] = { 0x1655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_173)
{
    // 1F9E1 003F;	
    // (🧡) ORANGE HEART	[1655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E1, 0x003F };
    uint32_t const ces[9] = { 0x1655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_174)
{
    // 1F9E1 0061;	
    // (🧡) ORANGE HEART	[1655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E1, 0x0061 };
    uint32_t const ces[9] = { 0x1655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_175)
{
    // 1F9E1 0041;	
    // (🧡) ORANGE HEART	[1655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E1, 0x0041 };
    uint32_t const ces[9] = { 0x1655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_176)
{
    // 1F9E1 0062;	
    // (🧡) ORANGE HEART	[1655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E1, 0x0062 };
    uint32_t const ces[9] = { 0x1655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_177)
{
    // 1F9E2 0021;	
    // (🧢) BILLED CAP	[1656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E2, 0x0021 };
    uint32_t const ces[9] = { 0x1656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_178)
{
    // 1F9E2 003F;	
    // (🧢) BILLED CAP	[1656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E2, 0x003F };
    uint32_t const ces[9] = { 0x1656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_179)
{
    // 1F9E2 0061;	
    // (🧢) BILLED CAP	[1656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E2, 0x0061 };
    uint32_t const ces[9] = { 0x1656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_180)
{
    // 1F9E2 0041;	
    // (🧢) BILLED CAP	[1656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E2, 0x0041 };
    uint32_t const ces[9] = { 0x1656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_181)
{
    // 1F9E2 0062;	
    // (🧢) BILLED CAP	[1656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E2, 0x0062 };
    uint32_t const ces[9] = { 0x1656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_182)
{
    // 1F9E3 0021;	
    // (🧣) SCARF	[1657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E3, 0x0021 };
    uint32_t const ces[9] = { 0x1657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_183)
{
    // 1F9E3 003F;	
    // (🧣) SCARF	[1657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E3, 0x003F };
    uint32_t const ces[9] = { 0x1657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_184)
{
    // 1F9E3 0061;	
    // (🧣) SCARF	[1657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E3, 0x0061 };
    uint32_t const ces[9] = { 0x1657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_185)
{
    // 1F9E3 0041;	
    // (🧣) SCARF	[1657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E3, 0x0041 };
    uint32_t const ces[9] = { 0x1657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_186)
{
    // 1F9E3 0062;	
    // (🧣) SCARF	[1657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E3, 0x0062 };
    uint32_t const ces[9] = { 0x1657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_187)
{
    // 1F9E4 0021;	
    // (🧤) GLOVES	[1658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E4, 0x0021 };
    uint32_t const ces[9] = { 0x1658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_188)
{
    // 1F9E4 003F;	
    // (🧤) GLOVES	[1658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E4, 0x003F };
    uint32_t const ces[9] = { 0x1658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_189)
{
    // 1F9E4 0061;	
    // (🧤) GLOVES	[1658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E4, 0x0061 };
    uint32_t const ces[9] = { 0x1658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_190)
{
    // 1F9E4 0041;	
    // (🧤) GLOVES	[1658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E4, 0x0041 };
    uint32_t const ces[9] = { 0x1658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_191)
{
    // 1F9E4 0062;	
    // (🧤) GLOVES	[1658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E4, 0x0062 };
    uint32_t const ces[9] = { 0x1658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_192)
{
    // 1F9E5 0021;	
    // (🧥) COAT	[1659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E5, 0x0021 };
    uint32_t const ces[9] = { 0x1659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_193)
{
    // 1F9E5 003F;	
    // (🧥) COAT	[1659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E5, 0x003F };
    uint32_t const ces[9] = { 0x1659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_194)
{
    // 1F9E5 0061;	
    // (🧥) COAT	[1659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E5, 0x0061 };
    uint32_t const ces[9] = { 0x1659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_195)
{
    // 1F9E5 0041;	
    // (🧥) COAT	[1659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E5, 0x0041 };
    uint32_t const ces[9] = { 0x1659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_196)
{
    // 1F9E5 0062;	
    // (🧥) COAT	[1659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E5, 0x0062 };
    uint32_t const ces[9] = { 0x1659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_197)
{
    // 1F9E6 0021;	
    // (🧦) SOCKS	[165A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E6, 0x0021 };
    uint32_t const ces[9] = { 0x165A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_198)
{
    // 1F9E6 003F;	
    // (🧦) SOCKS	[165A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E6, 0x003F };
    uint32_t const ces[9] = { 0x165A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_199)
{
    // 1F9E6 0061;	
    // (🧦) SOCKS	[165A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E6, 0x0061 };
    uint32_t const ces[9] = { 0x165A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_200)
{
    // 1F9E6 0041;	
    // (🧦) SOCKS	[165A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F9E6, 0x0041 };
    uint32_t const ces[9] = { 0x165A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_201)
{
    // 1F9E6 0062;	
    // (🧦) SOCKS	[165A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F9E6, 0x0062 };
    uint32_t const ces[9] = { 0x165A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_202)
{
    // 1F600 0021;	
    // (😀) GRINNING FACE	[165B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F600, 0x0021 };
    uint32_t const ces[9] = { 0x165B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_203)
{
    // 1F600 003F;	
    // (😀) GRINNING FACE	[165B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F600, 0x003F };
    uint32_t const ces[9] = { 0x165B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_204)
{
    // 1F600 0061;	
    // (😀) GRINNING FACE	[165B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F600, 0x0061 };
    uint32_t const ces[9] = { 0x165B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_205)
{
    // 1F600 0041;	
    // (😀) GRINNING FACE	[165B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F600, 0x0041 };
    uint32_t const ces[9] = { 0x165B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_206)
{
    // 1F600 0062;	
    // (😀) GRINNING FACE	[165B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F600, 0x0062 };
    uint32_t const ces[9] = { 0x165B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_207)
{
    // 1F601 0021;	
    // (😁) GRINNING FACE WITH SMILING EYES	[165C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F601, 0x0021 };
    uint32_t const ces[9] = { 0x165C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_208)
{
    // 1F601 003F;	
    // (😁) GRINNING FACE WITH SMILING EYES	[165C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F601, 0x003F };
    uint32_t const ces[9] = { 0x165C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_209)
{
    // 1F601 0061;	
    // (😁) GRINNING FACE WITH SMILING EYES	[165C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F601, 0x0061 };
    uint32_t const ces[9] = { 0x165C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_210)
{
    // 1F601 0041;	
    // (😁) GRINNING FACE WITH SMILING EYES	[165C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F601, 0x0041 };
    uint32_t const ces[9] = { 0x165C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_211)
{
    // 1F601 0062;	
    // (😁) GRINNING FACE WITH SMILING EYES	[165C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F601, 0x0062 };
    uint32_t const ces[9] = { 0x165C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_212)
{
    // 1F602 0021;	
    // (😂) FACE WITH TEARS OF JOY	[165D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F602, 0x0021 };
    uint32_t const ces[9] = { 0x165D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_213)
{
    // 1F602 003F;	
    // (😂) FACE WITH TEARS OF JOY	[165D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F602, 0x003F };
    uint32_t const ces[9] = { 0x165D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_214)
{
    // 1F602 0061;	
    // (😂) FACE WITH TEARS OF JOY	[165D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F602, 0x0061 };
    uint32_t const ces[9] = { 0x165D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_215)
{
    // 1F602 0041;	
    // (😂) FACE WITH TEARS OF JOY	[165D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F602, 0x0041 };
    uint32_t const ces[9] = { 0x165D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_216)
{
    // 1F602 0062;	
    // (😂) FACE WITH TEARS OF JOY	[165D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F602, 0x0062 };
    uint32_t const ces[9] = { 0x165D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_217)
{
    // 1F603 0021;	
    // (😃) SMILING FACE WITH OPEN MOUTH	[165E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F603, 0x0021 };
    uint32_t const ces[9] = { 0x165E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_218)
{
    // 1F603 003F;	
    // (😃) SMILING FACE WITH OPEN MOUTH	[165E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F603, 0x003F };
    uint32_t const ces[9] = { 0x165E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_219)
{
    // 1F603 0061;	
    // (😃) SMILING FACE WITH OPEN MOUTH	[165E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F603, 0x0061 };
    uint32_t const ces[9] = { 0x165E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_220)
{
    // 1F603 0041;	
    // (😃) SMILING FACE WITH OPEN MOUTH	[165E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F603, 0x0041 };
    uint32_t const ces[9] = { 0x165E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_221)
{
    // 1F603 0062;	
    // (😃) SMILING FACE WITH OPEN MOUTH	[165E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F603, 0x0062 };
    uint32_t const ces[9] = { 0x165E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_222)
{
    // 1F604 0021;	
    // (😄) SMILING FACE WITH OPEN MOUTH AND SMILING EYES	[165F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F604, 0x0021 };
    uint32_t const ces[9] = { 0x165F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_223)
{
    // 1F604 003F;	
    // (😄) SMILING FACE WITH OPEN MOUTH AND SMILING EYES	[165F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F604, 0x003F };
    uint32_t const ces[9] = { 0x165F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_224)
{
    // 1F604 0061;	
    // (😄) SMILING FACE WITH OPEN MOUTH AND SMILING EYES	[165F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F604, 0x0061 };
    uint32_t const ces[9] = { 0x165F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_225)
{
    // 1F604 0041;	
    // (😄) SMILING FACE WITH OPEN MOUTH AND SMILING EYES	[165F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F604, 0x0041 };
    uint32_t const ces[9] = { 0x165F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_226)
{
    // 1F604 0062;	
    // (😄) SMILING FACE WITH OPEN MOUTH AND SMILING EYES	[165F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F604, 0x0062 };
    uint32_t const ces[9] = { 0x165F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_227)
{
    // 1F605 0021;	
    // (😅) SMILING FACE WITH OPEN MOUTH AND COLD SWEAT	[1660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F605, 0x0021 };
    uint32_t const ces[9] = { 0x1660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_228)
{
    // 1F605 003F;	
    // (😅) SMILING FACE WITH OPEN MOUTH AND COLD SWEAT	[1660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F605, 0x003F };
    uint32_t const ces[9] = { 0x1660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_229)
{
    // 1F605 0061;	
    // (😅) SMILING FACE WITH OPEN MOUTH AND COLD SWEAT	[1660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F605, 0x0061 };
    uint32_t const ces[9] = { 0x1660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_230)
{
    // 1F605 0041;	
    // (😅) SMILING FACE WITH OPEN MOUTH AND COLD SWEAT	[1660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F605, 0x0041 };
    uint32_t const ces[9] = { 0x1660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_231)
{
    // 1F605 0062;	
    // (😅) SMILING FACE WITH OPEN MOUTH AND COLD SWEAT	[1660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F605, 0x0062 };
    uint32_t const ces[9] = { 0x1660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_232)
{
    // 1F606 0021;	
    // (😆) SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES	[1661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F606, 0x0021 };
    uint32_t const ces[9] = { 0x1661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_233)
{
    // 1F606 003F;	
    // (😆) SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES	[1661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F606, 0x003F };
    uint32_t const ces[9] = { 0x1661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_234)
{
    // 1F606 0061;	
    // (😆) SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES	[1661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F606, 0x0061 };
    uint32_t const ces[9] = { 0x1661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_235)
{
    // 1F606 0041;	
    // (😆) SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES	[1661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F606, 0x0041 };
    uint32_t const ces[9] = { 0x1661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_236)
{
    // 1F606 0062;	
    // (😆) SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES	[1661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F606, 0x0062 };
    uint32_t const ces[9] = { 0x1661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_237)
{
    // 1F607 0021;	
    // (😇) SMILING FACE WITH HALO	[1662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F607, 0x0021 };
    uint32_t const ces[9] = { 0x1662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_238)
{
    // 1F607 003F;	
    // (😇) SMILING FACE WITH HALO	[1662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F607, 0x003F };
    uint32_t const ces[9] = { 0x1662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_239)
{
    // 1F607 0061;	
    // (😇) SMILING FACE WITH HALO	[1662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F607, 0x0061 };
    uint32_t const ces[9] = { 0x1662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_240)
{
    // 1F607 0041;	
    // (😇) SMILING FACE WITH HALO	[1662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F607, 0x0041 };
    uint32_t const ces[9] = { 0x1662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_241)
{
    // 1F607 0062;	
    // (😇) SMILING FACE WITH HALO	[1662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F607, 0x0062 };
    uint32_t const ces[9] = { 0x1662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_242)
{
    // 1F608 0021;	
    // (😈) SMILING FACE WITH HORNS	[1663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F608, 0x0021 };
    uint32_t const ces[9] = { 0x1663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_243)
{
    // 1F608 003F;	
    // (😈) SMILING FACE WITH HORNS	[1663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F608, 0x003F };
    uint32_t const ces[9] = { 0x1663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_244)
{
    // 1F608 0061;	
    // (😈) SMILING FACE WITH HORNS	[1663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F608, 0x0061 };
    uint32_t const ces[9] = { 0x1663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_245)
{
    // 1F608 0041;	
    // (😈) SMILING FACE WITH HORNS	[1663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F608, 0x0041 };
    uint32_t const ces[9] = { 0x1663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_246)
{
    // 1F608 0062;	
    // (😈) SMILING FACE WITH HORNS	[1663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F608, 0x0062 };
    uint32_t const ces[9] = { 0x1663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_247)
{
    // 1F609 0021;	
    // (😉) WINKING FACE	[1664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F609, 0x0021 };
    uint32_t const ces[9] = { 0x1664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_248)
{
    // 1F609 003F;	
    // (😉) WINKING FACE	[1664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F609, 0x003F };
    uint32_t const ces[9] = { 0x1664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_249)
{
    // 1F609 0061;	
    // (😉) WINKING FACE	[1664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F609, 0x0061 };
    uint32_t const ces[9] = { 0x1664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_250)
{
    // 1F609 0041;	
    // (😉) WINKING FACE	[1664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F609, 0x0041 };
    uint32_t const ces[9] = { 0x1664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_251)
{
    // 1F609 0062;	
    // (😉) WINKING FACE	[1664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F609, 0x0062 };
    uint32_t const ces[9] = { 0x1664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_252)
{
    // 1F60A 0021;	
    // (😊) SMILING FACE WITH SMILING EYES	[1665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60A, 0x0021 };
    uint32_t const ces[9] = { 0x1665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_253)
{
    // 1F60A 003F;	
    // (😊) SMILING FACE WITH SMILING EYES	[1665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60A, 0x003F };
    uint32_t const ces[9] = { 0x1665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_254)
{
    // 1F60A 0061;	
    // (😊) SMILING FACE WITH SMILING EYES	[1665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60A, 0x0061 };
    uint32_t const ces[9] = { 0x1665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_255)
{
    // 1F60A 0041;	
    // (😊) SMILING FACE WITH SMILING EYES	[1665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60A, 0x0041 };
    uint32_t const ces[9] = { 0x1665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_256)
{
    // 1F60A 0062;	
    // (😊) SMILING FACE WITH SMILING EYES	[1665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60A, 0x0062 };
    uint32_t const ces[9] = { 0x1665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_257)
{
    // 1F60B 0021;	
    // (😋) FACE SAVOURING DELICIOUS FOOD	[1666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60B, 0x0021 };
    uint32_t const ces[9] = { 0x1666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_258)
{
    // 1F60B 003F;	
    // (😋) FACE SAVOURING DELICIOUS FOOD	[1666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60B, 0x003F };
    uint32_t const ces[9] = { 0x1666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_259)
{
    // 1F60B 0061;	
    // (😋) FACE SAVOURING DELICIOUS FOOD	[1666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60B, 0x0061 };
    uint32_t const ces[9] = { 0x1666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_260)
{
    // 1F60B 0041;	
    // (😋) FACE SAVOURING DELICIOUS FOOD	[1666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60B, 0x0041 };
    uint32_t const ces[9] = { 0x1666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_261)
{
    // 1F60B 0062;	
    // (😋) FACE SAVOURING DELICIOUS FOOD	[1666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60B, 0x0062 };
    uint32_t const ces[9] = { 0x1666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_262)
{
    // 1F60C 0021;	
    // (😌) RELIEVED FACE	[1667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60C, 0x0021 };
    uint32_t const ces[9] = { 0x1667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_263)
{
    // 1F60C 003F;	
    // (😌) RELIEVED FACE	[1667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60C, 0x003F };
    uint32_t const ces[9] = { 0x1667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_264)
{
    // 1F60C 0061;	
    // (😌) RELIEVED FACE	[1667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60C, 0x0061 };
    uint32_t const ces[9] = { 0x1667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_265)
{
    // 1F60C 0041;	
    // (😌) RELIEVED FACE	[1667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60C, 0x0041 };
    uint32_t const ces[9] = { 0x1667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_266)
{
    // 1F60C 0062;	
    // (😌) RELIEVED FACE	[1667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60C, 0x0062 };
    uint32_t const ces[9] = { 0x1667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_267)
{
    // 1F60D 0021;	
    // (😍) SMILING FACE WITH HEART-SHAPED EYES	[1668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60D, 0x0021 };
    uint32_t const ces[9] = { 0x1668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_268)
{
    // 1F60D 003F;	
    // (😍) SMILING FACE WITH HEART-SHAPED EYES	[1668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60D, 0x003F };
    uint32_t const ces[9] = { 0x1668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_269)
{
    // 1F60D 0061;	
    // (😍) SMILING FACE WITH HEART-SHAPED EYES	[1668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60D, 0x0061 };
    uint32_t const ces[9] = { 0x1668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_270)
{
    // 1F60D 0041;	
    // (😍) SMILING FACE WITH HEART-SHAPED EYES	[1668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60D, 0x0041 };
    uint32_t const ces[9] = { 0x1668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_271)
{
    // 1F60D 0062;	
    // (😍) SMILING FACE WITH HEART-SHAPED EYES	[1668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60D, 0x0062 };
    uint32_t const ces[9] = { 0x1668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_272)
{
    // 1F60E 0021;	
    // (😎) SMILING FACE WITH SUNGLASSES	[1669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60E, 0x0021 };
    uint32_t const ces[9] = { 0x1669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_273)
{
    // 1F60E 003F;	
    // (😎) SMILING FACE WITH SUNGLASSES	[1669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60E, 0x003F };
    uint32_t const ces[9] = { 0x1669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_274)
{
    // 1F60E 0061;	
    // (😎) SMILING FACE WITH SUNGLASSES	[1669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60E, 0x0061 };
    uint32_t const ces[9] = { 0x1669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_275)
{
    // 1F60E 0041;	
    // (😎) SMILING FACE WITH SUNGLASSES	[1669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60E, 0x0041 };
    uint32_t const ces[9] = { 0x1669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_276)
{
    // 1F60E 0062;	
    // (😎) SMILING FACE WITH SUNGLASSES	[1669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60E, 0x0062 };
    uint32_t const ces[9] = { 0x1669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_277)
{
    // 1F60F 0021;	
    // (😏) SMIRKING FACE	[166A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60F, 0x0021 };
    uint32_t const ces[9] = { 0x166A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_278)
{
    // 1F60F 003F;	
    // (😏) SMIRKING FACE	[166A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60F, 0x003F };
    uint32_t const ces[9] = { 0x166A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_279)
{
    // 1F60F 0061;	
    // (😏) SMIRKING FACE	[166A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60F, 0x0061 };
    uint32_t const ces[9] = { 0x166A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_280)
{
    // 1F60F 0041;	
    // (😏) SMIRKING FACE	[166A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F60F, 0x0041 };
    uint32_t const ces[9] = { 0x166A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_281)
{
    // 1F60F 0062;	
    // (😏) SMIRKING FACE	[166A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F60F, 0x0062 };
    uint32_t const ces[9] = { 0x166A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_282)
{
    // 1F610 0021;	
    // (😐) NEUTRAL FACE	[166B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F610, 0x0021 };
    uint32_t const ces[9] = { 0x166B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_283)
{
    // 1F610 003F;	
    // (😐) NEUTRAL FACE	[166B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F610, 0x003F };
    uint32_t const ces[9] = { 0x166B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_284)
{
    // 1F610 0061;	
    // (😐) NEUTRAL FACE	[166B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F610, 0x0061 };
    uint32_t const ces[9] = { 0x166B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_285)
{
    // 1F610 0041;	
    // (😐) NEUTRAL FACE	[166B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F610, 0x0041 };
    uint32_t const ces[9] = { 0x166B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_286)
{
    // 1F610 0062;	
    // (😐) NEUTRAL FACE	[166B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F610, 0x0062 };
    uint32_t const ces[9] = { 0x166B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_287)
{
    // 1F611 0021;	
    // (😑) EXPRESSIONLESS FACE	[166C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F611, 0x0021 };
    uint32_t const ces[9] = { 0x166C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_288)
{
    // 1F611 003F;	
    // (😑) EXPRESSIONLESS FACE	[166C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F611, 0x003F };
    uint32_t const ces[9] = { 0x166C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_289)
{
    // 1F611 0061;	
    // (😑) EXPRESSIONLESS FACE	[166C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F611, 0x0061 };
    uint32_t const ces[9] = { 0x166C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_290)
{
    // 1F611 0041;	
    // (😑) EXPRESSIONLESS FACE	[166C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F611, 0x0041 };
    uint32_t const ces[9] = { 0x166C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_291)
{
    // 1F611 0062;	
    // (😑) EXPRESSIONLESS FACE	[166C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F611, 0x0062 };
    uint32_t const ces[9] = { 0x166C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_292)
{
    // 1F612 0021;	
    // (😒) UNAMUSED FACE	[166D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F612, 0x0021 };
    uint32_t const ces[9] = { 0x166D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_293)
{
    // 1F612 003F;	
    // (😒) UNAMUSED FACE	[166D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F612, 0x003F };
    uint32_t const ces[9] = { 0x166D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_294)
{
    // 1F612 0061;	
    // (😒) UNAMUSED FACE	[166D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F612, 0x0061 };
    uint32_t const ces[9] = { 0x166D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_295)
{
    // 1F612 0041;	
    // (😒) UNAMUSED FACE	[166D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F612, 0x0041 };
    uint32_t const ces[9] = { 0x166D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_296)
{
    // 1F612 0062;	
    // (😒) UNAMUSED FACE	[166D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F612, 0x0062 };
    uint32_t const ces[9] = { 0x166D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_297)
{
    // 1F613 0021;	
    // (😓) FACE WITH COLD SWEAT	[166E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F613, 0x0021 };
    uint32_t const ces[9] = { 0x166E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_298)
{
    // 1F613 003F;	
    // (😓) FACE WITH COLD SWEAT	[166E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F613, 0x003F };
    uint32_t const ces[9] = { 0x166E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_299)
{
    // 1F613 0061;	
    // (😓) FACE WITH COLD SWEAT	[166E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F613, 0x0061 };
    uint32_t const ces[9] = { 0x166E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_300)
{
    // 1F613 0041;	
    // (😓) FACE WITH COLD SWEAT	[166E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F613, 0x0041 };
    uint32_t const ces[9] = { 0x166E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_301)
{
    // 1F613 0062;	
    // (😓) FACE WITH COLD SWEAT	[166E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F613, 0x0062 };
    uint32_t const ces[9] = { 0x166E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_302)
{
    // 1F614 0021;	
    // (😔) PENSIVE FACE	[166F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F614, 0x0021 };
    uint32_t const ces[9] = { 0x166F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_303)
{
    // 1F614 003F;	
    // (😔) PENSIVE FACE	[166F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F614, 0x003F };
    uint32_t const ces[9] = { 0x166F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_304)
{
    // 1F614 0061;	
    // (😔) PENSIVE FACE	[166F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F614, 0x0061 };
    uint32_t const ces[9] = { 0x166F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_305)
{
    // 1F614 0041;	
    // (😔) PENSIVE FACE	[166F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F614, 0x0041 };
    uint32_t const ces[9] = { 0x166F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_306)
{
    // 1F614 0062;	
    // (😔) PENSIVE FACE	[166F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F614, 0x0062 };
    uint32_t const ces[9] = { 0x166F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_307)
{
    // 1F615 0021;	
    // (😕) CONFUSED FACE	[1670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F615, 0x0021 };
    uint32_t const ces[9] = { 0x1670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_308)
{
    // 1F615 003F;	
    // (😕) CONFUSED FACE	[1670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F615, 0x003F };
    uint32_t const ces[9] = { 0x1670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_309)
{
    // 1F615 0061;	
    // (😕) CONFUSED FACE	[1670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F615, 0x0061 };
    uint32_t const ces[9] = { 0x1670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_310)
{
    // 1F615 0041;	
    // (😕) CONFUSED FACE	[1670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F615, 0x0041 };
    uint32_t const ces[9] = { 0x1670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_311)
{
    // 1F615 0062;	
    // (😕) CONFUSED FACE	[1670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F615, 0x0062 };
    uint32_t const ces[9] = { 0x1670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_312)
{
    // 1F616 0021;	
    // (😖) CONFOUNDED FACE	[1671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F616, 0x0021 };
    uint32_t const ces[9] = { 0x1671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_313)
{
    // 1F616 003F;	
    // (😖) CONFOUNDED FACE	[1671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F616, 0x003F };
    uint32_t const ces[9] = { 0x1671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_314)
{
    // 1F616 0061;	
    // (😖) CONFOUNDED FACE	[1671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F616, 0x0061 };
    uint32_t const ces[9] = { 0x1671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_315)
{
    // 1F616 0041;	
    // (😖) CONFOUNDED FACE	[1671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F616, 0x0041 };
    uint32_t const ces[9] = { 0x1671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_316)
{
    // 1F616 0062;	
    // (😖) CONFOUNDED FACE	[1671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F616, 0x0062 };
    uint32_t const ces[9] = { 0x1671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_317)
{
    // 1F617 0021;	
    // (😗) KISSING FACE	[1672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F617, 0x0021 };
    uint32_t const ces[9] = { 0x1672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_318)
{
    // 1F617 003F;	
    // (😗) KISSING FACE	[1672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F617, 0x003F };
    uint32_t const ces[9] = { 0x1672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_319)
{
    // 1F617 0061;	
    // (😗) KISSING FACE	[1672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F617, 0x0061 };
    uint32_t const ces[9] = { 0x1672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_320)
{
    // 1F617 0041;	
    // (😗) KISSING FACE	[1672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F617, 0x0041 };
    uint32_t const ces[9] = { 0x1672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_321)
{
    // 1F617 0062;	
    // (😗) KISSING FACE	[1672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F617, 0x0062 };
    uint32_t const ces[9] = { 0x1672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_322)
{
    // 1F618 0021;	
    // (😘) FACE THROWING A KISS	[1673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F618, 0x0021 };
    uint32_t const ces[9] = { 0x1673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_323)
{
    // 1F618 003F;	
    // (😘) FACE THROWING A KISS	[1673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F618, 0x003F };
    uint32_t const ces[9] = { 0x1673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_324)
{
    // 1F618 0061;	
    // (😘) FACE THROWING A KISS	[1673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F618, 0x0061 };
    uint32_t const ces[9] = { 0x1673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_325)
{
    // 1F618 0041;	
    // (😘) FACE THROWING A KISS	[1673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F618, 0x0041 };
    uint32_t const ces[9] = { 0x1673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_326)
{
    // 1F618 0062;	
    // (😘) FACE THROWING A KISS	[1673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F618, 0x0062 };
    uint32_t const ces[9] = { 0x1673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_327)
{
    // 1F619 0021;	
    // (😙) KISSING FACE WITH SMILING EYES	[1674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F619, 0x0021 };
    uint32_t const ces[9] = { 0x1674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_328)
{
    // 1F619 003F;	
    // (😙) KISSING FACE WITH SMILING EYES	[1674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F619, 0x003F };
    uint32_t const ces[9] = { 0x1674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_329)
{
    // 1F619 0061;	
    // (😙) KISSING FACE WITH SMILING EYES	[1674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F619, 0x0061 };
    uint32_t const ces[9] = { 0x1674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_330)
{
    // 1F619 0041;	
    // (😙) KISSING FACE WITH SMILING EYES	[1674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F619, 0x0041 };
    uint32_t const ces[9] = { 0x1674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_331)
{
    // 1F619 0062;	
    // (😙) KISSING FACE WITH SMILING EYES	[1674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F619, 0x0062 };
    uint32_t const ces[9] = { 0x1674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_332)
{
    // 1F61A 0021;	
    // (😚) KISSING FACE WITH CLOSED EYES	[1675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61A, 0x0021 };
    uint32_t const ces[9] = { 0x1675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_333)
{
    // 1F61A 003F;	
    // (😚) KISSING FACE WITH CLOSED EYES	[1675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61A, 0x003F };
    uint32_t const ces[9] = { 0x1675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_334)
{
    // 1F61A 0061;	
    // (😚) KISSING FACE WITH CLOSED EYES	[1675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61A, 0x0061 };
    uint32_t const ces[9] = { 0x1675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_335)
{
    // 1F61A 0041;	
    // (😚) KISSING FACE WITH CLOSED EYES	[1675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61A, 0x0041 };
    uint32_t const ces[9] = { 0x1675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_336)
{
    // 1F61A 0062;	
    // (😚) KISSING FACE WITH CLOSED EYES	[1675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61A, 0x0062 };
    uint32_t const ces[9] = { 0x1675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_337)
{
    // 1F61B 0021;	
    // (😛) FACE WITH STUCK-OUT TONGUE	[1676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61B, 0x0021 };
    uint32_t const ces[9] = { 0x1676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_338)
{
    // 1F61B 003F;	
    // (😛) FACE WITH STUCK-OUT TONGUE	[1676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61B, 0x003F };
    uint32_t const ces[9] = { 0x1676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_339)
{
    // 1F61B 0061;	
    // (😛) FACE WITH STUCK-OUT TONGUE	[1676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61B, 0x0061 };
    uint32_t const ces[9] = { 0x1676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_340)
{
    // 1F61B 0041;	
    // (😛) FACE WITH STUCK-OUT TONGUE	[1676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61B, 0x0041 };
    uint32_t const ces[9] = { 0x1676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_341)
{
    // 1F61B 0062;	
    // (😛) FACE WITH STUCK-OUT TONGUE	[1676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61B, 0x0062 };
    uint32_t const ces[9] = { 0x1676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_342)
{
    // 1F61C 0021;	
    // (😜) FACE WITH STUCK-OUT TONGUE AND WINKING EYE	[1677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61C, 0x0021 };
    uint32_t const ces[9] = { 0x1677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_343)
{
    // 1F61C 003F;	
    // (😜) FACE WITH STUCK-OUT TONGUE AND WINKING EYE	[1677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61C, 0x003F };
    uint32_t const ces[9] = { 0x1677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_344)
{
    // 1F61C 0061;	
    // (😜) FACE WITH STUCK-OUT TONGUE AND WINKING EYE	[1677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61C, 0x0061 };
    uint32_t const ces[9] = { 0x1677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_345)
{
    // 1F61C 0041;	
    // (😜) FACE WITH STUCK-OUT TONGUE AND WINKING EYE	[1677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61C, 0x0041 };
    uint32_t const ces[9] = { 0x1677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_346)
{
    // 1F61C 0062;	
    // (😜) FACE WITH STUCK-OUT TONGUE AND WINKING EYE	[1677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61C, 0x0062 };
    uint32_t const ces[9] = { 0x1677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_347)
{
    // 1F61D 0021;	
    // (😝) FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES	[1678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61D, 0x0021 };
    uint32_t const ces[9] = { 0x1678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_348)
{
    // 1F61D 003F;	
    // (😝) FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES	[1678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61D, 0x003F };
    uint32_t const ces[9] = { 0x1678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_349)
{
    // 1F61D 0061;	
    // (😝) FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES	[1678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61D, 0x0061 };
    uint32_t const ces[9] = { 0x1678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_350)
{
    // 1F61D 0041;	
    // (😝) FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES	[1678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61D, 0x0041 };
    uint32_t const ces[9] = { 0x1678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_351)
{
    // 1F61D 0062;	
    // (😝) FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES	[1678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61D, 0x0062 };
    uint32_t const ces[9] = { 0x1678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_352)
{
    // 1F61E 0021;	
    // (😞) DISAPPOINTED FACE	[1679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61E, 0x0021 };
    uint32_t const ces[9] = { 0x1679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_353)
{
    // 1F61E 003F;	
    // (😞) DISAPPOINTED FACE	[1679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61E, 0x003F };
    uint32_t const ces[9] = { 0x1679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_354)
{
    // 1F61E 0061;	
    // (😞) DISAPPOINTED FACE	[1679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61E, 0x0061 };
    uint32_t const ces[9] = { 0x1679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_355)
{
    // 1F61E 0041;	
    // (😞) DISAPPOINTED FACE	[1679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61E, 0x0041 };
    uint32_t const ces[9] = { 0x1679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_356)
{
    // 1F61E 0062;	
    // (😞) DISAPPOINTED FACE	[1679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61E, 0x0062 };
    uint32_t const ces[9] = { 0x1679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_357)
{
    // 1F61F 0021;	
    // (😟) WORRIED FACE	[167A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61F, 0x0021 };
    uint32_t const ces[9] = { 0x167A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_358)
{
    // 1F61F 003F;	
    // (😟) WORRIED FACE	[167A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61F, 0x003F };
    uint32_t const ces[9] = { 0x167A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_359)
{
    // 1F61F 0061;	
    // (😟) WORRIED FACE	[167A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61F, 0x0061 };
    uint32_t const ces[9] = { 0x167A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_360)
{
    // 1F61F 0041;	
    // (😟) WORRIED FACE	[167A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F61F, 0x0041 };
    uint32_t const ces[9] = { 0x167A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_361)
{
    // 1F61F 0062;	
    // (😟) WORRIED FACE	[167A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F61F, 0x0062 };
    uint32_t const ces[9] = { 0x167A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_362)
{
    // 1F620 0021;	
    // (😠) ANGRY FACE	[167B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F620, 0x0021 };
    uint32_t const ces[9] = { 0x167B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_363)
{
    // 1F620 003F;	
    // (😠) ANGRY FACE	[167B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F620, 0x003F };
    uint32_t const ces[9] = { 0x167B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_364)
{
    // 1F620 0061;	
    // (😠) ANGRY FACE	[167B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F620, 0x0061 };
    uint32_t const ces[9] = { 0x167B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_365)
{
    // 1F620 0041;	
    // (😠) ANGRY FACE	[167B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F620, 0x0041 };
    uint32_t const ces[9] = { 0x167B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_366)
{
    // 1F620 0062;	
    // (😠) ANGRY FACE	[167B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F620, 0x0062 };
    uint32_t const ces[9] = { 0x167B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_367)
{
    // 1F621 0021;	
    // (😡) POUTING FACE	[167C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F621, 0x0021 };
    uint32_t const ces[9] = { 0x167C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_368)
{
    // 1F621 003F;	
    // (😡) POUTING FACE	[167C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F621, 0x003F };
    uint32_t const ces[9] = { 0x167C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_369)
{
    // 1F621 0061;	
    // (😡) POUTING FACE	[167C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F621, 0x0061 };
    uint32_t const ces[9] = { 0x167C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_370)
{
    // 1F621 0041;	
    // (😡) POUTING FACE	[167C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F621, 0x0041 };
    uint32_t const ces[9] = { 0x167C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_371)
{
    // 1F621 0062;	
    // (😡) POUTING FACE	[167C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F621, 0x0062 };
    uint32_t const ces[9] = { 0x167C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_372)
{
    // 1F622 0021;	
    // (😢) CRYING FACE	[167D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F622, 0x0021 };
    uint32_t const ces[9] = { 0x167D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_373)
{
    // 1F622 003F;	
    // (😢) CRYING FACE	[167D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F622, 0x003F };
    uint32_t const ces[9] = { 0x167D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_374)
{
    // 1F622 0061;	
    // (😢) CRYING FACE	[167D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F622, 0x0061 };
    uint32_t const ces[9] = { 0x167D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_375)
{
    // 1F622 0041;	
    // (😢) CRYING FACE	[167D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F622, 0x0041 };
    uint32_t const ces[9] = { 0x167D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_376)
{
    // 1F622 0062;	
    // (😢) CRYING FACE	[167D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F622, 0x0062 };
    uint32_t const ces[9] = { 0x167D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_377)
{
    // 1F623 0021;	
    // (😣) PERSEVERING FACE	[167E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F623, 0x0021 };
    uint32_t const ces[9] = { 0x167E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_378)
{
    // 1F623 003F;	
    // (😣) PERSEVERING FACE	[167E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F623, 0x003F };
    uint32_t const ces[9] = { 0x167E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_379)
{
    // 1F623 0061;	
    // (😣) PERSEVERING FACE	[167E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F623, 0x0061 };
    uint32_t const ces[9] = { 0x167E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_380)
{
    // 1F623 0041;	
    // (😣) PERSEVERING FACE	[167E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F623, 0x0041 };
    uint32_t const ces[9] = { 0x167E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_381)
{
    // 1F623 0062;	
    // (😣) PERSEVERING FACE	[167E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F623, 0x0062 };
    uint32_t const ces[9] = { 0x167E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_382)
{
    // 1F624 0021;	
    // (😤) FACE WITH LOOK OF TRIUMPH	[167F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F624, 0x0021 };
    uint32_t const ces[9] = { 0x167F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_383)
{
    // 1F624 003F;	
    // (😤) FACE WITH LOOK OF TRIUMPH	[167F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F624, 0x003F };
    uint32_t const ces[9] = { 0x167F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_384)
{
    // 1F624 0061;	
    // (😤) FACE WITH LOOK OF TRIUMPH	[167F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F624, 0x0061 };
    uint32_t const ces[9] = { 0x167F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_385)
{
    // 1F624 0041;	
    // (😤) FACE WITH LOOK OF TRIUMPH	[167F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F624, 0x0041 };
    uint32_t const ces[9] = { 0x167F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_386)
{
    // 1F624 0062;	
    // (😤) FACE WITH LOOK OF TRIUMPH	[167F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F624, 0x0062 };
    uint32_t const ces[9] = { 0x167F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_387)
{
    // 1F625 0021;	
    // (😥) DISAPPOINTED BUT RELIEVED FACE	[1680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F625, 0x0021 };
    uint32_t const ces[9] = { 0x1680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_388)
{
    // 1F625 003F;	
    // (😥) DISAPPOINTED BUT RELIEVED FACE	[1680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F625, 0x003F };
    uint32_t const ces[9] = { 0x1680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_389)
{
    // 1F625 0061;	
    // (😥) DISAPPOINTED BUT RELIEVED FACE	[1680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F625, 0x0061 };
    uint32_t const ces[9] = { 0x1680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_390)
{
    // 1F625 0041;	
    // (😥) DISAPPOINTED BUT RELIEVED FACE	[1680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F625, 0x0041 };
    uint32_t const ces[9] = { 0x1680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_391)
{
    // 1F625 0062;	
    // (😥) DISAPPOINTED BUT RELIEVED FACE	[1680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F625, 0x0062 };
    uint32_t const ces[9] = { 0x1680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_392)
{
    // 1F626 0021;	
    // (😦) FROWNING FACE WITH OPEN MOUTH	[1681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F626, 0x0021 };
    uint32_t const ces[9] = { 0x1681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_393)
{
    // 1F626 003F;	
    // (😦) FROWNING FACE WITH OPEN MOUTH	[1681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F626, 0x003F };
    uint32_t const ces[9] = { 0x1681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_394)
{
    // 1F626 0061;	
    // (😦) FROWNING FACE WITH OPEN MOUTH	[1681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F626, 0x0061 };
    uint32_t const ces[9] = { 0x1681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_395)
{
    // 1F626 0041;	
    // (😦) FROWNING FACE WITH OPEN MOUTH	[1681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F626, 0x0041 };
    uint32_t const ces[9] = { 0x1681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_396)
{
    // 1F626 0062;	
    // (😦) FROWNING FACE WITH OPEN MOUTH	[1681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F626, 0x0062 };
    uint32_t const ces[9] = { 0x1681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_397)
{
    // 1F627 0021;	
    // (😧) ANGUISHED FACE	[1682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F627, 0x0021 };
    uint32_t const ces[9] = { 0x1682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_398)
{
    // 1F627 003F;	
    // (😧) ANGUISHED FACE	[1682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F627, 0x003F };
    uint32_t const ces[9] = { 0x1682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_399)
{
    // 1F627 0061;	
    // (😧) ANGUISHED FACE	[1682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F627, 0x0061 };
    uint32_t const ces[9] = { 0x1682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_400)
{
    // 1F627 0041;	
    // (😧) ANGUISHED FACE	[1682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F627, 0x0041 };
    uint32_t const ces[9] = { 0x1682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_401)
{
    // 1F627 0062;	
    // (😧) ANGUISHED FACE	[1682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F627, 0x0062 };
    uint32_t const ces[9] = { 0x1682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_402)
{
    // 1F628 0021;	
    // (😨) FEARFUL FACE	[1683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F628, 0x0021 };
    uint32_t const ces[9] = { 0x1683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_403)
{
    // 1F628 003F;	
    // (😨) FEARFUL FACE	[1683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F628, 0x003F };
    uint32_t const ces[9] = { 0x1683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_404)
{
    // 1F628 0061;	
    // (😨) FEARFUL FACE	[1683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F628, 0x0061 };
    uint32_t const ces[9] = { 0x1683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_405)
{
    // 1F628 0041;	
    // (😨) FEARFUL FACE	[1683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F628, 0x0041 };
    uint32_t const ces[9] = { 0x1683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_406)
{
    // 1F628 0062;	
    // (😨) FEARFUL FACE	[1683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F628, 0x0062 };
    uint32_t const ces[9] = { 0x1683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_407)
{
    // 1F629 0021;	
    // (😩) WEARY FACE	[1684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F629, 0x0021 };
    uint32_t const ces[9] = { 0x1684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_408)
{
    // 1F629 003F;	
    // (😩) WEARY FACE	[1684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F629, 0x003F };
    uint32_t const ces[9] = { 0x1684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_409)
{
    // 1F629 0061;	
    // (😩) WEARY FACE	[1684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F629, 0x0061 };
    uint32_t const ces[9] = { 0x1684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_410)
{
    // 1F629 0041;	
    // (😩) WEARY FACE	[1684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F629, 0x0041 };
    uint32_t const ces[9] = { 0x1684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_411)
{
    // 1F629 0062;	
    // (😩) WEARY FACE	[1684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F629, 0x0062 };
    uint32_t const ces[9] = { 0x1684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_412)
{
    // 1F62A 0021;	
    // (😪) SLEEPY FACE	[1685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62A, 0x0021 };
    uint32_t const ces[9] = { 0x1685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_413)
{
    // 1F62A 003F;	
    // (😪) SLEEPY FACE	[1685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62A, 0x003F };
    uint32_t const ces[9] = { 0x1685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_414)
{
    // 1F62A 0061;	
    // (😪) SLEEPY FACE	[1685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62A, 0x0061 };
    uint32_t const ces[9] = { 0x1685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_415)
{
    // 1F62A 0041;	
    // (😪) SLEEPY FACE	[1685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62A, 0x0041 };
    uint32_t const ces[9] = { 0x1685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_416)
{
    // 1F62A 0062;	
    // (😪) SLEEPY FACE	[1685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62A, 0x0062 };
    uint32_t const ces[9] = { 0x1685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_417)
{
    // 1F62B 0021;	
    // (😫) TIRED FACE	[1686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62B, 0x0021 };
    uint32_t const ces[9] = { 0x1686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_418)
{
    // 1F62B 003F;	
    // (😫) TIRED FACE	[1686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62B, 0x003F };
    uint32_t const ces[9] = { 0x1686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_419)
{
    // 1F62B 0061;	
    // (😫) TIRED FACE	[1686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62B, 0x0061 };
    uint32_t const ces[9] = { 0x1686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_420)
{
    // 1F62B 0041;	
    // (😫) TIRED FACE	[1686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62B, 0x0041 };
    uint32_t const ces[9] = { 0x1686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_421)
{
    // 1F62B 0062;	
    // (😫) TIRED FACE	[1686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62B, 0x0062 };
    uint32_t const ces[9] = { 0x1686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_422)
{
    // 1F62C 0021;	
    // (😬) GRIMACING FACE	[1687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62C, 0x0021 };
    uint32_t const ces[9] = { 0x1687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_423)
{
    // 1F62C 003F;	
    // (😬) GRIMACING FACE	[1687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62C, 0x003F };
    uint32_t const ces[9] = { 0x1687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_424)
{
    // 1F62C 0061;	
    // (😬) GRIMACING FACE	[1687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62C, 0x0061 };
    uint32_t const ces[9] = { 0x1687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_425)
{
    // 1F62C 0041;	
    // (😬) GRIMACING FACE	[1687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62C, 0x0041 };
    uint32_t const ces[9] = { 0x1687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_426)
{
    // 1F62C 0062;	
    // (😬) GRIMACING FACE	[1687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62C, 0x0062 };
    uint32_t const ces[9] = { 0x1687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_427)
{
    // 1F62D 0021;	
    // (😭) LOUDLY CRYING FACE	[1688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62D, 0x0021 };
    uint32_t const ces[9] = { 0x1688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_428)
{
    // 1F62D 003F;	
    // (😭) LOUDLY CRYING FACE	[1688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62D, 0x003F };
    uint32_t const ces[9] = { 0x1688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_429)
{
    // 1F62D 0061;	
    // (😭) LOUDLY CRYING FACE	[1688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62D, 0x0061 };
    uint32_t const ces[9] = { 0x1688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_430)
{
    // 1F62D 0041;	
    // (😭) LOUDLY CRYING FACE	[1688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62D, 0x0041 };
    uint32_t const ces[9] = { 0x1688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_431)
{
    // 1F62D 0062;	
    // (😭) LOUDLY CRYING FACE	[1688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62D, 0x0062 };
    uint32_t const ces[9] = { 0x1688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_432)
{
    // 1F62E 0021;	
    // (😮) FACE WITH OPEN MOUTH	[1689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62E, 0x0021 };
    uint32_t const ces[9] = { 0x1689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_433)
{
    // 1F62E 003F;	
    // (😮) FACE WITH OPEN MOUTH	[1689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62E, 0x003F };
    uint32_t const ces[9] = { 0x1689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_434)
{
    // 1F62E 0061;	
    // (😮) FACE WITH OPEN MOUTH	[1689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62E, 0x0061 };
    uint32_t const ces[9] = { 0x1689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_435)
{
    // 1F62E 0041;	
    // (😮) FACE WITH OPEN MOUTH	[1689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62E, 0x0041 };
    uint32_t const ces[9] = { 0x1689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_436)
{
    // 1F62E 0062;	
    // (😮) FACE WITH OPEN MOUTH	[1689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62E, 0x0062 };
    uint32_t const ces[9] = { 0x1689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_437)
{
    // 1F62F 0021;	
    // (😯) HUSHED FACE	[168A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62F, 0x0021 };
    uint32_t const ces[9] = { 0x168A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_438)
{
    // 1F62F 003F;	
    // (😯) HUSHED FACE	[168A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62F, 0x003F };
    uint32_t const ces[9] = { 0x168A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_439)
{
    // 1F62F 0061;	
    // (😯) HUSHED FACE	[168A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62F, 0x0061 };
    uint32_t const ces[9] = { 0x168A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_440)
{
    // 1F62F 0041;	
    // (😯) HUSHED FACE	[168A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F62F, 0x0041 };
    uint32_t const ces[9] = { 0x168A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_441)
{
    // 1F62F 0062;	
    // (😯) HUSHED FACE	[168A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F62F, 0x0062 };
    uint32_t const ces[9] = { 0x168A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_442)
{
    // 1F630 0021;	
    // (😰) FACE WITH OPEN MOUTH AND COLD SWEAT	[168B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F630, 0x0021 };
    uint32_t const ces[9] = { 0x168B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_443)
{
    // 1F630 003F;	
    // (😰) FACE WITH OPEN MOUTH AND COLD SWEAT	[168B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F630, 0x003F };
    uint32_t const ces[9] = { 0x168B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_444)
{
    // 1F630 0061;	
    // (😰) FACE WITH OPEN MOUTH AND COLD SWEAT	[168B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F630, 0x0061 };
    uint32_t const ces[9] = { 0x168B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_445)
{
    // 1F630 0041;	
    // (😰) FACE WITH OPEN MOUTH AND COLD SWEAT	[168B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F630, 0x0041 };
    uint32_t const ces[9] = { 0x168B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_446)
{
    // 1F630 0062;	
    // (😰) FACE WITH OPEN MOUTH AND COLD SWEAT	[168B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F630, 0x0062 };
    uint32_t const ces[9] = { 0x168B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_447)
{
    // 1F631 0021;	
    // (😱) FACE SCREAMING IN FEAR	[168C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F631, 0x0021 };
    uint32_t const ces[9] = { 0x168C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_448)
{
    // 1F631 003F;	
    // (😱) FACE SCREAMING IN FEAR	[168C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F631, 0x003F };
    uint32_t const ces[9] = { 0x168C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_449)
{
    // 1F631 0061;	
    // (😱) FACE SCREAMING IN FEAR	[168C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F631, 0x0061 };
    uint32_t const ces[9] = { 0x168C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_450)
{
    // 1F631 0041;	
    // (😱) FACE SCREAMING IN FEAR	[168C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F631, 0x0041 };
    uint32_t const ces[9] = { 0x168C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_451)
{
    // 1F631 0062;	
    // (😱) FACE SCREAMING IN FEAR	[168C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F631, 0x0062 };
    uint32_t const ces[9] = { 0x168C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_452)
{
    // 1F632 0021;	
    // (😲) ASTONISHED FACE	[168D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F632, 0x0021 };
    uint32_t const ces[9] = { 0x168D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_453)
{
    // 1F632 003F;	
    // (😲) ASTONISHED FACE	[168D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F632, 0x003F };
    uint32_t const ces[9] = { 0x168D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_454)
{
    // 1F632 0061;	
    // (😲) ASTONISHED FACE	[168D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F632, 0x0061 };
    uint32_t const ces[9] = { 0x168D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_455)
{
    // 1F632 0041;	
    // (😲) ASTONISHED FACE	[168D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F632, 0x0041 };
    uint32_t const ces[9] = { 0x168D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_456)
{
    // 1F632 0062;	
    // (😲) ASTONISHED FACE	[168D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F632, 0x0062 };
    uint32_t const ces[9] = { 0x168D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_457)
{
    // 1F633 0021;	
    // (😳) FLUSHED FACE	[168E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F633, 0x0021 };
    uint32_t const ces[9] = { 0x168E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_458)
{
    // 1F633 003F;	
    // (😳) FLUSHED FACE	[168E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F633, 0x003F };
    uint32_t const ces[9] = { 0x168E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_459)
{
    // 1F633 0061;	
    // (😳) FLUSHED FACE	[168E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F633, 0x0061 };
    uint32_t const ces[9] = { 0x168E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_460)
{
    // 1F633 0041;	
    // (😳) FLUSHED FACE	[168E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F633, 0x0041 };
    uint32_t const ces[9] = { 0x168E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_461)
{
    // 1F633 0062;	
    // (😳) FLUSHED FACE	[168E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F633, 0x0062 };
    uint32_t const ces[9] = { 0x168E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_462)
{
    // 1F634 0021;	
    // (😴) SLEEPING FACE	[168F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F634, 0x0021 };
    uint32_t const ces[9] = { 0x168F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_463)
{
    // 1F634 003F;	
    // (😴) SLEEPING FACE	[168F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F634, 0x003F };
    uint32_t const ces[9] = { 0x168F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_464)
{
    // 1F634 0061;	
    // (😴) SLEEPING FACE	[168F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F634, 0x0061 };
    uint32_t const ces[9] = { 0x168F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_465)
{
    // 1F634 0041;	
    // (😴) SLEEPING FACE	[168F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F634, 0x0041 };
    uint32_t const ces[9] = { 0x168F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_466)
{
    // 1F634 0062;	
    // (😴) SLEEPING FACE	[168F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F634, 0x0062 };
    uint32_t const ces[9] = { 0x168F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_467)
{
    // 1F635 0021;	
    // (😵) DIZZY FACE	[1690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F635, 0x0021 };
    uint32_t const ces[9] = { 0x1690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_468)
{
    // 1F635 003F;	
    // (😵) DIZZY FACE	[1690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F635, 0x003F };
    uint32_t const ces[9] = { 0x1690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_469)
{
    // 1F635 0061;	
    // (😵) DIZZY FACE	[1690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F635, 0x0061 };
    uint32_t const ces[9] = { 0x1690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_470)
{
    // 1F635 0041;	
    // (😵) DIZZY FACE	[1690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F635, 0x0041 };
    uint32_t const ces[9] = { 0x1690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_471)
{
    // 1F635 0062;	
    // (😵) DIZZY FACE	[1690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F635, 0x0062 };
    uint32_t const ces[9] = { 0x1690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_472)
{
    // 1F636 0021;	
    // (😶) FACE WITHOUT MOUTH	[1691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F636, 0x0021 };
    uint32_t const ces[9] = { 0x1691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_473)
{
    // 1F636 003F;	
    // (😶) FACE WITHOUT MOUTH	[1691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F636, 0x003F };
    uint32_t const ces[9] = { 0x1691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_474)
{
    // 1F636 0061;	
    // (😶) FACE WITHOUT MOUTH	[1691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F636, 0x0061 };
    uint32_t const ces[9] = { 0x1691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_475)
{
    // 1F636 0041;	
    // (😶) FACE WITHOUT MOUTH	[1691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F636, 0x0041 };
    uint32_t const ces[9] = { 0x1691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_476)
{
    // 1F636 0062;	
    // (😶) FACE WITHOUT MOUTH	[1691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F636, 0x0062 };
    uint32_t const ces[9] = { 0x1691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_477)
{
    // 1F637 0021;	
    // (😷) FACE WITH MEDICAL MASK	[1692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F637, 0x0021 };
    uint32_t const ces[9] = { 0x1692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_478)
{
    // 1F637 003F;	
    // (😷) FACE WITH MEDICAL MASK	[1692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F637, 0x003F };
    uint32_t const ces[9] = { 0x1692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_479)
{
    // 1F637 0061;	
    // (😷) FACE WITH MEDICAL MASK	[1692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F637, 0x0061 };
    uint32_t const ces[9] = { 0x1692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_480)
{
    // 1F637 0041;	
    // (😷) FACE WITH MEDICAL MASK	[1692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F637, 0x0041 };
    uint32_t const ces[9] = { 0x1692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_481)
{
    // 1F637 0062;	
    // (😷) FACE WITH MEDICAL MASK	[1692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F637, 0x0062 };
    uint32_t const ces[9] = { 0x1692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_482)
{
    // 1F638 0021;	
    // (😸) GRINNING CAT FACE WITH SMILING EYES	[1693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F638, 0x0021 };
    uint32_t const ces[9] = { 0x1693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_483)
{
    // 1F638 003F;	
    // (😸) GRINNING CAT FACE WITH SMILING EYES	[1693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F638, 0x003F };
    uint32_t const ces[9] = { 0x1693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_484)
{
    // 1F638 0061;	
    // (😸) GRINNING CAT FACE WITH SMILING EYES	[1693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F638, 0x0061 };
    uint32_t const ces[9] = { 0x1693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_485)
{
    // 1F638 0041;	
    // (😸) GRINNING CAT FACE WITH SMILING EYES	[1693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F638, 0x0041 };
    uint32_t const ces[9] = { 0x1693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_486)
{
    // 1F638 0062;	
    // (😸) GRINNING CAT FACE WITH SMILING EYES	[1693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F638, 0x0062 };
    uint32_t const ces[9] = { 0x1693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_487)
{
    // 1F639 0021;	
    // (😹) CAT FACE WITH TEARS OF JOY	[1694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F639, 0x0021 };
    uint32_t const ces[9] = { 0x1694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_488)
{
    // 1F639 003F;	
    // (😹) CAT FACE WITH TEARS OF JOY	[1694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F639, 0x003F };
    uint32_t const ces[9] = { 0x1694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_489)
{
    // 1F639 0061;	
    // (😹) CAT FACE WITH TEARS OF JOY	[1694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F639, 0x0061 };
    uint32_t const ces[9] = { 0x1694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_490)
{
    // 1F639 0041;	
    // (😹) CAT FACE WITH TEARS OF JOY	[1694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F639, 0x0041 };
    uint32_t const ces[9] = { 0x1694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_491)
{
    // 1F639 0062;	
    // (😹) CAT FACE WITH TEARS OF JOY	[1694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F639, 0x0062 };
    uint32_t const ces[9] = { 0x1694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_492)
{
    // 1F63A 0021;	
    // (😺) SMILING CAT FACE WITH OPEN MOUTH	[1695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63A, 0x0021 };
    uint32_t const ces[9] = { 0x1695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_493)
{
    // 1F63A 003F;	
    // (😺) SMILING CAT FACE WITH OPEN MOUTH	[1695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63A, 0x003F };
    uint32_t const ces[9] = { 0x1695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_494)
{
    // 1F63A 0061;	
    // (😺) SMILING CAT FACE WITH OPEN MOUTH	[1695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63A, 0x0061 };
    uint32_t const ces[9] = { 0x1695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_495)
{
    // 1F63A 0041;	
    // (😺) SMILING CAT FACE WITH OPEN MOUTH	[1695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63A, 0x0041 };
    uint32_t const ces[9] = { 0x1695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_496)
{
    // 1F63A 0062;	
    // (😺) SMILING CAT FACE WITH OPEN MOUTH	[1695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63A, 0x0062 };
    uint32_t const ces[9] = { 0x1695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_497)
{
    // 1F63B 0021;	
    // (😻) SMILING CAT FACE WITH HEART-SHAPED EYES	[1696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63B, 0x0021 };
    uint32_t const ces[9] = { 0x1696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_498)
{
    // 1F63B 003F;	
    // (😻) SMILING CAT FACE WITH HEART-SHAPED EYES	[1696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63B, 0x003F };
    uint32_t const ces[9] = { 0x1696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_064_499)
{
    // 1F63B 0061;	
    // (😻) SMILING CAT FACE WITH HEART-SHAPED EYES	[1696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63B, 0x0061 };
    uint32_t const ces[9] = { 0x1696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

