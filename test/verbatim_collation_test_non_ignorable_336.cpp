// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_336_000)
{
    // 3797 003F;	
    // (㞗) CJK UNIFIED IDEOGRAPH-3797	[FB80 B797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3797, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_001)
{
    // 3797 0061;	
    // (㞗) CJK UNIFIED IDEOGRAPH-3797	[FB80 B797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3797, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_002)
{
    // 3797 0041;	
    // (㞗) CJK UNIFIED IDEOGRAPH-3797	[FB80 B797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3797, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_003)
{
    // 3797 0062;	
    // (㞗) CJK UNIFIED IDEOGRAPH-3797	[FB80 B797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3797, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_004)
{
    // 3798 0021;	
    // (㞘) CJK UNIFIED IDEOGRAPH-3798	[FB80 B798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3798, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_005)
{
    // 3798 003F;	
    // (㞘) CJK UNIFIED IDEOGRAPH-3798	[FB80 B798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3798, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_006)
{
    // 3798 0061;	
    // (㞘) CJK UNIFIED IDEOGRAPH-3798	[FB80 B798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3798, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_007)
{
    // 3798 0041;	
    // (㞘) CJK UNIFIED IDEOGRAPH-3798	[FB80 B798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3798, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_008)
{
    // 3798 0062;	
    // (㞘) CJK UNIFIED IDEOGRAPH-3798	[FB80 B798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3798, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_009)
{
    // 3799 0021;	
    // (㞙) CJK UNIFIED IDEOGRAPH-3799	[FB80 B799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3799, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_010)
{
    // 3799 003F;	
    // (㞙) CJK UNIFIED IDEOGRAPH-3799	[FB80 B799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3799, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_011)
{
    // 3799 0061;	
    // (㞙) CJK UNIFIED IDEOGRAPH-3799	[FB80 B799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3799, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_012)
{
    // 3799 0041;	
    // (㞙) CJK UNIFIED IDEOGRAPH-3799	[FB80 B799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3799, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_013)
{
    // 3799 0062;	
    // (㞙) CJK UNIFIED IDEOGRAPH-3799	[FB80 B799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3799, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_014)
{
    // 379A 0021;	
    // (㞚) CJK UNIFIED IDEOGRAPH-379A	[FB80 B79A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_015)
{
    // 379A 003F;	
    // (㞚) CJK UNIFIED IDEOGRAPH-379A	[FB80 B79A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_016)
{
    // 379A 0061;	
    // (㞚) CJK UNIFIED IDEOGRAPH-379A	[FB80 B79A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_017)
{
    // 379A 0041;	
    // (㞚) CJK UNIFIED IDEOGRAPH-379A	[FB80 B79A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_018)
{
    // 379A 0062;	
    // (㞚) CJK UNIFIED IDEOGRAPH-379A	[FB80 B79A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_019)
{
    // 379B 0021;	
    // (㞛) CJK UNIFIED IDEOGRAPH-379B	[FB80 B79B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_020)
{
    // 379B 003F;	
    // (㞛) CJK UNIFIED IDEOGRAPH-379B	[FB80 B79B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_021)
{
    // 379B 0061;	
    // (㞛) CJK UNIFIED IDEOGRAPH-379B	[FB80 B79B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_022)
{
    // 379B 0041;	
    // (㞛) CJK UNIFIED IDEOGRAPH-379B	[FB80 B79B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_023)
{
    // 379B 0062;	
    // (㞛) CJK UNIFIED IDEOGRAPH-379B	[FB80 B79B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_024)
{
    // 379C 0021;	
    // (㞜) CJK UNIFIED IDEOGRAPH-379C	[FB80 B79C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_025)
{
    // 379C 003F;	
    // (㞜) CJK UNIFIED IDEOGRAPH-379C	[FB80 B79C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_026)
{
    // 379C 0061;	
    // (㞜) CJK UNIFIED IDEOGRAPH-379C	[FB80 B79C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_027)
{
    // 379C 0041;	
    // (㞜) CJK UNIFIED IDEOGRAPH-379C	[FB80 B79C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_028)
{
    // 379C 0062;	
    // (㞜) CJK UNIFIED IDEOGRAPH-379C	[FB80 B79C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_029)
{
    // 379D 0021;	
    // (㞝) CJK UNIFIED IDEOGRAPH-379D	[FB80 B79D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_030)
{
    // 379D 003F;	
    // (㞝) CJK UNIFIED IDEOGRAPH-379D	[FB80 B79D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_031)
{
    // 379D 0061;	
    // (㞝) CJK UNIFIED IDEOGRAPH-379D	[FB80 B79D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_032)
{
    // 379D 0041;	
    // (㞝) CJK UNIFIED IDEOGRAPH-379D	[FB80 B79D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_033)
{
    // 379D 0062;	
    // (㞝) CJK UNIFIED IDEOGRAPH-379D	[FB80 B79D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_034)
{
    // 379E 0021;	
    // (㞞) CJK UNIFIED IDEOGRAPH-379E	[FB80 B79E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_035)
{
    // 379E 003F;	
    // (㞞) CJK UNIFIED IDEOGRAPH-379E	[FB80 B79E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_036)
{
    // 379E 0061;	
    // (㞞) CJK UNIFIED IDEOGRAPH-379E	[FB80 B79E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_037)
{
    // 379E 0041;	
    // (㞞) CJK UNIFIED IDEOGRAPH-379E	[FB80 B79E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_038)
{
    // 379E 0062;	
    // (㞞) CJK UNIFIED IDEOGRAPH-379E	[FB80 B79E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_039)
{
    // 379F 0021;	
    // (㞟) CJK UNIFIED IDEOGRAPH-379F	[FB80 B79F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB79F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_040)
{
    // 379F 003F;	
    // (㞟) CJK UNIFIED IDEOGRAPH-379F	[FB80 B79F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB79F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_041)
{
    // 379F 0061;	
    // (㞟) CJK UNIFIED IDEOGRAPH-379F	[FB80 B79F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB79F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_042)
{
    // 379F 0041;	
    // (㞟) CJK UNIFIED IDEOGRAPH-379F	[FB80 B79F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x379F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB79F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_043)
{
    // 379F 0062;	
    // (㞟) CJK UNIFIED IDEOGRAPH-379F	[FB80 B79F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x379F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB79F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_044)
{
    // 37A0 0021;	
    // (㞠) CJK UNIFIED IDEOGRAPH-37A0	[FB80 B7A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_045)
{
    // 37A0 003F;	
    // (㞠) CJK UNIFIED IDEOGRAPH-37A0	[FB80 B7A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_046)
{
    // 37A0 0061;	
    // (㞠) CJK UNIFIED IDEOGRAPH-37A0	[FB80 B7A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_047)
{
    // 37A0 0041;	
    // (㞠) CJK UNIFIED IDEOGRAPH-37A0	[FB80 B7A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_048)
{
    // 37A0 0062;	
    // (㞠) CJK UNIFIED IDEOGRAPH-37A0	[FB80 B7A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_049)
{
    // 37A1 0021;	
    // (㞡) CJK UNIFIED IDEOGRAPH-37A1	[FB80 B7A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_050)
{
    // 37A1 003F;	
    // (㞡) CJK UNIFIED IDEOGRAPH-37A1	[FB80 B7A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_051)
{
    // 37A1 0061;	
    // (㞡) CJK UNIFIED IDEOGRAPH-37A1	[FB80 B7A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_052)
{
    // 37A1 0041;	
    // (㞡) CJK UNIFIED IDEOGRAPH-37A1	[FB80 B7A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_053)
{
    // 37A1 0062;	
    // (㞡) CJK UNIFIED IDEOGRAPH-37A1	[FB80 B7A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_054)
{
    // 37A2 0021;	
    // (㞢) CJK UNIFIED IDEOGRAPH-37A2	[FB80 B7A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_055)
{
    // 37A2 003F;	
    // (㞢) CJK UNIFIED IDEOGRAPH-37A2	[FB80 B7A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_056)
{
    // 37A2 0061;	
    // (㞢) CJK UNIFIED IDEOGRAPH-37A2	[FB80 B7A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_057)
{
    // 37A2 0041;	
    // (㞢) CJK UNIFIED IDEOGRAPH-37A2	[FB80 B7A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_058)
{
    // 37A2 0062;	
    // (㞢) CJK UNIFIED IDEOGRAPH-37A2	[FB80 B7A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_059)
{
    // 37A3 0021;	
    // (㞣) CJK UNIFIED IDEOGRAPH-37A3	[FB80 B7A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_060)
{
    // 37A3 003F;	
    // (㞣) CJK UNIFIED IDEOGRAPH-37A3	[FB80 B7A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_061)
{
    // 37A3 0061;	
    // (㞣) CJK UNIFIED IDEOGRAPH-37A3	[FB80 B7A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_062)
{
    // 37A3 0041;	
    // (㞣) CJK UNIFIED IDEOGRAPH-37A3	[FB80 B7A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_063)
{
    // 37A3 0062;	
    // (㞣) CJK UNIFIED IDEOGRAPH-37A3	[FB80 B7A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_064)
{
    // 37A4 0021;	
    // (㞤) CJK UNIFIED IDEOGRAPH-37A4	[FB80 B7A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_065)
{
    // 37A4 003F;	
    // (㞤) CJK UNIFIED IDEOGRAPH-37A4	[FB80 B7A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_066)
{
    // 37A4 0061;	
    // (㞤) CJK UNIFIED IDEOGRAPH-37A4	[FB80 B7A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_067)
{
    // 37A4 0041;	
    // (㞤) CJK UNIFIED IDEOGRAPH-37A4	[FB80 B7A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_068)
{
    // 37A4 0062;	
    // (㞤) CJK UNIFIED IDEOGRAPH-37A4	[FB80 B7A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_069)
{
    // 37A5 0021;	
    // (㞥) CJK UNIFIED IDEOGRAPH-37A5	[FB80 B7A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_070)
{
    // 37A5 003F;	
    // (㞥) CJK UNIFIED IDEOGRAPH-37A5	[FB80 B7A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_071)
{
    // 37A5 0061;	
    // (㞥) CJK UNIFIED IDEOGRAPH-37A5	[FB80 B7A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_072)
{
    // 37A5 0041;	
    // (㞥) CJK UNIFIED IDEOGRAPH-37A5	[FB80 B7A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_073)
{
    // 37A5 0062;	
    // (㞥) CJK UNIFIED IDEOGRAPH-37A5	[FB80 B7A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_074)
{
    // 37A6 0021;	
    // (㞦) CJK UNIFIED IDEOGRAPH-37A6	[FB80 B7A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_075)
{
    // 37A6 003F;	
    // (㞦) CJK UNIFIED IDEOGRAPH-37A6	[FB80 B7A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_076)
{
    // 37A6 0061;	
    // (㞦) CJK UNIFIED IDEOGRAPH-37A6	[FB80 B7A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_077)
{
    // 37A6 0041;	
    // (㞦) CJK UNIFIED IDEOGRAPH-37A6	[FB80 B7A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_078)
{
    // 37A6 0062;	
    // (㞦) CJK UNIFIED IDEOGRAPH-37A6	[FB80 B7A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_079)
{
    // 37A7 0021;	
    // (㞧) CJK UNIFIED IDEOGRAPH-37A7	[FB80 B7A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_080)
{
    // 37A7 003F;	
    // (㞧) CJK UNIFIED IDEOGRAPH-37A7	[FB80 B7A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_081)
{
    // 37A7 0061;	
    // (㞧) CJK UNIFIED IDEOGRAPH-37A7	[FB80 B7A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_082)
{
    // 37A7 0041;	
    // (㞧) CJK UNIFIED IDEOGRAPH-37A7	[FB80 B7A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_083)
{
    // 37A7 0062;	
    // (㞧) CJK UNIFIED IDEOGRAPH-37A7	[FB80 B7A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_084)
{
    // 37A8 0021;	
    // (㞨) CJK UNIFIED IDEOGRAPH-37A8	[FB80 B7A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_085)
{
    // 37A8 003F;	
    // (㞨) CJK UNIFIED IDEOGRAPH-37A8	[FB80 B7A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_086)
{
    // 37A8 0061;	
    // (㞨) CJK UNIFIED IDEOGRAPH-37A8	[FB80 B7A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_087)
{
    // 37A8 0041;	
    // (㞨) CJK UNIFIED IDEOGRAPH-37A8	[FB80 B7A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_088)
{
    // 37A8 0062;	
    // (㞨) CJK UNIFIED IDEOGRAPH-37A8	[FB80 B7A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_089)
{
    // 37A9 0021;	
    // (㞩) CJK UNIFIED IDEOGRAPH-37A9	[FB80 B7A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_090)
{
    // 37A9 003F;	
    // (㞩) CJK UNIFIED IDEOGRAPH-37A9	[FB80 B7A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_091)
{
    // 37A9 0061;	
    // (㞩) CJK UNIFIED IDEOGRAPH-37A9	[FB80 B7A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_092)
{
    // 37A9 0041;	
    // (㞩) CJK UNIFIED IDEOGRAPH-37A9	[FB80 B7A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_093)
{
    // 37A9 0062;	
    // (㞩) CJK UNIFIED IDEOGRAPH-37A9	[FB80 B7A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_094)
{
    // 37AA 0021;	
    // (㞪) CJK UNIFIED IDEOGRAPH-37AA	[FB80 B7AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_095)
{
    // 37AA 003F;	
    // (㞪) CJK UNIFIED IDEOGRAPH-37AA	[FB80 B7AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_096)
{
    // 37AA 0061;	
    // (㞪) CJK UNIFIED IDEOGRAPH-37AA	[FB80 B7AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_097)
{
    // 37AA 0041;	
    // (㞪) CJK UNIFIED IDEOGRAPH-37AA	[FB80 B7AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_098)
{
    // 37AA 0062;	
    // (㞪) CJK UNIFIED IDEOGRAPH-37AA	[FB80 B7AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_099)
{
    // 37AB 0021;	
    // (㞫) CJK UNIFIED IDEOGRAPH-37AB	[FB80 B7AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_100)
{
    // 37AB 003F;	
    // (㞫) CJK UNIFIED IDEOGRAPH-37AB	[FB80 B7AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_101)
{
    // 37AB 0061;	
    // (㞫) CJK UNIFIED IDEOGRAPH-37AB	[FB80 B7AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_102)
{
    // 37AB 0041;	
    // (㞫) CJK UNIFIED IDEOGRAPH-37AB	[FB80 B7AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_103)
{
    // 37AB 0062;	
    // (㞫) CJK UNIFIED IDEOGRAPH-37AB	[FB80 B7AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_104)
{
    // 37AC 0021;	
    // (㞬) CJK UNIFIED IDEOGRAPH-37AC	[FB80 B7AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_105)
{
    // 37AC 003F;	
    // (㞬) CJK UNIFIED IDEOGRAPH-37AC	[FB80 B7AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_106)
{
    // 37AC 0061;	
    // (㞬) CJK UNIFIED IDEOGRAPH-37AC	[FB80 B7AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_107)
{
    // 37AC 0041;	
    // (㞬) CJK UNIFIED IDEOGRAPH-37AC	[FB80 B7AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_108)
{
    // 37AC 0062;	
    // (㞬) CJK UNIFIED IDEOGRAPH-37AC	[FB80 B7AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_109)
{
    // 37AD 0021;	
    // (㞭) CJK UNIFIED IDEOGRAPH-37AD	[FB80 B7AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_110)
{
    // 37AD 003F;	
    // (㞭) CJK UNIFIED IDEOGRAPH-37AD	[FB80 B7AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_111)
{
    // 37AD 0061;	
    // (㞭) CJK UNIFIED IDEOGRAPH-37AD	[FB80 B7AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_112)
{
    // 37AD 0041;	
    // (㞭) CJK UNIFIED IDEOGRAPH-37AD	[FB80 B7AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_113)
{
    // 37AD 0062;	
    // (㞭) CJK UNIFIED IDEOGRAPH-37AD	[FB80 B7AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_114)
{
    // 37AE 0021;	
    // (㞮) CJK UNIFIED IDEOGRAPH-37AE	[FB80 B7AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_115)
{
    // 37AE 003F;	
    // (㞮) CJK UNIFIED IDEOGRAPH-37AE	[FB80 B7AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_116)
{
    // 37AE 0061;	
    // (㞮) CJK UNIFIED IDEOGRAPH-37AE	[FB80 B7AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_117)
{
    // 37AE 0041;	
    // (㞮) CJK UNIFIED IDEOGRAPH-37AE	[FB80 B7AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_118)
{
    // 37AE 0062;	
    // (㞮) CJK UNIFIED IDEOGRAPH-37AE	[FB80 B7AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_119)
{
    // 37AF 0021;	
    // (㞯) CJK UNIFIED IDEOGRAPH-37AF	[FB80 B7AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_120)
{
    // 37AF 003F;	
    // (㞯) CJK UNIFIED IDEOGRAPH-37AF	[FB80 B7AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_121)
{
    // 37AF 0061;	
    // (㞯) CJK UNIFIED IDEOGRAPH-37AF	[FB80 B7AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_122)
{
    // 37AF 0041;	
    // (㞯) CJK UNIFIED IDEOGRAPH-37AF	[FB80 B7AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_123)
{
    // 37AF 0062;	
    // (㞯) CJK UNIFIED IDEOGRAPH-37AF	[FB80 B7AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_124)
{
    // 37B0 0021;	
    // (㞰) CJK UNIFIED IDEOGRAPH-37B0	[FB80 B7B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_125)
{
    // 37B0 003F;	
    // (㞰) CJK UNIFIED IDEOGRAPH-37B0	[FB80 B7B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_126)
{
    // 37B0 0061;	
    // (㞰) CJK UNIFIED IDEOGRAPH-37B0	[FB80 B7B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_127)
{
    // 37B0 0041;	
    // (㞰) CJK UNIFIED IDEOGRAPH-37B0	[FB80 B7B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_128)
{
    // 37B0 0062;	
    // (㞰) CJK UNIFIED IDEOGRAPH-37B0	[FB80 B7B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_129)
{
    // 37B1 0021;	
    // (㞱) CJK UNIFIED IDEOGRAPH-37B1	[FB80 B7B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_130)
{
    // 37B1 003F;	
    // (㞱) CJK UNIFIED IDEOGRAPH-37B1	[FB80 B7B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_131)
{
    // 37B1 0061;	
    // (㞱) CJK UNIFIED IDEOGRAPH-37B1	[FB80 B7B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_132)
{
    // 37B1 0041;	
    // (㞱) CJK UNIFIED IDEOGRAPH-37B1	[FB80 B7B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_133)
{
    // 37B1 0062;	
    // (㞱) CJK UNIFIED IDEOGRAPH-37B1	[FB80 B7B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_134)
{
    // 37B2 0021;	
    // (㞲) CJK UNIFIED IDEOGRAPH-37B2	[FB80 B7B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_135)
{
    // 37B2 003F;	
    // (㞲) CJK UNIFIED IDEOGRAPH-37B2	[FB80 B7B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_136)
{
    // 37B2 0061;	
    // (㞲) CJK UNIFIED IDEOGRAPH-37B2	[FB80 B7B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_137)
{
    // 37B2 0041;	
    // (㞲) CJK UNIFIED IDEOGRAPH-37B2	[FB80 B7B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_138)
{
    // 37B2 0062;	
    // (㞲) CJK UNIFIED IDEOGRAPH-37B2	[FB80 B7B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_139)
{
    // 37B3 0021;	
    // (㞳) CJK UNIFIED IDEOGRAPH-37B3	[FB80 B7B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_140)
{
    // 37B3 003F;	
    // (㞳) CJK UNIFIED IDEOGRAPH-37B3	[FB80 B7B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_141)
{
    // 37B3 0061;	
    // (㞳) CJK UNIFIED IDEOGRAPH-37B3	[FB80 B7B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_142)
{
    // 37B3 0041;	
    // (㞳) CJK UNIFIED IDEOGRAPH-37B3	[FB80 B7B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_143)
{
    // 37B3 0062;	
    // (㞳) CJK UNIFIED IDEOGRAPH-37B3	[FB80 B7B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_144)
{
    // 37B4 0021;	
    // (㞴) CJK UNIFIED IDEOGRAPH-37B4	[FB80 B7B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_145)
{
    // 37B4 003F;	
    // (㞴) CJK UNIFIED IDEOGRAPH-37B4	[FB80 B7B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_146)
{
    // 37B4 0061;	
    // (㞴) CJK UNIFIED IDEOGRAPH-37B4	[FB80 B7B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_147)
{
    // 37B4 0041;	
    // (㞴) CJK UNIFIED IDEOGRAPH-37B4	[FB80 B7B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_148)
{
    // 37B4 0062;	
    // (㞴) CJK UNIFIED IDEOGRAPH-37B4	[FB80 B7B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_149)
{
    // 37B5 0021;	
    // (㞵) CJK UNIFIED IDEOGRAPH-37B5	[FB80 B7B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_150)
{
    // 37B5 003F;	
    // (㞵) CJK UNIFIED IDEOGRAPH-37B5	[FB80 B7B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_151)
{
    // 37B5 0061;	
    // (㞵) CJK UNIFIED IDEOGRAPH-37B5	[FB80 B7B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_152)
{
    // 37B5 0041;	
    // (㞵) CJK UNIFIED IDEOGRAPH-37B5	[FB80 B7B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_153)
{
    // 37B5 0062;	
    // (㞵) CJK UNIFIED IDEOGRAPH-37B5	[FB80 B7B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_154)
{
    // 37B6 0021;	
    // (㞶) CJK UNIFIED IDEOGRAPH-37B6	[FB80 B7B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_155)
{
    // 37B6 003F;	
    // (㞶) CJK UNIFIED IDEOGRAPH-37B6	[FB80 B7B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_156)
{
    // 37B6 0061;	
    // (㞶) CJK UNIFIED IDEOGRAPH-37B6	[FB80 B7B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_157)
{
    // 37B6 0041;	
    // (㞶) CJK UNIFIED IDEOGRAPH-37B6	[FB80 B7B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_158)
{
    // 37B6 0062;	
    // (㞶) CJK UNIFIED IDEOGRAPH-37B6	[FB80 B7B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_159)
{
    // 37B7 0021;	
    // (㞷) CJK UNIFIED IDEOGRAPH-37B7	[FB80 B7B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_160)
{
    // 37B7 003F;	
    // (㞷) CJK UNIFIED IDEOGRAPH-37B7	[FB80 B7B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_161)
{
    // 37B7 0061;	
    // (㞷) CJK UNIFIED IDEOGRAPH-37B7	[FB80 B7B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_162)
{
    // 37B7 0041;	
    // (㞷) CJK UNIFIED IDEOGRAPH-37B7	[FB80 B7B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_163)
{
    // 37B7 0062;	
    // (㞷) CJK UNIFIED IDEOGRAPH-37B7	[FB80 B7B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_164)
{
    // 37B8 0021;	
    // (㞸) CJK UNIFIED IDEOGRAPH-37B8	[FB80 B7B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_165)
{
    // 37B8 003F;	
    // (㞸) CJK UNIFIED IDEOGRAPH-37B8	[FB80 B7B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_166)
{
    // 37B8 0061;	
    // (㞸) CJK UNIFIED IDEOGRAPH-37B8	[FB80 B7B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_167)
{
    // 37B8 0041;	
    // (㞸) CJK UNIFIED IDEOGRAPH-37B8	[FB80 B7B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_168)
{
    // 37B8 0062;	
    // (㞸) CJK UNIFIED IDEOGRAPH-37B8	[FB80 B7B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_169)
{
    // 37B9 0021;	
    // (㞹) CJK UNIFIED IDEOGRAPH-37B9	[FB80 B7B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_170)
{
    // 37B9 003F;	
    // (㞹) CJK UNIFIED IDEOGRAPH-37B9	[FB80 B7B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_171)
{
    // 37B9 0061;	
    // (㞹) CJK UNIFIED IDEOGRAPH-37B9	[FB80 B7B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_172)
{
    // 37B9 0041;	
    // (㞹) CJK UNIFIED IDEOGRAPH-37B9	[FB80 B7B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_173)
{
    // 37B9 0062;	
    // (㞹) CJK UNIFIED IDEOGRAPH-37B9	[FB80 B7B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_174)
{
    // 37BA 0021;	
    // (㞺) CJK UNIFIED IDEOGRAPH-37BA	[FB80 B7BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_175)
{
    // 37BA 003F;	
    // (㞺) CJK UNIFIED IDEOGRAPH-37BA	[FB80 B7BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_176)
{
    // 37BA 0061;	
    // (㞺) CJK UNIFIED IDEOGRAPH-37BA	[FB80 B7BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_177)
{
    // 37BA 0041;	
    // (㞺) CJK UNIFIED IDEOGRAPH-37BA	[FB80 B7BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_178)
{
    // 37BA 0062;	
    // (㞺) CJK UNIFIED IDEOGRAPH-37BA	[FB80 B7BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_179)
{
    // 37BB 0021;	
    // (㞻) CJK UNIFIED IDEOGRAPH-37BB	[FB80 B7BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_180)
{
    // 37BB 003F;	
    // (㞻) CJK UNIFIED IDEOGRAPH-37BB	[FB80 B7BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_181)
{
    // 37BB 0061;	
    // (㞻) CJK UNIFIED IDEOGRAPH-37BB	[FB80 B7BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_182)
{
    // 37BB 0041;	
    // (㞻) CJK UNIFIED IDEOGRAPH-37BB	[FB80 B7BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_183)
{
    // 37BB 0062;	
    // (㞻) CJK UNIFIED IDEOGRAPH-37BB	[FB80 B7BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_184)
{
    // 37BC 0021;	
    // (㞼) CJK UNIFIED IDEOGRAPH-37BC	[FB80 B7BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_185)
{
    // 37BC 003F;	
    // (㞼) CJK UNIFIED IDEOGRAPH-37BC	[FB80 B7BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_186)
{
    // 37BC 0061;	
    // (㞼) CJK UNIFIED IDEOGRAPH-37BC	[FB80 B7BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_187)
{
    // 37BC 0041;	
    // (㞼) CJK UNIFIED IDEOGRAPH-37BC	[FB80 B7BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_188)
{
    // 37BC 0062;	
    // (㞼) CJK UNIFIED IDEOGRAPH-37BC	[FB80 B7BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_189)
{
    // 37BD 0021;	
    // (㞽) CJK UNIFIED IDEOGRAPH-37BD	[FB80 B7BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_190)
{
    // 37BD 003F;	
    // (㞽) CJK UNIFIED IDEOGRAPH-37BD	[FB80 B7BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_191)
{
    // 37BD 0061;	
    // (㞽) CJK UNIFIED IDEOGRAPH-37BD	[FB80 B7BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_192)
{
    // 37BD 0041;	
    // (㞽) CJK UNIFIED IDEOGRAPH-37BD	[FB80 B7BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_193)
{
    // 37BD 0062;	
    // (㞽) CJK UNIFIED IDEOGRAPH-37BD	[FB80 B7BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_194)
{
    // 37BE 0021;	
    // (㞾) CJK UNIFIED IDEOGRAPH-37BE	[FB80 B7BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_195)
{
    // 37BE 003F;	
    // (㞾) CJK UNIFIED IDEOGRAPH-37BE	[FB80 B7BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_196)
{
    // 37BE 0061;	
    // (㞾) CJK UNIFIED IDEOGRAPH-37BE	[FB80 B7BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_197)
{
    // 37BE 0041;	
    // (㞾) CJK UNIFIED IDEOGRAPH-37BE	[FB80 B7BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_198)
{
    // 37BE 0062;	
    // (㞾) CJK UNIFIED IDEOGRAPH-37BE	[FB80 B7BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_199)
{
    // 37BF 0021;	
    // (㞿) CJK UNIFIED IDEOGRAPH-37BF	[FB80 B7BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_200)
{
    // 37BF 003F;	
    // (㞿) CJK UNIFIED IDEOGRAPH-37BF	[FB80 B7BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_201)
{
    // 37BF 0061;	
    // (㞿) CJK UNIFIED IDEOGRAPH-37BF	[FB80 B7BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_202)
{
    // 37BF 0041;	
    // (㞿) CJK UNIFIED IDEOGRAPH-37BF	[FB80 B7BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_203)
{
    // 37BF 0062;	
    // (㞿) CJK UNIFIED IDEOGRAPH-37BF	[FB80 B7BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_204)
{
    // 37C0 0021;	
    // (㟀) CJK UNIFIED IDEOGRAPH-37C0	[FB80 B7C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_205)
{
    // 37C0 003F;	
    // (㟀) CJK UNIFIED IDEOGRAPH-37C0	[FB80 B7C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_206)
{
    // 37C0 0061;	
    // (㟀) CJK UNIFIED IDEOGRAPH-37C0	[FB80 B7C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_207)
{
    // 37C0 0041;	
    // (㟀) CJK UNIFIED IDEOGRAPH-37C0	[FB80 B7C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_208)
{
    // 37C0 0062;	
    // (㟀) CJK UNIFIED IDEOGRAPH-37C0	[FB80 B7C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_209)
{
    // 37C1 0021;	
    // (㟁) CJK UNIFIED IDEOGRAPH-37C1	[FB80 B7C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_210)
{
    // 37C1 003F;	
    // (㟁) CJK UNIFIED IDEOGRAPH-37C1	[FB80 B7C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_211)
{
    // 37C1 0061;	
    // (㟁) CJK UNIFIED IDEOGRAPH-37C1	[FB80 B7C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_212)
{
    // 37C1 0041;	
    // (㟁) CJK UNIFIED IDEOGRAPH-37C1	[FB80 B7C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_213)
{
    // 37C1 0062;	
    // (㟁) CJK UNIFIED IDEOGRAPH-37C1	[FB80 B7C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_214)
{
    // 37C2 0021;	
    // (㟂) CJK UNIFIED IDEOGRAPH-37C2	[FB80 B7C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_215)
{
    // 37C2 003F;	
    // (㟂) CJK UNIFIED IDEOGRAPH-37C2	[FB80 B7C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_216)
{
    // 37C2 0061;	
    // (㟂) CJK UNIFIED IDEOGRAPH-37C2	[FB80 B7C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_217)
{
    // 37C2 0041;	
    // (㟂) CJK UNIFIED IDEOGRAPH-37C2	[FB80 B7C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_218)
{
    // 37C2 0062;	
    // (㟂) CJK UNIFIED IDEOGRAPH-37C2	[FB80 B7C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_219)
{
    // 37C3 0021;	
    // (㟃) CJK UNIFIED IDEOGRAPH-37C3	[FB80 B7C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_220)
{
    // 37C3 003F;	
    // (㟃) CJK UNIFIED IDEOGRAPH-37C3	[FB80 B7C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_221)
{
    // 37C3 0061;	
    // (㟃) CJK UNIFIED IDEOGRAPH-37C3	[FB80 B7C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_222)
{
    // 37C3 0041;	
    // (㟃) CJK UNIFIED IDEOGRAPH-37C3	[FB80 B7C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_223)
{
    // 37C3 0062;	
    // (㟃) CJK UNIFIED IDEOGRAPH-37C3	[FB80 B7C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_224)
{
    // 37C4 0021;	
    // (㟄) CJK UNIFIED IDEOGRAPH-37C4	[FB80 B7C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_225)
{
    // 37C4 003F;	
    // (㟄) CJK UNIFIED IDEOGRAPH-37C4	[FB80 B7C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_226)
{
    // 37C4 0061;	
    // (㟄) CJK UNIFIED IDEOGRAPH-37C4	[FB80 B7C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_227)
{
    // 37C4 0041;	
    // (㟄) CJK UNIFIED IDEOGRAPH-37C4	[FB80 B7C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_228)
{
    // 37C4 0062;	
    // (㟄) CJK UNIFIED IDEOGRAPH-37C4	[FB80 B7C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_229)
{
    // 37C5 0021;	
    // (㟅) CJK UNIFIED IDEOGRAPH-37C5	[FB80 B7C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_230)
{
    // 37C5 003F;	
    // (㟅) CJK UNIFIED IDEOGRAPH-37C5	[FB80 B7C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_231)
{
    // 37C5 0061;	
    // (㟅) CJK UNIFIED IDEOGRAPH-37C5	[FB80 B7C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_232)
{
    // 37C5 0041;	
    // (㟅) CJK UNIFIED IDEOGRAPH-37C5	[FB80 B7C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_233)
{
    // 37C5 0062;	
    // (㟅) CJK UNIFIED IDEOGRAPH-37C5	[FB80 B7C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_234)
{
    // 37C6 0021;	
    // (㟆) CJK UNIFIED IDEOGRAPH-37C6	[FB80 B7C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_235)
{
    // 37C6 003F;	
    // (㟆) CJK UNIFIED IDEOGRAPH-37C6	[FB80 B7C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_236)
{
    // 37C6 0061;	
    // (㟆) CJK UNIFIED IDEOGRAPH-37C6	[FB80 B7C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_237)
{
    // 37C6 0041;	
    // (㟆) CJK UNIFIED IDEOGRAPH-37C6	[FB80 B7C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_238)
{
    // 37C6 0062;	
    // (㟆) CJK UNIFIED IDEOGRAPH-37C6	[FB80 B7C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_239)
{
    // 37C7 0021;	
    // (㟇) CJK UNIFIED IDEOGRAPH-37C7	[FB80 B7C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_240)
{
    // 37C7 003F;	
    // (㟇) CJK UNIFIED IDEOGRAPH-37C7	[FB80 B7C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_241)
{
    // 37C7 0061;	
    // (㟇) CJK UNIFIED IDEOGRAPH-37C7	[FB80 B7C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_242)
{
    // 37C7 0041;	
    // (㟇) CJK UNIFIED IDEOGRAPH-37C7	[FB80 B7C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_243)
{
    // 37C7 0062;	
    // (㟇) CJK UNIFIED IDEOGRAPH-37C7	[FB80 B7C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_244)
{
    // 37C8 0021;	
    // (㟈) CJK UNIFIED IDEOGRAPH-37C8	[FB80 B7C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_245)
{
    // 37C8 003F;	
    // (㟈) CJK UNIFIED IDEOGRAPH-37C8	[FB80 B7C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_246)
{
    // 37C8 0061;	
    // (㟈) CJK UNIFIED IDEOGRAPH-37C8	[FB80 B7C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_247)
{
    // 37C8 0041;	
    // (㟈) CJK UNIFIED IDEOGRAPH-37C8	[FB80 B7C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_248)
{
    // 37C8 0062;	
    // (㟈) CJK UNIFIED IDEOGRAPH-37C8	[FB80 B7C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_249)
{
    // 37C9 0021;	
    // (㟉) CJK UNIFIED IDEOGRAPH-37C9	[FB80 B7C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_250)
{
    // 37C9 003F;	
    // (㟉) CJK UNIFIED IDEOGRAPH-37C9	[FB80 B7C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_251)
{
    // 37C9 0061;	
    // (㟉) CJK UNIFIED IDEOGRAPH-37C9	[FB80 B7C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_252)
{
    // 37C9 0041;	
    // (㟉) CJK UNIFIED IDEOGRAPH-37C9	[FB80 B7C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_253)
{
    // 37C9 0062;	
    // (㟉) CJK UNIFIED IDEOGRAPH-37C9	[FB80 B7C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_254)
{
    // 37CA 0021;	
    // (㟊) CJK UNIFIED IDEOGRAPH-37CA	[FB80 B7CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_255)
{
    // 37CA 003F;	
    // (㟊) CJK UNIFIED IDEOGRAPH-37CA	[FB80 B7CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_256)
{
    // 37CA 0061;	
    // (㟊) CJK UNIFIED IDEOGRAPH-37CA	[FB80 B7CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_257)
{
    // 37CA 0041;	
    // (㟊) CJK UNIFIED IDEOGRAPH-37CA	[FB80 B7CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_258)
{
    // 37CA 0062;	
    // (㟊) CJK UNIFIED IDEOGRAPH-37CA	[FB80 B7CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_259)
{
    // 37CB 0021;	
    // (㟋) CJK UNIFIED IDEOGRAPH-37CB	[FB80 B7CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_260)
{
    // 37CB 003F;	
    // (㟋) CJK UNIFIED IDEOGRAPH-37CB	[FB80 B7CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_261)
{
    // 37CB 0061;	
    // (㟋) CJK UNIFIED IDEOGRAPH-37CB	[FB80 B7CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_262)
{
    // 37CB 0041;	
    // (㟋) CJK UNIFIED IDEOGRAPH-37CB	[FB80 B7CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_263)
{
    // 37CB 0062;	
    // (㟋) CJK UNIFIED IDEOGRAPH-37CB	[FB80 B7CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_264)
{
    // 37CC 0021;	
    // (㟌) CJK UNIFIED IDEOGRAPH-37CC	[FB80 B7CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_265)
{
    // 37CC 003F;	
    // (㟌) CJK UNIFIED IDEOGRAPH-37CC	[FB80 B7CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_266)
{
    // 37CC 0061;	
    // (㟌) CJK UNIFIED IDEOGRAPH-37CC	[FB80 B7CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_267)
{
    // 37CC 0041;	
    // (㟌) CJK UNIFIED IDEOGRAPH-37CC	[FB80 B7CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_268)
{
    // 37CC 0062;	
    // (㟌) CJK UNIFIED IDEOGRAPH-37CC	[FB80 B7CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_269)
{
    // 37CD 0021;	
    // (㟍) CJK UNIFIED IDEOGRAPH-37CD	[FB80 B7CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_270)
{
    // 37CD 003F;	
    // (㟍) CJK UNIFIED IDEOGRAPH-37CD	[FB80 B7CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_271)
{
    // 37CD 0061;	
    // (㟍) CJK UNIFIED IDEOGRAPH-37CD	[FB80 B7CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_272)
{
    // 37CD 0041;	
    // (㟍) CJK UNIFIED IDEOGRAPH-37CD	[FB80 B7CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_273)
{
    // 37CD 0062;	
    // (㟍) CJK UNIFIED IDEOGRAPH-37CD	[FB80 B7CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_274)
{
    // 37CE 0021;	
    // (㟎) CJK UNIFIED IDEOGRAPH-37CE	[FB80 B7CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_275)
{
    // 37CE 003F;	
    // (㟎) CJK UNIFIED IDEOGRAPH-37CE	[FB80 B7CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_276)
{
    // 37CE 0061;	
    // (㟎) CJK UNIFIED IDEOGRAPH-37CE	[FB80 B7CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_277)
{
    // 37CE 0041;	
    // (㟎) CJK UNIFIED IDEOGRAPH-37CE	[FB80 B7CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_278)
{
    // 37CE 0062;	
    // (㟎) CJK UNIFIED IDEOGRAPH-37CE	[FB80 B7CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_279)
{
    // 37CF 0021;	
    // (㟏) CJK UNIFIED IDEOGRAPH-37CF	[FB80 B7CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_280)
{
    // 37CF 003F;	
    // (㟏) CJK UNIFIED IDEOGRAPH-37CF	[FB80 B7CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_281)
{
    // 37CF 0061;	
    // (㟏) CJK UNIFIED IDEOGRAPH-37CF	[FB80 B7CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_282)
{
    // 37CF 0041;	
    // (㟏) CJK UNIFIED IDEOGRAPH-37CF	[FB80 B7CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_283)
{
    // 37CF 0062;	
    // (㟏) CJK UNIFIED IDEOGRAPH-37CF	[FB80 B7CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_284)
{
    // 37D0 0021;	
    // (㟐) CJK UNIFIED IDEOGRAPH-37D0	[FB80 B7D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_285)
{
    // 37D0 003F;	
    // (㟐) CJK UNIFIED IDEOGRAPH-37D0	[FB80 B7D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_286)
{
    // 37D0 0061;	
    // (㟐) CJK UNIFIED IDEOGRAPH-37D0	[FB80 B7D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_287)
{
    // 37D0 0041;	
    // (㟐) CJK UNIFIED IDEOGRAPH-37D0	[FB80 B7D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_288)
{
    // 37D0 0062;	
    // (㟐) CJK UNIFIED IDEOGRAPH-37D0	[FB80 B7D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_289)
{
    // 37D1 0021;	
    // (㟑) CJK UNIFIED IDEOGRAPH-37D1	[FB80 B7D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_290)
{
    // 37D1 003F;	
    // (㟑) CJK UNIFIED IDEOGRAPH-37D1	[FB80 B7D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_291)
{
    // 37D1 0061;	
    // (㟑) CJK UNIFIED IDEOGRAPH-37D1	[FB80 B7D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_292)
{
    // 37D1 0041;	
    // (㟑) CJK UNIFIED IDEOGRAPH-37D1	[FB80 B7D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_293)
{
    // 37D1 0062;	
    // (㟑) CJK UNIFIED IDEOGRAPH-37D1	[FB80 B7D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_294)
{
    // 37D2 0021;	
    // (㟒) CJK UNIFIED IDEOGRAPH-37D2	[FB80 B7D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_295)
{
    // 37D2 003F;	
    // (㟒) CJK UNIFIED IDEOGRAPH-37D2	[FB80 B7D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_296)
{
    // 37D2 0061;	
    // (㟒) CJK UNIFIED IDEOGRAPH-37D2	[FB80 B7D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_297)
{
    // 37D2 0041;	
    // (㟒) CJK UNIFIED IDEOGRAPH-37D2	[FB80 B7D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_298)
{
    // 37D2 0062;	
    // (㟒) CJK UNIFIED IDEOGRAPH-37D2	[FB80 B7D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_299)
{
    // 37D3 0021;	
    // (㟓) CJK UNIFIED IDEOGRAPH-37D3	[FB80 B7D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_300)
{
    // 37D3 003F;	
    // (㟓) CJK UNIFIED IDEOGRAPH-37D3	[FB80 B7D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_301)
{
    // 37D3 0061;	
    // (㟓) CJK UNIFIED IDEOGRAPH-37D3	[FB80 B7D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_302)
{
    // 37D3 0041;	
    // (㟓) CJK UNIFIED IDEOGRAPH-37D3	[FB80 B7D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_303)
{
    // 37D3 0062;	
    // (㟓) CJK UNIFIED IDEOGRAPH-37D3	[FB80 B7D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_304)
{
    // 37D4 0021;	
    // (㟔) CJK UNIFIED IDEOGRAPH-37D4	[FB80 B7D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_305)
{
    // 37D4 003F;	
    // (㟔) CJK UNIFIED IDEOGRAPH-37D4	[FB80 B7D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_306)
{
    // 37D4 0061;	
    // (㟔) CJK UNIFIED IDEOGRAPH-37D4	[FB80 B7D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_307)
{
    // 37D4 0041;	
    // (㟔) CJK UNIFIED IDEOGRAPH-37D4	[FB80 B7D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_308)
{
    // 37D4 0062;	
    // (㟔) CJK UNIFIED IDEOGRAPH-37D4	[FB80 B7D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_309)
{
    // 37D5 0021;	
    // (㟕) CJK UNIFIED IDEOGRAPH-37D5	[FB80 B7D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_310)
{
    // 37D5 003F;	
    // (㟕) CJK UNIFIED IDEOGRAPH-37D5	[FB80 B7D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_311)
{
    // 37D5 0061;	
    // (㟕) CJK UNIFIED IDEOGRAPH-37D5	[FB80 B7D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_312)
{
    // 37D5 0041;	
    // (㟕) CJK UNIFIED IDEOGRAPH-37D5	[FB80 B7D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_313)
{
    // 37D5 0062;	
    // (㟕) CJK UNIFIED IDEOGRAPH-37D5	[FB80 B7D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_314)
{
    // 37D6 0021;	
    // (㟖) CJK UNIFIED IDEOGRAPH-37D6	[FB80 B7D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_315)
{
    // 37D6 003F;	
    // (㟖) CJK UNIFIED IDEOGRAPH-37D6	[FB80 B7D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_316)
{
    // 37D6 0061;	
    // (㟖) CJK UNIFIED IDEOGRAPH-37D6	[FB80 B7D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_317)
{
    // 37D6 0041;	
    // (㟖) CJK UNIFIED IDEOGRAPH-37D6	[FB80 B7D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_318)
{
    // 37D6 0062;	
    // (㟖) CJK UNIFIED IDEOGRAPH-37D6	[FB80 B7D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_319)
{
    // 37D7 0021;	
    // (㟗) CJK UNIFIED IDEOGRAPH-37D7	[FB80 B7D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_320)
{
    // 37D7 003F;	
    // (㟗) CJK UNIFIED IDEOGRAPH-37D7	[FB80 B7D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_321)
{
    // 37D7 0061;	
    // (㟗) CJK UNIFIED IDEOGRAPH-37D7	[FB80 B7D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_322)
{
    // 37D7 0041;	
    // (㟗) CJK UNIFIED IDEOGRAPH-37D7	[FB80 B7D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_323)
{
    // 37D7 0062;	
    // (㟗) CJK UNIFIED IDEOGRAPH-37D7	[FB80 B7D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_324)
{
    // 37D8 0021;	
    // (㟘) CJK UNIFIED IDEOGRAPH-37D8	[FB80 B7D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_325)
{
    // 37D8 003F;	
    // (㟘) CJK UNIFIED IDEOGRAPH-37D8	[FB80 B7D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_326)
{
    // 37D8 0061;	
    // (㟘) CJK UNIFIED IDEOGRAPH-37D8	[FB80 B7D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_327)
{
    // 37D8 0041;	
    // (㟘) CJK UNIFIED IDEOGRAPH-37D8	[FB80 B7D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_328)
{
    // 37D8 0062;	
    // (㟘) CJK UNIFIED IDEOGRAPH-37D8	[FB80 B7D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_329)
{
    // 37D9 0021;	
    // (㟙) CJK UNIFIED IDEOGRAPH-37D9	[FB80 B7D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_330)
{
    // 37D9 003F;	
    // (㟙) CJK UNIFIED IDEOGRAPH-37D9	[FB80 B7D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_331)
{
    // 37D9 0061;	
    // (㟙) CJK UNIFIED IDEOGRAPH-37D9	[FB80 B7D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_332)
{
    // 37D9 0041;	
    // (㟙) CJK UNIFIED IDEOGRAPH-37D9	[FB80 B7D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_333)
{
    // 37D9 0062;	
    // (㟙) CJK UNIFIED IDEOGRAPH-37D9	[FB80 B7D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_334)
{
    // 37DA 0021;	
    // (㟚) CJK UNIFIED IDEOGRAPH-37DA	[FB80 B7DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_335)
{
    // 37DA 003F;	
    // (㟚) CJK UNIFIED IDEOGRAPH-37DA	[FB80 B7DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_336)
{
    // 37DA 0061;	
    // (㟚) CJK UNIFIED IDEOGRAPH-37DA	[FB80 B7DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_337)
{
    // 37DA 0041;	
    // (㟚) CJK UNIFIED IDEOGRAPH-37DA	[FB80 B7DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_338)
{
    // 37DA 0062;	
    // (㟚) CJK UNIFIED IDEOGRAPH-37DA	[FB80 B7DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_339)
{
    // 37DB 0021;	
    // (㟛) CJK UNIFIED IDEOGRAPH-37DB	[FB80 B7DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_340)
{
    // 37DB 003F;	
    // (㟛) CJK UNIFIED IDEOGRAPH-37DB	[FB80 B7DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_341)
{
    // 37DB 0061;	
    // (㟛) CJK UNIFIED IDEOGRAPH-37DB	[FB80 B7DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_342)
{
    // 37DB 0041;	
    // (㟛) CJK UNIFIED IDEOGRAPH-37DB	[FB80 B7DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_343)
{
    // 37DB 0062;	
    // (㟛) CJK UNIFIED IDEOGRAPH-37DB	[FB80 B7DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_344)
{
    // 37DC 0021;	
    // (㟜) CJK UNIFIED IDEOGRAPH-37DC	[FB80 B7DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_345)
{
    // 37DC 003F;	
    // (㟜) CJK UNIFIED IDEOGRAPH-37DC	[FB80 B7DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_346)
{
    // 37DC 0061;	
    // (㟜) CJK UNIFIED IDEOGRAPH-37DC	[FB80 B7DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_347)
{
    // 37DC 0041;	
    // (㟜) CJK UNIFIED IDEOGRAPH-37DC	[FB80 B7DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_348)
{
    // 37DC 0062;	
    // (㟜) CJK UNIFIED IDEOGRAPH-37DC	[FB80 B7DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_349)
{
    // 37DD 0021;	
    // (㟝) CJK UNIFIED IDEOGRAPH-37DD	[FB80 B7DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_350)
{
    // 37DD 003F;	
    // (㟝) CJK UNIFIED IDEOGRAPH-37DD	[FB80 B7DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_351)
{
    // 37DD 0061;	
    // (㟝) CJK UNIFIED IDEOGRAPH-37DD	[FB80 B7DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_352)
{
    // 37DD 0041;	
    // (㟝) CJK UNIFIED IDEOGRAPH-37DD	[FB80 B7DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_353)
{
    // 37DD 0062;	
    // (㟝) CJK UNIFIED IDEOGRAPH-37DD	[FB80 B7DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_354)
{
    // 37DE 0021;	
    // (㟞) CJK UNIFIED IDEOGRAPH-37DE	[FB80 B7DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_355)
{
    // 37DE 003F;	
    // (㟞) CJK UNIFIED IDEOGRAPH-37DE	[FB80 B7DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_356)
{
    // 37DE 0061;	
    // (㟞) CJK UNIFIED IDEOGRAPH-37DE	[FB80 B7DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_357)
{
    // 37DE 0041;	
    // (㟞) CJK UNIFIED IDEOGRAPH-37DE	[FB80 B7DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_358)
{
    // 37DE 0062;	
    // (㟞) CJK UNIFIED IDEOGRAPH-37DE	[FB80 B7DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_359)
{
    // 37DF 0021;	
    // (㟟) CJK UNIFIED IDEOGRAPH-37DF	[FB80 B7DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_360)
{
    // 37DF 003F;	
    // (㟟) CJK UNIFIED IDEOGRAPH-37DF	[FB80 B7DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_361)
{
    // 37DF 0061;	
    // (㟟) CJK UNIFIED IDEOGRAPH-37DF	[FB80 B7DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_362)
{
    // 37DF 0041;	
    // (㟟) CJK UNIFIED IDEOGRAPH-37DF	[FB80 B7DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_363)
{
    // 37DF 0062;	
    // (㟟) CJK UNIFIED IDEOGRAPH-37DF	[FB80 B7DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_364)
{
    // 37E0 0021;	
    // (㟠) CJK UNIFIED IDEOGRAPH-37E0	[FB80 B7E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_365)
{
    // 37E0 003F;	
    // (㟠) CJK UNIFIED IDEOGRAPH-37E0	[FB80 B7E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_366)
{
    // 37E0 0061;	
    // (㟠) CJK UNIFIED IDEOGRAPH-37E0	[FB80 B7E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_367)
{
    // 37E0 0041;	
    // (㟠) CJK UNIFIED IDEOGRAPH-37E0	[FB80 B7E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_368)
{
    // 37E0 0062;	
    // (㟠) CJK UNIFIED IDEOGRAPH-37E0	[FB80 B7E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_369)
{
    // 37E1 0021;	
    // (㟡) CJK UNIFIED IDEOGRAPH-37E1	[FB80 B7E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_370)
{
    // 37E1 003F;	
    // (㟡) CJK UNIFIED IDEOGRAPH-37E1	[FB80 B7E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_371)
{
    // 37E1 0061;	
    // (㟡) CJK UNIFIED IDEOGRAPH-37E1	[FB80 B7E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_372)
{
    // 37E1 0041;	
    // (㟡) CJK UNIFIED IDEOGRAPH-37E1	[FB80 B7E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_373)
{
    // 37E1 0062;	
    // (㟡) CJK UNIFIED IDEOGRAPH-37E1	[FB80 B7E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_374)
{
    // 37E2 0021;	
    // (㟢) CJK UNIFIED IDEOGRAPH-37E2	[FB80 B7E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_375)
{
    // 37E2 003F;	
    // (㟢) CJK UNIFIED IDEOGRAPH-37E2	[FB80 B7E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_376)
{
    // 37E2 0061;	
    // (㟢) CJK UNIFIED IDEOGRAPH-37E2	[FB80 B7E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_377)
{
    // 37E2 0041;	
    // (㟢) CJK UNIFIED IDEOGRAPH-37E2	[FB80 B7E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_378)
{
    // 37E2 0062;	
    // (㟢) CJK UNIFIED IDEOGRAPH-37E2	[FB80 B7E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_379)
{
    // 37E3 0021;	
    // (㟣) CJK UNIFIED IDEOGRAPH-37E3	[FB80 B7E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_380)
{
    // 37E3 003F;	
    // (㟣) CJK UNIFIED IDEOGRAPH-37E3	[FB80 B7E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_381)
{
    // 37E3 0061;	
    // (㟣) CJK UNIFIED IDEOGRAPH-37E3	[FB80 B7E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_382)
{
    // 37E3 0041;	
    // (㟣) CJK UNIFIED IDEOGRAPH-37E3	[FB80 B7E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_383)
{
    // 37E3 0062;	
    // (㟣) CJK UNIFIED IDEOGRAPH-37E3	[FB80 B7E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_384)
{
    // 37E4 0021;	
    // (㟤) CJK UNIFIED IDEOGRAPH-37E4	[FB80 B7E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_385)
{
    // 37E4 003F;	
    // (㟤) CJK UNIFIED IDEOGRAPH-37E4	[FB80 B7E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_386)
{
    // 37E4 0061;	
    // (㟤) CJK UNIFIED IDEOGRAPH-37E4	[FB80 B7E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_387)
{
    // 37E4 0041;	
    // (㟤) CJK UNIFIED IDEOGRAPH-37E4	[FB80 B7E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_388)
{
    // 37E4 0062;	
    // (㟤) CJK UNIFIED IDEOGRAPH-37E4	[FB80 B7E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_389)
{
    // 37E5 0021;	
    // (㟥) CJK UNIFIED IDEOGRAPH-37E5	[FB80 B7E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_390)
{
    // 37E5 003F;	
    // (㟥) CJK UNIFIED IDEOGRAPH-37E5	[FB80 B7E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_391)
{
    // 37E5 0061;	
    // (㟥) CJK UNIFIED IDEOGRAPH-37E5	[FB80 B7E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_392)
{
    // 37E5 0041;	
    // (㟥) CJK UNIFIED IDEOGRAPH-37E5	[FB80 B7E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_393)
{
    // 37E5 0062;	
    // (㟥) CJK UNIFIED IDEOGRAPH-37E5	[FB80 B7E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_394)
{
    // 37E6 0021;	
    // (㟦) CJK UNIFIED IDEOGRAPH-37E6	[FB80 B7E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_395)
{
    // 37E6 003F;	
    // (㟦) CJK UNIFIED IDEOGRAPH-37E6	[FB80 B7E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_396)
{
    // 37E6 0061;	
    // (㟦) CJK UNIFIED IDEOGRAPH-37E6	[FB80 B7E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_397)
{
    // 37E6 0041;	
    // (㟦) CJK UNIFIED IDEOGRAPH-37E6	[FB80 B7E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_398)
{
    // 37E6 0062;	
    // (㟦) CJK UNIFIED IDEOGRAPH-37E6	[FB80 B7E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_399)
{
    // 37E7 0021;	
    // (㟧) CJK UNIFIED IDEOGRAPH-37E7	[FB80 B7E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_400)
{
    // 37E7 003F;	
    // (㟧) CJK UNIFIED IDEOGRAPH-37E7	[FB80 B7E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_401)
{
    // 37E7 0061;	
    // (㟧) CJK UNIFIED IDEOGRAPH-37E7	[FB80 B7E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_402)
{
    // 37E7 0041;	
    // (㟧) CJK UNIFIED IDEOGRAPH-37E7	[FB80 B7E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_403)
{
    // 37E7 0062;	
    // (㟧) CJK UNIFIED IDEOGRAPH-37E7	[FB80 B7E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_404)
{
    // 37E8 0021;	
    // (㟨) CJK UNIFIED IDEOGRAPH-37E8	[FB80 B7E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_405)
{
    // 37E8 003F;	
    // (㟨) CJK UNIFIED IDEOGRAPH-37E8	[FB80 B7E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_406)
{
    // 37E8 0061;	
    // (㟨) CJK UNIFIED IDEOGRAPH-37E8	[FB80 B7E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_407)
{
    // 37E8 0041;	
    // (㟨) CJK UNIFIED IDEOGRAPH-37E8	[FB80 B7E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_408)
{
    // 37E8 0062;	
    // (㟨) CJK UNIFIED IDEOGRAPH-37E8	[FB80 B7E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_409)
{
    // 37E9 0021;	
    // (㟩) CJK UNIFIED IDEOGRAPH-37E9	[FB80 B7E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_410)
{
    // 37E9 003F;	
    // (㟩) CJK UNIFIED IDEOGRAPH-37E9	[FB80 B7E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_411)
{
    // 37E9 0061;	
    // (㟩) CJK UNIFIED IDEOGRAPH-37E9	[FB80 B7E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_412)
{
    // 37E9 0041;	
    // (㟩) CJK UNIFIED IDEOGRAPH-37E9	[FB80 B7E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_413)
{
    // 37E9 0062;	
    // (㟩) CJK UNIFIED IDEOGRAPH-37E9	[FB80 B7E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_414)
{
    // 37EA 0021;	
    // (㟪) CJK UNIFIED IDEOGRAPH-37EA	[FB80 B7EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_415)
{
    // 37EA 003F;	
    // (㟪) CJK UNIFIED IDEOGRAPH-37EA	[FB80 B7EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_416)
{
    // 37EA 0061;	
    // (㟪) CJK UNIFIED IDEOGRAPH-37EA	[FB80 B7EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_417)
{
    // 37EA 0041;	
    // (㟪) CJK UNIFIED IDEOGRAPH-37EA	[FB80 B7EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_418)
{
    // 37EA 0062;	
    // (㟪) CJK UNIFIED IDEOGRAPH-37EA	[FB80 B7EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_419)
{
    // 37EB 0021;	
    // (㟫) CJK UNIFIED IDEOGRAPH-37EB	[FB80 B7EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_420)
{
    // 37EB 003F;	
    // (㟫) CJK UNIFIED IDEOGRAPH-37EB	[FB80 B7EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_421)
{
    // 37EB 0061;	
    // (㟫) CJK UNIFIED IDEOGRAPH-37EB	[FB80 B7EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_422)
{
    // 37EB 0041;	
    // (㟫) CJK UNIFIED IDEOGRAPH-37EB	[FB80 B7EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_423)
{
    // 37EB 0062;	
    // (㟫) CJK UNIFIED IDEOGRAPH-37EB	[FB80 B7EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_424)
{
    // 37EC 0021;	
    // (㟬) CJK UNIFIED IDEOGRAPH-37EC	[FB80 B7EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_425)
{
    // 37EC 003F;	
    // (㟬) CJK UNIFIED IDEOGRAPH-37EC	[FB80 B7EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_426)
{
    // 37EC 0061;	
    // (㟬) CJK UNIFIED IDEOGRAPH-37EC	[FB80 B7EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_427)
{
    // 37EC 0041;	
    // (㟬) CJK UNIFIED IDEOGRAPH-37EC	[FB80 B7EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_428)
{
    // 37EC 0062;	
    // (㟬) CJK UNIFIED IDEOGRAPH-37EC	[FB80 B7EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_429)
{
    // 37ED 0021;	
    // (㟭) CJK UNIFIED IDEOGRAPH-37ED	[FB80 B7ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_430)
{
    // 37ED 003F;	
    // (㟭) CJK UNIFIED IDEOGRAPH-37ED	[FB80 B7ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_431)
{
    // 37ED 0061;	
    // (㟭) CJK UNIFIED IDEOGRAPH-37ED	[FB80 B7ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_432)
{
    // 37ED 0041;	
    // (㟭) CJK UNIFIED IDEOGRAPH-37ED	[FB80 B7ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_433)
{
    // 37ED 0062;	
    // (㟭) CJK UNIFIED IDEOGRAPH-37ED	[FB80 B7ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_434)
{
    // 37EE 0021;	
    // (㟮) CJK UNIFIED IDEOGRAPH-37EE	[FB80 B7EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_435)
{
    // 37EE 003F;	
    // (㟮) CJK UNIFIED IDEOGRAPH-37EE	[FB80 B7EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_436)
{
    // 37EE 0061;	
    // (㟮) CJK UNIFIED IDEOGRAPH-37EE	[FB80 B7EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_437)
{
    // 37EE 0041;	
    // (㟮) CJK UNIFIED IDEOGRAPH-37EE	[FB80 B7EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_438)
{
    // 37EE 0062;	
    // (㟮) CJK UNIFIED IDEOGRAPH-37EE	[FB80 B7EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_439)
{
    // 37EF 0021;	
    // (㟯) CJK UNIFIED IDEOGRAPH-37EF	[FB80 B7EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_440)
{
    // 37EF 003F;	
    // (㟯) CJK UNIFIED IDEOGRAPH-37EF	[FB80 B7EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_441)
{
    // 37EF 0061;	
    // (㟯) CJK UNIFIED IDEOGRAPH-37EF	[FB80 B7EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_442)
{
    // 37EF 0041;	
    // (㟯) CJK UNIFIED IDEOGRAPH-37EF	[FB80 B7EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_443)
{
    // 37EF 0062;	
    // (㟯) CJK UNIFIED IDEOGRAPH-37EF	[FB80 B7EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_444)
{
    // 37F0 0021;	
    // (㟰) CJK UNIFIED IDEOGRAPH-37F0	[FB80 B7F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_445)
{
    // 37F0 003F;	
    // (㟰) CJK UNIFIED IDEOGRAPH-37F0	[FB80 B7F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_446)
{
    // 37F0 0061;	
    // (㟰) CJK UNIFIED IDEOGRAPH-37F0	[FB80 B7F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_447)
{
    // 37F0 0041;	
    // (㟰) CJK UNIFIED IDEOGRAPH-37F0	[FB80 B7F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_448)
{
    // 37F0 0062;	
    // (㟰) CJK UNIFIED IDEOGRAPH-37F0	[FB80 B7F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_449)
{
    // 37F1 0021;	
    // (㟱) CJK UNIFIED IDEOGRAPH-37F1	[FB80 B7F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_450)
{
    // 37F1 003F;	
    // (㟱) CJK UNIFIED IDEOGRAPH-37F1	[FB80 B7F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_451)
{
    // 37F1 0061;	
    // (㟱) CJK UNIFIED IDEOGRAPH-37F1	[FB80 B7F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_452)
{
    // 37F1 0041;	
    // (㟱) CJK UNIFIED IDEOGRAPH-37F1	[FB80 B7F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_453)
{
    // 37F1 0062;	
    // (㟱) CJK UNIFIED IDEOGRAPH-37F1	[FB80 B7F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_454)
{
    // 37F2 0021;	
    // (㟲) CJK UNIFIED IDEOGRAPH-37F2	[FB80 B7F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_455)
{
    // 37F2 003F;	
    // (㟲) CJK UNIFIED IDEOGRAPH-37F2	[FB80 B7F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_456)
{
    // 37F2 0061;	
    // (㟲) CJK UNIFIED IDEOGRAPH-37F2	[FB80 B7F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_457)
{
    // 37F2 0041;	
    // (㟲) CJK UNIFIED IDEOGRAPH-37F2	[FB80 B7F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_458)
{
    // 37F2 0062;	
    // (㟲) CJK UNIFIED IDEOGRAPH-37F2	[FB80 B7F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_459)
{
    // 37F3 0021;	
    // (㟳) CJK UNIFIED IDEOGRAPH-37F3	[FB80 B7F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_460)
{
    // 37F3 003F;	
    // (㟳) CJK UNIFIED IDEOGRAPH-37F3	[FB80 B7F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_461)
{
    // 37F3 0061;	
    // (㟳) CJK UNIFIED IDEOGRAPH-37F3	[FB80 B7F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_462)
{
    // 37F3 0041;	
    // (㟳) CJK UNIFIED IDEOGRAPH-37F3	[FB80 B7F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_463)
{
    // 37F3 0062;	
    // (㟳) CJK UNIFIED IDEOGRAPH-37F3	[FB80 B7F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_464)
{
    // 37F4 0021;	
    // (㟴) CJK UNIFIED IDEOGRAPH-37F4	[FB80 B7F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_465)
{
    // 37F4 003F;	
    // (㟴) CJK UNIFIED IDEOGRAPH-37F4	[FB80 B7F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_466)
{
    // 37F4 0061;	
    // (㟴) CJK UNIFIED IDEOGRAPH-37F4	[FB80 B7F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_467)
{
    // 37F4 0041;	
    // (㟴) CJK UNIFIED IDEOGRAPH-37F4	[FB80 B7F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_468)
{
    // 37F4 0062;	
    // (㟴) CJK UNIFIED IDEOGRAPH-37F4	[FB80 B7F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_469)
{
    // 37F5 0021;	
    // (㟵) CJK UNIFIED IDEOGRAPH-37F5	[FB80 B7F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_470)
{
    // 37F5 003F;	
    // (㟵) CJK UNIFIED IDEOGRAPH-37F5	[FB80 B7F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_471)
{
    // 37F5 0061;	
    // (㟵) CJK UNIFIED IDEOGRAPH-37F5	[FB80 B7F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_472)
{
    // 37F5 0041;	
    // (㟵) CJK UNIFIED IDEOGRAPH-37F5	[FB80 B7F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_473)
{
    // 37F5 0062;	
    // (㟵) CJK UNIFIED IDEOGRAPH-37F5	[FB80 B7F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_474)
{
    // 37F6 0021;	
    // (㟶) CJK UNIFIED IDEOGRAPH-37F6	[FB80 B7F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_475)
{
    // 37F6 003F;	
    // (㟶) CJK UNIFIED IDEOGRAPH-37F6	[FB80 B7F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_476)
{
    // 37F6 0061;	
    // (㟶) CJK UNIFIED IDEOGRAPH-37F6	[FB80 B7F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_477)
{
    // 37F6 0041;	
    // (㟶) CJK UNIFIED IDEOGRAPH-37F6	[FB80 B7F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_478)
{
    // 37F6 0062;	
    // (㟶) CJK UNIFIED IDEOGRAPH-37F6	[FB80 B7F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_479)
{
    // 37F7 0021;	
    // (㟷) CJK UNIFIED IDEOGRAPH-37F7	[FB80 B7F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_480)
{
    // 37F7 003F;	
    // (㟷) CJK UNIFIED IDEOGRAPH-37F7	[FB80 B7F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_481)
{
    // 37F7 0061;	
    // (㟷) CJK UNIFIED IDEOGRAPH-37F7	[FB80 B7F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_482)
{
    // 37F7 0041;	
    // (㟷) CJK UNIFIED IDEOGRAPH-37F7	[FB80 B7F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_483)
{
    // 37F7 0062;	
    // (㟷) CJK UNIFIED IDEOGRAPH-37F7	[FB80 B7F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_484)
{
    // 37F8 0021;	
    // (㟸) CJK UNIFIED IDEOGRAPH-37F8	[FB80 B7F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_485)
{
    // 37F8 003F;	
    // (㟸) CJK UNIFIED IDEOGRAPH-37F8	[FB80 B7F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_486)
{
    // 37F8 0061;	
    // (㟸) CJK UNIFIED IDEOGRAPH-37F8	[FB80 B7F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_487)
{
    // 37F8 0041;	
    // (㟸) CJK UNIFIED IDEOGRAPH-37F8	[FB80 B7F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_488)
{
    // 37F8 0062;	
    // (㟸) CJK UNIFIED IDEOGRAPH-37F8	[FB80 B7F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_489)
{
    // 37F9 0021;	
    // (㟹) CJK UNIFIED IDEOGRAPH-37F9	[FB80 B7F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_490)
{
    // 37F9 003F;	
    // (㟹) CJK UNIFIED IDEOGRAPH-37F9	[FB80 B7F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_491)
{
    // 37F9 0061;	
    // (㟹) CJK UNIFIED IDEOGRAPH-37F9	[FB80 B7F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_492)
{
    // 37F9 0041;	
    // (㟹) CJK UNIFIED IDEOGRAPH-37F9	[FB80 B7F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_493)
{
    // 37F9 0062;	
    // (㟹) CJK UNIFIED IDEOGRAPH-37F9	[FB80 B7F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_494)
{
    // 37FA 0021;	
    // (㟺) CJK UNIFIED IDEOGRAPH-37FA	[FB80 B7FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_495)
{
    // 37FA 003F;	
    // (㟺) CJK UNIFIED IDEOGRAPH-37FA	[FB80 B7FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB7FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_496)
{
    // 37FA 0061;	
    // (㟺) CJK UNIFIED IDEOGRAPH-37FA	[FB80 B7FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_497)
{
    // 37FA 0041;	
    // (㟺) CJK UNIFIED IDEOGRAPH-37FA	[FB80 B7FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x37FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_498)
{
    // 37FA 0062;	
    // (㟺) CJK UNIFIED IDEOGRAPH-37FA	[FB80 B7FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB7FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_336_499)
{
    // 37FB 0021;	
    // (㟻) CJK UNIFIED IDEOGRAPH-37FB	[FB80 B7FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x37FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB7FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

