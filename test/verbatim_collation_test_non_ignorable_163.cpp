// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_163_000)
{
    // 12F8 0041;	
    // (ዸ) ETHIOPIC SYLLABLE DDA	[2614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F8, 0x0041 };
    uint32_t const ces[9] = { 0x2614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_001)
{
    // 12F8 0062;	
    // (ዸ) ETHIOPIC SYLLABLE DDA	[2614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F8, 0x0062 };
    uint32_t const ces[9] = { 0x2614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_002)
{
    // 12F9 0021;	
    // (ዹ) ETHIOPIC SYLLABLE DDU	[2615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F9, 0x0021 };
    uint32_t const ces[9] = { 0x2615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_003)
{
    // 12F9 003F;	
    // (ዹ) ETHIOPIC SYLLABLE DDU	[2615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F9, 0x003F };
    uint32_t const ces[9] = { 0x2615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_004)
{
    // 12F9 0061;	
    // (ዹ) ETHIOPIC SYLLABLE DDU	[2615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F9, 0x0061 };
    uint32_t const ces[9] = { 0x2615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_005)
{
    // 12F9 0041;	
    // (ዹ) ETHIOPIC SYLLABLE DDU	[2615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F9, 0x0041 };
    uint32_t const ces[9] = { 0x2615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_006)
{
    // 12F9 0062;	
    // (ዹ) ETHIOPIC SYLLABLE DDU	[2615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F9, 0x0062 };
    uint32_t const ces[9] = { 0x2615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_007)
{
    // 12FA 0021;	
    // (ዺ) ETHIOPIC SYLLABLE DDI	[2616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FA, 0x0021 };
    uint32_t const ces[9] = { 0x2616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_008)
{
    // 12FA 003F;	
    // (ዺ) ETHIOPIC SYLLABLE DDI	[2616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FA, 0x003F };
    uint32_t const ces[9] = { 0x2616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_009)
{
    // 12FA 0061;	
    // (ዺ) ETHIOPIC SYLLABLE DDI	[2616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FA, 0x0061 };
    uint32_t const ces[9] = { 0x2616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_010)
{
    // 12FA 0041;	
    // (ዺ) ETHIOPIC SYLLABLE DDI	[2616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FA, 0x0041 };
    uint32_t const ces[9] = { 0x2616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_011)
{
    // 12FA 0062;	
    // (ዺ) ETHIOPIC SYLLABLE DDI	[2616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FA, 0x0062 };
    uint32_t const ces[9] = { 0x2616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_012)
{
    // 12FB 0021;	
    // (ዻ) ETHIOPIC SYLLABLE DDAA	[2617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FB, 0x0021 };
    uint32_t const ces[9] = { 0x2617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_013)
{
    // 12FB 003F;	
    // (ዻ) ETHIOPIC SYLLABLE DDAA	[2617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FB, 0x003F };
    uint32_t const ces[9] = { 0x2617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_014)
{
    // 12FB 0061;	
    // (ዻ) ETHIOPIC SYLLABLE DDAA	[2617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FB, 0x0061 };
    uint32_t const ces[9] = { 0x2617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_015)
{
    // 12FB 0041;	
    // (ዻ) ETHIOPIC SYLLABLE DDAA	[2617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FB, 0x0041 };
    uint32_t const ces[9] = { 0x2617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_016)
{
    // 12FB 0062;	
    // (ዻ) ETHIOPIC SYLLABLE DDAA	[2617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FB, 0x0062 };
    uint32_t const ces[9] = { 0x2617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_017)
{
    // 12FC 0021;	
    // (ዼ) ETHIOPIC SYLLABLE DDEE	[2618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FC, 0x0021 };
    uint32_t const ces[9] = { 0x2618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_018)
{
    // 12FC 003F;	
    // (ዼ) ETHIOPIC SYLLABLE DDEE	[2618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FC, 0x003F };
    uint32_t const ces[9] = { 0x2618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_019)
{
    // 12FC 0061;	
    // (ዼ) ETHIOPIC SYLLABLE DDEE	[2618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FC, 0x0061 };
    uint32_t const ces[9] = { 0x2618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_020)
{
    // 12FC 0041;	
    // (ዼ) ETHIOPIC SYLLABLE DDEE	[2618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FC, 0x0041 };
    uint32_t const ces[9] = { 0x2618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_021)
{
    // 12FC 0062;	
    // (ዼ) ETHIOPIC SYLLABLE DDEE	[2618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FC, 0x0062 };
    uint32_t const ces[9] = { 0x2618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_022)
{
    // 12FD 0021;	
    // (ዽ) ETHIOPIC SYLLABLE DDE	[2619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FD, 0x0021 };
    uint32_t const ces[9] = { 0x2619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_023)
{
    // 12FD 003F;	
    // (ዽ) ETHIOPIC SYLLABLE DDE	[2619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FD, 0x003F };
    uint32_t const ces[9] = { 0x2619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_024)
{
    // 12FD 0061;	
    // (ዽ) ETHIOPIC SYLLABLE DDE	[2619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FD, 0x0061 };
    uint32_t const ces[9] = { 0x2619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_025)
{
    // 12FD 0041;	
    // (ዽ) ETHIOPIC SYLLABLE DDE	[2619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FD, 0x0041 };
    uint32_t const ces[9] = { 0x2619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_026)
{
    // 12FD 0062;	
    // (ዽ) ETHIOPIC SYLLABLE DDE	[2619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FD, 0x0062 };
    uint32_t const ces[9] = { 0x2619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_027)
{
    // 12FE 0021;	
    // (ዾ) ETHIOPIC SYLLABLE DDO	[261A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FE, 0x0021 };
    uint32_t const ces[9] = { 0x261A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_028)
{
    // 12FE 003F;	
    // (ዾ) ETHIOPIC SYLLABLE DDO	[261A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FE, 0x003F };
    uint32_t const ces[9] = { 0x261A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_029)
{
    // 12FE 0061;	
    // (ዾ) ETHIOPIC SYLLABLE DDO	[261A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FE, 0x0061 };
    uint32_t const ces[9] = { 0x261A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_030)
{
    // 12FE 0041;	
    // (ዾ) ETHIOPIC SYLLABLE DDO	[261A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FE, 0x0041 };
    uint32_t const ces[9] = { 0x261A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_031)
{
    // 12FE 0062;	
    // (ዾ) ETHIOPIC SYLLABLE DDO	[261A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FE, 0x0062 };
    uint32_t const ces[9] = { 0x261A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_032)
{
    // 12FF 0021;	
    // (ዿ) ETHIOPIC SYLLABLE DDWA	[261B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FF, 0x0021 };
    uint32_t const ces[9] = { 0x261B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_033)
{
    // 12FF 003F;	
    // (ዿ) ETHIOPIC SYLLABLE DDWA	[261B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FF, 0x003F };
    uint32_t const ces[9] = { 0x261B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_034)
{
    // 12FF 0061;	
    // (ዿ) ETHIOPIC SYLLABLE DDWA	[261B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FF, 0x0061 };
    uint32_t const ces[9] = { 0x261B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_035)
{
    // 12FF 0041;	
    // (ዿ) ETHIOPIC SYLLABLE DDWA	[261B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12FF, 0x0041 };
    uint32_t const ces[9] = { 0x261B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_036)
{
    // 12FF 0062;	
    // (ዿ) ETHIOPIC SYLLABLE DDWA	[261B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12FF, 0x0062 };
    uint32_t const ces[9] = { 0x261B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_037)
{
    // 2D8D 0021;	
    // (ⶍ) ETHIOPIC SYLLABLE DDOA	[261C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8D, 0x0021 };
    uint32_t const ces[9] = { 0x261C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_038)
{
    // 2D8D 003F;	
    // (ⶍ) ETHIOPIC SYLLABLE DDOA	[261C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8D, 0x003F };
    uint32_t const ces[9] = { 0x261C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_039)
{
    // 2D8D 0061;	
    // (ⶍ) ETHIOPIC SYLLABLE DDOA	[261C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8D, 0x0061 };
    uint32_t const ces[9] = { 0x261C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_040)
{
    // 2D8D 0041;	
    // (ⶍ) ETHIOPIC SYLLABLE DDOA	[261C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8D, 0x0041 };
    uint32_t const ces[9] = { 0x261C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_041)
{
    // 2D8D 0062;	
    // (ⶍ) ETHIOPIC SYLLABLE DDOA	[261C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8D, 0x0062 };
    uint32_t const ces[9] = { 0x261C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_042)
{
    // 1300 0021;	
    // (ጀ) ETHIOPIC SYLLABLE JA	[261D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1300, 0x0021 };
    uint32_t const ces[9] = { 0x261D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_043)
{
    // 1300 003F;	
    // (ጀ) ETHIOPIC SYLLABLE JA	[261D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1300, 0x003F };
    uint32_t const ces[9] = { 0x261D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_044)
{
    // 1300 0061;	
    // (ጀ) ETHIOPIC SYLLABLE JA	[261D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1300, 0x0061 };
    uint32_t const ces[9] = { 0x261D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_045)
{
    // 1300 0041;	
    // (ጀ) ETHIOPIC SYLLABLE JA	[261D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1300, 0x0041 };
    uint32_t const ces[9] = { 0x261D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_046)
{
    // 1300 0062;	
    // (ጀ) ETHIOPIC SYLLABLE JA	[261D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1300, 0x0062 };
    uint32_t const ces[9] = { 0x261D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_047)
{
    // 1301 0021;	
    // (ጁ) ETHIOPIC SYLLABLE JU	[261E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1301, 0x0021 };
    uint32_t const ces[9] = { 0x261E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_048)
{
    // 1301 003F;	
    // (ጁ) ETHIOPIC SYLLABLE JU	[261E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1301, 0x003F };
    uint32_t const ces[9] = { 0x261E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_049)
{
    // 1301 0061;	
    // (ጁ) ETHIOPIC SYLLABLE JU	[261E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1301, 0x0061 };
    uint32_t const ces[9] = { 0x261E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_050)
{
    // 1301 0041;	
    // (ጁ) ETHIOPIC SYLLABLE JU	[261E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1301, 0x0041 };
    uint32_t const ces[9] = { 0x261E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_051)
{
    // 1301 0062;	
    // (ጁ) ETHIOPIC SYLLABLE JU	[261E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1301, 0x0062 };
    uint32_t const ces[9] = { 0x261E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_052)
{
    // 1302 0021;	
    // (ጂ) ETHIOPIC SYLLABLE JI	[261F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302, 0x0021 };
    uint32_t const ces[9] = { 0x261F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_053)
{
    // 1302 003F;	
    // (ጂ) ETHIOPIC SYLLABLE JI	[261F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302, 0x003F };
    uint32_t const ces[9] = { 0x261F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_054)
{
    // 1302 0061;	
    // (ጂ) ETHIOPIC SYLLABLE JI	[261F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302, 0x0061 };
    uint32_t const ces[9] = { 0x261F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_055)
{
    // 1302 0041;	
    // (ጂ) ETHIOPIC SYLLABLE JI	[261F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1302, 0x0041 };
    uint32_t const ces[9] = { 0x261F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_056)
{
    // 1302 0062;	
    // (ጂ) ETHIOPIC SYLLABLE JI	[261F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302, 0x0062 };
    uint32_t const ces[9] = { 0x261F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_057)
{
    // 1303 0021;	
    // (ጃ) ETHIOPIC SYLLABLE JAA	[2620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303, 0x0021 };
    uint32_t const ces[9] = { 0x2620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_058)
{
    // 1303 003F;	
    // (ጃ) ETHIOPIC SYLLABLE JAA	[2620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303, 0x003F };
    uint32_t const ces[9] = { 0x2620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_059)
{
    // 1303 0061;	
    // (ጃ) ETHIOPIC SYLLABLE JAA	[2620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303, 0x0061 };
    uint32_t const ces[9] = { 0x2620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_060)
{
    // 1303 0041;	
    // (ጃ) ETHIOPIC SYLLABLE JAA	[2620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303, 0x0041 };
    uint32_t const ces[9] = { 0x2620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_061)
{
    // 1303 0062;	
    // (ጃ) ETHIOPIC SYLLABLE JAA	[2620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303, 0x0062 };
    uint32_t const ces[9] = { 0x2620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_062)
{
    // 1304 0021;	
    // (ጄ) ETHIOPIC SYLLABLE JEE	[2621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304, 0x0021 };
    uint32_t const ces[9] = { 0x2621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_063)
{
    // 1304 003F;	
    // (ጄ) ETHIOPIC SYLLABLE JEE	[2621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304, 0x003F };
    uint32_t const ces[9] = { 0x2621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_064)
{
    // 1304 0061;	
    // (ጄ) ETHIOPIC SYLLABLE JEE	[2621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304, 0x0061 };
    uint32_t const ces[9] = { 0x2621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_065)
{
    // 1304 0041;	
    // (ጄ) ETHIOPIC SYLLABLE JEE	[2621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304, 0x0041 };
    uint32_t const ces[9] = { 0x2621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_066)
{
    // 1304 0062;	
    // (ጄ) ETHIOPIC SYLLABLE JEE	[2621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304, 0x0062 };
    uint32_t const ces[9] = { 0x2621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_067)
{
    // 1305 0021;	
    // (ጅ) ETHIOPIC SYLLABLE JE	[2622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305, 0x0021 };
    uint32_t const ces[9] = { 0x2622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_068)
{
    // 1305 003F;	
    // (ጅ) ETHIOPIC SYLLABLE JE	[2622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305, 0x003F };
    uint32_t const ces[9] = { 0x2622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_069)
{
    // 1305 0061;	
    // (ጅ) ETHIOPIC SYLLABLE JE	[2622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305, 0x0061 };
    uint32_t const ces[9] = { 0x2622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_070)
{
    // 1305 0041;	
    // (ጅ) ETHIOPIC SYLLABLE JE	[2622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305, 0x0041 };
    uint32_t const ces[9] = { 0x2622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_071)
{
    // 1305 0062;	
    // (ጅ) ETHIOPIC SYLLABLE JE	[2622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305, 0x0062 };
    uint32_t const ces[9] = { 0x2622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_072)
{
    // 1306 0021;	
    // (ጆ) ETHIOPIC SYLLABLE JO	[2623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306, 0x0021 };
    uint32_t const ces[9] = { 0x2623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_073)
{
    // 1306 003F;	
    // (ጆ) ETHIOPIC SYLLABLE JO	[2623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306, 0x003F };
    uint32_t const ces[9] = { 0x2623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_074)
{
    // 1306 0061;	
    // (ጆ) ETHIOPIC SYLLABLE JO	[2623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306, 0x0061 };
    uint32_t const ces[9] = { 0x2623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_075)
{
    // 1306 0041;	
    // (ጆ) ETHIOPIC SYLLABLE JO	[2623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306, 0x0041 };
    uint32_t const ces[9] = { 0x2623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_076)
{
    // 1306 0062;	
    // (ጆ) ETHIOPIC SYLLABLE JO	[2623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306, 0x0062 };
    uint32_t const ces[9] = { 0x2623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_077)
{
    // 1307 0021;	
    // (ጇ) ETHIOPIC SYLLABLE JWA	[2624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307, 0x0021 };
    uint32_t const ces[9] = { 0x2624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_078)
{
    // 1307 003F;	
    // (ጇ) ETHIOPIC SYLLABLE JWA	[2624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307, 0x003F };
    uint32_t const ces[9] = { 0x2624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_079)
{
    // 1307 0061;	
    // (ጇ) ETHIOPIC SYLLABLE JWA	[2624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307, 0x0061 };
    uint32_t const ces[9] = { 0x2624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_080)
{
    // 1307 0041;	
    // (ጇ) ETHIOPIC SYLLABLE JWA	[2624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307, 0x0041 };
    uint32_t const ces[9] = { 0x2624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_081)
{
    // 1307 0062;	
    // (ጇ) ETHIOPIC SYLLABLE JWA	[2624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307, 0x0062 };
    uint32_t const ces[9] = { 0x2624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_082)
{
    // 2D8E 0021;	
    // (ⶎ) ETHIOPIC SYLLABLE JOA	[2625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8E, 0x0021 };
    uint32_t const ces[9] = { 0x2625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_083)
{
    // 2D8E 003F;	
    // (ⶎ) ETHIOPIC SYLLABLE JOA	[2625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8E, 0x003F };
    uint32_t const ces[9] = { 0x2625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_084)
{
    // 2D8E 0061;	
    // (ⶎ) ETHIOPIC SYLLABLE JOA	[2625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8E, 0x0061 };
    uint32_t const ces[9] = { 0x2625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_085)
{
    // 2D8E 0041;	
    // (ⶎ) ETHIOPIC SYLLABLE JOA	[2625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8E, 0x0041 };
    uint32_t const ces[9] = { 0x2625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_086)
{
    // 2D8E 0062;	
    // (ⶎ) ETHIOPIC SYLLABLE JOA	[2625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8E, 0x0062 };
    uint32_t const ces[9] = { 0x2625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_087)
{
    // 1308 0021;	
    // (ገ) ETHIOPIC SYLLABLE GA	[2626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308, 0x0021 };
    uint32_t const ces[9] = { 0x2626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_088)
{
    // 1308 003F;	
    // (ገ) ETHIOPIC SYLLABLE GA	[2626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308, 0x003F };
    uint32_t const ces[9] = { 0x2626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_089)
{
    // 1308 0061;	
    // (ገ) ETHIOPIC SYLLABLE GA	[2626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308, 0x0061 };
    uint32_t const ces[9] = { 0x2626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_090)
{
    // 1308 0041;	
    // (ገ) ETHIOPIC SYLLABLE GA	[2626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308, 0x0041 };
    uint32_t const ces[9] = { 0x2626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_091)
{
    // 1308 0062;	
    // (ገ) ETHIOPIC SYLLABLE GA	[2626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308, 0x0062 };
    uint32_t const ces[9] = { 0x2626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_092)
{
    // 1309 0021;	
    // (ጉ) ETHIOPIC SYLLABLE GU	[2627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1309, 0x0021 };
    uint32_t const ces[9] = { 0x2627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_093)
{
    // 1309 003F;	
    // (ጉ) ETHIOPIC SYLLABLE GU	[2627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1309, 0x003F };
    uint32_t const ces[9] = { 0x2627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_094)
{
    // 1309 0061;	
    // (ጉ) ETHIOPIC SYLLABLE GU	[2627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1309, 0x0061 };
    uint32_t const ces[9] = { 0x2627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_095)
{
    // 1309 0041;	
    // (ጉ) ETHIOPIC SYLLABLE GU	[2627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1309, 0x0041 };
    uint32_t const ces[9] = { 0x2627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_096)
{
    // 1309 0062;	
    // (ጉ) ETHIOPIC SYLLABLE GU	[2627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1309, 0x0062 };
    uint32_t const ces[9] = { 0x2627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_097)
{
    // 130A 0021;	
    // (ጊ) ETHIOPIC SYLLABLE GI	[2628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130A, 0x0021 };
    uint32_t const ces[9] = { 0x2628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_098)
{
    // 130A 003F;	
    // (ጊ) ETHIOPIC SYLLABLE GI	[2628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130A, 0x003F };
    uint32_t const ces[9] = { 0x2628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_099)
{
    // 130A 0061;	
    // (ጊ) ETHIOPIC SYLLABLE GI	[2628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130A, 0x0061 };
    uint32_t const ces[9] = { 0x2628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_100)
{
    // 130A 0041;	
    // (ጊ) ETHIOPIC SYLLABLE GI	[2628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130A, 0x0041 };
    uint32_t const ces[9] = { 0x2628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_101)
{
    // 130A 0062;	
    // (ጊ) ETHIOPIC SYLLABLE GI	[2628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130A, 0x0062 };
    uint32_t const ces[9] = { 0x2628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_102)
{
    // 130B 0021;	
    // (ጋ) ETHIOPIC SYLLABLE GAA	[2629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130B, 0x0021 };
    uint32_t const ces[9] = { 0x2629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_103)
{
    // 130B 003F;	
    // (ጋ) ETHIOPIC SYLLABLE GAA	[2629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130B, 0x003F };
    uint32_t const ces[9] = { 0x2629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_104)
{
    // 130B 0061;	
    // (ጋ) ETHIOPIC SYLLABLE GAA	[2629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130B, 0x0061 };
    uint32_t const ces[9] = { 0x2629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_105)
{
    // 130B 0041;	
    // (ጋ) ETHIOPIC SYLLABLE GAA	[2629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130B, 0x0041 };
    uint32_t const ces[9] = { 0x2629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_106)
{
    // 130B 0062;	
    // (ጋ) ETHIOPIC SYLLABLE GAA	[2629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130B, 0x0062 };
    uint32_t const ces[9] = { 0x2629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_107)
{
    // 130C 0021;	
    // (ጌ) ETHIOPIC SYLLABLE GEE	[262A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130C, 0x0021 };
    uint32_t const ces[9] = { 0x262A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_108)
{
    // 130C 003F;	
    // (ጌ) ETHIOPIC SYLLABLE GEE	[262A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130C, 0x003F };
    uint32_t const ces[9] = { 0x262A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_109)
{
    // 130C 0061;	
    // (ጌ) ETHIOPIC SYLLABLE GEE	[262A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130C, 0x0061 };
    uint32_t const ces[9] = { 0x262A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_110)
{
    // 130C 0041;	
    // (ጌ) ETHIOPIC SYLLABLE GEE	[262A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130C, 0x0041 };
    uint32_t const ces[9] = { 0x262A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_111)
{
    // 130C 0062;	
    // (ጌ) ETHIOPIC SYLLABLE GEE	[262A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130C, 0x0062 };
    uint32_t const ces[9] = { 0x262A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_112)
{
    // 130D 0021;	
    // (ግ) ETHIOPIC SYLLABLE GE	[262B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130D, 0x0021 };
    uint32_t const ces[9] = { 0x262B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_113)
{
    // 130D 003F;	
    // (ግ) ETHIOPIC SYLLABLE GE	[262B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130D, 0x003F };
    uint32_t const ces[9] = { 0x262B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_114)
{
    // 130D 0061;	
    // (ግ) ETHIOPIC SYLLABLE GE	[262B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130D, 0x0061 };
    uint32_t const ces[9] = { 0x262B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_115)
{
    // 130D 0041;	
    // (ግ) ETHIOPIC SYLLABLE GE	[262B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130D, 0x0041 };
    uint32_t const ces[9] = { 0x262B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_116)
{
    // 130D 0062;	
    // (ግ) ETHIOPIC SYLLABLE GE	[262B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130D, 0x0062 };
    uint32_t const ces[9] = { 0x262B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_117)
{
    // 130E 0021;	
    // (ጎ) ETHIOPIC SYLLABLE GO	[262C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130E, 0x0021 };
    uint32_t const ces[9] = { 0x262C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_118)
{
    // 130E 003F;	
    // (ጎ) ETHIOPIC SYLLABLE GO	[262C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130E, 0x003F };
    uint32_t const ces[9] = { 0x262C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_119)
{
    // 130E 0061;	
    // (ጎ) ETHIOPIC SYLLABLE GO	[262C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130E, 0x0061 };
    uint32_t const ces[9] = { 0x262C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_120)
{
    // 130E 0041;	
    // (ጎ) ETHIOPIC SYLLABLE GO	[262C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130E, 0x0041 };
    uint32_t const ces[9] = { 0x262C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_121)
{
    // 130E 0062;	
    // (ጎ) ETHIOPIC SYLLABLE GO	[262C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130E, 0x0062 };
    uint32_t const ces[9] = { 0x262C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_122)
{
    // 130F 0021;	
    // (ጏ) ETHIOPIC SYLLABLE GOA	[262D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F, 0x0021 };
    uint32_t const ces[9] = { 0x262D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_123)
{
    // 130F 003F;	
    // (ጏ) ETHIOPIC SYLLABLE GOA	[262D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F, 0x003F };
    uint32_t const ces[9] = { 0x262D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_124)
{
    // 130F 0061;	
    // (ጏ) ETHIOPIC SYLLABLE GOA	[262D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F, 0x0061 };
    uint32_t const ces[9] = { 0x262D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_125)
{
    // 130F 0041;	
    // (ጏ) ETHIOPIC SYLLABLE GOA	[262D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F, 0x0041 };
    uint32_t const ces[9] = { 0x262D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_126)
{
    // 130F 0062;	
    // (ጏ) ETHIOPIC SYLLABLE GOA	[262D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F, 0x0062 };
    uint32_t const ces[9] = { 0x262D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_127)
{
    // 1310 0021;	
    // (ጐ) ETHIOPIC SYLLABLE GWA	[262E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310, 0x0021 };
    uint32_t const ces[9] = { 0x262E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_128)
{
    // 1310 003F;	
    // (ጐ) ETHIOPIC SYLLABLE GWA	[262E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310, 0x003F };
    uint32_t const ces[9] = { 0x262E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_129)
{
    // 1310 0061;	
    // (ጐ) ETHIOPIC SYLLABLE GWA	[262E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310, 0x0061 };
    uint32_t const ces[9] = { 0x262E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_130)
{
    // 1310 0041;	
    // (ጐ) ETHIOPIC SYLLABLE GWA	[262E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310, 0x0041 };
    uint32_t const ces[9] = { 0x262E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_131)
{
    // 1310 0062;	
    // (ጐ) ETHIOPIC SYLLABLE GWA	[262E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310, 0x0062 };
    uint32_t const ces[9] = { 0x262E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_132)
{
    // 1312 0021;	
    // (ጒ) ETHIOPIC SYLLABLE GWI	[262F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312, 0x0021 };
    uint32_t const ces[9] = { 0x262F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_133)
{
    // 1312 003F;	
    // (ጒ) ETHIOPIC SYLLABLE GWI	[262F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312, 0x003F };
    uint32_t const ces[9] = { 0x262F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_134)
{
    // 1312 0061;	
    // (ጒ) ETHIOPIC SYLLABLE GWI	[262F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312, 0x0061 };
    uint32_t const ces[9] = { 0x262F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_135)
{
    // 1312 0041;	
    // (ጒ) ETHIOPIC SYLLABLE GWI	[262F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312, 0x0041 };
    uint32_t const ces[9] = { 0x262F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_136)
{
    // 1312 0062;	
    // (ጒ) ETHIOPIC SYLLABLE GWI	[262F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312, 0x0062 };
    uint32_t const ces[9] = { 0x262F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_137)
{
    // 1313 0021;	
    // (ጓ) ETHIOPIC SYLLABLE GWAA	[2630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313, 0x0021 };
    uint32_t const ces[9] = { 0x2630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_138)
{
    // 1313 003F;	
    // (ጓ) ETHIOPIC SYLLABLE GWAA	[2630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313, 0x003F };
    uint32_t const ces[9] = { 0x2630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_139)
{
    // 1313 0061;	
    // (ጓ) ETHIOPIC SYLLABLE GWAA	[2630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313, 0x0061 };
    uint32_t const ces[9] = { 0x2630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_140)
{
    // 1313 0041;	
    // (ጓ) ETHIOPIC SYLLABLE GWAA	[2630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313, 0x0041 };
    uint32_t const ces[9] = { 0x2630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_141)
{
    // 1313 0062;	
    // (ጓ) ETHIOPIC SYLLABLE GWAA	[2630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313, 0x0062 };
    uint32_t const ces[9] = { 0x2630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_142)
{
    // 1314 0021;	
    // (ጔ) ETHIOPIC SYLLABLE GWEE	[2631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314, 0x0021 };
    uint32_t const ces[9] = { 0x2631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_143)
{
    // 1314 003F;	
    // (ጔ) ETHIOPIC SYLLABLE GWEE	[2631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314, 0x003F };
    uint32_t const ces[9] = { 0x2631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_144)
{
    // 1314 0061;	
    // (ጔ) ETHIOPIC SYLLABLE GWEE	[2631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314, 0x0061 };
    uint32_t const ces[9] = { 0x2631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_145)
{
    // 1314 0041;	
    // (ጔ) ETHIOPIC SYLLABLE GWEE	[2631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314, 0x0041 };
    uint32_t const ces[9] = { 0x2631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_146)
{
    // 1314 0062;	
    // (ጔ) ETHIOPIC SYLLABLE GWEE	[2631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314, 0x0062 };
    uint32_t const ces[9] = { 0x2631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_147)
{
    // 1315 0021;	
    // (ጕ) ETHIOPIC SYLLABLE GWE	[2632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315, 0x0021 };
    uint32_t const ces[9] = { 0x2632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_148)
{
    // 1315 003F;	
    // (ጕ) ETHIOPIC SYLLABLE GWE	[2632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315, 0x003F };
    uint32_t const ces[9] = { 0x2632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_149)
{
    // 1315 0061;	
    // (ጕ) ETHIOPIC SYLLABLE GWE	[2632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315, 0x0061 };
    uint32_t const ces[9] = { 0x2632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_150)
{
    // 1315 0041;	
    // (ጕ) ETHIOPIC SYLLABLE GWE	[2632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315, 0x0041 };
    uint32_t const ces[9] = { 0x2632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_151)
{
    // 1315 0062;	
    // (ጕ) ETHIOPIC SYLLABLE GWE	[2632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315, 0x0062 };
    uint32_t const ces[9] = { 0x2632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_152)
{
    // 1318 0021;	
    // (ጘ) ETHIOPIC SYLLABLE GGA	[2633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318, 0x0021 };
    uint32_t const ces[9] = { 0x2633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_153)
{
    // 1318 003F;	
    // (ጘ) ETHIOPIC SYLLABLE GGA	[2633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318, 0x003F };
    uint32_t const ces[9] = { 0x2633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_154)
{
    // 1318 0061;	
    // (ጘ) ETHIOPIC SYLLABLE GGA	[2633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318, 0x0061 };
    uint32_t const ces[9] = { 0x2633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_155)
{
    // 1318 0041;	
    // (ጘ) ETHIOPIC SYLLABLE GGA	[2633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318, 0x0041 };
    uint32_t const ces[9] = { 0x2633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_156)
{
    // 1318 0062;	
    // (ጘ) ETHIOPIC SYLLABLE GGA	[2633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318, 0x0062 };
    uint32_t const ces[9] = { 0x2633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_157)
{
    // 1319 0021;	
    // (ጙ) ETHIOPIC SYLLABLE GGU	[2634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319, 0x0021 };
    uint32_t const ces[9] = { 0x2634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_158)
{
    // 1319 003F;	
    // (ጙ) ETHIOPIC SYLLABLE GGU	[2634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319, 0x003F };
    uint32_t const ces[9] = { 0x2634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_159)
{
    // 1319 0061;	
    // (ጙ) ETHIOPIC SYLLABLE GGU	[2634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319, 0x0061 };
    uint32_t const ces[9] = { 0x2634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_160)
{
    // 1319 0041;	
    // (ጙ) ETHIOPIC SYLLABLE GGU	[2634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319, 0x0041 };
    uint32_t const ces[9] = { 0x2634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_161)
{
    // 1319 0062;	
    // (ጙ) ETHIOPIC SYLLABLE GGU	[2634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319, 0x0062 };
    uint32_t const ces[9] = { 0x2634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_162)
{
    // 131A 0021;	
    // (ጚ) ETHIOPIC SYLLABLE GGI	[2635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A, 0x0021 };
    uint32_t const ces[9] = { 0x2635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_163)
{
    // 131A 003F;	
    // (ጚ) ETHIOPIC SYLLABLE GGI	[2635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A, 0x003F };
    uint32_t const ces[9] = { 0x2635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_164)
{
    // 131A 0061;	
    // (ጚ) ETHIOPIC SYLLABLE GGI	[2635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A, 0x0061 };
    uint32_t const ces[9] = { 0x2635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_165)
{
    // 131A 0041;	
    // (ጚ) ETHIOPIC SYLLABLE GGI	[2635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A, 0x0041 };
    uint32_t const ces[9] = { 0x2635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_166)
{
    // 131A 0062;	
    // (ጚ) ETHIOPIC SYLLABLE GGI	[2635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A, 0x0062 };
    uint32_t const ces[9] = { 0x2635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_167)
{
    // 131B 0021;	
    // (ጛ) ETHIOPIC SYLLABLE GGAA	[2636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B, 0x0021 };
    uint32_t const ces[9] = { 0x2636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_168)
{
    // 131B 003F;	
    // (ጛ) ETHIOPIC SYLLABLE GGAA	[2636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B, 0x003F };
    uint32_t const ces[9] = { 0x2636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_169)
{
    // 131B 0061;	
    // (ጛ) ETHIOPIC SYLLABLE GGAA	[2636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B, 0x0061 };
    uint32_t const ces[9] = { 0x2636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_170)
{
    // 131B 0041;	
    // (ጛ) ETHIOPIC SYLLABLE GGAA	[2636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B, 0x0041 };
    uint32_t const ces[9] = { 0x2636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_171)
{
    // 131B 0062;	
    // (ጛ) ETHIOPIC SYLLABLE GGAA	[2636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B, 0x0062 };
    uint32_t const ces[9] = { 0x2636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_172)
{
    // 131C 0021;	
    // (ጜ) ETHIOPIC SYLLABLE GGEE	[2637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C, 0x0021 };
    uint32_t const ces[9] = { 0x2637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_173)
{
    // 131C 003F;	
    // (ጜ) ETHIOPIC SYLLABLE GGEE	[2637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C, 0x003F };
    uint32_t const ces[9] = { 0x2637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_174)
{
    // 131C 0061;	
    // (ጜ) ETHIOPIC SYLLABLE GGEE	[2637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C, 0x0061 };
    uint32_t const ces[9] = { 0x2637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_175)
{
    // 131C 0041;	
    // (ጜ) ETHIOPIC SYLLABLE GGEE	[2637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C, 0x0041 };
    uint32_t const ces[9] = { 0x2637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_176)
{
    // 131C 0062;	
    // (ጜ) ETHIOPIC SYLLABLE GGEE	[2637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C, 0x0062 };
    uint32_t const ces[9] = { 0x2637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_177)
{
    // 131D 0021;	
    // (ጝ) ETHIOPIC SYLLABLE GGE	[2638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D, 0x0021 };
    uint32_t const ces[9] = { 0x2638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_178)
{
    // 131D 003F;	
    // (ጝ) ETHIOPIC SYLLABLE GGE	[2638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D, 0x003F };
    uint32_t const ces[9] = { 0x2638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_179)
{
    // 131D 0061;	
    // (ጝ) ETHIOPIC SYLLABLE GGE	[2638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D, 0x0061 };
    uint32_t const ces[9] = { 0x2638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_180)
{
    // 131D 0041;	
    // (ጝ) ETHIOPIC SYLLABLE GGE	[2638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D, 0x0041 };
    uint32_t const ces[9] = { 0x2638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_181)
{
    // 131D 0062;	
    // (ጝ) ETHIOPIC SYLLABLE GGE	[2638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D, 0x0062 };
    uint32_t const ces[9] = { 0x2638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_182)
{
    // 131E 0021;	
    // (ጞ) ETHIOPIC SYLLABLE GGO	[2639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E, 0x0021 };
    uint32_t const ces[9] = { 0x2639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_183)
{
    // 131E 003F;	
    // (ጞ) ETHIOPIC SYLLABLE GGO	[2639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E, 0x003F };
    uint32_t const ces[9] = { 0x2639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_184)
{
    // 131E 0061;	
    // (ጞ) ETHIOPIC SYLLABLE GGO	[2639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E, 0x0061 };
    uint32_t const ces[9] = { 0x2639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_185)
{
    // 131E 0041;	
    // (ጞ) ETHIOPIC SYLLABLE GGO	[2639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E, 0x0041 };
    uint32_t const ces[9] = { 0x2639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_186)
{
    // 131E 0062;	
    // (ጞ) ETHIOPIC SYLLABLE GGO	[2639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E, 0x0062 };
    uint32_t const ces[9] = { 0x2639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_187)
{
    // 131F 0021;	
    // (ጟ) ETHIOPIC SYLLABLE GGWAA	[263A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F, 0x0021 };
    uint32_t const ces[9] = { 0x263A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_188)
{
    // 131F 003F;	
    // (ጟ) ETHIOPIC SYLLABLE GGWAA	[263A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F, 0x003F };
    uint32_t const ces[9] = { 0x263A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_189)
{
    // 131F 0061;	
    // (ጟ) ETHIOPIC SYLLABLE GGWAA	[263A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F, 0x0061 };
    uint32_t const ces[9] = { 0x263A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_190)
{
    // 131F 0041;	
    // (ጟ) ETHIOPIC SYLLABLE GGWAA	[263A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F, 0x0041 };
    uint32_t const ces[9] = { 0x263A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_191)
{
    // 131F 0062;	
    // (ጟ) ETHIOPIC SYLLABLE GGWAA	[263A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F, 0x0062 };
    uint32_t const ces[9] = { 0x263A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_192)
{
    // 2D93 0021;	
    // (ⶓ) ETHIOPIC SYLLABLE GGWA	[263B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D93, 0x0021 };
    uint32_t const ces[9] = { 0x263B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_193)
{
    // 2D93 003F;	
    // (ⶓ) ETHIOPIC SYLLABLE GGWA	[263B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D93, 0x003F };
    uint32_t const ces[9] = { 0x263B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_194)
{
    // 2D93 0061;	
    // (ⶓ) ETHIOPIC SYLLABLE GGWA	[263B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D93, 0x0061 };
    uint32_t const ces[9] = { 0x263B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_195)
{
    // 2D93 0041;	
    // (ⶓ) ETHIOPIC SYLLABLE GGWA	[263B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D93, 0x0041 };
    uint32_t const ces[9] = { 0x263B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_196)
{
    // 2D93 0062;	
    // (ⶓ) ETHIOPIC SYLLABLE GGWA	[263B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D93, 0x0062 };
    uint32_t const ces[9] = { 0x263B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_197)
{
    // 2D94 0021;	
    // (ⶔ) ETHIOPIC SYLLABLE GGWI	[263C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D94, 0x0021 };
    uint32_t const ces[9] = { 0x263C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_198)
{
    // 2D94 003F;	
    // (ⶔ) ETHIOPIC SYLLABLE GGWI	[263C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D94, 0x003F };
    uint32_t const ces[9] = { 0x263C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_199)
{
    // 2D94 0061;	
    // (ⶔ) ETHIOPIC SYLLABLE GGWI	[263C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D94, 0x0061 };
    uint32_t const ces[9] = { 0x263C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_200)
{
    // 2D94 0041;	
    // (ⶔ) ETHIOPIC SYLLABLE GGWI	[263C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D94, 0x0041 };
    uint32_t const ces[9] = { 0x263C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_201)
{
    // 2D94 0062;	
    // (ⶔ) ETHIOPIC SYLLABLE GGWI	[263C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D94, 0x0062 };
    uint32_t const ces[9] = { 0x263C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_202)
{
    // 2D95 0021;	
    // (ⶕ) ETHIOPIC SYLLABLE GGWEE	[263D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D95, 0x0021 };
    uint32_t const ces[9] = { 0x263D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_203)
{
    // 2D95 003F;	
    // (ⶕ) ETHIOPIC SYLLABLE GGWEE	[263D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D95, 0x003F };
    uint32_t const ces[9] = { 0x263D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_204)
{
    // 2D95 0061;	
    // (ⶕ) ETHIOPIC SYLLABLE GGWEE	[263D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D95, 0x0061 };
    uint32_t const ces[9] = { 0x263D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_205)
{
    // 2D95 0041;	
    // (ⶕ) ETHIOPIC SYLLABLE GGWEE	[263D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D95, 0x0041 };
    uint32_t const ces[9] = { 0x263D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_206)
{
    // 2D95 0062;	
    // (ⶕ) ETHIOPIC SYLLABLE GGWEE	[263D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D95, 0x0062 };
    uint32_t const ces[9] = { 0x263D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_207)
{
    // 2D96 0021;	
    // (ⶖ) ETHIOPIC SYLLABLE GGWE	[263E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D96, 0x0021 };
    uint32_t const ces[9] = { 0x263E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_208)
{
    // 2D96 003F;	
    // (ⶖ) ETHIOPIC SYLLABLE GGWE	[263E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D96, 0x003F };
    uint32_t const ces[9] = { 0x263E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_209)
{
    // 2D96 0061;	
    // (ⶖ) ETHIOPIC SYLLABLE GGWE	[263E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D96, 0x0061 };
    uint32_t const ces[9] = { 0x263E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_210)
{
    // 2D96 0041;	
    // (ⶖ) ETHIOPIC SYLLABLE GGWE	[263E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D96, 0x0041 };
    uint32_t const ces[9] = { 0x263E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_211)
{
    // 2D96 0062;	
    // (ⶖ) ETHIOPIC SYLLABLE GGWE	[263E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D96, 0x0062 };
    uint32_t const ces[9] = { 0x263E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_212)
{
    // 1320 0021;	
    // (ጠ) ETHIOPIC SYLLABLE THA	[263F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320, 0x0021 };
    uint32_t const ces[9] = { 0x263F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_213)
{
    // 1320 003F;	
    // (ጠ) ETHIOPIC SYLLABLE THA	[263F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320, 0x003F };
    uint32_t const ces[9] = { 0x263F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_214)
{
    // 1320 0061;	
    // (ጠ) ETHIOPIC SYLLABLE THA	[263F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320, 0x0061 };
    uint32_t const ces[9] = { 0x263F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_215)
{
    // 1320 0041;	
    // (ጠ) ETHIOPIC SYLLABLE THA	[263F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320, 0x0041 };
    uint32_t const ces[9] = { 0x263F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_216)
{
    // 1320 0062;	
    // (ጠ) ETHIOPIC SYLLABLE THA	[263F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320, 0x0062 };
    uint32_t const ces[9] = { 0x263F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_217)
{
    // 1321 0021;	
    // (ጡ) ETHIOPIC SYLLABLE THU	[2640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321, 0x0021 };
    uint32_t const ces[9] = { 0x2640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_218)
{
    // 1321 003F;	
    // (ጡ) ETHIOPIC SYLLABLE THU	[2640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321, 0x003F };
    uint32_t const ces[9] = { 0x2640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_219)
{
    // 1321 0061;	
    // (ጡ) ETHIOPIC SYLLABLE THU	[2640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321, 0x0061 };
    uint32_t const ces[9] = { 0x2640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_220)
{
    // 1321 0041;	
    // (ጡ) ETHIOPIC SYLLABLE THU	[2640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321, 0x0041 };
    uint32_t const ces[9] = { 0x2640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_221)
{
    // 1321 0062;	
    // (ጡ) ETHIOPIC SYLLABLE THU	[2640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321, 0x0062 };
    uint32_t const ces[9] = { 0x2640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_222)
{
    // 1322 0021;	
    // (ጢ) ETHIOPIC SYLLABLE THI	[2641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322, 0x0021 };
    uint32_t const ces[9] = { 0x2641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_223)
{
    // 1322 003F;	
    // (ጢ) ETHIOPIC SYLLABLE THI	[2641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322, 0x003F };
    uint32_t const ces[9] = { 0x2641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_224)
{
    // 1322 0061;	
    // (ጢ) ETHIOPIC SYLLABLE THI	[2641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322, 0x0061 };
    uint32_t const ces[9] = { 0x2641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_225)
{
    // 1322 0041;	
    // (ጢ) ETHIOPIC SYLLABLE THI	[2641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1322, 0x0041 };
    uint32_t const ces[9] = { 0x2641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_226)
{
    // 1322 0062;	
    // (ጢ) ETHIOPIC SYLLABLE THI	[2641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1322, 0x0062 };
    uint32_t const ces[9] = { 0x2641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_227)
{
    // 1323 0021;	
    // (ጣ) ETHIOPIC SYLLABLE THAA	[2642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323, 0x0021 };
    uint32_t const ces[9] = { 0x2642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_228)
{
    // 1323 003F;	
    // (ጣ) ETHIOPIC SYLLABLE THAA	[2642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323, 0x003F };
    uint32_t const ces[9] = { 0x2642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_229)
{
    // 1323 0061;	
    // (ጣ) ETHIOPIC SYLLABLE THAA	[2642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323, 0x0061 };
    uint32_t const ces[9] = { 0x2642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_230)
{
    // 1323 0041;	
    // (ጣ) ETHIOPIC SYLLABLE THAA	[2642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1323, 0x0041 };
    uint32_t const ces[9] = { 0x2642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_231)
{
    // 1323 0062;	
    // (ጣ) ETHIOPIC SYLLABLE THAA	[2642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1323, 0x0062 };
    uint32_t const ces[9] = { 0x2642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_232)
{
    // 1324 0021;	
    // (ጤ) ETHIOPIC SYLLABLE THEE	[2643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324, 0x0021 };
    uint32_t const ces[9] = { 0x2643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_233)
{
    // 1324 003F;	
    // (ጤ) ETHIOPIC SYLLABLE THEE	[2643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324, 0x003F };
    uint32_t const ces[9] = { 0x2643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_234)
{
    // 1324 0061;	
    // (ጤ) ETHIOPIC SYLLABLE THEE	[2643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324, 0x0061 };
    uint32_t const ces[9] = { 0x2643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_235)
{
    // 1324 0041;	
    // (ጤ) ETHIOPIC SYLLABLE THEE	[2643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1324, 0x0041 };
    uint32_t const ces[9] = { 0x2643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_236)
{
    // 1324 0062;	
    // (ጤ) ETHIOPIC SYLLABLE THEE	[2643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1324, 0x0062 };
    uint32_t const ces[9] = { 0x2643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_237)
{
    // 1325 0021;	
    // (ጥ) ETHIOPIC SYLLABLE THE	[2644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325, 0x0021 };
    uint32_t const ces[9] = { 0x2644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_238)
{
    // 1325 003F;	
    // (ጥ) ETHIOPIC SYLLABLE THE	[2644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325, 0x003F };
    uint32_t const ces[9] = { 0x2644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_239)
{
    // 1325 0061;	
    // (ጥ) ETHIOPIC SYLLABLE THE	[2644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325, 0x0061 };
    uint32_t const ces[9] = { 0x2644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_240)
{
    // 1325 0041;	
    // (ጥ) ETHIOPIC SYLLABLE THE	[2644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1325, 0x0041 };
    uint32_t const ces[9] = { 0x2644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_241)
{
    // 1325 0062;	
    // (ጥ) ETHIOPIC SYLLABLE THE	[2644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1325, 0x0062 };
    uint32_t const ces[9] = { 0x2644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_242)
{
    // 1326 0021;	
    // (ጦ) ETHIOPIC SYLLABLE THO	[2645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326, 0x0021 };
    uint32_t const ces[9] = { 0x2645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_243)
{
    // 1326 003F;	
    // (ጦ) ETHIOPIC SYLLABLE THO	[2645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326, 0x003F };
    uint32_t const ces[9] = { 0x2645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_244)
{
    // 1326 0061;	
    // (ጦ) ETHIOPIC SYLLABLE THO	[2645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326, 0x0061 };
    uint32_t const ces[9] = { 0x2645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_245)
{
    // 1326 0041;	
    // (ጦ) ETHIOPIC SYLLABLE THO	[2645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1326, 0x0041 };
    uint32_t const ces[9] = { 0x2645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_246)
{
    // 1326 0062;	
    // (ጦ) ETHIOPIC SYLLABLE THO	[2645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1326, 0x0062 };
    uint32_t const ces[9] = { 0x2645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_247)
{
    // 1327 0021;	
    // (ጧ) ETHIOPIC SYLLABLE THWA	[2646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327, 0x0021 };
    uint32_t const ces[9] = { 0x2646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_248)
{
    // 1327 003F;	
    // (ጧ) ETHIOPIC SYLLABLE THWA	[2646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327, 0x003F };
    uint32_t const ces[9] = { 0x2646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_249)
{
    // 1327 0061;	
    // (ጧ) ETHIOPIC SYLLABLE THWA	[2646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327, 0x0061 };
    uint32_t const ces[9] = { 0x2646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_250)
{
    // 1327 0041;	
    // (ጧ) ETHIOPIC SYLLABLE THWA	[2646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1327, 0x0041 };
    uint32_t const ces[9] = { 0x2646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_251)
{
    // 1327 0062;	
    // (ጧ) ETHIOPIC SYLLABLE THWA	[2646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1327, 0x0062 };
    uint32_t const ces[9] = { 0x2646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_252)
{
    // 2D8F 0021;	
    // (ⶏ) ETHIOPIC SYLLABLE THOA	[2647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8F, 0x0021 };
    uint32_t const ces[9] = { 0x2647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_253)
{
    // 2D8F 003F;	
    // (ⶏ) ETHIOPIC SYLLABLE THOA	[2647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8F, 0x003F };
    uint32_t const ces[9] = { 0x2647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_254)
{
    // 2D8F 0061;	
    // (ⶏ) ETHIOPIC SYLLABLE THOA	[2647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8F, 0x0061 };
    uint32_t const ces[9] = { 0x2647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_255)
{
    // 2D8F 0041;	
    // (ⶏ) ETHIOPIC SYLLABLE THOA	[2647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8F, 0x0041 };
    uint32_t const ces[9] = { 0x2647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_256)
{
    // 2D8F 0062;	
    // (ⶏ) ETHIOPIC SYLLABLE THOA	[2647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8F, 0x0062 };
    uint32_t const ces[9] = { 0x2647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_257)
{
    // 1328 0021;	
    // (ጨ) ETHIOPIC SYLLABLE CHA	[2648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1328, 0x0021 };
    uint32_t const ces[9] = { 0x2648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_258)
{
    // 1328 003F;	
    // (ጨ) ETHIOPIC SYLLABLE CHA	[2648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1328, 0x003F };
    uint32_t const ces[9] = { 0x2648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_259)
{
    // 1328 0061;	
    // (ጨ) ETHIOPIC SYLLABLE CHA	[2648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1328, 0x0061 };
    uint32_t const ces[9] = { 0x2648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_260)
{
    // 1328 0041;	
    // (ጨ) ETHIOPIC SYLLABLE CHA	[2648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1328, 0x0041 };
    uint32_t const ces[9] = { 0x2648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_261)
{
    // 1328 0062;	
    // (ጨ) ETHIOPIC SYLLABLE CHA	[2648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1328, 0x0062 };
    uint32_t const ces[9] = { 0x2648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_262)
{
    // 1329 0021;	
    // (ጩ) ETHIOPIC SYLLABLE CHU	[2649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1329, 0x0021 };
    uint32_t const ces[9] = { 0x2649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_263)
{
    // 1329 003F;	
    // (ጩ) ETHIOPIC SYLLABLE CHU	[2649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1329, 0x003F };
    uint32_t const ces[9] = { 0x2649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_264)
{
    // 1329 0061;	
    // (ጩ) ETHIOPIC SYLLABLE CHU	[2649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1329, 0x0061 };
    uint32_t const ces[9] = { 0x2649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_265)
{
    // 1329 0041;	
    // (ጩ) ETHIOPIC SYLLABLE CHU	[2649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1329, 0x0041 };
    uint32_t const ces[9] = { 0x2649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_266)
{
    // 1329 0062;	
    // (ጩ) ETHIOPIC SYLLABLE CHU	[2649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1329, 0x0062 };
    uint32_t const ces[9] = { 0x2649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_267)
{
    // 132A 0021;	
    // (ጪ) ETHIOPIC SYLLABLE CHI	[264A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132A, 0x0021 };
    uint32_t const ces[9] = { 0x264A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_268)
{
    // 132A 003F;	
    // (ጪ) ETHIOPIC SYLLABLE CHI	[264A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132A, 0x003F };
    uint32_t const ces[9] = { 0x264A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_269)
{
    // 132A 0061;	
    // (ጪ) ETHIOPIC SYLLABLE CHI	[264A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132A, 0x0061 };
    uint32_t const ces[9] = { 0x264A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_270)
{
    // 132A 0041;	
    // (ጪ) ETHIOPIC SYLLABLE CHI	[264A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132A, 0x0041 };
    uint32_t const ces[9] = { 0x264A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_271)
{
    // 132A 0062;	
    // (ጪ) ETHIOPIC SYLLABLE CHI	[264A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132A, 0x0062 };
    uint32_t const ces[9] = { 0x264A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_272)
{
    // 132B 0021;	
    // (ጫ) ETHIOPIC SYLLABLE CHAA	[264B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132B, 0x0021 };
    uint32_t const ces[9] = { 0x264B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_273)
{
    // 132B 003F;	
    // (ጫ) ETHIOPIC SYLLABLE CHAA	[264B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132B, 0x003F };
    uint32_t const ces[9] = { 0x264B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_274)
{
    // 132B 0061;	
    // (ጫ) ETHIOPIC SYLLABLE CHAA	[264B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132B, 0x0061 };
    uint32_t const ces[9] = { 0x264B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_275)
{
    // 132B 0041;	
    // (ጫ) ETHIOPIC SYLLABLE CHAA	[264B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132B, 0x0041 };
    uint32_t const ces[9] = { 0x264B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_276)
{
    // 132B 0062;	
    // (ጫ) ETHIOPIC SYLLABLE CHAA	[264B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132B, 0x0062 };
    uint32_t const ces[9] = { 0x264B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_277)
{
    // 132C 0021;	
    // (ጬ) ETHIOPIC SYLLABLE CHEE	[264C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132C, 0x0021 };
    uint32_t const ces[9] = { 0x264C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_278)
{
    // 132C 003F;	
    // (ጬ) ETHIOPIC SYLLABLE CHEE	[264C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132C, 0x003F };
    uint32_t const ces[9] = { 0x264C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_279)
{
    // 132C 0061;	
    // (ጬ) ETHIOPIC SYLLABLE CHEE	[264C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132C, 0x0061 };
    uint32_t const ces[9] = { 0x264C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_280)
{
    // 132C 0041;	
    // (ጬ) ETHIOPIC SYLLABLE CHEE	[264C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132C, 0x0041 };
    uint32_t const ces[9] = { 0x264C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_281)
{
    // 132C 0062;	
    // (ጬ) ETHIOPIC SYLLABLE CHEE	[264C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132C, 0x0062 };
    uint32_t const ces[9] = { 0x264C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_282)
{
    // 132D 0021;	
    // (ጭ) ETHIOPIC SYLLABLE CHE	[264D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132D, 0x0021 };
    uint32_t const ces[9] = { 0x264D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_283)
{
    // 132D 003F;	
    // (ጭ) ETHIOPIC SYLLABLE CHE	[264D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132D, 0x003F };
    uint32_t const ces[9] = { 0x264D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_284)
{
    // 132D 0061;	
    // (ጭ) ETHIOPIC SYLLABLE CHE	[264D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132D, 0x0061 };
    uint32_t const ces[9] = { 0x264D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_285)
{
    // 132D 0041;	
    // (ጭ) ETHIOPIC SYLLABLE CHE	[264D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132D, 0x0041 };
    uint32_t const ces[9] = { 0x264D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_286)
{
    // 132D 0062;	
    // (ጭ) ETHIOPIC SYLLABLE CHE	[264D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132D, 0x0062 };
    uint32_t const ces[9] = { 0x264D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_287)
{
    // 132E 0021;	
    // (ጮ) ETHIOPIC SYLLABLE CHO	[264E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E, 0x0021 };
    uint32_t const ces[9] = { 0x264E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_288)
{
    // 132E 003F;	
    // (ጮ) ETHIOPIC SYLLABLE CHO	[264E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E, 0x003F };
    uint32_t const ces[9] = { 0x264E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_289)
{
    // 132E 0061;	
    // (ጮ) ETHIOPIC SYLLABLE CHO	[264E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E, 0x0061 };
    uint32_t const ces[9] = { 0x264E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_290)
{
    // 132E 0041;	
    // (ጮ) ETHIOPIC SYLLABLE CHO	[264E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132E, 0x0041 };
    uint32_t const ces[9] = { 0x264E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_291)
{
    // 132E 0062;	
    // (ጮ) ETHIOPIC SYLLABLE CHO	[264E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E, 0x0062 };
    uint32_t const ces[9] = { 0x264E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_292)
{
    // 132F 0021;	
    // (ጯ) ETHIOPIC SYLLABLE CHWA	[264F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F, 0x0021 };
    uint32_t const ces[9] = { 0x264F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_293)
{
    // 132F 003F;	
    // (ጯ) ETHIOPIC SYLLABLE CHWA	[264F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F, 0x003F };
    uint32_t const ces[9] = { 0x264F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_294)
{
    // 132F 0061;	
    // (ጯ) ETHIOPIC SYLLABLE CHWA	[264F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F, 0x0061 };
    uint32_t const ces[9] = { 0x264F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_295)
{
    // 132F 0041;	
    // (ጯ) ETHIOPIC SYLLABLE CHWA	[264F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F, 0x0041 };
    uint32_t const ces[9] = { 0x264F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_296)
{
    // 132F 0062;	
    // (ጯ) ETHIOPIC SYLLABLE CHWA	[264F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F, 0x0062 };
    uint32_t const ces[9] = { 0x264F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_297)
{
    // 2D90 0021;	
    // (ⶐ) ETHIOPIC SYLLABLE CHOA	[2650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D90, 0x0021 };
    uint32_t const ces[9] = { 0x2650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_298)
{
    // 2D90 003F;	
    // (ⶐ) ETHIOPIC SYLLABLE CHOA	[2650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D90, 0x003F };
    uint32_t const ces[9] = { 0x2650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_299)
{
    // 2D90 0061;	
    // (ⶐ) ETHIOPIC SYLLABLE CHOA	[2650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D90, 0x0061 };
    uint32_t const ces[9] = { 0x2650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_300)
{
    // 2D90 0041;	
    // (ⶐ) ETHIOPIC SYLLABLE CHOA	[2650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D90, 0x0041 };
    uint32_t const ces[9] = { 0x2650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_301)
{
    // 2D90 0062;	
    // (ⶐ) ETHIOPIC SYLLABLE CHOA	[2650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D90, 0x0062 };
    uint32_t const ces[9] = { 0x2650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_302)
{
    // AB20 0021;	
    // (ꬠ) ETHIOPIC SYLLABLE CCHHA	[2651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB20, 0x0021 };
    uint32_t const ces[9] = { 0x2651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_303)
{
    // AB20 003F;	
    // (ꬠ) ETHIOPIC SYLLABLE CCHHA	[2651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB20, 0x003F };
    uint32_t const ces[9] = { 0x2651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_304)
{
    // AB20 0061;	
    // (ꬠ) ETHIOPIC SYLLABLE CCHHA	[2651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB20, 0x0061 };
    uint32_t const ces[9] = { 0x2651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_305)
{
    // AB20 0041;	
    // (ꬠ) ETHIOPIC SYLLABLE CCHHA	[2651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB20, 0x0041 };
    uint32_t const ces[9] = { 0x2651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_306)
{
    // AB20 0062;	
    // (ꬠ) ETHIOPIC SYLLABLE CCHHA	[2651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB20, 0x0062 };
    uint32_t const ces[9] = { 0x2651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_307)
{
    // AB21 0021;	
    // (ꬡ) ETHIOPIC SYLLABLE CCHHU	[2652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB21, 0x0021 };
    uint32_t const ces[9] = { 0x2652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_308)
{
    // AB21 003F;	
    // (ꬡ) ETHIOPIC SYLLABLE CCHHU	[2652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB21, 0x003F };
    uint32_t const ces[9] = { 0x2652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_309)
{
    // AB21 0061;	
    // (ꬡ) ETHIOPIC SYLLABLE CCHHU	[2652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB21, 0x0061 };
    uint32_t const ces[9] = { 0x2652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_310)
{
    // AB21 0041;	
    // (ꬡ) ETHIOPIC SYLLABLE CCHHU	[2652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB21, 0x0041 };
    uint32_t const ces[9] = { 0x2652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_311)
{
    // AB21 0062;	
    // (ꬡ) ETHIOPIC SYLLABLE CCHHU	[2652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB21, 0x0062 };
    uint32_t const ces[9] = { 0x2652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_312)
{
    // AB22 0021;	
    // (ꬢ) ETHIOPIC SYLLABLE CCHHI	[2653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB22, 0x0021 };
    uint32_t const ces[9] = { 0x2653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_313)
{
    // AB22 003F;	
    // (ꬢ) ETHIOPIC SYLLABLE CCHHI	[2653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB22, 0x003F };
    uint32_t const ces[9] = { 0x2653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_314)
{
    // AB22 0061;	
    // (ꬢ) ETHIOPIC SYLLABLE CCHHI	[2653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB22, 0x0061 };
    uint32_t const ces[9] = { 0x2653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_315)
{
    // AB22 0041;	
    // (ꬢ) ETHIOPIC SYLLABLE CCHHI	[2653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB22, 0x0041 };
    uint32_t const ces[9] = { 0x2653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_316)
{
    // AB22 0062;	
    // (ꬢ) ETHIOPIC SYLLABLE CCHHI	[2653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB22, 0x0062 };
    uint32_t const ces[9] = { 0x2653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_317)
{
    // AB23 0021;	
    // (ꬣ) ETHIOPIC SYLLABLE CCHHAA	[2654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB23, 0x0021 };
    uint32_t const ces[9] = { 0x2654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_318)
{
    // AB23 003F;	
    // (ꬣ) ETHIOPIC SYLLABLE CCHHAA	[2654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB23, 0x003F };
    uint32_t const ces[9] = { 0x2654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_319)
{
    // AB23 0061;	
    // (ꬣ) ETHIOPIC SYLLABLE CCHHAA	[2654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB23, 0x0061 };
    uint32_t const ces[9] = { 0x2654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_320)
{
    // AB23 0041;	
    // (ꬣ) ETHIOPIC SYLLABLE CCHHAA	[2654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB23, 0x0041 };
    uint32_t const ces[9] = { 0x2654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_321)
{
    // AB23 0062;	
    // (ꬣ) ETHIOPIC SYLLABLE CCHHAA	[2654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB23, 0x0062 };
    uint32_t const ces[9] = { 0x2654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_322)
{
    // AB24 0021;	
    // (ꬤ) ETHIOPIC SYLLABLE CCHHEE	[2655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB24, 0x0021 };
    uint32_t const ces[9] = { 0x2655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_323)
{
    // AB24 003F;	
    // (ꬤ) ETHIOPIC SYLLABLE CCHHEE	[2655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB24, 0x003F };
    uint32_t const ces[9] = { 0x2655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_324)
{
    // AB24 0061;	
    // (ꬤ) ETHIOPIC SYLLABLE CCHHEE	[2655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB24, 0x0061 };
    uint32_t const ces[9] = { 0x2655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_325)
{
    // AB24 0041;	
    // (ꬤ) ETHIOPIC SYLLABLE CCHHEE	[2655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB24, 0x0041 };
    uint32_t const ces[9] = { 0x2655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_326)
{
    // AB24 0062;	
    // (ꬤ) ETHIOPIC SYLLABLE CCHHEE	[2655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB24, 0x0062 };
    uint32_t const ces[9] = { 0x2655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_327)
{
    // AB25 0021;	
    // (ꬥ) ETHIOPIC SYLLABLE CCHHE	[2656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB25, 0x0021 };
    uint32_t const ces[9] = { 0x2656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_328)
{
    // AB25 003F;	
    // (ꬥ) ETHIOPIC SYLLABLE CCHHE	[2656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB25, 0x003F };
    uint32_t const ces[9] = { 0x2656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_329)
{
    // AB25 0061;	
    // (ꬥ) ETHIOPIC SYLLABLE CCHHE	[2656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB25, 0x0061 };
    uint32_t const ces[9] = { 0x2656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_330)
{
    // AB25 0041;	
    // (ꬥ) ETHIOPIC SYLLABLE CCHHE	[2656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB25, 0x0041 };
    uint32_t const ces[9] = { 0x2656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_331)
{
    // AB25 0062;	
    // (ꬥ) ETHIOPIC SYLLABLE CCHHE	[2656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB25, 0x0062 };
    uint32_t const ces[9] = { 0x2656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_332)
{
    // AB26 0021;	
    // (ꬦ) ETHIOPIC SYLLABLE CCHHO	[2657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB26, 0x0021 };
    uint32_t const ces[9] = { 0x2657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_333)
{
    // AB26 003F;	
    // (ꬦ) ETHIOPIC SYLLABLE CCHHO	[2657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB26, 0x003F };
    uint32_t const ces[9] = { 0x2657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_334)
{
    // AB26 0061;	
    // (ꬦ) ETHIOPIC SYLLABLE CCHHO	[2657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB26, 0x0061 };
    uint32_t const ces[9] = { 0x2657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_335)
{
    // AB26 0041;	
    // (ꬦ) ETHIOPIC SYLLABLE CCHHO	[2657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB26, 0x0041 };
    uint32_t const ces[9] = { 0x2657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_336)
{
    // AB26 0062;	
    // (ꬦ) ETHIOPIC SYLLABLE CCHHO	[2657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB26, 0x0062 };
    uint32_t const ces[9] = { 0x2657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_337)
{
    // 1330 0021;	
    // (ጰ) ETHIOPIC SYLLABLE PHA	[2658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330, 0x0021 };
    uint32_t const ces[9] = { 0x2658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_338)
{
    // 1330 003F;	
    // (ጰ) ETHIOPIC SYLLABLE PHA	[2658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330, 0x003F };
    uint32_t const ces[9] = { 0x2658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_339)
{
    // 1330 0061;	
    // (ጰ) ETHIOPIC SYLLABLE PHA	[2658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330, 0x0061 };
    uint32_t const ces[9] = { 0x2658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_340)
{
    // 1330 0041;	
    // (ጰ) ETHIOPIC SYLLABLE PHA	[2658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330, 0x0041 };
    uint32_t const ces[9] = { 0x2658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_341)
{
    // 1330 0062;	
    // (ጰ) ETHIOPIC SYLLABLE PHA	[2658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330, 0x0062 };
    uint32_t const ces[9] = { 0x2658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_342)
{
    // 1331 0021;	
    // (ጱ) ETHIOPIC SYLLABLE PHU	[2659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331, 0x0021 };
    uint32_t const ces[9] = { 0x2659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_343)
{
    // 1331 003F;	
    // (ጱ) ETHIOPIC SYLLABLE PHU	[2659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331, 0x003F };
    uint32_t const ces[9] = { 0x2659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_344)
{
    // 1331 0061;	
    // (ጱ) ETHIOPIC SYLLABLE PHU	[2659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331, 0x0061 };
    uint32_t const ces[9] = { 0x2659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_345)
{
    // 1331 0041;	
    // (ጱ) ETHIOPIC SYLLABLE PHU	[2659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331, 0x0041 };
    uint32_t const ces[9] = { 0x2659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_346)
{
    // 1331 0062;	
    // (ጱ) ETHIOPIC SYLLABLE PHU	[2659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331, 0x0062 };
    uint32_t const ces[9] = { 0x2659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_347)
{
    // 1332 0021;	
    // (ጲ) ETHIOPIC SYLLABLE PHI	[265A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332, 0x0021 };
    uint32_t const ces[9] = { 0x265A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_348)
{
    // 1332 003F;	
    // (ጲ) ETHIOPIC SYLLABLE PHI	[265A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332, 0x003F };
    uint32_t const ces[9] = { 0x265A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_349)
{
    // 1332 0061;	
    // (ጲ) ETHIOPIC SYLLABLE PHI	[265A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332, 0x0061 };
    uint32_t const ces[9] = { 0x265A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_350)
{
    // 1332 0041;	
    // (ጲ) ETHIOPIC SYLLABLE PHI	[265A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332, 0x0041 };
    uint32_t const ces[9] = { 0x265A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_351)
{
    // 1332 0062;	
    // (ጲ) ETHIOPIC SYLLABLE PHI	[265A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332, 0x0062 };
    uint32_t const ces[9] = { 0x265A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_352)
{
    // 1333 0021;	
    // (ጳ) ETHIOPIC SYLLABLE PHAA	[265B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333, 0x0021 };
    uint32_t const ces[9] = { 0x265B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_353)
{
    // 1333 003F;	
    // (ጳ) ETHIOPIC SYLLABLE PHAA	[265B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333, 0x003F };
    uint32_t const ces[9] = { 0x265B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_354)
{
    // 1333 0061;	
    // (ጳ) ETHIOPIC SYLLABLE PHAA	[265B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333, 0x0061 };
    uint32_t const ces[9] = { 0x265B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_355)
{
    // 1333 0041;	
    // (ጳ) ETHIOPIC SYLLABLE PHAA	[265B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333, 0x0041 };
    uint32_t const ces[9] = { 0x265B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_356)
{
    // 1333 0062;	
    // (ጳ) ETHIOPIC SYLLABLE PHAA	[265B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333, 0x0062 };
    uint32_t const ces[9] = { 0x265B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_357)
{
    // 1334 0021;	
    // (ጴ) ETHIOPIC SYLLABLE PHEE	[265C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334, 0x0021 };
    uint32_t const ces[9] = { 0x265C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_358)
{
    // 1334 003F;	
    // (ጴ) ETHIOPIC SYLLABLE PHEE	[265C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334, 0x003F };
    uint32_t const ces[9] = { 0x265C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_359)
{
    // 1334 0061;	
    // (ጴ) ETHIOPIC SYLLABLE PHEE	[265C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334, 0x0061 };
    uint32_t const ces[9] = { 0x265C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_360)
{
    // 1334 0041;	
    // (ጴ) ETHIOPIC SYLLABLE PHEE	[265C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1334, 0x0041 };
    uint32_t const ces[9] = { 0x265C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_361)
{
    // 1334 0062;	
    // (ጴ) ETHIOPIC SYLLABLE PHEE	[265C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334, 0x0062 };
    uint32_t const ces[9] = { 0x265C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_362)
{
    // 1335 0021;	
    // (ጵ) ETHIOPIC SYLLABLE PHE	[265D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1335, 0x0021 };
    uint32_t const ces[9] = { 0x265D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_363)
{
    // 1335 003F;	
    // (ጵ) ETHIOPIC SYLLABLE PHE	[265D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1335, 0x003F };
    uint32_t const ces[9] = { 0x265D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_364)
{
    // 1335 0061;	
    // (ጵ) ETHIOPIC SYLLABLE PHE	[265D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1335, 0x0061 };
    uint32_t const ces[9] = { 0x265D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_365)
{
    // 1335 0041;	
    // (ጵ) ETHIOPIC SYLLABLE PHE	[265D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1335, 0x0041 };
    uint32_t const ces[9] = { 0x265D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_366)
{
    // 1335 0062;	
    // (ጵ) ETHIOPIC SYLLABLE PHE	[265D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1335, 0x0062 };
    uint32_t const ces[9] = { 0x265D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_367)
{
    // 1336 0021;	
    // (ጶ) ETHIOPIC SYLLABLE PHO	[265E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1336, 0x0021 };
    uint32_t const ces[9] = { 0x265E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_368)
{
    // 1336 003F;	
    // (ጶ) ETHIOPIC SYLLABLE PHO	[265E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1336, 0x003F };
    uint32_t const ces[9] = { 0x265E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_369)
{
    // 1336 0061;	
    // (ጶ) ETHIOPIC SYLLABLE PHO	[265E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1336, 0x0061 };
    uint32_t const ces[9] = { 0x265E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_370)
{
    // 1336 0041;	
    // (ጶ) ETHIOPIC SYLLABLE PHO	[265E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1336, 0x0041 };
    uint32_t const ces[9] = { 0x265E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_371)
{
    // 1336 0062;	
    // (ጶ) ETHIOPIC SYLLABLE PHO	[265E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1336, 0x0062 };
    uint32_t const ces[9] = { 0x265E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_372)
{
    // 1337 0021;	
    // (ጷ) ETHIOPIC SYLLABLE PHWA	[265F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1337, 0x0021 };
    uint32_t const ces[9] = { 0x265F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_373)
{
    // 1337 003F;	
    // (ጷ) ETHIOPIC SYLLABLE PHWA	[265F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1337, 0x003F };
    uint32_t const ces[9] = { 0x265F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_374)
{
    // 1337 0061;	
    // (ጷ) ETHIOPIC SYLLABLE PHWA	[265F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1337, 0x0061 };
    uint32_t const ces[9] = { 0x265F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_375)
{
    // 1337 0041;	
    // (ጷ) ETHIOPIC SYLLABLE PHWA	[265F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1337, 0x0041 };
    uint32_t const ces[9] = { 0x265F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_376)
{
    // 1337 0062;	
    // (ጷ) ETHIOPIC SYLLABLE PHWA	[265F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1337, 0x0062 };
    uint32_t const ces[9] = { 0x265F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_377)
{
    // 2D91 0021;	
    // (ⶑ) ETHIOPIC SYLLABLE PHOA	[2660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D91, 0x0021 };
    uint32_t const ces[9] = { 0x2660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_378)
{
    // 2D91 003F;	
    // (ⶑ) ETHIOPIC SYLLABLE PHOA	[2660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D91, 0x003F };
    uint32_t const ces[9] = { 0x2660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_379)
{
    // 2D91 0061;	
    // (ⶑ) ETHIOPIC SYLLABLE PHOA	[2660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D91, 0x0061 };
    uint32_t const ces[9] = { 0x2660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_380)
{
    // 2D91 0041;	
    // (ⶑ) ETHIOPIC SYLLABLE PHOA	[2660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D91, 0x0041 };
    uint32_t const ces[9] = { 0x2660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_381)
{
    // 2D91 0062;	
    // (ⶑ) ETHIOPIC SYLLABLE PHOA	[2660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D91, 0x0062 };
    uint32_t const ces[9] = { 0x2660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_382)
{
    // 1338 0021;	
    // (ጸ) ETHIOPIC SYLLABLE TSA	[2661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1338, 0x0021 };
    uint32_t const ces[9] = { 0x2661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_383)
{
    // 1338 003F;	
    // (ጸ) ETHIOPIC SYLLABLE TSA	[2661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1338, 0x003F };
    uint32_t const ces[9] = { 0x2661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_384)
{
    // 1338 0061;	
    // (ጸ) ETHIOPIC SYLLABLE TSA	[2661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1338, 0x0061 };
    uint32_t const ces[9] = { 0x2661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_385)
{
    // 1338 0041;	
    // (ጸ) ETHIOPIC SYLLABLE TSA	[2661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1338, 0x0041 };
    uint32_t const ces[9] = { 0x2661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_386)
{
    // 1338 0062;	
    // (ጸ) ETHIOPIC SYLLABLE TSA	[2661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1338, 0x0062 };
    uint32_t const ces[9] = { 0x2661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_387)
{
    // 1339 0021;	
    // (ጹ) ETHIOPIC SYLLABLE TSU	[2662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1339, 0x0021 };
    uint32_t const ces[9] = { 0x2662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_388)
{
    // 1339 003F;	
    // (ጹ) ETHIOPIC SYLLABLE TSU	[2662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1339, 0x003F };
    uint32_t const ces[9] = { 0x2662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_389)
{
    // 1339 0061;	
    // (ጹ) ETHIOPIC SYLLABLE TSU	[2662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1339, 0x0061 };
    uint32_t const ces[9] = { 0x2662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_390)
{
    // 1339 0041;	
    // (ጹ) ETHIOPIC SYLLABLE TSU	[2662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1339, 0x0041 };
    uint32_t const ces[9] = { 0x2662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_391)
{
    // 1339 0062;	
    // (ጹ) ETHIOPIC SYLLABLE TSU	[2662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1339, 0x0062 };
    uint32_t const ces[9] = { 0x2662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_392)
{
    // 133A 0021;	
    // (ጺ) ETHIOPIC SYLLABLE TSI	[2663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133A, 0x0021 };
    uint32_t const ces[9] = { 0x2663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_393)
{
    // 133A 003F;	
    // (ጺ) ETHIOPIC SYLLABLE TSI	[2663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133A, 0x003F };
    uint32_t const ces[9] = { 0x2663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_394)
{
    // 133A 0061;	
    // (ጺ) ETHIOPIC SYLLABLE TSI	[2663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133A, 0x0061 };
    uint32_t const ces[9] = { 0x2663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_395)
{
    // 133A 0041;	
    // (ጺ) ETHIOPIC SYLLABLE TSI	[2663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133A, 0x0041 };
    uint32_t const ces[9] = { 0x2663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_396)
{
    // 133A 0062;	
    // (ጺ) ETHIOPIC SYLLABLE TSI	[2663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133A, 0x0062 };
    uint32_t const ces[9] = { 0x2663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_397)
{
    // 133B 0021;	
    // (ጻ) ETHIOPIC SYLLABLE TSAA	[2664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B, 0x0021 };
    uint32_t const ces[9] = { 0x2664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_398)
{
    // 133B 003F;	
    // (ጻ) ETHIOPIC SYLLABLE TSAA	[2664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B, 0x003F };
    uint32_t const ces[9] = { 0x2664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_399)
{
    // 133B 0061;	
    // (ጻ) ETHIOPIC SYLLABLE TSAA	[2664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B, 0x0061 };
    uint32_t const ces[9] = { 0x2664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_400)
{
    // 133B 0041;	
    // (ጻ) ETHIOPIC SYLLABLE TSAA	[2664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B, 0x0041 };
    uint32_t const ces[9] = { 0x2664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_401)
{
    // 133B 0062;	
    // (ጻ) ETHIOPIC SYLLABLE TSAA	[2664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B, 0x0062 };
    uint32_t const ces[9] = { 0x2664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_402)
{
    // 133C 0021;	
    // (ጼ) ETHIOPIC SYLLABLE TSEE	[2665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C, 0x0021 };
    uint32_t const ces[9] = { 0x2665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_403)
{
    // 133C 003F;	
    // (ጼ) ETHIOPIC SYLLABLE TSEE	[2665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C, 0x003F };
    uint32_t const ces[9] = { 0x2665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_404)
{
    // 133C 0061;	
    // (ጼ) ETHIOPIC SYLLABLE TSEE	[2665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C, 0x0061 };
    uint32_t const ces[9] = { 0x2665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_405)
{
    // 133C 0041;	
    // (ጼ) ETHIOPIC SYLLABLE TSEE	[2665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C, 0x0041 };
    uint32_t const ces[9] = { 0x2665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_406)
{
    // 133C 0062;	
    // (ጼ) ETHIOPIC SYLLABLE TSEE	[2665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C, 0x0062 };
    uint32_t const ces[9] = { 0x2665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_407)
{
    // 133D 0021;	
    // (ጽ) ETHIOPIC SYLLABLE TSE	[2666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D, 0x0021 };
    uint32_t const ces[9] = { 0x2666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_408)
{
    // 133D 003F;	
    // (ጽ) ETHIOPIC SYLLABLE TSE	[2666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D, 0x003F };
    uint32_t const ces[9] = { 0x2666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_409)
{
    // 133D 0061;	
    // (ጽ) ETHIOPIC SYLLABLE TSE	[2666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D, 0x0061 };
    uint32_t const ces[9] = { 0x2666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_410)
{
    // 133D 0041;	
    // (ጽ) ETHIOPIC SYLLABLE TSE	[2666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D, 0x0041 };
    uint32_t const ces[9] = { 0x2666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_411)
{
    // 133D 0062;	
    // (ጽ) ETHIOPIC SYLLABLE TSE	[2666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D, 0x0062 };
    uint32_t const ces[9] = { 0x2666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_412)
{
    // 133E 0021;	
    // (ጾ) ETHIOPIC SYLLABLE TSO	[2667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E, 0x0021 };
    uint32_t const ces[9] = { 0x2667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_413)
{
    // 133E 003F;	
    // (ጾ) ETHIOPIC SYLLABLE TSO	[2667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E, 0x003F };
    uint32_t const ces[9] = { 0x2667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_414)
{
    // 133E 0061;	
    // (ጾ) ETHIOPIC SYLLABLE TSO	[2667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E, 0x0061 };
    uint32_t const ces[9] = { 0x2667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_415)
{
    // 133E 0041;	
    // (ጾ) ETHIOPIC SYLLABLE TSO	[2667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E, 0x0041 };
    uint32_t const ces[9] = { 0x2667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_416)
{
    // 133E 0062;	
    // (ጾ) ETHIOPIC SYLLABLE TSO	[2667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E, 0x0062 };
    uint32_t const ces[9] = { 0x2667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_417)
{
    // 133F 0021;	
    // (ጿ) ETHIOPIC SYLLABLE TSWA	[2668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F, 0x0021 };
    uint32_t const ces[9] = { 0x2668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_418)
{
    // 133F 003F;	
    // (ጿ) ETHIOPIC SYLLABLE TSWA	[2668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F, 0x003F };
    uint32_t const ces[9] = { 0x2668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_419)
{
    // 133F 0061;	
    // (ጿ) ETHIOPIC SYLLABLE TSWA	[2668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F, 0x0061 };
    uint32_t const ces[9] = { 0x2668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_420)
{
    // 133F 0041;	
    // (ጿ) ETHIOPIC SYLLABLE TSWA	[2668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F, 0x0041 };
    uint32_t const ces[9] = { 0x2668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_421)
{
    // 133F 0062;	
    // (ጿ) ETHIOPIC SYLLABLE TSWA	[2668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F, 0x0062 };
    uint32_t const ces[9] = { 0x2668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_422)
{
    // AB28 0021;	
    // (ꬨ) ETHIOPIC SYLLABLE BBA	[2669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB28, 0x0021 };
    uint32_t const ces[9] = { 0x2669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_423)
{
    // AB28 003F;	
    // (ꬨ) ETHIOPIC SYLLABLE BBA	[2669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB28, 0x003F };
    uint32_t const ces[9] = { 0x2669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_424)
{
    // AB28 0061;	
    // (ꬨ) ETHIOPIC SYLLABLE BBA	[2669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB28, 0x0061 };
    uint32_t const ces[9] = { 0x2669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_425)
{
    // AB28 0041;	
    // (ꬨ) ETHIOPIC SYLLABLE BBA	[2669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB28, 0x0041 };
    uint32_t const ces[9] = { 0x2669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_426)
{
    // AB28 0062;	
    // (ꬨ) ETHIOPIC SYLLABLE BBA	[2669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB28, 0x0062 };
    uint32_t const ces[9] = { 0x2669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_427)
{
    // AB29 0021;	
    // (ꬩ) ETHIOPIC SYLLABLE BBU	[266A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB29, 0x0021 };
    uint32_t const ces[9] = { 0x266A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_428)
{
    // AB29 003F;	
    // (ꬩ) ETHIOPIC SYLLABLE BBU	[266A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB29, 0x003F };
    uint32_t const ces[9] = { 0x266A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_429)
{
    // AB29 0061;	
    // (ꬩ) ETHIOPIC SYLLABLE BBU	[266A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB29, 0x0061 };
    uint32_t const ces[9] = { 0x266A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_430)
{
    // AB29 0041;	
    // (ꬩ) ETHIOPIC SYLLABLE BBU	[266A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB29, 0x0041 };
    uint32_t const ces[9] = { 0x266A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_431)
{
    // AB29 0062;	
    // (ꬩ) ETHIOPIC SYLLABLE BBU	[266A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB29, 0x0062 };
    uint32_t const ces[9] = { 0x266A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_432)
{
    // AB2A 0021;	
    // (ꬪ) ETHIOPIC SYLLABLE BBI	[266B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2A, 0x0021 };
    uint32_t const ces[9] = { 0x266B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_433)
{
    // AB2A 003F;	
    // (ꬪ) ETHIOPIC SYLLABLE BBI	[266B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2A, 0x003F };
    uint32_t const ces[9] = { 0x266B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_434)
{
    // AB2A 0061;	
    // (ꬪ) ETHIOPIC SYLLABLE BBI	[266B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2A, 0x0061 };
    uint32_t const ces[9] = { 0x266B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_435)
{
    // AB2A 0041;	
    // (ꬪ) ETHIOPIC SYLLABLE BBI	[266B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB2A, 0x0041 };
    uint32_t const ces[9] = { 0x266B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_436)
{
    // AB2A 0062;	
    // (ꬪ) ETHIOPIC SYLLABLE BBI	[266B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2A, 0x0062 };
    uint32_t const ces[9] = { 0x266B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_437)
{
    // AB2B 0021;	
    // (ꬫ) ETHIOPIC SYLLABLE BBAA	[266C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2B, 0x0021 };
    uint32_t const ces[9] = { 0x266C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_438)
{
    // AB2B 003F;	
    // (ꬫ) ETHIOPIC SYLLABLE BBAA	[266C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2B, 0x003F };
    uint32_t const ces[9] = { 0x266C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_439)
{
    // AB2B 0061;	
    // (ꬫ) ETHIOPIC SYLLABLE BBAA	[266C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2B, 0x0061 };
    uint32_t const ces[9] = { 0x266C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_440)
{
    // AB2B 0041;	
    // (ꬫ) ETHIOPIC SYLLABLE BBAA	[266C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB2B, 0x0041 };
    uint32_t const ces[9] = { 0x266C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_441)
{
    // AB2B 0062;	
    // (ꬫ) ETHIOPIC SYLLABLE BBAA	[266C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2B, 0x0062 };
    uint32_t const ces[9] = { 0x266C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_442)
{
    // AB2C 0021;	
    // (ꬬ) ETHIOPIC SYLLABLE BBEE	[266D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2C, 0x0021 };
    uint32_t const ces[9] = { 0x266D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_443)
{
    // AB2C 003F;	
    // (ꬬ) ETHIOPIC SYLLABLE BBEE	[266D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2C, 0x003F };
    uint32_t const ces[9] = { 0x266D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_444)
{
    // AB2C 0061;	
    // (ꬬ) ETHIOPIC SYLLABLE BBEE	[266D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2C, 0x0061 };
    uint32_t const ces[9] = { 0x266D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_445)
{
    // AB2C 0041;	
    // (ꬬ) ETHIOPIC SYLLABLE BBEE	[266D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB2C, 0x0041 };
    uint32_t const ces[9] = { 0x266D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_446)
{
    // AB2C 0062;	
    // (ꬬ) ETHIOPIC SYLLABLE BBEE	[266D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2C, 0x0062 };
    uint32_t const ces[9] = { 0x266D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_447)
{
    // AB2D 0021;	
    // (ꬭ) ETHIOPIC SYLLABLE BBE	[266E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2D, 0x0021 };
    uint32_t const ces[9] = { 0x266E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_448)
{
    // AB2D 003F;	
    // (ꬭ) ETHIOPIC SYLLABLE BBE	[266E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2D, 0x003F };
    uint32_t const ces[9] = { 0x266E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_449)
{
    // AB2D 0061;	
    // (ꬭ) ETHIOPIC SYLLABLE BBE	[266E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2D, 0x0061 };
    uint32_t const ces[9] = { 0x266E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_450)
{
    // AB2D 0041;	
    // (ꬭ) ETHIOPIC SYLLABLE BBE	[266E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB2D, 0x0041 };
    uint32_t const ces[9] = { 0x266E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_451)
{
    // AB2D 0062;	
    // (ꬭ) ETHIOPIC SYLLABLE BBE	[266E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2D, 0x0062 };
    uint32_t const ces[9] = { 0x266E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_452)
{
    // AB2E 0021;	
    // (ꬮ) ETHIOPIC SYLLABLE BBO	[266F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2E, 0x0021 };
    uint32_t const ces[9] = { 0x266F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_453)
{
    // AB2E 003F;	
    // (ꬮ) ETHIOPIC SYLLABLE BBO	[266F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2E, 0x003F };
    uint32_t const ces[9] = { 0x266F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_454)
{
    // AB2E 0061;	
    // (ꬮ) ETHIOPIC SYLLABLE BBO	[266F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2E, 0x0061 };
    uint32_t const ces[9] = { 0x266F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_455)
{
    // AB2E 0041;	
    // (ꬮ) ETHIOPIC SYLLABLE BBO	[266F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB2E, 0x0041 };
    uint32_t const ces[9] = { 0x266F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_456)
{
    // AB2E 0062;	
    // (ꬮ) ETHIOPIC SYLLABLE BBO	[266F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB2E, 0x0062 };
    uint32_t const ces[9] = { 0x266F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_457)
{
    // 1340 0021;	
    // (ፀ) ETHIOPIC SYLLABLE TZA	[2670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340, 0x0021 };
    uint32_t const ces[9] = { 0x2670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_458)
{
    // 1340 003F;	
    // (ፀ) ETHIOPIC SYLLABLE TZA	[2670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340, 0x003F };
    uint32_t const ces[9] = { 0x2670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_459)
{
    // 1340 0061;	
    // (ፀ) ETHIOPIC SYLLABLE TZA	[2670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340, 0x0061 };
    uint32_t const ces[9] = { 0x2670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_460)
{
    // 1340 0041;	
    // (ፀ) ETHIOPIC SYLLABLE TZA	[2670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340, 0x0041 };
    uint32_t const ces[9] = { 0x2670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_461)
{
    // 1340 0062;	
    // (ፀ) ETHIOPIC SYLLABLE TZA	[2670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340, 0x0062 };
    uint32_t const ces[9] = { 0x2670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_462)
{
    // 1341 0021;	
    // (ፁ) ETHIOPIC SYLLABLE TZU	[2671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341, 0x0021 };
    uint32_t const ces[9] = { 0x2671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_463)
{
    // 1341 003F;	
    // (ፁ) ETHIOPIC SYLLABLE TZU	[2671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341, 0x003F };
    uint32_t const ces[9] = { 0x2671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_464)
{
    // 1341 0061;	
    // (ፁ) ETHIOPIC SYLLABLE TZU	[2671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341, 0x0061 };
    uint32_t const ces[9] = { 0x2671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_465)
{
    // 1341 0041;	
    // (ፁ) ETHIOPIC SYLLABLE TZU	[2671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341, 0x0041 };
    uint32_t const ces[9] = { 0x2671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_466)
{
    // 1341 0062;	
    // (ፁ) ETHIOPIC SYLLABLE TZU	[2671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341, 0x0062 };
    uint32_t const ces[9] = { 0x2671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_467)
{
    // 1342 0021;	
    // (ፂ) ETHIOPIC SYLLABLE TZI	[2672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342, 0x0021 };
    uint32_t const ces[9] = { 0x2672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_468)
{
    // 1342 003F;	
    // (ፂ) ETHIOPIC SYLLABLE TZI	[2672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342, 0x003F };
    uint32_t const ces[9] = { 0x2672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_469)
{
    // 1342 0061;	
    // (ፂ) ETHIOPIC SYLLABLE TZI	[2672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342, 0x0061 };
    uint32_t const ces[9] = { 0x2672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_470)
{
    // 1342 0041;	
    // (ፂ) ETHIOPIC SYLLABLE TZI	[2672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342, 0x0041 };
    uint32_t const ces[9] = { 0x2672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_471)
{
    // 1342 0062;	
    // (ፂ) ETHIOPIC SYLLABLE TZI	[2672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342, 0x0062 };
    uint32_t const ces[9] = { 0x2672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_472)
{
    // 1343 0021;	
    // (ፃ) ETHIOPIC SYLLABLE TZAA	[2673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1343, 0x0021 };
    uint32_t const ces[9] = { 0x2673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_473)
{
    // 1343 003F;	
    // (ፃ) ETHIOPIC SYLLABLE TZAA	[2673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1343, 0x003F };
    uint32_t const ces[9] = { 0x2673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_474)
{
    // 1343 0061;	
    // (ፃ) ETHIOPIC SYLLABLE TZAA	[2673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1343, 0x0061 };
    uint32_t const ces[9] = { 0x2673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_475)
{
    // 1343 0041;	
    // (ፃ) ETHIOPIC SYLLABLE TZAA	[2673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1343, 0x0041 };
    uint32_t const ces[9] = { 0x2673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_476)
{
    // 1343 0062;	
    // (ፃ) ETHIOPIC SYLLABLE TZAA	[2673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1343, 0x0062 };
    uint32_t const ces[9] = { 0x2673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_477)
{
    // 1344 0021;	
    // (ፄ) ETHIOPIC SYLLABLE TZEE	[2674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1344, 0x0021 };
    uint32_t const ces[9] = { 0x2674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_478)
{
    // 1344 003F;	
    // (ፄ) ETHIOPIC SYLLABLE TZEE	[2674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1344, 0x003F };
    uint32_t const ces[9] = { 0x2674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_479)
{
    // 1344 0061;	
    // (ፄ) ETHIOPIC SYLLABLE TZEE	[2674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1344, 0x0061 };
    uint32_t const ces[9] = { 0x2674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_480)
{
    // 1344 0041;	
    // (ፄ) ETHIOPIC SYLLABLE TZEE	[2674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1344, 0x0041 };
    uint32_t const ces[9] = { 0x2674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_481)
{
    // 1344 0062;	
    // (ፄ) ETHIOPIC SYLLABLE TZEE	[2674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1344, 0x0062 };
    uint32_t const ces[9] = { 0x2674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_482)
{
    // 1345 0021;	
    // (ፅ) ETHIOPIC SYLLABLE TZE	[2675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1345, 0x0021 };
    uint32_t const ces[9] = { 0x2675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_483)
{
    // 1345 003F;	
    // (ፅ) ETHIOPIC SYLLABLE TZE	[2675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1345, 0x003F };
    uint32_t const ces[9] = { 0x2675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_484)
{
    // 1345 0061;	
    // (ፅ) ETHIOPIC SYLLABLE TZE	[2675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1345, 0x0061 };
    uint32_t const ces[9] = { 0x2675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_485)
{
    // 1345 0041;	
    // (ፅ) ETHIOPIC SYLLABLE TZE	[2675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1345, 0x0041 };
    uint32_t const ces[9] = { 0x2675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_486)
{
    // 1345 0062;	
    // (ፅ) ETHIOPIC SYLLABLE TZE	[2675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1345, 0x0062 };
    uint32_t const ces[9] = { 0x2675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_487)
{
    // 1346 0021;	
    // (ፆ) ETHIOPIC SYLLABLE TZO	[2676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1346, 0x0021 };
    uint32_t const ces[9] = { 0x2676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_488)
{
    // 1346 003F;	
    // (ፆ) ETHIOPIC SYLLABLE TZO	[2676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1346, 0x003F };
    uint32_t const ces[9] = { 0x2676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_489)
{
    // 1346 0061;	
    // (ፆ) ETHIOPIC SYLLABLE TZO	[2676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1346, 0x0061 };
    uint32_t const ces[9] = { 0x2676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_490)
{
    // 1346 0041;	
    // (ፆ) ETHIOPIC SYLLABLE TZO	[2676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1346, 0x0041 };
    uint32_t const ces[9] = { 0x2676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_491)
{
    // 1346 0062;	
    // (ፆ) ETHIOPIC SYLLABLE TZO	[2676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1346, 0x0062 };
    uint32_t const ces[9] = { 0x2676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_492)
{
    // 1347 0021;	
    // (ፇ) ETHIOPIC SYLLABLE TZOA	[2677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1347, 0x0021 };
    uint32_t const ces[9] = { 0x2677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_493)
{
    // 1347 003F;	
    // (ፇ) ETHIOPIC SYLLABLE TZOA	[2677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1347, 0x003F };
    uint32_t const ces[9] = { 0x2677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_494)
{
    // 1347 0061;	
    // (ፇ) ETHIOPIC SYLLABLE TZOA	[2677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1347, 0x0061 };
    uint32_t const ces[9] = { 0x2677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_495)
{
    // 1347 0041;	
    // (ፇ) ETHIOPIC SYLLABLE TZOA	[2677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1347, 0x0041 };
    uint32_t const ces[9] = { 0x2677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_496)
{
    // 1347 0062;	
    // (ፇ) ETHIOPIC SYLLABLE TZOA	[2677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1347, 0x0062 };
    uint32_t const ces[9] = { 0x2677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_497)
{
    // 1348 0021;	
    // (ፈ) ETHIOPIC SYLLABLE FA	[2678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1348, 0x0021 };
    uint32_t const ces[9] = { 0x2678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_498)
{
    // 1348 003F;	
    // (ፈ) ETHIOPIC SYLLABLE FA	[2678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1348, 0x003F };
    uint32_t const ces[9] = { 0x2678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_163_499)
{
    // 1348 0061;	
    // (ፈ) ETHIOPIC SYLLABLE FA	[2678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1348, 0x0061 };
    uint32_t const ces[9] = { 0x2678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

