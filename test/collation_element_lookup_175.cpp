// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_175_000)
{
    // 1D33B ; [*0F3D.0020.0002] 
    // TETRAGRAM FOR UNITY

    uint32_t const cps[1] = { 0x1d33b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_001)
{
    // 1D33C ; [*0F3E.0020.0002] 
    // TETRAGRAM FOR DIMINISHMENT

    uint32_t const cps[1] = { 0x1d33c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_002)
{
    // 1D33D ; [*0F3F.0020.0002] 
    // TETRAGRAM FOR CLOSED MOUTH

    uint32_t const cps[1] = { 0x1d33d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_003)
{
    // 1D33E ; [*0F40.0020.0002] 
    // TETRAGRAM FOR GUARDEDNESS

    uint32_t const cps[1] = { 0x1d33e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_004)
{
    // 1D33F ; [*0F41.0020.0002] 
    // TETRAGRAM FOR GATHERING IN

    uint32_t const cps[1] = { 0x1d33f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_005)
{
    // 1D340 ; [*0F42.0020.0002] 
    // TETRAGRAM FOR MASSING

    uint32_t const cps[1] = { 0x1d340 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_006)
{
    // 1D341 ; [*0F43.0020.0002] 
    // TETRAGRAM FOR ACCUMULATION

    uint32_t const cps[1] = { 0x1d341 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_007)
{
    // 1D342 ; [*0F44.0020.0002] 
    // TETRAGRAM FOR EMBELLISHMENT

    uint32_t const cps[1] = { 0x1d342 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_008)
{
    // 1D343 ; [*0F45.0020.0002] 
    // TETRAGRAM FOR DOUBT

    uint32_t const cps[1] = { 0x1d343 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_009)
{
    // 1D344 ; [*0F46.0020.0002] 
    // TETRAGRAM FOR WATCH

    uint32_t const cps[1] = { 0x1d344 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_010)
{
    // 1D345 ; [*0F47.0020.0002] 
    // TETRAGRAM FOR SINKING

    uint32_t const cps[1] = { 0x1d345 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_011)
{
    // 1D346 ; [*0F48.0020.0002] 
    // TETRAGRAM FOR INNER

    uint32_t const cps[1] = { 0x1d346 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_012)
{
    // 1D347 ; [*0F49.0020.0002] 
    // TETRAGRAM FOR DEPARTURE

    uint32_t const cps[1] = { 0x1d347 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_013)
{
    // 1D348 ; [*0F4A.0020.0002] 
    // TETRAGRAM FOR DARKENING

    uint32_t const cps[1] = { 0x1d348 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_014)
{
    // 1D349 ; [*0F4B.0020.0002] 
    // TETRAGRAM FOR DIMMING

    uint32_t const cps[1] = { 0x1d349 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_015)
{
    // 1D34A ; [*0F4C.0020.0002] 
    // TETRAGRAM FOR EXHAUSTION

    uint32_t const cps[1] = { 0x1d34a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_016)
{
    // 1D34B ; [*0F4D.0020.0002] 
    // TETRAGRAM FOR SEVERANCE

    uint32_t const cps[1] = { 0x1d34b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_017)
{
    // 1D34C ; [*0F4E.0020.0002] 
    // TETRAGRAM FOR STOPPAGE

    uint32_t const cps[1] = { 0x1d34c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_018)
{
    // 1D34D ; [*0F4F.0020.0002] 
    // TETRAGRAM FOR HARDNESS

    uint32_t const cps[1] = { 0x1d34d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_019)
{
    // 1D34E ; [*0F50.0020.0002] 
    // TETRAGRAM FOR COMPLETION

    uint32_t const cps[1] = { 0x1d34e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_020)
{
    // 1D34F ; [*0F51.0020.0002] 
    // TETRAGRAM FOR CLOSURE

    uint32_t const cps[1] = { 0x1d34f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_021)
{
    // 1D350 ; [*0F52.0020.0002] 
    // TETRAGRAM FOR FAILURE

    uint32_t const cps[1] = { 0x1d350 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_022)
{
    // 1D351 ; [*0F53.0020.0002] 
    // TETRAGRAM FOR AGGRAVATION

    uint32_t const cps[1] = { 0x1d351 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_023)
{
    // 1D352 ; [*0F54.0020.0002] 
    // TETRAGRAM FOR COMPLIANCE

    uint32_t const cps[1] = { 0x1d352 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_024)
{
    // 1D353 ; [*0F55.0020.0002] 
    // TETRAGRAM FOR ON THE VERGE

    uint32_t const cps[1] = { 0x1d353 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_025)
{
    // 1D354 ; [*0F56.0020.0002] 
    // TETRAGRAM FOR DIFFICULTIES

    uint32_t const cps[1] = { 0x1d354 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_026)
{
    // 1D355 ; [*0F57.0020.0002] 
    // TETRAGRAM FOR LABOURING

    uint32_t const cps[1] = { 0x1d355 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_027)
{
    // 1D356 ; [*0F58.0020.0002] 
    // TETRAGRAM FOR FOSTERING

    uint32_t const cps[1] = { 0x1d356 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_028)
{
    // 1D360 ; [.1CA4.0020.0002] 
    // COUNTING ROD UNIT DIGIT ONE

    uint32_t const cps[1] = { 0x1d360 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_029)
{
    // 1D361 ; [.1CA5.0020.0002] 
    // COUNTING ROD UNIT DIGIT TWO

    uint32_t const cps[1] = { 0x1d361 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_030)
{
    // 1D362 ; [.1CA6.0020.0002] 
    // COUNTING ROD UNIT DIGIT THREE

    uint32_t const cps[1] = { 0x1d362 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_031)
{
    // 1D363 ; [.1CA7.0020.0002] 
    // COUNTING ROD UNIT DIGIT FOUR

    uint32_t const cps[1] = { 0x1d363 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_032)
{
    // 1D364 ; [.1CA8.0020.0002] 
    // COUNTING ROD UNIT DIGIT FIVE

    uint32_t const cps[1] = { 0x1d364 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_033)
{
    // 1D365 ; [.1CA9.0020.0002] 
    // COUNTING ROD UNIT DIGIT SIX

    uint32_t const cps[1] = { 0x1d365 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_034)
{
    // 1D366 ; [.1CAA.0020.0002] 
    // COUNTING ROD UNIT DIGIT SEVEN

    uint32_t const cps[1] = { 0x1d366 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_035)
{
    // 1D367 ; [.1CAB.0020.0002] 
    // COUNTING ROD UNIT DIGIT EIGHT

    uint32_t const cps[1] = { 0x1d367 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_036)
{
    // 1D368 ; [.1CAC.0020.0002] 
    // COUNTING ROD UNIT DIGIT NINE

    uint32_t const cps[1] = { 0x1d368 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_037)
{
    // 1D369 ; [*1C53.0020.0002] 
    // COUNTING ROD TENS DIGIT ONE

    uint32_t const cps[1] = { 0x1d369 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_038)
{
    // 1D36A ; [*1C54.0020.0002] 
    // COUNTING ROD TENS DIGIT TWO

    uint32_t const cps[1] = { 0x1d36a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_039)
{
    // 1D36B ; [*1C55.0020.0002] 
    // COUNTING ROD TENS DIGIT THREE

    uint32_t const cps[1] = { 0x1d36b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_040)
{
    // 1D36C ; [*1C56.0020.0002] 
    // COUNTING ROD TENS DIGIT FOUR

    uint32_t const cps[1] = { 0x1d36c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_041)
{
    // 1D36D ; [*1C57.0020.0002] 
    // COUNTING ROD TENS DIGIT FIVE

    uint32_t const cps[1] = { 0x1d36d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_042)
{
    // 1D36E ; [*1C58.0020.0002] 
    // COUNTING ROD TENS DIGIT SIX

    uint32_t const cps[1] = { 0x1d36e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_043)
{
    // 1D36F ; [*1C59.0020.0002] 
    // COUNTING ROD TENS DIGIT SEVEN

    uint32_t const cps[1] = { 0x1d36f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_044)
{
    // 1D370 ; [*1C5A.0020.0002] 
    // COUNTING ROD TENS DIGIT EIGHT

    uint32_t const cps[1] = { 0x1d370 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_045)
{
    // 1D371 ; [*1C5B.0020.0002] 
    // COUNTING ROD TENS DIGIT NINE

    uint32_t const cps[1] = { 0x1d371 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_046)
{
    // 1D400 ; [.1CAD.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL A

    uint32_t const cps[1] = { 0x1d400 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_047)
{
    // 1D401 ; [.1CC6.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL B

    uint32_t const cps[1] = { 0x1d401 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_048)
{
    // 1D402 ; [.1CE0.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL C

    uint32_t const cps[1] = { 0x1d402 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_049)
{
    // 1D403 ; [.1CF5.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL D

    uint32_t const cps[1] = { 0x1d403 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_050)
{
    // 1D404 ; [.1D10.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL E

    uint32_t const cps[1] = { 0x1d404 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_051)
{
    // 1D405 ; [.1D4B.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL F

    uint32_t const cps[1] = { 0x1d405 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_052)
{
    // 1D406 ; [.1D5A.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL G

    uint32_t const cps[1] = { 0x1d406 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_053)
{
    // 1D407 ; [.1D7E.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL H

    uint32_t const cps[1] = { 0x1d407 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_054)
{
    // 1D408 ; [.1D98.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL I

    uint32_t const cps[1] = { 0x1d408 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_055)
{
    // 1D409 ; [.1DB2.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL J

    uint32_t const cps[1] = { 0x1d409 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_056)
{
    // 1D40A ; [.1DCB.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL K

    uint32_t const cps[1] = { 0x1d40a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_057)
{
    // 1D40B ; [.1DDD.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL L

    uint32_t const cps[1] = { 0x1d40b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_058)
{
    // 1D40C ; [.1E10.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL M

    uint32_t const cps[1] = { 0x1d40c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_059)
{
    // 1D40D ; [.1E1F.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL N

    uint32_t const cps[1] = { 0x1d40d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_060)
{
    // 1D40E ; [.1E43.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL O

    uint32_t const cps[1] = { 0x1d40e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_061)
{
    // 1D40F ; [.1E72.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL P

    uint32_t const cps[1] = { 0x1d40f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_062)
{
    // 1D410 ; [.1E87.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL Q

    uint32_t const cps[1] = { 0x1d410 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_063)
{
    // 1D411 ; [.1E99.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL R

    uint32_t const cps[1] = { 0x1d411 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_064)
{
    // 1D412 ; [.1ED7.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL S

    uint32_t const cps[1] = { 0x1d412 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_065)
{
    // 1D413 ; [.1EFB.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL T

    uint32_t const cps[1] = { 0x1d413 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_066)
{
    // 1D414 ; [.1F1B.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL U

    uint32_t const cps[1] = { 0x1d414 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_067)
{
    // 1D415 ; [.1F49.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL V

    uint32_t const cps[1] = { 0x1d415 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_068)
{
    // 1D416 ; [.1F5B.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL W

    uint32_t const cps[1] = { 0x1d416 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_069)
{
    // 1D417 ; [.1F65.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL X

    uint32_t const cps[1] = { 0x1d417 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_070)
{
    // 1D418 ; [.1F71.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL Y

    uint32_t const cps[1] = { 0x1d418 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_071)
{
    // 1D419 ; [.1F87.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL Z

    uint32_t const cps[1] = { 0x1d419 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_072)
{
    // 1D41A ; [.1CAD.0020.0005] 
    // MATHEMATICAL BOLD SMALL A

    uint32_t const cps[1] = { 0x1d41a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_073)
{
    // 1D41B ; [.1CC6.0020.0005] 
    // MATHEMATICAL BOLD SMALL B

    uint32_t const cps[1] = { 0x1d41b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_074)
{
    // 1D41C ; [.1CE0.0020.0005] 
    // MATHEMATICAL BOLD SMALL C

    uint32_t const cps[1] = { 0x1d41c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_075)
{
    // 1D41D ; [.1CF5.0020.0005] 
    // MATHEMATICAL BOLD SMALL D

    uint32_t const cps[1] = { 0x1d41d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_076)
{
    // 1D41E ; [.1D10.0020.0005] 
    // MATHEMATICAL BOLD SMALL E

    uint32_t const cps[1] = { 0x1d41e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_077)
{
    // 1D41F ; [.1D4B.0020.0005] 
    // MATHEMATICAL BOLD SMALL F

    uint32_t const cps[1] = { 0x1d41f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_078)
{
    // 1D420 ; [.1D5A.0020.0005] 
    // MATHEMATICAL BOLD SMALL G

    uint32_t const cps[1] = { 0x1d420 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_079)
{
    // 1D421 ; [.1D7E.0020.0005] 
    // MATHEMATICAL BOLD SMALL H

    uint32_t const cps[1] = { 0x1d421 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_080)
{
    // 1D422 ; [.1D98.0020.0005] 
    // MATHEMATICAL BOLD SMALL I

    uint32_t const cps[1] = { 0x1d422 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_081)
{
    // 1D423 ; [.1DB2.0020.0005] 
    // MATHEMATICAL BOLD SMALL J

    uint32_t const cps[1] = { 0x1d423 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_082)
{
    // 1D424 ; [.1DCB.0020.0005] 
    // MATHEMATICAL BOLD SMALL K

    uint32_t const cps[1] = { 0x1d424 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_083)
{
    // 1D425 ; [.1DDD.0020.0005] 
    // MATHEMATICAL BOLD SMALL L

    uint32_t const cps[1] = { 0x1d425 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_084)
{
    // 1D426 ; [.1E10.0020.0005] 
    // MATHEMATICAL BOLD SMALL M

    uint32_t const cps[1] = { 0x1d426 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_085)
{
    // 1D427 ; [.1E1F.0020.0005] 
    // MATHEMATICAL BOLD SMALL N

    uint32_t const cps[1] = { 0x1d427 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_086)
{
    // 1D428 ; [.1E43.0020.0005] 
    // MATHEMATICAL BOLD SMALL O

    uint32_t const cps[1] = { 0x1d428 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_087)
{
    // 1D429 ; [.1E72.0020.0005] 
    // MATHEMATICAL BOLD SMALL P

    uint32_t const cps[1] = { 0x1d429 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_088)
{
    // 1D42A ; [.1E87.0020.0005] 
    // MATHEMATICAL BOLD SMALL Q

    uint32_t const cps[1] = { 0x1d42a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_089)
{
    // 1D42B ; [.1E99.0020.0005] 
    // MATHEMATICAL BOLD SMALL R

    uint32_t const cps[1] = { 0x1d42b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_090)
{
    // 1D42C ; [.1ED7.0020.0005] 
    // MATHEMATICAL BOLD SMALL S

    uint32_t const cps[1] = { 0x1d42c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_091)
{
    // 1D42D ; [.1EFB.0020.0005] 
    // MATHEMATICAL BOLD SMALL T

    uint32_t const cps[1] = { 0x1d42d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_092)
{
    // 1D42E ; [.1F1B.0020.0005] 
    // MATHEMATICAL BOLD SMALL U

    uint32_t const cps[1] = { 0x1d42e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_093)
{
    // 1D42F ; [.1F49.0020.0005] 
    // MATHEMATICAL BOLD SMALL V

    uint32_t const cps[1] = { 0x1d42f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_094)
{
    // 1D430 ; [.1F5B.0020.0005] 
    // MATHEMATICAL BOLD SMALL W

    uint32_t const cps[1] = { 0x1d430 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_095)
{
    // 1D431 ; [.1F65.0020.0005] 
    // MATHEMATICAL BOLD SMALL X

    uint32_t const cps[1] = { 0x1d431 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_096)
{
    // 1D432 ; [.1F71.0020.0005] 
    // MATHEMATICAL BOLD SMALL Y

    uint32_t const cps[1] = { 0x1d432 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_097)
{
    // 1D433 ; [.1F87.0020.0005] 
    // MATHEMATICAL BOLD SMALL Z

    uint32_t const cps[1] = { 0x1d433 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_098)
{
    // 1D434 ; [.1CAD.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL A

    uint32_t const cps[1] = { 0x1d434 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_099)
{
    // 1D435 ; [.1CC6.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL B

    uint32_t const cps[1] = { 0x1d435 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_100)
{
    // 1D436 ; [.1CE0.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL C

    uint32_t const cps[1] = { 0x1d436 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_101)
{
    // 1D437 ; [.1CF5.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL D

    uint32_t const cps[1] = { 0x1d437 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_102)
{
    // 1D438 ; [.1D10.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL E

    uint32_t const cps[1] = { 0x1d438 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_103)
{
    // 1D439 ; [.1D4B.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL F

    uint32_t const cps[1] = { 0x1d439 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_104)
{
    // 1D43A ; [.1D5A.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL G

    uint32_t const cps[1] = { 0x1d43a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_105)
{
    // 1D43B ; [.1D7E.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL H

    uint32_t const cps[1] = { 0x1d43b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_106)
{
    // 1D43C ; [.1D98.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL I

    uint32_t const cps[1] = { 0x1d43c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_107)
{
    // 1D43D ; [.1DB2.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL J

    uint32_t const cps[1] = { 0x1d43d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_108)
{
    // 1D43E ; [.1DCB.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL K

    uint32_t const cps[1] = { 0x1d43e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_109)
{
    // 1D43F ; [.1DDD.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL L

    uint32_t const cps[1] = { 0x1d43f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_110)
{
    // 1D440 ; [.1E10.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL M

    uint32_t const cps[1] = { 0x1d440 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_111)
{
    // 1D441 ; [.1E1F.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL N

    uint32_t const cps[1] = { 0x1d441 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_112)
{
    // 1D442 ; [.1E43.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL O

    uint32_t const cps[1] = { 0x1d442 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_113)
{
    // 1D443 ; [.1E72.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL P

    uint32_t const cps[1] = { 0x1d443 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_114)
{
    // 1D444 ; [.1E87.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL Q

    uint32_t const cps[1] = { 0x1d444 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_115)
{
    // 1D445 ; [.1E99.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL R

    uint32_t const cps[1] = { 0x1d445 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_116)
{
    // 1D446 ; [.1ED7.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL S

    uint32_t const cps[1] = { 0x1d446 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_117)
{
    // 1D447 ; [.1EFB.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL T

    uint32_t const cps[1] = { 0x1d447 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_118)
{
    // 1D448 ; [.1F1B.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL U

    uint32_t const cps[1] = { 0x1d448 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_119)
{
    // 1D449 ; [.1F49.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL V

    uint32_t const cps[1] = { 0x1d449 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_120)
{
    // 1D44A ; [.1F5B.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL W

    uint32_t const cps[1] = { 0x1d44a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_121)
{
    // 1D44B ; [.1F65.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL X

    uint32_t const cps[1] = { 0x1d44b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_122)
{
    // 1D44C ; [.1F71.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL Y

    uint32_t const cps[1] = { 0x1d44c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_123)
{
    // 1D44D ; [.1F87.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL Z

    uint32_t const cps[1] = { 0x1d44d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_124)
{
    // 1D44E ; [.1CAD.0020.0005] 
    // MATHEMATICAL ITALIC SMALL A

    uint32_t const cps[1] = { 0x1d44e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_125)
{
    // 1D44F ; [.1CC6.0020.0005] 
    // MATHEMATICAL ITALIC SMALL B

    uint32_t const cps[1] = { 0x1d44f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_126)
{
    // 1D450 ; [.1CE0.0020.0005] 
    // MATHEMATICAL ITALIC SMALL C

    uint32_t const cps[1] = { 0x1d450 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_127)
{
    // 1D451 ; [.1CF5.0020.0005] 
    // MATHEMATICAL ITALIC SMALL D

    uint32_t const cps[1] = { 0x1d451 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_128)
{
    // 1D452 ; [.1D10.0020.0005] 
    // MATHEMATICAL ITALIC SMALL E

    uint32_t const cps[1] = { 0x1d452 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_129)
{
    // 1D453 ; [.1D4B.0020.0005] 
    // MATHEMATICAL ITALIC SMALL F

    uint32_t const cps[1] = { 0x1d453 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_130)
{
    // 1D454 ; [.1D5A.0020.0005] 
    // MATHEMATICAL ITALIC SMALL G

    uint32_t const cps[1] = { 0x1d454 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_131)
{
    // 1D456 ; [.1D98.0020.0005] 
    // MATHEMATICAL ITALIC SMALL I

    uint32_t const cps[1] = { 0x1d456 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_132)
{
    // 1D457 ; [.1DB2.0020.0005] 
    // MATHEMATICAL ITALIC SMALL J

    uint32_t const cps[1] = { 0x1d457 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_133)
{
    // 1D458 ; [.1DCB.0020.0005] 
    // MATHEMATICAL ITALIC SMALL K

    uint32_t const cps[1] = { 0x1d458 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_134)
{
    // 1D459 ; [.1DDD.0020.0005] 
    // MATHEMATICAL ITALIC SMALL L

    uint32_t const cps[1] = { 0x1d459 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_135)
{
    // 1D45A ; [.1E10.0020.0005] 
    // MATHEMATICAL ITALIC SMALL M

    uint32_t const cps[1] = { 0x1d45a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_136)
{
    // 1D45B ; [.1E1F.0020.0005] 
    // MATHEMATICAL ITALIC SMALL N

    uint32_t const cps[1] = { 0x1d45b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_137)
{
    // 1D45C ; [.1E43.0020.0005] 
    // MATHEMATICAL ITALIC SMALL O

    uint32_t const cps[1] = { 0x1d45c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_138)
{
    // 1D45D ; [.1E72.0020.0005] 
    // MATHEMATICAL ITALIC SMALL P

    uint32_t const cps[1] = { 0x1d45d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_139)
{
    // 1D45E ; [.1E87.0020.0005] 
    // MATHEMATICAL ITALIC SMALL Q

    uint32_t const cps[1] = { 0x1d45e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_140)
{
    // 1D45F ; [.1E99.0020.0005] 
    // MATHEMATICAL ITALIC SMALL R

    uint32_t const cps[1] = { 0x1d45f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_141)
{
    // 1D460 ; [.1ED7.0020.0005] 
    // MATHEMATICAL ITALIC SMALL S

    uint32_t const cps[1] = { 0x1d460 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_142)
{
    // 1D461 ; [.1EFB.0020.0005] 
    // MATHEMATICAL ITALIC SMALL T

    uint32_t const cps[1] = { 0x1d461 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_143)
{
    // 1D462 ; [.1F1B.0020.0005] 
    // MATHEMATICAL ITALIC SMALL U

    uint32_t const cps[1] = { 0x1d462 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_144)
{
    // 1D463 ; [.1F49.0020.0005] 
    // MATHEMATICAL ITALIC SMALL V

    uint32_t const cps[1] = { 0x1d463 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_145)
{
    // 1D464 ; [.1F5B.0020.0005] 
    // MATHEMATICAL ITALIC SMALL W

    uint32_t const cps[1] = { 0x1d464 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_146)
{
    // 1D465 ; [.1F65.0020.0005] 
    // MATHEMATICAL ITALIC SMALL X

    uint32_t const cps[1] = { 0x1d465 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_147)
{
    // 1D466 ; [.1F71.0020.0005] 
    // MATHEMATICAL ITALIC SMALL Y

    uint32_t const cps[1] = { 0x1d466 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_148)
{
    // 1D467 ; [.1F87.0020.0005] 
    // MATHEMATICAL ITALIC SMALL Z

    uint32_t const cps[1] = { 0x1d467 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_175_149)
{
    // 1D468 ; [.1CAD.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL A

    uint32_t const cps[1] = { 0x1d468 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

