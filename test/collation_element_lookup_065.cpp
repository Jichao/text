// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_065_000)
{
    // 27F3  ; [*0AF3.0020.0002] 
    // CLOCKWISE GAPPED CIRCLE ARROW

    uint32_t const cps[1] = { 0x27f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_001)
{
    // 27F4  ; [*0AF4.0020.0002] 
    // RIGHT ARROW WITH CIRCLED PLUS

    uint32_t const cps[1] = { 0x27f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_002)
{
    // 27F5  ; [*0AF5.0020.0002] 
    // LONG LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x27f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_003)
{
    // 27F6  ; [*0AF6.0020.0002] 
    // LONG RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_004)
{
    // 27F7  ; [*0AF7.0020.0002] 
    // LONG LEFT RIGHT ARROW

    uint32_t const cps[1] = { 0x27f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_005)
{
    // 27F8  ; [*0AF8.0020.0002] 
    // LONG LEFTWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x27f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_006)
{
    // 27F9  ; [*0AF9.0020.0002] 
    // LONG RIGHTWARDS DOUBLE ARROW

    uint32_t const cps[1] = { 0x27f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_007)
{
    // 27FA  ; [*0AFA.0020.0002] 
    // LONG LEFT RIGHT DOUBLE ARROW

    uint32_t const cps[1] = { 0x27fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xafa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_008)
{
    // 27FB  ; [*0AFB.0020.0002] 
    // LONG LEFTWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x27fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xafb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_009)
{
    // 27FC  ; [*0AFC.0020.0002] 
    // LONG RIGHTWARDS ARROW FROM BAR

    uint32_t const cps[1] = { 0x27fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xafc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_010)
{
    // 27FD  ; [*0AFD.0020.0002] 
    // LONG LEFTWARDS DOUBLE ARROW FROM BAR

    uint32_t const cps[1] = { 0x27fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xafd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_011)
{
    // 27FE  ; [*0AFE.0020.0002] 
    // LONG RIGHTWARDS DOUBLE ARROW FROM BAR

    uint32_t const cps[1] = { 0x27fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xafe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_012)
{
    // 27FF  ; [*0AFF.0020.0002] 
    // LONG RIGHTWARDS SQUIGGLE ARROW

    uint32_t const cps[1] = { 0x27ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_013)
{
    // 2800  ; [*0DB4.0020.0002] 
    // BRAILLE PATTERN BLANK

    uint32_t const cps[1] = { 0x2800 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_014)
{
    // 2801  ; [*0DB5.0020.0002] 
    // BRAILLE PATTERN DOTS-1

    uint32_t const cps[1] = { 0x2801 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_015)
{
    // 2802  ; [*0DB6.0020.0002] 
    // BRAILLE PATTERN DOTS-2

    uint32_t const cps[1] = { 0x2802 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_016)
{
    // 2803  ; [*0DB7.0020.0002] 
    // BRAILLE PATTERN DOTS-12

    uint32_t const cps[1] = { 0x2803 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_017)
{
    // 2804  ; [*0DB8.0020.0002] 
    // BRAILLE PATTERN DOTS-3

    uint32_t const cps[1] = { 0x2804 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_018)
{
    // 2805  ; [*0DB9.0020.0002] 
    // BRAILLE PATTERN DOTS-13

    uint32_t const cps[1] = { 0x2805 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_019)
{
    // 2806  ; [*0DBA.0020.0002] 
    // BRAILLE PATTERN DOTS-23

    uint32_t const cps[1] = { 0x2806 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_020)
{
    // 2807  ; [*0DBB.0020.0002] 
    // BRAILLE PATTERN DOTS-123

    uint32_t const cps[1] = { 0x2807 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_021)
{
    // 2808  ; [*0DBC.0020.0002] 
    // BRAILLE PATTERN DOTS-4

    uint32_t const cps[1] = { 0x2808 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_022)
{
    // 2809  ; [*0DBD.0020.0002] 
    // BRAILLE PATTERN DOTS-14

    uint32_t const cps[1] = { 0x2809 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_023)
{
    // 280A  ; [*0DBE.0020.0002] 
    // BRAILLE PATTERN DOTS-24

    uint32_t const cps[1] = { 0x280a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_024)
{
    // 280B  ; [*0DBF.0020.0002] 
    // BRAILLE PATTERN DOTS-124

    uint32_t const cps[1] = { 0x280b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_025)
{
    // 280C  ; [*0DC0.0020.0002] 
    // BRAILLE PATTERN DOTS-34

    uint32_t const cps[1] = { 0x280c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_026)
{
    // 280D  ; [*0DC1.0020.0002] 
    // BRAILLE PATTERN DOTS-134

    uint32_t const cps[1] = { 0x280d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_027)
{
    // 280E  ; [*0DC2.0020.0002] 
    // BRAILLE PATTERN DOTS-234

    uint32_t const cps[1] = { 0x280e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_028)
{
    // 280F  ; [*0DC3.0020.0002] 
    // BRAILLE PATTERN DOTS-1234

    uint32_t const cps[1] = { 0x280f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_029)
{
    // 2810  ; [*0DC4.0020.0002] 
    // BRAILLE PATTERN DOTS-5

    uint32_t const cps[1] = { 0x2810 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_030)
{
    // 2811  ; [*0DC5.0020.0002] 
    // BRAILLE PATTERN DOTS-15

    uint32_t const cps[1] = { 0x2811 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_031)
{
    // 2812  ; [*0DC6.0020.0002] 
    // BRAILLE PATTERN DOTS-25

    uint32_t const cps[1] = { 0x2812 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_032)
{
    // 2813  ; [*0DC7.0020.0002] 
    // BRAILLE PATTERN DOTS-125

    uint32_t const cps[1] = { 0x2813 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_033)
{
    // 2814  ; [*0DC8.0020.0002] 
    // BRAILLE PATTERN DOTS-35

    uint32_t const cps[1] = { 0x2814 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_034)
{
    // 2815  ; [*0DC9.0020.0002] 
    // BRAILLE PATTERN DOTS-135

    uint32_t const cps[1] = { 0x2815 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_035)
{
    // 2816  ; [*0DCA.0020.0002] 
    // BRAILLE PATTERN DOTS-235

    uint32_t const cps[1] = { 0x2816 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_036)
{
    // 2817  ; [*0DCB.0020.0002] 
    // BRAILLE PATTERN DOTS-1235

    uint32_t const cps[1] = { 0x2817 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_037)
{
    // 2818  ; [*0DCC.0020.0002] 
    // BRAILLE PATTERN DOTS-45

    uint32_t const cps[1] = { 0x2818 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_038)
{
    // 2819  ; [*0DCD.0020.0002] 
    // BRAILLE PATTERN DOTS-145

    uint32_t const cps[1] = { 0x2819 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_039)
{
    // 281A  ; [*0DCE.0020.0002] 
    // BRAILLE PATTERN DOTS-245

    uint32_t const cps[1] = { 0x281a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_040)
{
    // 281B  ; [*0DCF.0020.0002] 
    // BRAILLE PATTERN DOTS-1245

    uint32_t const cps[1] = { 0x281b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_041)
{
    // 281C  ; [*0DD0.0020.0002] 
    // BRAILLE PATTERN DOTS-345

    uint32_t const cps[1] = { 0x281c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_042)
{
    // 281D  ; [*0DD1.0020.0002] 
    // BRAILLE PATTERN DOTS-1345

    uint32_t const cps[1] = { 0x281d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_043)
{
    // 281E  ; [*0DD2.0020.0002] 
    // BRAILLE PATTERN DOTS-2345

    uint32_t const cps[1] = { 0x281e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_044)
{
    // 281F  ; [*0DD3.0020.0002] 
    // BRAILLE PATTERN DOTS-12345

    uint32_t const cps[1] = { 0x281f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_045)
{
    // 2820  ; [*0DD4.0020.0002] 
    // BRAILLE PATTERN DOTS-6

    uint32_t const cps[1] = { 0x2820 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_046)
{
    // 2821  ; [*0DD5.0020.0002] 
    // BRAILLE PATTERN DOTS-16

    uint32_t const cps[1] = { 0x2821 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_047)
{
    // 2822  ; [*0DD6.0020.0002] 
    // BRAILLE PATTERN DOTS-26

    uint32_t const cps[1] = { 0x2822 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_048)
{
    // 2823  ; [*0DD7.0020.0002] 
    // BRAILLE PATTERN DOTS-126

    uint32_t const cps[1] = { 0x2823 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_049)
{
    // 2824  ; [*0DD8.0020.0002] 
    // BRAILLE PATTERN DOTS-36

    uint32_t const cps[1] = { 0x2824 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_050)
{
    // 2825  ; [*0DD9.0020.0002] 
    // BRAILLE PATTERN DOTS-136

    uint32_t const cps[1] = { 0x2825 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_051)
{
    // 2826  ; [*0DDA.0020.0002] 
    // BRAILLE PATTERN DOTS-236

    uint32_t const cps[1] = { 0x2826 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_052)
{
    // 2827  ; [*0DDB.0020.0002] 
    // BRAILLE PATTERN DOTS-1236

    uint32_t const cps[1] = { 0x2827 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xddb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_053)
{
    // 2828  ; [*0DDC.0020.0002] 
    // BRAILLE PATTERN DOTS-46

    uint32_t const cps[1] = { 0x2828 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xddc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_054)
{
    // 2829  ; [*0DDD.0020.0002] 
    // BRAILLE PATTERN DOTS-146

    uint32_t const cps[1] = { 0x2829 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xddd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_055)
{
    // 282A  ; [*0DDE.0020.0002] 
    // BRAILLE PATTERN DOTS-246

    uint32_t const cps[1] = { 0x282a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_056)
{
    // 282B  ; [*0DDF.0020.0002] 
    // BRAILLE PATTERN DOTS-1246

    uint32_t const cps[1] = { 0x282b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xddf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_057)
{
    // 282C  ; [*0DE0.0020.0002] 
    // BRAILLE PATTERN DOTS-346

    uint32_t const cps[1] = { 0x282c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_058)
{
    // 282D  ; [*0DE1.0020.0002] 
    // BRAILLE PATTERN DOTS-1346

    uint32_t const cps[1] = { 0x282d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_059)
{
    // 282E  ; [*0DE2.0020.0002] 
    // BRAILLE PATTERN DOTS-2346

    uint32_t const cps[1] = { 0x282e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_060)
{
    // 282F  ; [*0DE3.0020.0002] 
    // BRAILLE PATTERN DOTS-12346

    uint32_t const cps[1] = { 0x282f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_061)
{
    // 2830  ; [*0DE4.0020.0002] 
    // BRAILLE PATTERN DOTS-56

    uint32_t const cps[1] = { 0x2830 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_062)
{
    // 2831  ; [*0DE5.0020.0002] 
    // BRAILLE PATTERN DOTS-156

    uint32_t const cps[1] = { 0x2831 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_063)
{
    // 2832  ; [*0DE6.0020.0002] 
    // BRAILLE PATTERN DOTS-256

    uint32_t const cps[1] = { 0x2832 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_064)
{
    // 2833  ; [*0DE7.0020.0002] 
    // BRAILLE PATTERN DOTS-1256

    uint32_t const cps[1] = { 0x2833 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_065)
{
    // 2834  ; [*0DE8.0020.0002] 
    // BRAILLE PATTERN DOTS-356

    uint32_t const cps[1] = { 0x2834 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_066)
{
    // 2835  ; [*0DE9.0020.0002] 
    // BRAILLE PATTERN DOTS-1356

    uint32_t const cps[1] = { 0x2835 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xde9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_067)
{
    // 2836  ; [*0DEA.0020.0002] 
    // BRAILLE PATTERN DOTS-2356

    uint32_t const cps[1] = { 0x2836 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_068)
{
    // 2837  ; [*0DEB.0020.0002] 
    // BRAILLE PATTERN DOTS-12356

    uint32_t const cps[1] = { 0x2837 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_069)
{
    // 2838  ; [*0DEC.0020.0002] 
    // BRAILLE PATTERN DOTS-456

    uint32_t const cps[1] = { 0x2838 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_070)
{
    // 2839  ; [*0DED.0020.0002] 
    // BRAILLE PATTERN DOTS-1456

    uint32_t const cps[1] = { 0x2839 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xded), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_071)
{
    // 283A  ; [*0DEE.0020.0002] 
    // BRAILLE PATTERN DOTS-2456

    uint32_t const cps[1] = { 0x283a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_072)
{
    // 283B  ; [*0DEF.0020.0002] 
    // BRAILLE PATTERN DOTS-12456

    uint32_t const cps[1] = { 0x283b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_073)
{
    // 283C  ; [*0DF0.0020.0002] 
    // BRAILLE PATTERN DOTS-3456

    uint32_t const cps[1] = { 0x283c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_074)
{
    // 283D  ; [*0DF1.0020.0002] 
    // BRAILLE PATTERN DOTS-13456

    uint32_t const cps[1] = { 0x283d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_075)
{
    // 283E  ; [*0DF2.0020.0002] 
    // BRAILLE PATTERN DOTS-23456

    uint32_t const cps[1] = { 0x283e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_076)
{
    // 283F  ; [*0DF3.0020.0002] 
    // BRAILLE PATTERN DOTS-123456

    uint32_t const cps[1] = { 0x283f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_077)
{
    // 2840  ; [*0DF4.0020.0002] 
    // BRAILLE PATTERN DOTS-7

    uint32_t const cps[1] = { 0x2840 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_078)
{
    // 2841  ; [*0DF5.0020.0002] 
    // BRAILLE PATTERN DOTS-17

    uint32_t const cps[1] = { 0x2841 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_079)
{
    // 2842  ; [*0DF6.0020.0002] 
    // BRAILLE PATTERN DOTS-27

    uint32_t const cps[1] = { 0x2842 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_080)
{
    // 2843  ; [*0DF7.0020.0002] 
    // BRAILLE PATTERN DOTS-127

    uint32_t const cps[1] = { 0x2843 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_081)
{
    // 2844  ; [*0DF8.0020.0002] 
    // BRAILLE PATTERN DOTS-37

    uint32_t const cps[1] = { 0x2844 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_082)
{
    // 2845  ; [*0DF9.0020.0002] 
    // BRAILLE PATTERN DOTS-137

    uint32_t const cps[1] = { 0x2845 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_083)
{
    // 2846  ; [*0DFA.0020.0002] 
    // BRAILLE PATTERN DOTS-237

    uint32_t const cps[1] = { 0x2846 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdfa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_084)
{
    // 2847  ; [*0DFB.0020.0002] 
    // BRAILLE PATTERN DOTS-1237

    uint32_t const cps[1] = { 0x2847 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_085)
{
    // 2848  ; [*0DFC.0020.0002] 
    // BRAILLE PATTERN DOTS-47

    uint32_t const cps[1] = { 0x2848 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_086)
{
    // 2849  ; [*0DFD.0020.0002] 
    // BRAILLE PATTERN DOTS-147

    uint32_t const cps[1] = { 0x2849 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_087)
{
    // 284A  ; [*0DFE.0020.0002] 
    // BRAILLE PATTERN DOTS-247

    uint32_t const cps[1] = { 0x284a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_088)
{
    // 284B  ; [*0DFF.0020.0002] 
    // BRAILLE PATTERN DOTS-1247

    uint32_t const cps[1] = { 0x284b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_089)
{
    // 284C  ; [*0E00.0020.0002] 
    // BRAILLE PATTERN DOTS-347

    uint32_t const cps[1] = { 0x284c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_090)
{
    // 284D  ; [*0E01.0020.0002] 
    // BRAILLE PATTERN DOTS-1347

    uint32_t const cps[1] = { 0x284d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_091)
{
    // 284E  ; [*0E02.0020.0002] 
    // BRAILLE PATTERN DOTS-2347

    uint32_t const cps[1] = { 0x284e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_092)
{
    // 284F  ; [*0E03.0020.0002] 
    // BRAILLE PATTERN DOTS-12347

    uint32_t const cps[1] = { 0x284f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_093)
{
    // 2850  ; [*0E04.0020.0002] 
    // BRAILLE PATTERN DOTS-57

    uint32_t const cps[1] = { 0x2850 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_094)
{
    // 2851  ; [*0E05.0020.0002] 
    // BRAILLE PATTERN DOTS-157

    uint32_t const cps[1] = { 0x2851 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_095)
{
    // 2852  ; [*0E06.0020.0002] 
    // BRAILLE PATTERN DOTS-257

    uint32_t const cps[1] = { 0x2852 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_096)
{
    // 2853  ; [*0E07.0020.0002] 
    // BRAILLE PATTERN DOTS-1257

    uint32_t const cps[1] = { 0x2853 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_097)
{
    // 2854  ; [*0E08.0020.0002] 
    // BRAILLE PATTERN DOTS-357

    uint32_t const cps[1] = { 0x2854 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_098)
{
    // 2855  ; [*0E09.0020.0002] 
    // BRAILLE PATTERN DOTS-1357

    uint32_t const cps[1] = { 0x2855 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_099)
{
    // 2856  ; [*0E0A.0020.0002] 
    // BRAILLE PATTERN DOTS-2357

    uint32_t const cps[1] = { 0x2856 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_100)
{
    // 2857  ; [*0E0B.0020.0002] 
    // BRAILLE PATTERN DOTS-12357

    uint32_t const cps[1] = { 0x2857 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_101)
{
    // 2858  ; [*0E0C.0020.0002] 
    // BRAILLE PATTERN DOTS-457

    uint32_t const cps[1] = { 0x2858 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_102)
{
    // 2859  ; [*0E0D.0020.0002] 
    // BRAILLE PATTERN DOTS-1457

    uint32_t const cps[1] = { 0x2859 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_103)
{
    // 285A  ; [*0E0E.0020.0002] 
    // BRAILLE PATTERN DOTS-2457

    uint32_t const cps[1] = { 0x285a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_104)
{
    // 285B  ; [*0E0F.0020.0002] 
    // BRAILLE PATTERN DOTS-12457

    uint32_t const cps[1] = { 0x285b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_105)
{
    // 285C  ; [*0E10.0020.0002] 
    // BRAILLE PATTERN DOTS-3457

    uint32_t const cps[1] = { 0x285c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_106)
{
    // 285D  ; [*0E11.0020.0002] 
    // BRAILLE PATTERN DOTS-13457

    uint32_t const cps[1] = { 0x285d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_107)
{
    // 285E  ; [*0E12.0020.0002] 
    // BRAILLE PATTERN DOTS-23457

    uint32_t const cps[1] = { 0x285e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_108)
{
    // 285F  ; [*0E13.0020.0002] 
    // BRAILLE PATTERN DOTS-123457

    uint32_t const cps[1] = { 0x285f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_109)
{
    // 2860  ; [*0E14.0020.0002] 
    // BRAILLE PATTERN DOTS-67

    uint32_t const cps[1] = { 0x2860 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_110)
{
    // 2861  ; [*0E15.0020.0002] 
    // BRAILLE PATTERN DOTS-167

    uint32_t const cps[1] = { 0x2861 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_111)
{
    // 2862  ; [*0E16.0020.0002] 
    // BRAILLE PATTERN DOTS-267

    uint32_t const cps[1] = { 0x2862 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_112)
{
    // 2863  ; [*0E17.0020.0002] 
    // BRAILLE PATTERN DOTS-1267

    uint32_t const cps[1] = { 0x2863 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_113)
{
    // 2864  ; [*0E18.0020.0002] 
    // BRAILLE PATTERN DOTS-367

    uint32_t const cps[1] = { 0x2864 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_114)
{
    // 2865  ; [*0E19.0020.0002] 
    // BRAILLE PATTERN DOTS-1367

    uint32_t const cps[1] = { 0x2865 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_115)
{
    // 2866  ; [*0E1A.0020.0002] 
    // BRAILLE PATTERN DOTS-2367

    uint32_t const cps[1] = { 0x2866 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_116)
{
    // 2867  ; [*0E1B.0020.0002] 
    // BRAILLE PATTERN DOTS-12367

    uint32_t const cps[1] = { 0x2867 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_117)
{
    // 2868  ; [*0E1C.0020.0002] 
    // BRAILLE PATTERN DOTS-467

    uint32_t const cps[1] = { 0x2868 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_118)
{
    // 2869  ; [*0E1D.0020.0002] 
    // BRAILLE PATTERN DOTS-1467

    uint32_t const cps[1] = { 0x2869 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_119)
{
    // 286A  ; [*0E1E.0020.0002] 
    // BRAILLE PATTERN DOTS-2467

    uint32_t const cps[1] = { 0x286a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_120)
{
    // 286B  ; [*0E1F.0020.0002] 
    // BRAILLE PATTERN DOTS-12467

    uint32_t const cps[1] = { 0x286b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_121)
{
    // 286C  ; [*0E20.0020.0002] 
    // BRAILLE PATTERN DOTS-3467

    uint32_t const cps[1] = { 0x286c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_122)
{
    // 286D  ; [*0E21.0020.0002] 
    // BRAILLE PATTERN DOTS-13467

    uint32_t const cps[1] = { 0x286d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_123)
{
    // 286E  ; [*0E22.0020.0002] 
    // BRAILLE PATTERN DOTS-23467

    uint32_t const cps[1] = { 0x286e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_124)
{
    // 286F  ; [*0E23.0020.0002] 
    // BRAILLE PATTERN DOTS-123467

    uint32_t const cps[1] = { 0x286f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_125)
{
    // 2870  ; [*0E24.0020.0002] 
    // BRAILLE PATTERN DOTS-567

    uint32_t const cps[1] = { 0x2870 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_126)
{
    // 2871  ; [*0E25.0020.0002] 
    // BRAILLE PATTERN DOTS-1567

    uint32_t const cps[1] = { 0x2871 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_127)
{
    // 2872  ; [*0E26.0020.0002] 
    // BRAILLE PATTERN DOTS-2567

    uint32_t const cps[1] = { 0x2872 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_128)
{
    // 2873  ; [*0E27.0020.0002] 
    // BRAILLE PATTERN DOTS-12567

    uint32_t const cps[1] = { 0x2873 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_129)
{
    // 2874  ; [*0E28.0020.0002] 
    // BRAILLE PATTERN DOTS-3567

    uint32_t const cps[1] = { 0x2874 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_130)
{
    // 2875  ; [*0E29.0020.0002] 
    // BRAILLE PATTERN DOTS-13567

    uint32_t const cps[1] = { 0x2875 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_131)
{
    // 2876  ; [*0E2A.0020.0002] 
    // BRAILLE PATTERN DOTS-23567

    uint32_t const cps[1] = { 0x2876 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_132)
{
    // 2877  ; [*0E2B.0020.0002] 
    // BRAILLE PATTERN DOTS-123567

    uint32_t const cps[1] = { 0x2877 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_133)
{
    // 2878  ; [*0E2C.0020.0002] 
    // BRAILLE PATTERN DOTS-4567

    uint32_t const cps[1] = { 0x2878 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_134)
{
    // 2879  ; [*0E2D.0020.0002] 
    // BRAILLE PATTERN DOTS-14567

    uint32_t const cps[1] = { 0x2879 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_135)
{
    // 287A  ; [*0E2E.0020.0002] 
    // BRAILLE PATTERN DOTS-24567

    uint32_t const cps[1] = { 0x287a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_136)
{
    // 287B  ; [*0E2F.0020.0002] 
    // BRAILLE PATTERN DOTS-124567

    uint32_t const cps[1] = { 0x287b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_137)
{
    // 287C  ; [*0E30.0020.0002] 
    // BRAILLE PATTERN DOTS-34567

    uint32_t const cps[1] = { 0x287c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_138)
{
    // 287D  ; [*0E31.0020.0002] 
    // BRAILLE PATTERN DOTS-134567

    uint32_t const cps[1] = { 0x287d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_139)
{
    // 287E  ; [*0E32.0020.0002] 
    // BRAILLE PATTERN DOTS-234567

    uint32_t const cps[1] = { 0x287e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_140)
{
    // 287F  ; [*0E33.0020.0002] 
    // BRAILLE PATTERN DOTS-1234567

    uint32_t const cps[1] = { 0x287f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_141)
{
    // 2880  ; [*0E34.0020.0002] 
    // BRAILLE PATTERN DOTS-8

    uint32_t const cps[1] = { 0x2880 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_142)
{
    // 2881  ; [*0E35.0020.0002] 
    // BRAILLE PATTERN DOTS-18

    uint32_t const cps[1] = { 0x2881 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_143)
{
    // 2882  ; [*0E36.0020.0002] 
    // BRAILLE PATTERN DOTS-28

    uint32_t const cps[1] = { 0x2882 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_144)
{
    // 2883  ; [*0E37.0020.0002] 
    // BRAILLE PATTERN DOTS-128

    uint32_t const cps[1] = { 0x2883 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_145)
{
    // 2884  ; [*0E38.0020.0002] 
    // BRAILLE PATTERN DOTS-38

    uint32_t const cps[1] = { 0x2884 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_146)
{
    // 2885  ; [*0E39.0020.0002] 
    // BRAILLE PATTERN DOTS-138

    uint32_t const cps[1] = { 0x2885 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_147)
{
    // 2886  ; [*0E3A.0020.0002] 
    // BRAILLE PATTERN DOTS-238

    uint32_t const cps[1] = { 0x2886 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_148)
{
    // 2887  ; [*0E3B.0020.0002] 
    // BRAILLE PATTERN DOTS-1238

    uint32_t const cps[1] = { 0x2887 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_065_149)
{
    // 2888  ; [*0E3C.0020.0002] 
    // BRAILLE PATTERN DOTS-48

    uint32_t const cps[1] = { 0x2888 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xe3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

