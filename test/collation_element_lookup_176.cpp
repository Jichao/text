// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_176_000)
{
    // 1D469 ; [.1CC6.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL B

    uint32_t const cps[1] = { 0x1d469 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_001)
{
    // 1D46A ; [.1CE0.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL C

    uint32_t const cps[1] = { 0x1d46a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_002)
{
    // 1D46B ; [.1CF5.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL D

    uint32_t const cps[1] = { 0x1d46b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_003)
{
    // 1D46C ; [.1D10.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL E

    uint32_t const cps[1] = { 0x1d46c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_004)
{
    // 1D46D ; [.1D4B.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL F

    uint32_t const cps[1] = { 0x1d46d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_005)
{
    // 1D46E ; [.1D5A.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL G

    uint32_t const cps[1] = { 0x1d46e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_006)
{
    // 1D46F ; [.1D7E.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL H

    uint32_t const cps[1] = { 0x1d46f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_007)
{
    // 1D470 ; [.1D98.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL I

    uint32_t const cps[1] = { 0x1d470 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_008)
{
    // 1D471 ; [.1DB2.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL J

    uint32_t const cps[1] = { 0x1d471 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_009)
{
    // 1D472 ; [.1DCB.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL K

    uint32_t const cps[1] = { 0x1d472 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_010)
{
    // 1D473 ; [.1DDD.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL L

    uint32_t const cps[1] = { 0x1d473 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_011)
{
    // 1D474 ; [.1E10.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL M

    uint32_t const cps[1] = { 0x1d474 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_012)
{
    // 1D475 ; [.1E1F.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL N

    uint32_t const cps[1] = { 0x1d475 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_013)
{
    // 1D476 ; [.1E43.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL O

    uint32_t const cps[1] = { 0x1d476 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_014)
{
    // 1D477 ; [.1E72.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL P

    uint32_t const cps[1] = { 0x1d477 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_015)
{
    // 1D478 ; [.1E87.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL Q

    uint32_t const cps[1] = { 0x1d478 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_016)
{
    // 1D479 ; [.1E99.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL R

    uint32_t const cps[1] = { 0x1d479 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_017)
{
    // 1D47A ; [.1ED7.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL S

    uint32_t const cps[1] = { 0x1d47a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_018)
{
    // 1D47B ; [.1EFB.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL T

    uint32_t const cps[1] = { 0x1d47b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_019)
{
    // 1D47C ; [.1F1B.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL U

    uint32_t const cps[1] = { 0x1d47c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_020)
{
    // 1D47D ; [.1F49.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL V

    uint32_t const cps[1] = { 0x1d47d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_021)
{
    // 1D47E ; [.1F5B.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL W

    uint32_t const cps[1] = { 0x1d47e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_022)
{
    // 1D47F ; [.1F65.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL X

    uint32_t const cps[1] = { 0x1d47f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_023)
{
    // 1D480 ; [.1F71.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL Y

    uint32_t const cps[1] = { 0x1d480 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_024)
{
    // 1D481 ; [.1F87.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL Z

    uint32_t const cps[1] = { 0x1d481 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_025)
{
    // 1D482 ; [.1CAD.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL A

    uint32_t const cps[1] = { 0x1d482 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_026)
{
    // 1D483 ; [.1CC6.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL B

    uint32_t const cps[1] = { 0x1d483 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_027)
{
    // 1D484 ; [.1CE0.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL C

    uint32_t const cps[1] = { 0x1d484 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_028)
{
    // 1D485 ; [.1CF5.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL D

    uint32_t const cps[1] = { 0x1d485 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_029)
{
    // 1D486 ; [.1D10.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL E

    uint32_t const cps[1] = { 0x1d486 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_030)
{
    // 1D487 ; [.1D4B.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL F

    uint32_t const cps[1] = { 0x1d487 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_031)
{
    // 1D488 ; [.1D5A.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL G

    uint32_t const cps[1] = { 0x1d488 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_032)
{
    // 1D489 ; [.1D7E.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL H

    uint32_t const cps[1] = { 0x1d489 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_033)
{
    // 1D48A ; [.1D98.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL I

    uint32_t const cps[1] = { 0x1d48a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_034)
{
    // 1D48B ; [.1DB2.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL J

    uint32_t const cps[1] = { 0x1d48b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_035)
{
    // 1D48C ; [.1DCB.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL K

    uint32_t const cps[1] = { 0x1d48c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_036)
{
    // 1D48D ; [.1DDD.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL L

    uint32_t const cps[1] = { 0x1d48d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_037)
{
    // 1D48E ; [.1E10.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL M

    uint32_t const cps[1] = { 0x1d48e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_038)
{
    // 1D48F ; [.1E1F.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL N

    uint32_t const cps[1] = { 0x1d48f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_039)
{
    // 1D490 ; [.1E43.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL O

    uint32_t const cps[1] = { 0x1d490 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_040)
{
    // 1D491 ; [.1E72.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL P

    uint32_t const cps[1] = { 0x1d491 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_041)
{
    // 1D492 ; [.1E87.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL Q

    uint32_t const cps[1] = { 0x1d492 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_042)
{
    // 1D493 ; [.1E99.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL R

    uint32_t const cps[1] = { 0x1d493 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_043)
{
    // 1D494 ; [.1ED7.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL S

    uint32_t const cps[1] = { 0x1d494 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_044)
{
    // 1D495 ; [.1EFB.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL T

    uint32_t const cps[1] = { 0x1d495 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_045)
{
    // 1D496 ; [.1F1B.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL U

    uint32_t const cps[1] = { 0x1d496 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_046)
{
    // 1D497 ; [.1F49.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL V

    uint32_t const cps[1] = { 0x1d497 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_047)
{
    // 1D498 ; [.1F5B.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL W

    uint32_t const cps[1] = { 0x1d498 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_048)
{
    // 1D499 ; [.1F65.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL X

    uint32_t const cps[1] = { 0x1d499 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_049)
{
    // 1D49A ; [.1F71.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL Y

    uint32_t const cps[1] = { 0x1d49a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_050)
{
    // 1D49B ; [.1F87.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL Z

    uint32_t const cps[1] = { 0x1d49b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_051)
{
    // 1D49C ; [.1CAD.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL A

    uint32_t const cps[1] = { 0x1d49c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_052)
{
    // 1D49E ; [.1CE0.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL C

    uint32_t const cps[1] = { 0x1d49e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_053)
{
    // 1D49F ; [.1CF5.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL D

    uint32_t const cps[1] = { 0x1d49f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_054)
{
    // 1D4A2 ; [.1D5A.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL G

    uint32_t const cps[1] = { 0x1d4a2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_055)
{
    // 1D4A5 ; [.1DB2.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL J

    uint32_t const cps[1] = { 0x1d4a5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_056)
{
    // 1D4A6 ; [.1DCB.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL K

    uint32_t const cps[1] = { 0x1d4a6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_057)
{
    // 1D4A9 ; [.1E1F.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL N

    uint32_t const cps[1] = { 0x1d4a9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_058)
{
    // 1D4AA ; [.1E43.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL O

    uint32_t const cps[1] = { 0x1d4aa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_059)
{
    // 1D4AB ; [.1E72.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL P

    uint32_t const cps[1] = { 0x1d4ab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_060)
{
    // 1D4AC ; [.1E87.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL Q

    uint32_t const cps[1] = { 0x1d4ac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_061)
{
    // 1D4AE ; [.1ED7.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL S

    uint32_t const cps[1] = { 0x1d4ae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_062)
{
    // 1D4AF ; [.1EFB.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL T

    uint32_t const cps[1] = { 0x1d4af };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_063)
{
    // 1D4B0 ; [.1F1B.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL U

    uint32_t const cps[1] = { 0x1d4b0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_064)
{
    // 1D4B1 ; [.1F49.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL V

    uint32_t const cps[1] = { 0x1d4b1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_065)
{
    // 1D4B2 ; [.1F5B.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL W

    uint32_t const cps[1] = { 0x1d4b2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_066)
{
    // 1D4B3 ; [.1F65.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL X

    uint32_t const cps[1] = { 0x1d4b3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_067)
{
    // 1D4B4 ; [.1F71.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL Y

    uint32_t const cps[1] = { 0x1d4b4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_068)
{
    // 1D4B5 ; [.1F87.0020.000B] 
    // MATHEMATICAL SCRIPT CAPITAL Z

    uint32_t const cps[1] = { 0x1d4b5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_069)
{
    // 1D4B6 ; [.1CAD.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL A

    uint32_t const cps[1] = { 0x1d4b6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_070)
{
    // 1D4B7 ; [.1CC6.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL B

    uint32_t const cps[1] = { 0x1d4b7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_071)
{
    // 1D4B8 ; [.1CE0.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL C

    uint32_t const cps[1] = { 0x1d4b8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_072)
{
    // 1D4B9 ; [.1CF5.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL D

    uint32_t const cps[1] = { 0x1d4b9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_073)
{
    // 1D4BB ; [.1D4B.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL F

    uint32_t const cps[1] = { 0x1d4bb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_074)
{
    // 1D4BD ; [.1D7E.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL H

    uint32_t const cps[1] = { 0x1d4bd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_075)
{
    // 1D4BE ; [.1D98.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL I

    uint32_t const cps[1] = { 0x1d4be };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_076)
{
    // 1D4BF ; [.1DB2.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL J

    uint32_t const cps[1] = { 0x1d4bf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_077)
{
    // 1D4C0 ; [.1DCB.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL K

    uint32_t const cps[1] = { 0x1d4c0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_078)
{
    // 1D4C1 ; [.1DDD.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL L

    uint32_t const cps[1] = { 0x1d4c1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_079)
{
    // 1D4C2 ; [.1E10.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL M

    uint32_t const cps[1] = { 0x1d4c2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_080)
{
    // 1D4C3 ; [.1E1F.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL N

    uint32_t const cps[1] = { 0x1d4c3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_081)
{
    // 1D4C5 ; [.1E72.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL P

    uint32_t const cps[1] = { 0x1d4c5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_082)
{
    // 1D4C6 ; [.1E87.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL Q

    uint32_t const cps[1] = { 0x1d4c6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_083)
{
    // 1D4C7 ; [.1E99.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL R

    uint32_t const cps[1] = { 0x1d4c7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_084)
{
    // 1D4C8 ; [.1ED7.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL S

    uint32_t const cps[1] = { 0x1d4c8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_085)
{
    // 1D4C9 ; [.1EFB.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL T

    uint32_t const cps[1] = { 0x1d4c9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_086)
{
    // 1D4CA ; [.1F1B.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL U

    uint32_t const cps[1] = { 0x1d4ca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_087)
{
    // 1D4CB ; [.1F49.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL V

    uint32_t const cps[1] = { 0x1d4cb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_088)
{
    // 1D4CC ; [.1F5B.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL W

    uint32_t const cps[1] = { 0x1d4cc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_089)
{
    // 1D4CD ; [.1F65.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL X

    uint32_t const cps[1] = { 0x1d4cd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_090)
{
    // 1D4CE ; [.1F71.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL Y

    uint32_t const cps[1] = { 0x1d4ce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_091)
{
    // 1D4CF ; [.1F87.0020.0005] 
    // MATHEMATICAL SCRIPT SMALL Z

    uint32_t const cps[1] = { 0x1d4cf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_092)
{
    // 1D4D0 ; [.1CAD.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL A

    uint32_t const cps[1] = { 0x1d4d0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_093)
{
    // 1D4D1 ; [.1CC6.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL B

    uint32_t const cps[1] = { 0x1d4d1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_094)
{
    // 1D4D2 ; [.1CE0.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL C

    uint32_t const cps[1] = { 0x1d4d2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_095)
{
    // 1D4D3 ; [.1CF5.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL D

    uint32_t const cps[1] = { 0x1d4d3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_096)
{
    // 1D4D4 ; [.1D10.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL E

    uint32_t const cps[1] = { 0x1d4d4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_097)
{
    // 1D4D5 ; [.1D4B.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL F

    uint32_t const cps[1] = { 0x1d4d5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_098)
{
    // 1D4D6 ; [.1D5A.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL G

    uint32_t const cps[1] = { 0x1d4d6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_099)
{
    // 1D4D7 ; [.1D7E.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL H

    uint32_t const cps[1] = { 0x1d4d7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_100)
{
    // 1D4D8 ; [.1D98.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL I

    uint32_t const cps[1] = { 0x1d4d8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_101)
{
    // 1D4D9 ; [.1DB2.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL J

    uint32_t const cps[1] = { 0x1d4d9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_102)
{
    // 1D4DA ; [.1DCB.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL K

    uint32_t const cps[1] = { 0x1d4da };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_103)
{
    // 1D4DB ; [.1DDD.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL L

    uint32_t const cps[1] = { 0x1d4db };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_104)
{
    // 1D4DC ; [.1E10.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL M

    uint32_t const cps[1] = { 0x1d4dc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_105)
{
    // 1D4DD ; [.1E1F.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL N

    uint32_t const cps[1] = { 0x1d4dd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_106)
{
    // 1D4DE ; [.1E43.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL O

    uint32_t const cps[1] = { 0x1d4de };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_107)
{
    // 1D4DF ; [.1E72.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL P

    uint32_t const cps[1] = { 0x1d4df };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_108)
{
    // 1D4E0 ; [.1E87.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL Q

    uint32_t const cps[1] = { 0x1d4e0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_109)
{
    // 1D4E1 ; [.1E99.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL R

    uint32_t const cps[1] = { 0x1d4e1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_110)
{
    // 1D4E2 ; [.1ED7.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL S

    uint32_t const cps[1] = { 0x1d4e2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_111)
{
    // 1D4E3 ; [.1EFB.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL T

    uint32_t const cps[1] = { 0x1d4e3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_112)
{
    // 1D4E4 ; [.1F1B.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL U

    uint32_t const cps[1] = { 0x1d4e4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_113)
{
    // 1D4E5 ; [.1F49.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL V

    uint32_t const cps[1] = { 0x1d4e5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_114)
{
    // 1D4E6 ; [.1F5B.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL W

    uint32_t const cps[1] = { 0x1d4e6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_115)
{
    // 1D4E7 ; [.1F65.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL X

    uint32_t const cps[1] = { 0x1d4e7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_116)
{
    // 1D4E8 ; [.1F71.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL Y

    uint32_t const cps[1] = { 0x1d4e8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_117)
{
    // 1D4E9 ; [.1F87.0020.000B] 
    // MATHEMATICAL BOLD SCRIPT CAPITAL Z

    uint32_t const cps[1] = { 0x1d4e9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_118)
{
    // 1D4EA ; [.1CAD.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL A

    uint32_t const cps[1] = { 0x1d4ea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_119)
{
    // 1D4EB ; [.1CC6.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL B

    uint32_t const cps[1] = { 0x1d4eb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_120)
{
    // 1D4EC ; [.1CE0.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL C

    uint32_t const cps[1] = { 0x1d4ec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_121)
{
    // 1D4ED ; [.1CF5.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL D

    uint32_t const cps[1] = { 0x1d4ed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_122)
{
    // 1D4EE ; [.1D10.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL E

    uint32_t const cps[1] = { 0x1d4ee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_123)
{
    // 1D4EF ; [.1D4B.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL F

    uint32_t const cps[1] = { 0x1d4ef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_124)
{
    // 1D4F0 ; [.1D5A.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL G

    uint32_t const cps[1] = { 0x1d4f0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_125)
{
    // 1D4F1 ; [.1D7E.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL H

    uint32_t const cps[1] = { 0x1d4f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_126)
{
    // 1D4F2 ; [.1D98.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL I

    uint32_t const cps[1] = { 0x1d4f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_127)
{
    // 1D4F3 ; [.1DB2.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL J

    uint32_t const cps[1] = { 0x1d4f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_128)
{
    // 1D4F4 ; [.1DCB.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL K

    uint32_t const cps[1] = { 0x1d4f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_129)
{
    // 1D4F5 ; [.1DDD.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL L

    uint32_t const cps[1] = { 0x1d4f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_130)
{
    // 1D4F6 ; [.1E10.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL M

    uint32_t const cps[1] = { 0x1d4f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_131)
{
    // 1D4F7 ; [.1E1F.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL N

    uint32_t const cps[1] = { 0x1d4f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_132)
{
    // 1D4F8 ; [.1E43.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL O

    uint32_t const cps[1] = { 0x1d4f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_133)
{
    // 1D4F9 ; [.1E72.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL P

    uint32_t const cps[1] = { 0x1d4f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_134)
{
    // 1D4FA ; [.1E87.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL Q

    uint32_t const cps[1] = { 0x1d4fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_135)
{
    // 1D4FB ; [.1E99.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL R

    uint32_t const cps[1] = { 0x1d4fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_136)
{
    // 1D4FC ; [.1ED7.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL S

    uint32_t const cps[1] = { 0x1d4fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_137)
{
    // 1D4FD ; [.1EFB.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL T

    uint32_t const cps[1] = { 0x1d4fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_138)
{
    // 1D4FE ; [.1F1B.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL U

    uint32_t const cps[1] = { 0x1d4fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_139)
{
    // 1D4FF ; [.1F49.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL V

    uint32_t const cps[1] = { 0x1d4ff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_140)
{
    // 1D500 ; [.1F5B.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL W

    uint32_t const cps[1] = { 0x1d500 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_141)
{
    // 1D501 ; [.1F65.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL X

    uint32_t const cps[1] = { 0x1d501 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_142)
{
    // 1D502 ; [.1F71.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL Y

    uint32_t const cps[1] = { 0x1d502 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_143)
{
    // 1D503 ; [.1F87.0020.0005] 
    // MATHEMATICAL BOLD SCRIPT SMALL Z

    uint32_t const cps[1] = { 0x1d503 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_144)
{
    // 1D504 ; [.1CAD.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL A

    uint32_t const cps[1] = { 0x1d504 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_145)
{
    // 1D505 ; [.1CC6.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL B

    uint32_t const cps[1] = { 0x1d505 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_146)
{
    // 1D507 ; [.1CF5.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL D

    uint32_t const cps[1] = { 0x1d507 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_147)
{
    // 1D508 ; [.1D10.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL E

    uint32_t const cps[1] = { 0x1d508 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_148)
{
    // 1D509 ; [.1D4B.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL F

    uint32_t const cps[1] = { 0x1d509 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_176_149)
{
    // 1D50A ; [.1D5A.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL G

    uint32_t const cps[1] = { 0x1d50a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

