// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_162_000)
{
    // 129C 0041;	
    // (ኜ) ETHIOPIC SYLLABLE NYEE	[25B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129C, 0x0041 };
    uint32_t const ces[9] = { 0x25B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_001)
{
    // 129C 0062;	
    // (ኜ) ETHIOPIC SYLLABLE NYEE	[25B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129C, 0x0062 };
    uint32_t const ces[9] = { 0x25B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_002)
{
    // 129D 0021;	
    // (ኝ) ETHIOPIC SYLLABLE NYE	[25B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129D, 0x0021 };
    uint32_t const ces[9] = { 0x25B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_003)
{
    // 129D 003F;	
    // (ኝ) ETHIOPIC SYLLABLE NYE	[25B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129D, 0x003F };
    uint32_t const ces[9] = { 0x25B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_004)
{
    // 129D 0061;	
    // (ኝ) ETHIOPIC SYLLABLE NYE	[25B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129D, 0x0061 };
    uint32_t const ces[9] = { 0x25B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_005)
{
    // 129D 0041;	
    // (ኝ) ETHIOPIC SYLLABLE NYE	[25B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129D, 0x0041 };
    uint32_t const ces[9] = { 0x25B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_006)
{
    // 129D 0062;	
    // (ኝ) ETHIOPIC SYLLABLE NYE	[25B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129D, 0x0062 };
    uint32_t const ces[9] = { 0x25B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_007)
{
    // 129E 0021;	
    // (ኞ) ETHIOPIC SYLLABLE NYO	[25B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129E, 0x0021 };
    uint32_t const ces[9] = { 0x25B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_008)
{
    // 129E 003F;	
    // (ኞ) ETHIOPIC SYLLABLE NYO	[25B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129E, 0x003F };
    uint32_t const ces[9] = { 0x25B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_009)
{
    // 129E 0061;	
    // (ኞ) ETHIOPIC SYLLABLE NYO	[25B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129E, 0x0061 };
    uint32_t const ces[9] = { 0x25B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_010)
{
    // 129E 0041;	
    // (ኞ) ETHIOPIC SYLLABLE NYO	[25B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129E, 0x0041 };
    uint32_t const ces[9] = { 0x25B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_011)
{
    // 129E 0062;	
    // (ኞ) ETHIOPIC SYLLABLE NYO	[25B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129E, 0x0062 };
    uint32_t const ces[9] = { 0x25B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_012)
{
    // 129F 0021;	
    // (ኟ) ETHIOPIC SYLLABLE NYWA	[25B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129F, 0x0021 };
    uint32_t const ces[9] = { 0x25B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_013)
{
    // 129F 003F;	
    // (ኟ) ETHIOPIC SYLLABLE NYWA	[25B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129F, 0x003F };
    uint32_t const ces[9] = { 0x25B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_014)
{
    // 129F 0061;	
    // (ኟ) ETHIOPIC SYLLABLE NYWA	[25B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129F, 0x0061 };
    uint32_t const ces[9] = { 0x25B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_015)
{
    // 129F 0041;	
    // (ኟ) ETHIOPIC SYLLABLE NYWA	[25B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129F, 0x0041 };
    uint32_t const ces[9] = { 0x25B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_016)
{
    // 129F 0062;	
    // (ኟ) ETHIOPIC SYLLABLE NYWA	[25B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129F, 0x0062 };
    uint32_t const ces[9] = { 0x25B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_017)
{
    // 2D89 0021;	
    // (ⶉ) ETHIOPIC SYLLABLE NYOA	[25B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D89, 0x0021 };
    uint32_t const ces[9] = { 0x25B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_018)
{
    // 2D89 003F;	
    // (ⶉ) ETHIOPIC SYLLABLE NYOA	[25B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D89, 0x003F };
    uint32_t const ces[9] = { 0x25B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_019)
{
    // 2D89 0061;	
    // (ⶉ) ETHIOPIC SYLLABLE NYOA	[25B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D89, 0x0061 };
    uint32_t const ces[9] = { 0x25B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_020)
{
    // 2D89 0041;	
    // (ⶉ) ETHIOPIC SYLLABLE NYOA	[25B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D89, 0x0041 };
    uint32_t const ces[9] = { 0x25B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_021)
{
    // 2D89 0062;	
    // (ⶉ) ETHIOPIC SYLLABLE NYOA	[25B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D89, 0x0062 };
    uint32_t const ces[9] = { 0x25B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_022)
{
    // 12A0 0021;	
    // (አ) ETHIOPIC SYLLABLE GLOTTAL A	[25B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A0, 0x0021 };
    uint32_t const ces[9] = { 0x25B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_023)
{
    // 12A0 003F;	
    // (አ) ETHIOPIC SYLLABLE GLOTTAL A	[25B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A0, 0x003F };
    uint32_t const ces[9] = { 0x25B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_024)
{
    // 12A0 0061;	
    // (አ) ETHIOPIC SYLLABLE GLOTTAL A	[25B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A0, 0x0061 };
    uint32_t const ces[9] = { 0x25B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_025)
{
    // 12A0 0041;	
    // (አ) ETHIOPIC SYLLABLE GLOTTAL A	[25B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A0, 0x0041 };
    uint32_t const ces[9] = { 0x25B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_026)
{
    // 12A0 0062;	
    // (አ) ETHIOPIC SYLLABLE GLOTTAL A	[25B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A0, 0x0062 };
    uint32_t const ces[9] = { 0x25B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_027)
{
    // 12A1 0021;	
    // (ኡ) ETHIOPIC SYLLABLE GLOTTAL U	[25B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A1, 0x0021 };
    uint32_t const ces[9] = { 0x25B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_028)
{
    // 12A1 003F;	
    // (ኡ) ETHIOPIC SYLLABLE GLOTTAL U	[25B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A1, 0x003F };
    uint32_t const ces[9] = { 0x25B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_029)
{
    // 12A1 0061;	
    // (ኡ) ETHIOPIC SYLLABLE GLOTTAL U	[25B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A1, 0x0061 };
    uint32_t const ces[9] = { 0x25B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_030)
{
    // 12A1 0041;	
    // (ኡ) ETHIOPIC SYLLABLE GLOTTAL U	[25B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A1, 0x0041 };
    uint32_t const ces[9] = { 0x25B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_031)
{
    // 12A1 0062;	
    // (ኡ) ETHIOPIC SYLLABLE GLOTTAL U	[25B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A1, 0x0062 };
    uint32_t const ces[9] = { 0x25B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_032)
{
    // 12A2 0021;	
    // (ኢ) ETHIOPIC SYLLABLE GLOTTAL I	[25B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A2, 0x0021 };
    uint32_t const ces[9] = { 0x25B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_033)
{
    // 12A2 003F;	
    // (ኢ) ETHIOPIC SYLLABLE GLOTTAL I	[25B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A2, 0x003F };
    uint32_t const ces[9] = { 0x25B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_034)
{
    // 12A2 0061;	
    // (ኢ) ETHIOPIC SYLLABLE GLOTTAL I	[25B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A2, 0x0061 };
    uint32_t const ces[9] = { 0x25B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_035)
{
    // 12A2 0041;	
    // (ኢ) ETHIOPIC SYLLABLE GLOTTAL I	[25B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A2, 0x0041 };
    uint32_t const ces[9] = { 0x25B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_036)
{
    // 12A2 0062;	
    // (ኢ) ETHIOPIC SYLLABLE GLOTTAL I	[25B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A2, 0x0062 };
    uint32_t const ces[9] = { 0x25B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_037)
{
    // 12A3 0021;	
    // (ኣ) ETHIOPIC SYLLABLE GLOTTAL AA	[25B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A3, 0x0021 };
    uint32_t const ces[9] = { 0x25B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_038)
{
    // 12A3 003F;	
    // (ኣ) ETHIOPIC SYLLABLE GLOTTAL AA	[25B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A3, 0x003F };
    uint32_t const ces[9] = { 0x25B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_039)
{
    // 12A3 0061;	
    // (ኣ) ETHIOPIC SYLLABLE GLOTTAL AA	[25B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A3, 0x0061 };
    uint32_t const ces[9] = { 0x25B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_040)
{
    // 12A3 0041;	
    // (ኣ) ETHIOPIC SYLLABLE GLOTTAL AA	[25B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A3, 0x0041 };
    uint32_t const ces[9] = { 0x25B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_041)
{
    // 12A3 0062;	
    // (ኣ) ETHIOPIC SYLLABLE GLOTTAL AA	[25B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A3, 0x0062 };
    uint32_t const ces[9] = { 0x25B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_042)
{
    // 12A4 0021;	
    // (ኤ) ETHIOPIC SYLLABLE GLOTTAL EE	[25B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A4, 0x0021 };
    uint32_t const ces[9] = { 0x25B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_043)
{
    // 12A4 003F;	
    // (ኤ) ETHIOPIC SYLLABLE GLOTTAL EE	[25B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A4, 0x003F };
    uint32_t const ces[9] = { 0x25B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_044)
{
    // 12A4 0061;	
    // (ኤ) ETHIOPIC SYLLABLE GLOTTAL EE	[25B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A4, 0x0061 };
    uint32_t const ces[9] = { 0x25B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_045)
{
    // 12A4 0041;	
    // (ኤ) ETHIOPIC SYLLABLE GLOTTAL EE	[25B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A4, 0x0041 };
    uint32_t const ces[9] = { 0x25B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_046)
{
    // 12A4 0062;	
    // (ኤ) ETHIOPIC SYLLABLE GLOTTAL EE	[25B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A4, 0x0062 };
    uint32_t const ces[9] = { 0x25B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_047)
{
    // 12A5 0021;	
    // (እ) ETHIOPIC SYLLABLE GLOTTAL E	[25BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A5, 0x0021 };
    uint32_t const ces[9] = { 0x25BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_048)
{
    // 12A5 003F;	
    // (እ) ETHIOPIC SYLLABLE GLOTTAL E	[25BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A5, 0x003F };
    uint32_t const ces[9] = { 0x25BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_049)
{
    // 12A5 0061;	
    // (እ) ETHIOPIC SYLLABLE GLOTTAL E	[25BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A5, 0x0061 };
    uint32_t const ces[9] = { 0x25BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_050)
{
    // 12A5 0041;	
    // (እ) ETHIOPIC SYLLABLE GLOTTAL E	[25BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A5, 0x0041 };
    uint32_t const ces[9] = { 0x25BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_051)
{
    // 12A5 0062;	
    // (እ) ETHIOPIC SYLLABLE GLOTTAL E	[25BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A5, 0x0062 };
    uint32_t const ces[9] = { 0x25BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_052)
{
    // 12A6 0021;	
    // (ኦ) ETHIOPIC SYLLABLE GLOTTAL O	[25BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A6, 0x0021 };
    uint32_t const ces[9] = { 0x25BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_053)
{
    // 12A6 003F;	
    // (ኦ) ETHIOPIC SYLLABLE GLOTTAL O	[25BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A6, 0x003F };
    uint32_t const ces[9] = { 0x25BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_054)
{
    // 12A6 0061;	
    // (ኦ) ETHIOPIC SYLLABLE GLOTTAL O	[25BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A6, 0x0061 };
    uint32_t const ces[9] = { 0x25BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_055)
{
    // 12A6 0041;	
    // (ኦ) ETHIOPIC SYLLABLE GLOTTAL O	[25BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A6, 0x0041 };
    uint32_t const ces[9] = { 0x25BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_056)
{
    // 12A6 0062;	
    // (ኦ) ETHIOPIC SYLLABLE GLOTTAL O	[25BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A6, 0x0062 };
    uint32_t const ces[9] = { 0x25BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_057)
{
    // 12A7 0021;	
    // (ኧ) ETHIOPIC SYLLABLE GLOTTAL WA	[25BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A7, 0x0021 };
    uint32_t const ces[9] = { 0x25BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_058)
{
    // 12A7 003F;	
    // (ኧ) ETHIOPIC SYLLABLE GLOTTAL WA	[25BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A7, 0x003F };
    uint32_t const ces[9] = { 0x25BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_059)
{
    // 12A7 0061;	
    // (ኧ) ETHIOPIC SYLLABLE GLOTTAL WA	[25BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A7, 0x0061 };
    uint32_t const ces[9] = { 0x25BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_060)
{
    // 12A7 0041;	
    // (ኧ) ETHIOPIC SYLLABLE GLOTTAL WA	[25BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A7, 0x0041 };
    uint32_t const ces[9] = { 0x25BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_061)
{
    // 12A7 0062;	
    // (ኧ) ETHIOPIC SYLLABLE GLOTTAL WA	[25BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A7, 0x0062 };
    uint32_t const ces[9] = { 0x25BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_062)
{
    // 2D8A 0021;	
    // (ⶊ) ETHIOPIC SYLLABLE GLOTTAL OA	[25BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8A, 0x0021 };
    uint32_t const ces[9] = { 0x25BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_063)
{
    // 2D8A 003F;	
    // (ⶊ) ETHIOPIC SYLLABLE GLOTTAL OA	[25BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8A, 0x003F };
    uint32_t const ces[9] = { 0x25BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_064)
{
    // 2D8A 0061;	
    // (ⶊ) ETHIOPIC SYLLABLE GLOTTAL OA	[25BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8A, 0x0061 };
    uint32_t const ces[9] = { 0x25BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_065)
{
    // 2D8A 0041;	
    // (ⶊ) ETHIOPIC SYLLABLE GLOTTAL OA	[25BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8A, 0x0041 };
    uint32_t const ces[9] = { 0x25BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_066)
{
    // 2D8A 0062;	
    // (ⶊ) ETHIOPIC SYLLABLE GLOTTAL OA	[25BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8A, 0x0062 };
    uint32_t const ces[9] = { 0x25BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_067)
{
    // 12A8 0021;	
    // (ከ) ETHIOPIC SYLLABLE KA	[25BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A8, 0x0021 };
    uint32_t const ces[9] = { 0x25BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_068)
{
    // 12A8 003F;	
    // (ከ) ETHIOPIC SYLLABLE KA	[25BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A8, 0x003F };
    uint32_t const ces[9] = { 0x25BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_069)
{
    // 12A8 0061;	
    // (ከ) ETHIOPIC SYLLABLE KA	[25BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A8, 0x0061 };
    uint32_t const ces[9] = { 0x25BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_070)
{
    // 12A8 0041;	
    // (ከ) ETHIOPIC SYLLABLE KA	[25BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A8, 0x0041 };
    uint32_t const ces[9] = { 0x25BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_071)
{
    // 12A8 0062;	
    // (ከ) ETHIOPIC SYLLABLE KA	[25BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A8, 0x0062 };
    uint32_t const ces[9] = { 0x25BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_072)
{
    // 12A9 0021;	
    // (ኩ) ETHIOPIC SYLLABLE KU	[25BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A9, 0x0021 };
    uint32_t const ces[9] = { 0x25BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_073)
{
    // 12A9 003F;	
    // (ኩ) ETHIOPIC SYLLABLE KU	[25BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A9, 0x003F };
    uint32_t const ces[9] = { 0x25BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_074)
{
    // 12A9 0061;	
    // (ኩ) ETHIOPIC SYLLABLE KU	[25BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A9, 0x0061 };
    uint32_t const ces[9] = { 0x25BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_075)
{
    // 12A9 0041;	
    // (ኩ) ETHIOPIC SYLLABLE KU	[25BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12A9, 0x0041 };
    uint32_t const ces[9] = { 0x25BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_076)
{
    // 12A9 0062;	
    // (ኩ) ETHIOPIC SYLLABLE KU	[25BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12A9, 0x0062 };
    uint32_t const ces[9] = { 0x25BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_077)
{
    // 12AA 0021;	
    // (ኪ) ETHIOPIC SYLLABLE KI	[25C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AA, 0x0021 };
    uint32_t const ces[9] = { 0x25C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_078)
{
    // 12AA 003F;	
    // (ኪ) ETHIOPIC SYLLABLE KI	[25C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AA, 0x003F };
    uint32_t const ces[9] = { 0x25C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_079)
{
    // 12AA 0061;	
    // (ኪ) ETHIOPIC SYLLABLE KI	[25C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AA, 0x0061 };
    uint32_t const ces[9] = { 0x25C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_080)
{
    // 12AA 0041;	
    // (ኪ) ETHIOPIC SYLLABLE KI	[25C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AA, 0x0041 };
    uint32_t const ces[9] = { 0x25C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_081)
{
    // 12AA 0062;	
    // (ኪ) ETHIOPIC SYLLABLE KI	[25C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AA, 0x0062 };
    uint32_t const ces[9] = { 0x25C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_082)
{
    // 12AB 0021;	
    // (ካ) ETHIOPIC SYLLABLE KAA	[25C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AB, 0x0021 };
    uint32_t const ces[9] = { 0x25C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_083)
{
    // 12AB 003F;	
    // (ካ) ETHIOPIC SYLLABLE KAA	[25C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AB, 0x003F };
    uint32_t const ces[9] = { 0x25C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_084)
{
    // 12AB 0061;	
    // (ካ) ETHIOPIC SYLLABLE KAA	[25C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AB, 0x0061 };
    uint32_t const ces[9] = { 0x25C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_085)
{
    // 12AB 0041;	
    // (ካ) ETHIOPIC SYLLABLE KAA	[25C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AB, 0x0041 };
    uint32_t const ces[9] = { 0x25C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_086)
{
    // 12AB 0062;	
    // (ካ) ETHIOPIC SYLLABLE KAA	[25C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AB, 0x0062 };
    uint32_t const ces[9] = { 0x25C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_087)
{
    // 12AC 0021;	
    // (ኬ) ETHIOPIC SYLLABLE KEE	[25C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AC, 0x0021 };
    uint32_t const ces[9] = { 0x25C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_088)
{
    // 12AC 003F;	
    // (ኬ) ETHIOPIC SYLLABLE KEE	[25C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AC, 0x003F };
    uint32_t const ces[9] = { 0x25C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_089)
{
    // 12AC 0061;	
    // (ኬ) ETHIOPIC SYLLABLE KEE	[25C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AC, 0x0061 };
    uint32_t const ces[9] = { 0x25C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_090)
{
    // 12AC 0041;	
    // (ኬ) ETHIOPIC SYLLABLE KEE	[25C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AC, 0x0041 };
    uint32_t const ces[9] = { 0x25C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_091)
{
    // 12AC 0062;	
    // (ኬ) ETHIOPIC SYLLABLE KEE	[25C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AC, 0x0062 };
    uint32_t const ces[9] = { 0x25C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_092)
{
    // 12AD 0021;	
    // (ክ) ETHIOPIC SYLLABLE KE	[25C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AD, 0x0021 };
    uint32_t const ces[9] = { 0x25C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_093)
{
    // 12AD 003F;	
    // (ክ) ETHIOPIC SYLLABLE KE	[25C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AD, 0x003F };
    uint32_t const ces[9] = { 0x25C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_094)
{
    // 12AD 0061;	
    // (ክ) ETHIOPIC SYLLABLE KE	[25C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AD, 0x0061 };
    uint32_t const ces[9] = { 0x25C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_095)
{
    // 12AD 0041;	
    // (ክ) ETHIOPIC SYLLABLE KE	[25C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AD, 0x0041 };
    uint32_t const ces[9] = { 0x25C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_096)
{
    // 12AD 0062;	
    // (ክ) ETHIOPIC SYLLABLE KE	[25C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AD, 0x0062 };
    uint32_t const ces[9] = { 0x25C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_097)
{
    // 12AE 0021;	
    // (ኮ) ETHIOPIC SYLLABLE KO	[25C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AE, 0x0021 };
    uint32_t const ces[9] = { 0x25C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_098)
{
    // 12AE 003F;	
    // (ኮ) ETHIOPIC SYLLABLE KO	[25C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AE, 0x003F };
    uint32_t const ces[9] = { 0x25C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_099)
{
    // 12AE 0061;	
    // (ኮ) ETHIOPIC SYLLABLE KO	[25C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AE, 0x0061 };
    uint32_t const ces[9] = { 0x25C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_100)
{
    // 12AE 0041;	
    // (ኮ) ETHIOPIC SYLLABLE KO	[25C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AE, 0x0041 };
    uint32_t const ces[9] = { 0x25C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_101)
{
    // 12AE 0062;	
    // (ኮ) ETHIOPIC SYLLABLE KO	[25C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AE, 0x0062 };
    uint32_t const ces[9] = { 0x25C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_102)
{
    // 12AF 0021;	
    // (ኯ) ETHIOPIC SYLLABLE KOA	[25C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AF, 0x0021 };
    uint32_t const ces[9] = { 0x25C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_103)
{
    // 12AF 003F;	
    // (ኯ) ETHIOPIC SYLLABLE KOA	[25C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AF, 0x003F };
    uint32_t const ces[9] = { 0x25C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_104)
{
    // 12AF 0061;	
    // (ኯ) ETHIOPIC SYLLABLE KOA	[25C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AF, 0x0061 };
    uint32_t const ces[9] = { 0x25C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_105)
{
    // 12AF 0041;	
    // (ኯ) ETHIOPIC SYLLABLE KOA	[25C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12AF, 0x0041 };
    uint32_t const ces[9] = { 0x25C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_106)
{
    // 12AF 0062;	
    // (ኯ) ETHIOPIC SYLLABLE KOA	[25C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12AF, 0x0062 };
    uint32_t const ces[9] = { 0x25C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_107)
{
    // 12B0 0021;	
    // (ኰ) ETHIOPIC SYLLABLE KWA	[25C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B0, 0x0021 };
    uint32_t const ces[9] = { 0x25C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_108)
{
    // 12B0 003F;	
    // (ኰ) ETHIOPIC SYLLABLE KWA	[25C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B0, 0x003F };
    uint32_t const ces[9] = { 0x25C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_109)
{
    // 12B0 0061;	
    // (ኰ) ETHIOPIC SYLLABLE KWA	[25C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B0, 0x0061 };
    uint32_t const ces[9] = { 0x25C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_110)
{
    // 12B0 0041;	
    // (ኰ) ETHIOPIC SYLLABLE KWA	[25C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B0, 0x0041 };
    uint32_t const ces[9] = { 0x25C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_111)
{
    // 12B0 0062;	
    // (ኰ) ETHIOPIC SYLLABLE KWA	[25C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B0, 0x0062 };
    uint32_t const ces[9] = { 0x25C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_112)
{
    // 12B2 0021;	
    // (ኲ) ETHIOPIC SYLLABLE KWI	[25C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B2, 0x0021 };
    uint32_t const ces[9] = { 0x25C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_113)
{
    // 12B2 003F;	
    // (ኲ) ETHIOPIC SYLLABLE KWI	[25C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B2, 0x003F };
    uint32_t const ces[9] = { 0x25C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_114)
{
    // 12B2 0061;	
    // (ኲ) ETHIOPIC SYLLABLE KWI	[25C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B2, 0x0061 };
    uint32_t const ces[9] = { 0x25C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_115)
{
    // 12B2 0041;	
    // (ኲ) ETHIOPIC SYLLABLE KWI	[25C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B2, 0x0041 };
    uint32_t const ces[9] = { 0x25C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_116)
{
    // 12B2 0062;	
    // (ኲ) ETHIOPIC SYLLABLE KWI	[25C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B2, 0x0062 };
    uint32_t const ces[9] = { 0x25C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_117)
{
    // 12B3 0021;	
    // (ኳ) ETHIOPIC SYLLABLE KWAA	[25C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B3, 0x0021 };
    uint32_t const ces[9] = { 0x25C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_118)
{
    // 12B3 003F;	
    // (ኳ) ETHIOPIC SYLLABLE KWAA	[25C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B3, 0x003F };
    uint32_t const ces[9] = { 0x25C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_119)
{
    // 12B3 0061;	
    // (ኳ) ETHIOPIC SYLLABLE KWAA	[25C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B3, 0x0061 };
    uint32_t const ces[9] = { 0x25C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_120)
{
    // 12B3 0041;	
    // (ኳ) ETHIOPIC SYLLABLE KWAA	[25C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B3, 0x0041 };
    uint32_t const ces[9] = { 0x25C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_121)
{
    // 12B3 0062;	
    // (ኳ) ETHIOPIC SYLLABLE KWAA	[25C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B3, 0x0062 };
    uint32_t const ces[9] = { 0x25C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_122)
{
    // 12B4 0021;	
    // (ኴ) ETHIOPIC SYLLABLE KWEE	[25C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B4, 0x0021 };
    uint32_t const ces[9] = { 0x25C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_123)
{
    // 12B4 003F;	
    // (ኴ) ETHIOPIC SYLLABLE KWEE	[25C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B4, 0x003F };
    uint32_t const ces[9] = { 0x25C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_124)
{
    // 12B4 0061;	
    // (ኴ) ETHIOPIC SYLLABLE KWEE	[25C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B4, 0x0061 };
    uint32_t const ces[9] = { 0x25C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_125)
{
    // 12B4 0041;	
    // (ኴ) ETHIOPIC SYLLABLE KWEE	[25C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B4, 0x0041 };
    uint32_t const ces[9] = { 0x25C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_126)
{
    // 12B4 0062;	
    // (ኴ) ETHIOPIC SYLLABLE KWEE	[25C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B4, 0x0062 };
    uint32_t const ces[9] = { 0x25C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_127)
{
    // 12B5 0021;	
    // (ኵ) ETHIOPIC SYLLABLE KWE	[25CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B5, 0x0021 };
    uint32_t const ces[9] = { 0x25CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_128)
{
    // 12B5 003F;	
    // (ኵ) ETHIOPIC SYLLABLE KWE	[25CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B5, 0x003F };
    uint32_t const ces[9] = { 0x25CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_129)
{
    // 12B5 0061;	
    // (ኵ) ETHIOPIC SYLLABLE KWE	[25CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B5, 0x0061 };
    uint32_t const ces[9] = { 0x25CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_130)
{
    // 12B5 0041;	
    // (ኵ) ETHIOPIC SYLLABLE KWE	[25CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B5, 0x0041 };
    uint32_t const ces[9] = { 0x25CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_131)
{
    // 12B5 0062;	
    // (ኵ) ETHIOPIC SYLLABLE KWE	[25CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B5, 0x0062 };
    uint32_t const ces[9] = { 0x25CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_132)
{
    // 12B8 0021;	
    // (ኸ) ETHIOPIC SYLLABLE KXA	[25CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B8, 0x0021 };
    uint32_t const ces[9] = { 0x25CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_133)
{
    // 12B8 003F;	
    // (ኸ) ETHIOPIC SYLLABLE KXA	[25CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B8, 0x003F };
    uint32_t const ces[9] = { 0x25CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_134)
{
    // 12B8 0061;	
    // (ኸ) ETHIOPIC SYLLABLE KXA	[25CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B8, 0x0061 };
    uint32_t const ces[9] = { 0x25CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_135)
{
    // 12B8 0041;	
    // (ኸ) ETHIOPIC SYLLABLE KXA	[25CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B8, 0x0041 };
    uint32_t const ces[9] = { 0x25CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_136)
{
    // 12B8 0062;	
    // (ኸ) ETHIOPIC SYLLABLE KXA	[25CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B8, 0x0062 };
    uint32_t const ces[9] = { 0x25CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_137)
{
    // 12B9 0021;	
    // (ኹ) ETHIOPIC SYLLABLE KXU	[25CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B9, 0x0021 };
    uint32_t const ces[9] = { 0x25CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_138)
{
    // 12B9 003F;	
    // (ኹ) ETHIOPIC SYLLABLE KXU	[25CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B9, 0x003F };
    uint32_t const ces[9] = { 0x25CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_139)
{
    // 12B9 0061;	
    // (ኹ) ETHIOPIC SYLLABLE KXU	[25CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B9, 0x0061 };
    uint32_t const ces[9] = { 0x25CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_140)
{
    // 12B9 0041;	
    // (ኹ) ETHIOPIC SYLLABLE KXU	[25CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12B9, 0x0041 };
    uint32_t const ces[9] = { 0x25CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_141)
{
    // 12B9 0062;	
    // (ኹ) ETHIOPIC SYLLABLE KXU	[25CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12B9, 0x0062 };
    uint32_t const ces[9] = { 0x25CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_142)
{
    // 12BA 0021;	
    // (ኺ) ETHIOPIC SYLLABLE KXI	[25CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BA, 0x0021 };
    uint32_t const ces[9] = { 0x25CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_143)
{
    // 12BA 003F;	
    // (ኺ) ETHIOPIC SYLLABLE KXI	[25CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BA, 0x003F };
    uint32_t const ces[9] = { 0x25CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_144)
{
    // 12BA 0061;	
    // (ኺ) ETHIOPIC SYLLABLE KXI	[25CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BA, 0x0061 };
    uint32_t const ces[9] = { 0x25CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_145)
{
    // 12BA 0041;	
    // (ኺ) ETHIOPIC SYLLABLE KXI	[25CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12BA, 0x0041 };
    uint32_t const ces[9] = { 0x25CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_146)
{
    // 12BA 0062;	
    // (ኺ) ETHIOPIC SYLLABLE KXI	[25CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BA, 0x0062 };
    uint32_t const ces[9] = { 0x25CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_147)
{
    // 12BB 0021;	
    // (ኻ) ETHIOPIC SYLLABLE KXAA	[25CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BB, 0x0021 };
    uint32_t const ces[9] = { 0x25CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_148)
{
    // 12BB 003F;	
    // (ኻ) ETHIOPIC SYLLABLE KXAA	[25CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BB, 0x003F };
    uint32_t const ces[9] = { 0x25CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_149)
{
    // 12BB 0061;	
    // (ኻ) ETHIOPIC SYLLABLE KXAA	[25CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BB, 0x0061 };
    uint32_t const ces[9] = { 0x25CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_150)
{
    // 12BB 0041;	
    // (ኻ) ETHIOPIC SYLLABLE KXAA	[25CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12BB, 0x0041 };
    uint32_t const ces[9] = { 0x25CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_151)
{
    // 12BB 0062;	
    // (ኻ) ETHIOPIC SYLLABLE KXAA	[25CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BB, 0x0062 };
    uint32_t const ces[9] = { 0x25CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_152)
{
    // 12BC 0021;	
    // (ኼ) ETHIOPIC SYLLABLE KXEE	[25CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BC, 0x0021 };
    uint32_t const ces[9] = { 0x25CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_153)
{
    // 12BC 003F;	
    // (ኼ) ETHIOPIC SYLLABLE KXEE	[25CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BC, 0x003F };
    uint32_t const ces[9] = { 0x25CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_154)
{
    // 12BC 0061;	
    // (ኼ) ETHIOPIC SYLLABLE KXEE	[25CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BC, 0x0061 };
    uint32_t const ces[9] = { 0x25CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_155)
{
    // 12BC 0041;	
    // (ኼ) ETHIOPIC SYLLABLE KXEE	[25CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12BC, 0x0041 };
    uint32_t const ces[9] = { 0x25CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_156)
{
    // 12BC 0062;	
    // (ኼ) ETHIOPIC SYLLABLE KXEE	[25CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BC, 0x0062 };
    uint32_t const ces[9] = { 0x25CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_157)
{
    // 12BD 0021;	
    // (ኽ) ETHIOPIC SYLLABLE KXE	[25D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BD, 0x0021 };
    uint32_t const ces[9] = { 0x25D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_158)
{
    // 12BD 003F;	
    // (ኽ) ETHIOPIC SYLLABLE KXE	[25D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BD, 0x003F };
    uint32_t const ces[9] = { 0x25D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_159)
{
    // 12BD 0061;	
    // (ኽ) ETHIOPIC SYLLABLE KXE	[25D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BD, 0x0061 };
    uint32_t const ces[9] = { 0x25D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_160)
{
    // 12BD 0041;	
    // (ኽ) ETHIOPIC SYLLABLE KXE	[25D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12BD, 0x0041 };
    uint32_t const ces[9] = { 0x25D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_161)
{
    // 12BD 0062;	
    // (ኽ) ETHIOPIC SYLLABLE KXE	[25D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BD, 0x0062 };
    uint32_t const ces[9] = { 0x25D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_162)
{
    // 12BE 0021;	
    // (ኾ) ETHIOPIC SYLLABLE KXO	[25D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BE, 0x0021 };
    uint32_t const ces[9] = { 0x25D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_163)
{
    // 12BE 003F;	
    // (ኾ) ETHIOPIC SYLLABLE KXO	[25D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BE, 0x003F };
    uint32_t const ces[9] = { 0x25D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_164)
{
    // 12BE 0061;	
    // (ኾ) ETHIOPIC SYLLABLE KXO	[25D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BE, 0x0061 };
    uint32_t const ces[9] = { 0x25D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_165)
{
    // 12BE 0041;	
    // (ኾ) ETHIOPIC SYLLABLE KXO	[25D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12BE, 0x0041 };
    uint32_t const ces[9] = { 0x25D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_166)
{
    // 12BE 0062;	
    // (ኾ) ETHIOPIC SYLLABLE KXO	[25D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12BE, 0x0062 };
    uint32_t const ces[9] = { 0x25D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_167)
{
    // 12C0 0021;	
    // (ዀ) ETHIOPIC SYLLABLE KXWA	[25D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C0, 0x0021 };
    uint32_t const ces[9] = { 0x25D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_168)
{
    // 12C0 003F;	
    // (ዀ) ETHIOPIC SYLLABLE KXWA	[25D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C0, 0x003F };
    uint32_t const ces[9] = { 0x25D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_169)
{
    // 12C0 0061;	
    // (ዀ) ETHIOPIC SYLLABLE KXWA	[25D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C0, 0x0061 };
    uint32_t const ces[9] = { 0x25D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_170)
{
    // 12C0 0041;	
    // (ዀ) ETHIOPIC SYLLABLE KXWA	[25D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C0, 0x0041 };
    uint32_t const ces[9] = { 0x25D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_171)
{
    // 12C0 0062;	
    // (ዀ) ETHIOPIC SYLLABLE KXWA	[25D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C0, 0x0062 };
    uint32_t const ces[9] = { 0x25D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_172)
{
    // 12C2 0021;	
    // (ዂ) ETHIOPIC SYLLABLE KXWI	[25D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C2, 0x0021 };
    uint32_t const ces[9] = { 0x25D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_173)
{
    // 12C2 003F;	
    // (ዂ) ETHIOPIC SYLLABLE KXWI	[25D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C2, 0x003F };
    uint32_t const ces[9] = { 0x25D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_174)
{
    // 12C2 0061;	
    // (ዂ) ETHIOPIC SYLLABLE KXWI	[25D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C2, 0x0061 };
    uint32_t const ces[9] = { 0x25D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_175)
{
    // 12C2 0041;	
    // (ዂ) ETHIOPIC SYLLABLE KXWI	[25D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C2, 0x0041 };
    uint32_t const ces[9] = { 0x25D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_176)
{
    // 12C2 0062;	
    // (ዂ) ETHIOPIC SYLLABLE KXWI	[25D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C2, 0x0062 };
    uint32_t const ces[9] = { 0x25D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_177)
{
    // 12C3 0021;	
    // (ዃ) ETHIOPIC SYLLABLE KXWAA	[25D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C3, 0x0021 };
    uint32_t const ces[9] = { 0x25D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_178)
{
    // 12C3 003F;	
    // (ዃ) ETHIOPIC SYLLABLE KXWAA	[25D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C3, 0x003F };
    uint32_t const ces[9] = { 0x25D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_179)
{
    // 12C3 0061;	
    // (ዃ) ETHIOPIC SYLLABLE KXWAA	[25D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C3, 0x0061 };
    uint32_t const ces[9] = { 0x25D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_180)
{
    // 12C3 0041;	
    // (ዃ) ETHIOPIC SYLLABLE KXWAA	[25D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C3, 0x0041 };
    uint32_t const ces[9] = { 0x25D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_181)
{
    // 12C3 0062;	
    // (ዃ) ETHIOPIC SYLLABLE KXWAA	[25D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C3, 0x0062 };
    uint32_t const ces[9] = { 0x25D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_182)
{
    // 12C4 0021;	
    // (ዄ) ETHIOPIC SYLLABLE KXWEE	[25D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C4, 0x0021 };
    uint32_t const ces[9] = { 0x25D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_183)
{
    // 12C4 003F;	
    // (ዄ) ETHIOPIC SYLLABLE KXWEE	[25D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C4, 0x003F };
    uint32_t const ces[9] = { 0x25D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_184)
{
    // 12C4 0061;	
    // (ዄ) ETHIOPIC SYLLABLE KXWEE	[25D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C4, 0x0061 };
    uint32_t const ces[9] = { 0x25D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_185)
{
    // 12C4 0041;	
    // (ዄ) ETHIOPIC SYLLABLE KXWEE	[25D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C4, 0x0041 };
    uint32_t const ces[9] = { 0x25D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_186)
{
    // 12C4 0062;	
    // (ዄ) ETHIOPIC SYLLABLE KXWEE	[25D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C4, 0x0062 };
    uint32_t const ces[9] = { 0x25D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_187)
{
    // 12C5 0021;	
    // (ዅ) ETHIOPIC SYLLABLE KXWE	[25D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C5, 0x0021 };
    uint32_t const ces[9] = { 0x25D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_188)
{
    // 12C5 003F;	
    // (ዅ) ETHIOPIC SYLLABLE KXWE	[25D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C5, 0x003F };
    uint32_t const ces[9] = { 0x25D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_189)
{
    // 12C5 0061;	
    // (ዅ) ETHIOPIC SYLLABLE KXWE	[25D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C5, 0x0061 };
    uint32_t const ces[9] = { 0x25D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_190)
{
    // 12C5 0041;	
    // (ዅ) ETHIOPIC SYLLABLE KXWE	[25D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C5, 0x0041 };
    uint32_t const ces[9] = { 0x25D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_191)
{
    // 12C5 0062;	
    // (ዅ) ETHIOPIC SYLLABLE KXWE	[25D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C5, 0x0062 };
    uint32_t const ces[9] = { 0x25D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_192)
{
    // 12C8 0021;	
    // (ወ) ETHIOPIC SYLLABLE WA	[25D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C8, 0x0021 };
    uint32_t const ces[9] = { 0x25D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_193)
{
    // 12C8 003F;	
    // (ወ) ETHIOPIC SYLLABLE WA	[25D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C8, 0x003F };
    uint32_t const ces[9] = { 0x25D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_194)
{
    // 12C8 0061;	
    // (ወ) ETHIOPIC SYLLABLE WA	[25D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C8, 0x0061 };
    uint32_t const ces[9] = { 0x25D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_195)
{
    // 12C8 0041;	
    // (ወ) ETHIOPIC SYLLABLE WA	[25D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C8, 0x0041 };
    uint32_t const ces[9] = { 0x25D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_196)
{
    // 12C8 0062;	
    // (ወ) ETHIOPIC SYLLABLE WA	[25D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C8, 0x0062 };
    uint32_t const ces[9] = { 0x25D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_197)
{
    // 12C9 0021;	
    // (ዉ) ETHIOPIC SYLLABLE WU	[25D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C9, 0x0021 };
    uint32_t const ces[9] = { 0x25D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_198)
{
    // 12C9 003F;	
    // (ዉ) ETHIOPIC SYLLABLE WU	[25D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C9, 0x003F };
    uint32_t const ces[9] = { 0x25D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_199)
{
    // 12C9 0061;	
    // (ዉ) ETHIOPIC SYLLABLE WU	[25D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C9, 0x0061 };
    uint32_t const ces[9] = { 0x25D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_200)
{
    // 12C9 0041;	
    // (ዉ) ETHIOPIC SYLLABLE WU	[25D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12C9, 0x0041 };
    uint32_t const ces[9] = { 0x25D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_201)
{
    // 12C9 0062;	
    // (ዉ) ETHIOPIC SYLLABLE WU	[25D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12C9, 0x0062 };
    uint32_t const ces[9] = { 0x25D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_202)
{
    // 12CA 0021;	
    // (ዊ) ETHIOPIC SYLLABLE WI	[25D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CA, 0x0021 };
    uint32_t const ces[9] = { 0x25D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_203)
{
    // 12CA 003F;	
    // (ዊ) ETHIOPIC SYLLABLE WI	[25D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CA, 0x003F };
    uint32_t const ces[9] = { 0x25D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_204)
{
    // 12CA 0061;	
    // (ዊ) ETHIOPIC SYLLABLE WI	[25D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CA, 0x0061 };
    uint32_t const ces[9] = { 0x25D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_205)
{
    // 12CA 0041;	
    // (ዊ) ETHIOPIC SYLLABLE WI	[25D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CA, 0x0041 };
    uint32_t const ces[9] = { 0x25D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_206)
{
    // 12CA 0062;	
    // (ዊ) ETHIOPIC SYLLABLE WI	[25D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CA, 0x0062 };
    uint32_t const ces[9] = { 0x25D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_207)
{
    // 12CB 0021;	
    // (ዋ) ETHIOPIC SYLLABLE WAA	[25DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CB, 0x0021 };
    uint32_t const ces[9] = { 0x25DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_208)
{
    // 12CB 003F;	
    // (ዋ) ETHIOPIC SYLLABLE WAA	[25DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CB, 0x003F };
    uint32_t const ces[9] = { 0x25DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_209)
{
    // 12CB 0061;	
    // (ዋ) ETHIOPIC SYLLABLE WAA	[25DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CB, 0x0061 };
    uint32_t const ces[9] = { 0x25DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_210)
{
    // 12CB 0041;	
    // (ዋ) ETHIOPIC SYLLABLE WAA	[25DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CB, 0x0041 };
    uint32_t const ces[9] = { 0x25DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_211)
{
    // 12CB 0062;	
    // (ዋ) ETHIOPIC SYLLABLE WAA	[25DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CB, 0x0062 };
    uint32_t const ces[9] = { 0x25DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_212)
{
    // 12CC 0021;	
    // (ዌ) ETHIOPIC SYLLABLE WEE	[25DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CC, 0x0021 };
    uint32_t const ces[9] = { 0x25DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_213)
{
    // 12CC 003F;	
    // (ዌ) ETHIOPIC SYLLABLE WEE	[25DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CC, 0x003F };
    uint32_t const ces[9] = { 0x25DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_214)
{
    // 12CC 0061;	
    // (ዌ) ETHIOPIC SYLLABLE WEE	[25DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CC, 0x0061 };
    uint32_t const ces[9] = { 0x25DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_215)
{
    // 12CC 0041;	
    // (ዌ) ETHIOPIC SYLLABLE WEE	[25DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CC, 0x0041 };
    uint32_t const ces[9] = { 0x25DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_216)
{
    // 12CC 0062;	
    // (ዌ) ETHIOPIC SYLLABLE WEE	[25DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CC, 0x0062 };
    uint32_t const ces[9] = { 0x25DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_217)
{
    // 12CD 0021;	
    // (ው) ETHIOPIC SYLLABLE WE	[25DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CD, 0x0021 };
    uint32_t const ces[9] = { 0x25DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_218)
{
    // 12CD 003F;	
    // (ው) ETHIOPIC SYLLABLE WE	[25DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CD, 0x003F };
    uint32_t const ces[9] = { 0x25DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_219)
{
    // 12CD 0061;	
    // (ው) ETHIOPIC SYLLABLE WE	[25DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CD, 0x0061 };
    uint32_t const ces[9] = { 0x25DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_220)
{
    // 12CD 0041;	
    // (ው) ETHIOPIC SYLLABLE WE	[25DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CD, 0x0041 };
    uint32_t const ces[9] = { 0x25DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_221)
{
    // 12CD 0062;	
    // (ው) ETHIOPIC SYLLABLE WE	[25DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CD, 0x0062 };
    uint32_t const ces[9] = { 0x25DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_222)
{
    // 12CE 0021;	
    // (ዎ) ETHIOPIC SYLLABLE WO	[25DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CE, 0x0021 };
    uint32_t const ces[9] = { 0x25DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_223)
{
    // 12CE 003F;	
    // (ዎ) ETHIOPIC SYLLABLE WO	[25DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CE, 0x003F };
    uint32_t const ces[9] = { 0x25DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_224)
{
    // 12CE 0061;	
    // (ዎ) ETHIOPIC SYLLABLE WO	[25DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CE, 0x0061 };
    uint32_t const ces[9] = { 0x25DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_225)
{
    // 12CE 0041;	
    // (ዎ) ETHIOPIC SYLLABLE WO	[25DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CE, 0x0041 };
    uint32_t const ces[9] = { 0x25DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_226)
{
    // 12CE 0062;	
    // (ዎ) ETHIOPIC SYLLABLE WO	[25DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CE, 0x0062 };
    uint32_t const ces[9] = { 0x25DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_227)
{
    // 12CF 0021;	
    // (ዏ) ETHIOPIC SYLLABLE WOA	[25DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CF, 0x0021 };
    uint32_t const ces[9] = { 0x25DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_228)
{
    // 12CF 003F;	
    // (ዏ) ETHIOPIC SYLLABLE WOA	[25DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CF, 0x003F };
    uint32_t const ces[9] = { 0x25DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_229)
{
    // 12CF 0061;	
    // (ዏ) ETHIOPIC SYLLABLE WOA	[25DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CF, 0x0061 };
    uint32_t const ces[9] = { 0x25DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_230)
{
    // 12CF 0041;	
    // (ዏ) ETHIOPIC SYLLABLE WOA	[25DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12CF, 0x0041 };
    uint32_t const ces[9] = { 0x25DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_231)
{
    // 12CF 0062;	
    // (ዏ) ETHIOPIC SYLLABLE WOA	[25DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12CF, 0x0062 };
    uint32_t const ces[9] = { 0x25DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_232)
{
    // 12D0 0021;	
    // (ዐ) ETHIOPIC SYLLABLE PHARYNGEAL A	[25DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D0, 0x0021 };
    uint32_t const ces[9] = { 0x25DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_233)
{
    // 12D0 003F;	
    // (ዐ) ETHIOPIC SYLLABLE PHARYNGEAL A	[25DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D0, 0x003F };
    uint32_t const ces[9] = { 0x25DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_234)
{
    // 12D0 0061;	
    // (ዐ) ETHIOPIC SYLLABLE PHARYNGEAL A	[25DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D0, 0x0061 };
    uint32_t const ces[9] = { 0x25DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_235)
{
    // 12D0 0041;	
    // (ዐ) ETHIOPIC SYLLABLE PHARYNGEAL A	[25DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D0, 0x0041 };
    uint32_t const ces[9] = { 0x25DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_236)
{
    // 12D0 0062;	
    // (ዐ) ETHIOPIC SYLLABLE PHARYNGEAL A	[25DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D0, 0x0062 };
    uint32_t const ces[9] = { 0x25DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_237)
{
    // 12D1 0021;	
    // (ዑ) ETHIOPIC SYLLABLE PHARYNGEAL U	[25E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D1, 0x0021 };
    uint32_t const ces[9] = { 0x25E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_238)
{
    // 12D1 003F;	
    // (ዑ) ETHIOPIC SYLLABLE PHARYNGEAL U	[25E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D1, 0x003F };
    uint32_t const ces[9] = { 0x25E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_239)
{
    // 12D1 0061;	
    // (ዑ) ETHIOPIC SYLLABLE PHARYNGEAL U	[25E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D1, 0x0061 };
    uint32_t const ces[9] = { 0x25E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_240)
{
    // 12D1 0041;	
    // (ዑ) ETHIOPIC SYLLABLE PHARYNGEAL U	[25E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D1, 0x0041 };
    uint32_t const ces[9] = { 0x25E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_241)
{
    // 12D1 0062;	
    // (ዑ) ETHIOPIC SYLLABLE PHARYNGEAL U	[25E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D1, 0x0062 };
    uint32_t const ces[9] = { 0x25E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_242)
{
    // 12D2 0021;	
    // (ዒ) ETHIOPIC SYLLABLE PHARYNGEAL I	[25E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D2, 0x0021 };
    uint32_t const ces[9] = { 0x25E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_243)
{
    // 12D2 003F;	
    // (ዒ) ETHIOPIC SYLLABLE PHARYNGEAL I	[25E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D2, 0x003F };
    uint32_t const ces[9] = { 0x25E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_244)
{
    // 12D2 0061;	
    // (ዒ) ETHIOPIC SYLLABLE PHARYNGEAL I	[25E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D2, 0x0061 };
    uint32_t const ces[9] = { 0x25E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_245)
{
    // 12D2 0041;	
    // (ዒ) ETHIOPIC SYLLABLE PHARYNGEAL I	[25E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D2, 0x0041 };
    uint32_t const ces[9] = { 0x25E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_246)
{
    // 12D2 0062;	
    // (ዒ) ETHIOPIC SYLLABLE PHARYNGEAL I	[25E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D2, 0x0062 };
    uint32_t const ces[9] = { 0x25E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_247)
{
    // 12D3 0021;	
    // (ዓ) ETHIOPIC SYLLABLE PHARYNGEAL AA	[25E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D3, 0x0021 };
    uint32_t const ces[9] = { 0x25E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_248)
{
    // 12D3 003F;	
    // (ዓ) ETHIOPIC SYLLABLE PHARYNGEAL AA	[25E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D3, 0x003F };
    uint32_t const ces[9] = { 0x25E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_249)
{
    // 12D3 0061;	
    // (ዓ) ETHIOPIC SYLLABLE PHARYNGEAL AA	[25E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D3, 0x0061 };
    uint32_t const ces[9] = { 0x25E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_250)
{
    // 12D3 0041;	
    // (ዓ) ETHIOPIC SYLLABLE PHARYNGEAL AA	[25E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D3, 0x0041 };
    uint32_t const ces[9] = { 0x25E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_251)
{
    // 12D3 0062;	
    // (ዓ) ETHIOPIC SYLLABLE PHARYNGEAL AA	[25E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D3, 0x0062 };
    uint32_t const ces[9] = { 0x25E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_252)
{
    // 12D4 0021;	
    // (ዔ) ETHIOPIC SYLLABLE PHARYNGEAL EE	[25E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D4, 0x0021 };
    uint32_t const ces[9] = { 0x25E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_253)
{
    // 12D4 003F;	
    // (ዔ) ETHIOPIC SYLLABLE PHARYNGEAL EE	[25E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D4, 0x003F };
    uint32_t const ces[9] = { 0x25E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_254)
{
    // 12D4 0061;	
    // (ዔ) ETHIOPIC SYLLABLE PHARYNGEAL EE	[25E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D4, 0x0061 };
    uint32_t const ces[9] = { 0x25E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_255)
{
    // 12D4 0041;	
    // (ዔ) ETHIOPIC SYLLABLE PHARYNGEAL EE	[25E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D4, 0x0041 };
    uint32_t const ces[9] = { 0x25E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_256)
{
    // 12D4 0062;	
    // (ዔ) ETHIOPIC SYLLABLE PHARYNGEAL EE	[25E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D4, 0x0062 };
    uint32_t const ces[9] = { 0x25E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_257)
{
    // 12D5 0021;	
    // (ዕ) ETHIOPIC SYLLABLE PHARYNGEAL E	[25E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D5, 0x0021 };
    uint32_t const ces[9] = { 0x25E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_258)
{
    // 12D5 003F;	
    // (ዕ) ETHIOPIC SYLLABLE PHARYNGEAL E	[25E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D5, 0x003F };
    uint32_t const ces[9] = { 0x25E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_259)
{
    // 12D5 0061;	
    // (ዕ) ETHIOPIC SYLLABLE PHARYNGEAL E	[25E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D5, 0x0061 };
    uint32_t const ces[9] = { 0x25E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_260)
{
    // 12D5 0041;	
    // (ዕ) ETHIOPIC SYLLABLE PHARYNGEAL E	[25E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D5, 0x0041 };
    uint32_t const ces[9] = { 0x25E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_261)
{
    // 12D5 0062;	
    // (ዕ) ETHIOPIC SYLLABLE PHARYNGEAL E	[25E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D5, 0x0062 };
    uint32_t const ces[9] = { 0x25E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_262)
{
    // 12D6 0021;	
    // (ዖ) ETHIOPIC SYLLABLE PHARYNGEAL O	[25E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D6, 0x0021 };
    uint32_t const ces[9] = { 0x25E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_263)
{
    // 12D6 003F;	
    // (ዖ) ETHIOPIC SYLLABLE PHARYNGEAL O	[25E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D6, 0x003F };
    uint32_t const ces[9] = { 0x25E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_264)
{
    // 12D6 0061;	
    // (ዖ) ETHIOPIC SYLLABLE PHARYNGEAL O	[25E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D6, 0x0061 };
    uint32_t const ces[9] = { 0x25E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_265)
{
    // 12D6 0041;	
    // (ዖ) ETHIOPIC SYLLABLE PHARYNGEAL O	[25E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D6, 0x0041 };
    uint32_t const ces[9] = { 0x25E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_266)
{
    // 12D6 0062;	
    // (ዖ) ETHIOPIC SYLLABLE PHARYNGEAL O	[25E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D6, 0x0062 };
    uint32_t const ces[9] = { 0x25E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_267)
{
    // 12D8 0021;	
    // (ዘ) ETHIOPIC SYLLABLE ZA	[25E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D8, 0x0021 };
    uint32_t const ces[9] = { 0x25E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_268)
{
    // 12D8 003F;	
    // (ዘ) ETHIOPIC SYLLABLE ZA	[25E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D8, 0x003F };
    uint32_t const ces[9] = { 0x25E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_269)
{
    // 12D8 0061;	
    // (ዘ) ETHIOPIC SYLLABLE ZA	[25E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D8, 0x0061 };
    uint32_t const ces[9] = { 0x25E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_270)
{
    // 12D8 0041;	
    // (ዘ) ETHIOPIC SYLLABLE ZA	[25E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D8, 0x0041 };
    uint32_t const ces[9] = { 0x25E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_271)
{
    // 12D8 0062;	
    // (ዘ) ETHIOPIC SYLLABLE ZA	[25E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D8, 0x0062 };
    uint32_t const ces[9] = { 0x25E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_272)
{
    // 12D9 0021;	
    // (ዙ) ETHIOPIC SYLLABLE ZU	[25E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D9, 0x0021 };
    uint32_t const ces[9] = { 0x25E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_273)
{
    // 12D9 003F;	
    // (ዙ) ETHIOPIC SYLLABLE ZU	[25E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D9, 0x003F };
    uint32_t const ces[9] = { 0x25E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_274)
{
    // 12D9 0061;	
    // (ዙ) ETHIOPIC SYLLABLE ZU	[25E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D9, 0x0061 };
    uint32_t const ces[9] = { 0x25E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_275)
{
    // 12D9 0041;	
    // (ዙ) ETHIOPIC SYLLABLE ZU	[25E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12D9, 0x0041 };
    uint32_t const ces[9] = { 0x25E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_276)
{
    // 12D9 0062;	
    // (ዙ) ETHIOPIC SYLLABLE ZU	[25E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12D9, 0x0062 };
    uint32_t const ces[9] = { 0x25E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_277)
{
    // 12DA 0021;	
    // (ዚ) ETHIOPIC SYLLABLE ZI	[25E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DA, 0x0021 };
    uint32_t const ces[9] = { 0x25E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_278)
{
    // 12DA 003F;	
    // (ዚ) ETHIOPIC SYLLABLE ZI	[25E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DA, 0x003F };
    uint32_t const ces[9] = { 0x25E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_279)
{
    // 12DA 0061;	
    // (ዚ) ETHIOPIC SYLLABLE ZI	[25E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DA, 0x0061 };
    uint32_t const ces[9] = { 0x25E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_280)
{
    // 12DA 0041;	
    // (ዚ) ETHIOPIC SYLLABLE ZI	[25E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DA, 0x0041 };
    uint32_t const ces[9] = { 0x25E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_281)
{
    // 12DA 0062;	
    // (ዚ) ETHIOPIC SYLLABLE ZI	[25E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DA, 0x0062 };
    uint32_t const ces[9] = { 0x25E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_282)
{
    // 12DB 0021;	
    // (ዛ) ETHIOPIC SYLLABLE ZAA	[25E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DB, 0x0021 };
    uint32_t const ces[9] = { 0x25E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_283)
{
    // 12DB 003F;	
    // (ዛ) ETHIOPIC SYLLABLE ZAA	[25E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DB, 0x003F };
    uint32_t const ces[9] = { 0x25E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_284)
{
    // 12DB 0061;	
    // (ዛ) ETHIOPIC SYLLABLE ZAA	[25E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DB, 0x0061 };
    uint32_t const ces[9] = { 0x25E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_285)
{
    // 12DB 0041;	
    // (ዛ) ETHIOPIC SYLLABLE ZAA	[25E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DB, 0x0041 };
    uint32_t const ces[9] = { 0x25E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_286)
{
    // 12DB 0062;	
    // (ዛ) ETHIOPIC SYLLABLE ZAA	[25E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DB, 0x0062 };
    uint32_t const ces[9] = { 0x25E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_287)
{
    // 12DC 0021;	
    // (ዜ) ETHIOPIC SYLLABLE ZEE	[25EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DC, 0x0021 };
    uint32_t const ces[9] = { 0x25EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_288)
{
    // 12DC 003F;	
    // (ዜ) ETHIOPIC SYLLABLE ZEE	[25EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DC, 0x003F };
    uint32_t const ces[9] = { 0x25EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_289)
{
    // 12DC 0061;	
    // (ዜ) ETHIOPIC SYLLABLE ZEE	[25EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DC, 0x0061 };
    uint32_t const ces[9] = { 0x25EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_290)
{
    // 12DC 0041;	
    // (ዜ) ETHIOPIC SYLLABLE ZEE	[25EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DC, 0x0041 };
    uint32_t const ces[9] = { 0x25EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_291)
{
    // 12DC 0062;	
    // (ዜ) ETHIOPIC SYLLABLE ZEE	[25EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DC, 0x0062 };
    uint32_t const ces[9] = { 0x25EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_292)
{
    // 12DD 0021;	
    // (ዝ) ETHIOPIC SYLLABLE ZE	[25EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DD, 0x0021 };
    uint32_t const ces[9] = { 0x25EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_293)
{
    // 12DD 003F;	
    // (ዝ) ETHIOPIC SYLLABLE ZE	[25EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DD, 0x003F };
    uint32_t const ces[9] = { 0x25EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_294)
{
    // 12DD 0061;	
    // (ዝ) ETHIOPIC SYLLABLE ZE	[25EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DD, 0x0061 };
    uint32_t const ces[9] = { 0x25EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_295)
{
    // 12DD 0041;	
    // (ዝ) ETHIOPIC SYLLABLE ZE	[25EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DD, 0x0041 };
    uint32_t const ces[9] = { 0x25EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_296)
{
    // 12DD 0062;	
    // (ዝ) ETHIOPIC SYLLABLE ZE	[25EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DD, 0x0062 };
    uint32_t const ces[9] = { 0x25EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_297)
{
    // 12DE 0021;	
    // (ዞ) ETHIOPIC SYLLABLE ZO	[25EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DE, 0x0021 };
    uint32_t const ces[9] = { 0x25EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_298)
{
    // 12DE 003F;	
    // (ዞ) ETHIOPIC SYLLABLE ZO	[25EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DE, 0x003F };
    uint32_t const ces[9] = { 0x25EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_299)
{
    // 12DE 0061;	
    // (ዞ) ETHIOPIC SYLLABLE ZO	[25EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DE, 0x0061 };
    uint32_t const ces[9] = { 0x25EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_300)
{
    // 12DE 0041;	
    // (ዞ) ETHIOPIC SYLLABLE ZO	[25EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DE, 0x0041 };
    uint32_t const ces[9] = { 0x25EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_301)
{
    // 12DE 0062;	
    // (ዞ) ETHIOPIC SYLLABLE ZO	[25EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DE, 0x0062 };
    uint32_t const ces[9] = { 0x25EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_302)
{
    // 12DF 0021;	
    // (ዟ) ETHIOPIC SYLLABLE ZWA	[25ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DF, 0x0021 };
    uint32_t const ces[9] = { 0x25ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_303)
{
    // 12DF 003F;	
    // (ዟ) ETHIOPIC SYLLABLE ZWA	[25ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DF, 0x003F };
    uint32_t const ces[9] = { 0x25ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_304)
{
    // 12DF 0061;	
    // (ዟ) ETHIOPIC SYLLABLE ZWA	[25ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DF, 0x0061 };
    uint32_t const ces[9] = { 0x25ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_305)
{
    // 12DF 0041;	
    // (ዟ) ETHIOPIC SYLLABLE ZWA	[25ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12DF, 0x0041 };
    uint32_t const ces[9] = { 0x25ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_306)
{
    // 12DF 0062;	
    // (ዟ) ETHIOPIC SYLLABLE ZWA	[25ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12DF, 0x0062 };
    uint32_t const ces[9] = { 0x25ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_307)
{
    // 2D8B 0021;	
    // (ⶋ) ETHIOPIC SYLLABLE ZOA	[25EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8B, 0x0021 };
    uint32_t const ces[9] = { 0x25EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_308)
{
    // 2D8B 003F;	
    // (ⶋ) ETHIOPIC SYLLABLE ZOA	[25EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8B, 0x003F };
    uint32_t const ces[9] = { 0x25EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_309)
{
    // 2D8B 0061;	
    // (ⶋ) ETHIOPIC SYLLABLE ZOA	[25EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8B, 0x0061 };
    uint32_t const ces[9] = { 0x25EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_310)
{
    // 2D8B 0041;	
    // (ⶋ) ETHIOPIC SYLLABLE ZOA	[25EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8B, 0x0041 };
    uint32_t const ces[9] = { 0x25EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_311)
{
    // 2D8B 0062;	
    // (ⶋ) ETHIOPIC SYLLABLE ZOA	[25EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8B, 0x0062 };
    uint32_t const ces[9] = { 0x25EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_312)
{
    // AB11 0021;	
    // (ꬑ) ETHIOPIC SYLLABLE DZU	[25EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB11, 0x0021 };
    uint32_t const ces[9] = { 0x25EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_313)
{
    // AB11 003F;	
    // (ꬑ) ETHIOPIC SYLLABLE DZU	[25EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB11, 0x003F };
    uint32_t const ces[9] = { 0x25EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_314)
{
    // AB11 0061;	
    // (ꬑ) ETHIOPIC SYLLABLE DZU	[25EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB11, 0x0061 };
    uint32_t const ces[9] = { 0x25EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_315)
{
    // AB11 0041;	
    // (ꬑ) ETHIOPIC SYLLABLE DZU	[25EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB11, 0x0041 };
    uint32_t const ces[9] = { 0x25EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_316)
{
    // AB11 0062;	
    // (ꬑ) ETHIOPIC SYLLABLE DZU	[25EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB11, 0x0062 };
    uint32_t const ces[9] = { 0x25EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_317)
{
    // AB12 0021;	
    // (ꬒ) ETHIOPIC SYLLABLE DZI	[25F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB12, 0x0021 };
    uint32_t const ces[9] = { 0x25F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_318)
{
    // AB12 003F;	
    // (ꬒ) ETHIOPIC SYLLABLE DZI	[25F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB12, 0x003F };
    uint32_t const ces[9] = { 0x25F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_319)
{
    // AB12 0061;	
    // (ꬒ) ETHIOPIC SYLLABLE DZI	[25F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB12, 0x0061 };
    uint32_t const ces[9] = { 0x25F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_320)
{
    // AB12 0041;	
    // (ꬒ) ETHIOPIC SYLLABLE DZI	[25F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB12, 0x0041 };
    uint32_t const ces[9] = { 0x25F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_321)
{
    // AB12 0062;	
    // (ꬒ) ETHIOPIC SYLLABLE DZI	[25F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB12, 0x0062 };
    uint32_t const ces[9] = { 0x25F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_322)
{
    // AB13 0021;	
    // (ꬓ) ETHIOPIC SYLLABLE DZAA	[25F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB13, 0x0021 };
    uint32_t const ces[9] = { 0x25F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_323)
{
    // AB13 003F;	
    // (ꬓ) ETHIOPIC SYLLABLE DZAA	[25F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB13, 0x003F };
    uint32_t const ces[9] = { 0x25F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_324)
{
    // AB13 0061;	
    // (ꬓ) ETHIOPIC SYLLABLE DZAA	[25F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB13, 0x0061 };
    uint32_t const ces[9] = { 0x25F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_325)
{
    // AB13 0041;	
    // (ꬓ) ETHIOPIC SYLLABLE DZAA	[25F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB13, 0x0041 };
    uint32_t const ces[9] = { 0x25F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_326)
{
    // AB13 0062;	
    // (ꬓ) ETHIOPIC SYLLABLE DZAA	[25F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB13, 0x0062 };
    uint32_t const ces[9] = { 0x25F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_327)
{
    // AB14 0021;	
    // (ꬔ) ETHIOPIC SYLLABLE DZEE	[25F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB14, 0x0021 };
    uint32_t const ces[9] = { 0x25F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_328)
{
    // AB14 003F;	
    // (ꬔ) ETHIOPIC SYLLABLE DZEE	[25F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB14, 0x003F };
    uint32_t const ces[9] = { 0x25F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_329)
{
    // AB14 0061;	
    // (ꬔ) ETHIOPIC SYLLABLE DZEE	[25F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB14, 0x0061 };
    uint32_t const ces[9] = { 0x25F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_330)
{
    // AB14 0041;	
    // (ꬔ) ETHIOPIC SYLLABLE DZEE	[25F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB14, 0x0041 };
    uint32_t const ces[9] = { 0x25F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_331)
{
    // AB14 0062;	
    // (ꬔ) ETHIOPIC SYLLABLE DZEE	[25F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB14, 0x0062 };
    uint32_t const ces[9] = { 0x25F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_332)
{
    // AB15 0021;	
    // (ꬕ) ETHIOPIC SYLLABLE DZE	[25F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB15, 0x0021 };
    uint32_t const ces[9] = { 0x25F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_333)
{
    // AB15 003F;	
    // (ꬕ) ETHIOPIC SYLLABLE DZE	[25F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB15, 0x003F };
    uint32_t const ces[9] = { 0x25F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_334)
{
    // AB15 0061;	
    // (ꬕ) ETHIOPIC SYLLABLE DZE	[25F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB15, 0x0061 };
    uint32_t const ces[9] = { 0x25F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_335)
{
    // AB15 0041;	
    // (ꬕ) ETHIOPIC SYLLABLE DZE	[25F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB15, 0x0041 };
    uint32_t const ces[9] = { 0x25F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_336)
{
    // AB15 0062;	
    // (ꬕ) ETHIOPIC SYLLABLE DZE	[25F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB15, 0x0062 };
    uint32_t const ces[9] = { 0x25F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_337)
{
    // AB16 0021;	
    // (ꬖ) ETHIOPIC SYLLABLE DZO	[25F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB16, 0x0021 };
    uint32_t const ces[9] = { 0x25F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_338)
{
    // AB16 003F;	
    // (ꬖ) ETHIOPIC SYLLABLE DZO	[25F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB16, 0x003F };
    uint32_t const ces[9] = { 0x25F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_339)
{
    // AB16 0061;	
    // (ꬖ) ETHIOPIC SYLLABLE DZO	[25F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB16, 0x0061 };
    uint32_t const ces[9] = { 0x25F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_340)
{
    // AB16 0041;	
    // (ꬖ) ETHIOPIC SYLLABLE DZO	[25F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB16, 0x0041 };
    uint32_t const ces[9] = { 0x25F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_341)
{
    // AB16 0062;	
    // (ꬖ) ETHIOPIC SYLLABLE DZO	[25F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB16, 0x0062 };
    uint32_t const ces[9] = { 0x25F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_342)
{
    // 12E0 0021;	
    // (ዠ) ETHIOPIC SYLLABLE ZHA	[25F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E0, 0x0021 };
    uint32_t const ces[9] = { 0x25F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_343)
{
    // 12E0 003F;	
    // (ዠ) ETHIOPIC SYLLABLE ZHA	[25F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E0, 0x003F };
    uint32_t const ces[9] = { 0x25F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_344)
{
    // 12E0 0061;	
    // (ዠ) ETHIOPIC SYLLABLE ZHA	[25F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E0, 0x0061 };
    uint32_t const ces[9] = { 0x25F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_345)
{
    // 12E0 0041;	
    // (ዠ) ETHIOPIC SYLLABLE ZHA	[25F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E0, 0x0041 };
    uint32_t const ces[9] = { 0x25F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_346)
{
    // 12E0 0062;	
    // (ዠ) ETHIOPIC SYLLABLE ZHA	[25F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E0, 0x0062 };
    uint32_t const ces[9] = { 0x25F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_347)
{
    // 12E1 0021;	
    // (ዡ) ETHIOPIC SYLLABLE ZHU	[25F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E1, 0x0021 };
    uint32_t const ces[9] = { 0x25F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_348)
{
    // 12E1 003F;	
    // (ዡ) ETHIOPIC SYLLABLE ZHU	[25F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E1, 0x003F };
    uint32_t const ces[9] = { 0x25F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_349)
{
    // 12E1 0061;	
    // (ዡ) ETHIOPIC SYLLABLE ZHU	[25F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E1, 0x0061 };
    uint32_t const ces[9] = { 0x25F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_350)
{
    // 12E1 0041;	
    // (ዡ) ETHIOPIC SYLLABLE ZHU	[25F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E1, 0x0041 };
    uint32_t const ces[9] = { 0x25F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_351)
{
    // 12E1 0062;	
    // (ዡ) ETHIOPIC SYLLABLE ZHU	[25F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E1, 0x0062 };
    uint32_t const ces[9] = { 0x25F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_352)
{
    // 12E2 0021;	
    // (ዢ) ETHIOPIC SYLLABLE ZHI	[25F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E2, 0x0021 };
    uint32_t const ces[9] = { 0x25F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_353)
{
    // 12E2 003F;	
    // (ዢ) ETHIOPIC SYLLABLE ZHI	[25F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E2, 0x003F };
    uint32_t const ces[9] = { 0x25F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_354)
{
    // 12E2 0061;	
    // (ዢ) ETHIOPIC SYLLABLE ZHI	[25F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E2, 0x0061 };
    uint32_t const ces[9] = { 0x25F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_355)
{
    // 12E2 0041;	
    // (ዢ) ETHIOPIC SYLLABLE ZHI	[25F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E2, 0x0041 };
    uint32_t const ces[9] = { 0x25F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_356)
{
    // 12E2 0062;	
    // (ዢ) ETHIOPIC SYLLABLE ZHI	[25F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E2, 0x0062 };
    uint32_t const ces[9] = { 0x25F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_357)
{
    // 12E3 0021;	
    // (ዣ) ETHIOPIC SYLLABLE ZHAA	[25F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E3, 0x0021 };
    uint32_t const ces[9] = { 0x25F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_358)
{
    // 12E3 003F;	
    // (ዣ) ETHIOPIC SYLLABLE ZHAA	[25F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E3, 0x003F };
    uint32_t const ces[9] = { 0x25F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_359)
{
    // 12E3 0061;	
    // (ዣ) ETHIOPIC SYLLABLE ZHAA	[25F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E3, 0x0061 };
    uint32_t const ces[9] = { 0x25F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_360)
{
    // 12E3 0041;	
    // (ዣ) ETHIOPIC SYLLABLE ZHAA	[25F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E3, 0x0041 };
    uint32_t const ces[9] = { 0x25F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_361)
{
    // 12E3 0062;	
    // (ዣ) ETHIOPIC SYLLABLE ZHAA	[25F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E3, 0x0062 };
    uint32_t const ces[9] = { 0x25F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_362)
{
    // 12E4 0021;	
    // (ዤ) ETHIOPIC SYLLABLE ZHEE	[25F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E4, 0x0021 };
    uint32_t const ces[9] = { 0x25F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_363)
{
    // 12E4 003F;	
    // (ዤ) ETHIOPIC SYLLABLE ZHEE	[25F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E4, 0x003F };
    uint32_t const ces[9] = { 0x25F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_364)
{
    // 12E4 0061;	
    // (ዤ) ETHIOPIC SYLLABLE ZHEE	[25F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E4, 0x0061 };
    uint32_t const ces[9] = { 0x25F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_365)
{
    // 12E4 0041;	
    // (ዤ) ETHIOPIC SYLLABLE ZHEE	[25F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E4, 0x0041 };
    uint32_t const ces[9] = { 0x25F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_366)
{
    // 12E4 0062;	
    // (ዤ) ETHIOPIC SYLLABLE ZHEE	[25F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E4, 0x0062 };
    uint32_t const ces[9] = { 0x25F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_367)
{
    // 12E5 0021;	
    // (ዥ) ETHIOPIC SYLLABLE ZHE	[25FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E5, 0x0021 };
    uint32_t const ces[9] = { 0x25FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_368)
{
    // 12E5 003F;	
    // (ዥ) ETHIOPIC SYLLABLE ZHE	[25FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E5, 0x003F };
    uint32_t const ces[9] = { 0x25FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_369)
{
    // 12E5 0061;	
    // (ዥ) ETHIOPIC SYLLABLE ZHE	[25FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E5, 0x0061 };
    uint32_t const ces[9] = { 0x25FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_370)
{
    // 12E5 0041;	
    // (ዥ) ETHIOPIC SYLLABLE ZHE	[25FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E5, 0x0041 };
    uint32_t const ces[9] = { 0x25FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_371)
{
    // 12E5 0062;	
    // (ዥ) ETHIOPIC SYLLABLE ZHE	[25FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E5, 0x0062 };
    uint32_t const ces[9] = { 0x25FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_372)
{
    // 12E6 0021;	
    // (ዦ) ETHIOPIC SYLLABLE ZHO	[25FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E6, 0x0021 };
    uint32_t const ces[9] = { 0x25FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_373)
{
    // 12E6 003F;	
    // (ዦ) ETHIOPIC SYLLABLE ZHO	[25FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E6, 0x003F };
    uint32_t const ces[9] = { 0x25FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_374)
{
    // 12E6 0061;	
    // (ዦ) ETHIOPIC SYLLABLE ZHO	[25FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E6, 0x0061 };
    uint32_t const ces[9] = { 0x25FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_375)
{
    // 12E6 0041;	
    // (ዦ) ETHIOPIC SYLLABLE ZHO	[25FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E6, 0x0041 };
    uint32_t const ces[9] = { 0x25FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_376)
{
    // 12E6 0062;	
    // (ዦ) ETHIOPIC SYLLABLE ZHO	[25FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E6, 0x0062 };
    uint32_t const ces[9] = { 0x25FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_377)
{
    // 12E7 0021;	
    // (ዧ) ETHIOPIC SYLLABLE ZHWA	[25FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E7, 0x0021 };
    uint32_t const ces[9] = { 0x25FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_378)
{
    // 12E7 003F;	
    // (ዧ) ETHIOPIC SYLLABLE ZHWA	[25FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E7, 0x003F };
    uint32_t const ces[9] = { 0x25FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_379)
{
    // 12E7 0061;	
    // (ዧ) ETHIOPIC SYLLABLE ZHWA	[25FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E7, 0x0061 };
    uint32_t const ces[9] = { 0x25FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_380)
{
    // 12E7 0041;	
    // (ዧ) ETHIOPIC SYLLABLE ZHWA	[25FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E7, 0x0041 };
    uint32_t const ces[9] = { 0x25FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_381)
{
    // 12E7 0062;	
    // (ዧ) ETHIOPIC SYLLABLE ZHWA	[25FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E7, 0x0062 };
    uint32_t const ces[9] = { 0x25FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_382)
{
    // 12E8 0021;	
    // (የ) ETHIOPIC SYLLABLE YA	[25FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E8, 0x0021 };
    uint32_t const ces[9] = { 0x25FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_383)
{
    // 12E8 003F;	
    // (የ) ETHIOPIC SYLLABLE YA	[25FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E8, 0x003F };
    uint32_t const ces[9] = { 0x25FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_384)
{
    // 12E8 0061;	
    // (የ) ETHIOPIC SYLLABLE YA	[25FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E8, 0x0061 };
    uint32_t const ces[9] = { 0x25FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_385)
{
    // 12E8 0041;	
    // (የ) ETHIOPIC SYLLABLE YA	[25FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E8, 0x0041 };
    uint32_t const ces[9] = { 0x25FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_386)
{
    // 12E8 0062;	
    // (የ) ETHIOPIC SYLLABLE YA	[25FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E8, 0x0062 };
    uint32_t const ces[9] = { 0x25FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_387)
{
    // 12E9 0021;	
    // (ዩ) ETHIOPIC SYLLABLE YU	[25FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E9, 0x0021 };
    uint32_t const ces[9] = { 0x25FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_388)
{
    // 12E9 003F;	
    // (ዩ) ETHIOPIC SYLLABLE YU	[25FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E9, 0x003F };
    uint32_t const ces[9] = { 0x25FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_389)
{
    // 12E9 0061;	
    // (ዩ) ETHIOPIC SYLLABLE YU	[25FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E9, 0x0061 };
    uint32_t const ces[9] = { 0x25FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_390)
{
    // 12E9 0041;	
    // (ዩ) ETHIOPIC SYLLABLE YU	[25FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12E9, 0x0041 };
    uint32_t const ces[9] = { 0x25FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_391)
{
    // 12E9 0062;	
    // (ዩ) ETHIOPIC SYLLABLE YU	[25FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12E9, 0x0062 };
    uint32_t const ces[9] = { 0x25FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_392)
{
    // 12EA 0021;	
    // (ዪ) ETHIOPIC SYLLABLE YI	[25FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EA, 0x0021 };
    uint32_t const ces[9] = { 0x25FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_393)
{
    // 12EA 003F;	
    // (ዪ) ETHIOPIC SYLLABLE YI	[25FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EA, 0x003F };
    uint32_t const ces[9] = { 0x25FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_394)
{
    // 12EA 0061;	
    // (ዪ) ETHIOPIC SYLLABLE YI	[25FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EA, 0x0061 };
    uint32_t const ces[9] = { 0x25FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_395)
{
    // 12EA 0041;	
    // (ዪ) ETHIOPIC SYLLABLE YI	[25FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12EA, 0x0041 };
    uint32_t const ces[9] = { 0x25FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_396)
{
    // 12EA 0062;	
    // (ዪ) ETHIOPIC SYLLABLE YI	[25FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EA, 0x0062 };
    uint32_t const ces[9] = { 0x25FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_397)
{
    // 12EB 0021;	
    // (ያ) ETHIOPIC SYLLABLE YAA	[2600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EB, 0x0021 };
    uint32_t const ces[9] = { 0x2600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_398)
{
    // 12EB 003F;	
    // (ያ) ETHIOPIC SYLLABLE YAA	[2600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EB, 0x003F };
    uint32_t const ces[9] = { 0x2600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_399)
{
    // 12EB 0061;	
    // (ያ) ETHIOPIC SYLLABLE YAA	[2600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EB, 0x0061 };
    uint32_t const ces[9] = { 0x2600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_400)
{
    // 12EB 0041;	
    // (ያ) ETHIOPIC SYLLABLE YAA	[2600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12EB, 0x0041 };
    uint32_t const ces[9] = { 0x2600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_401)
{
    // 12EB 0062;	
    // (ያ) ETHIOPIC SYLLABLE YAA	[2600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EB, 0x0062 };
    uint32_t const ces[9] = { 0x2600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_402)
{
    // 12EC 0021;	
    // (ዬ) ETHIOPIC SYLLABLE YEE	[2601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EC, 0x0021 };
    uint32_t const ces[9] = { 0x2601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_403)
{
    // 12EC 003F;	
    // (ዬ) ETHIOPIC SYLLABLE YEE	[2601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EC, 0x003F };
    uint32_t const ces[9] = { 0x2601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_404)
{
    // 12EC 0061;	
    // (ዬ) ETHIOPIC SYLLABLE YEE	[2601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EC, 0x0061 };
    uint32_t const ces[9] = { 0x2601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_405)
{
    // 12EC 0041;	
    // (ዬ) ETHIOPIC SYLLABLE YEE	[2601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12EC, 0x0041 };
    uint32_t const ces[9] = { 0x2601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_406)
{
    // 12EC 0062;	
    // (ዬ) ETHIOPIC SYLLABLE YEE	[2601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EC, 0x0062 };
    uint32_t const ces[9] = { 0x2601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_407)
{
    // 12ED 0021;	
    // (ይ) ETHIOPIC SYLLABLE YE	[2602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12ED, 0x0021 };
    uint32_t const ces[9] = { 0x2602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_408)
{
    // 12ED 003F;	
    // (ይ) ETHIOPIC SYLLABLE YE	[2602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12ED, 0x003F };
    uint32_t const ces[9] = { 0x2602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_409)
{
    // 12ED 0061;	
    // (ይ) ETHIOPIC SYLLABLE YE	[2602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12ED, 0x0061 };
    uint32_t const ces[9] = { 0x2602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_410)
{
    // 12ED 0041;	
    // (ይ) ETHIOPIC SYLLABLE YE	[2602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12ED, 0x0041 };
    uint32_t const ces[9] = { 0x2602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_411)
{
    // 12ED 0062;	
    // (ይ) ETHIOPIC SYLLABLE YE	[2602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12ED, 0x0062 };
    uint32_t const ces[9] = { 0x2602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_412)
{
    // 12EE 0021;	
    // (ዮ) ETHIOPIC SYLLABLE YO	[2603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EE, 0x0021 };
    uint32_t const ces[9] = { 0x2603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_413)
{
    // 12EE 003F;	
    // (ዮ) ETHIOPIC SYLLABLE YO	[2603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EE, 0x003F };
    uint32_t const ces[9] = { 0x2603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_414)
{
    // 12EE 0061;	
    // (ዮ) ETHIOPIC SYLLABLE YO	[2603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EE, 0x0061 };
    uint32_t const ces[9] = { 0x2603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_415)
{
    // 12EE 0041;	
    // (ዮ) ETHIOPIC SYLLABLE YO	[2603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12EE, 0x0041 };
    uint32_t const ces[9] = { 0x2603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_416)
{
    // 12EE 0062;	
    // (ዮ) ETHIOPIC SYLLABLE YO	[2603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EE, 0x0062 };
    uint32_t const ces[9] = { 0x2603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_417)
{
    // 12EF 0021;	
    // (ዯ) ETHIOPIC SYLLABLE YOA	[2604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EF, 0x0021 };
    uint32_t const ces[9] = { 0x2604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_418)
{
    // 12EF 003F;	
    // (ዯ) ETHIOPIC SYLLABLE YOA	[2604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EF, 0x003F };
    uint32_t const ces[9] = { 0x2604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_419)
{
    // 12EF 0061;	
    // (ዯ) ETHIOPIC SYLLABLE YOA	[2604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EF, 0x0061 };
    uint32_t const ces[9] = { 0x2604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_420)
{
    // 12EF 0041;	
    // (ዯ) ETHIOPIC SYLLABLE YOA	[2604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12EF, 0x0041 };
    uint32_t const ces[9] = { 0x2604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_421)
{
    // 12EF 0062;	
    // (ዯ) ETHIOPIC SYLLABLE YOA	[2604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12EF, 0x0062 };
    uint32_t const ces[9] = { 0x2604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_422)
{
    // 12F0 0021;	
    // (ደ) ETHIOPIC SYLLABLE DA	[2605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F0, 0x0021 };
    uint32_t const ces[9] = { 0x2605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_423)
{
    // 12F0 003F;	
    // (ደ) ETHIOPIC SYLLABLE DA	[2605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F0, 0x003F };
    uint32_t const ces[9] = { 0x2605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_424)
{
    // 12F0 0061;	
    // (ደ) ETHIOPIC SYLLABLE DA	[2605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F0, 0x0061 };
    uint32_t const ces[9] = { 0x2605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_425)
{
    // 12F0 0041;	
    // (ደ) ETHIOPIC SYLLABLE DA	[2605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F0, 0x0041 };
    uint32_t const ces[9] = { 0x2605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_426)
{
    // 12F0 0062;	
    // (ደ) ETHIOPIC SYLLABLE DA	[2605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F0, 0x0062 };
    uint32_t const ces[9] = { 0x2605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_427)
{
    // 12F1 0021;	
    // (ዱ) ETHIOPIC SYLLABLE DU	[2606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F1, 0x0021 };
    uint32_t const ces[9] = { 0x2606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_428)
{
    // 12F1 003F;	
    // (ዱ) ETHIOPIC SYLLABLE DU	[2606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F1, 0x003F };
    uint32_t const ces[9] = { 0x2606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_429)
{
    // 12F1 0061;	
    // (ዱ) ETHIOPIC SYLLABLE DU	[2606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F1, 0x0061 };
    uint32_t const ces[9] = { 0x2606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_430)
{
    // 12F1 0041;	
    // (ዱ) ETHIOPIC SYLLABLE DU	[2606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F1, 0x0041 };
    uint32_t const ces[9] = { 0x2606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_431)
{
    // 12F1 0062;	
    // (ዱ) ETHIOPIC SYLLABLE DU	[2606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F1, 0x0062 };
    uint32_t const ces[9] = { 0x2606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_432)
{
    // 12F2 0021;	
    // (ዲ) ETHIOPIC SYLLABLE DI	[2607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F2, 0x0021 };
    uint32_t const ces[9] = { 0x2607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_433)
{
    // 12F2 003F;	
    // (ዲ) ETHIOPIC SYLLABLE DI	[2607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F2, 0x003F };
    uint32_t const ces[9] = { 0x2607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_434)
{
    // 12F2 0061;	
    // (ዲ) ETHIOPIC SYLLABLE DI	[2607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F2, 0x0061 };
    uint32_t const ces[9] = { 0x2607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_435)
{
    // 12F2 0041;	
    // (ዲ) ETHIOPIC SYLLABLE DI	[2607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F2, 0x0041 };
    uint32_t const ces[9] = { 0x2607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_436)
{
    // 12F2 0062;	
    // (ዲ) ETHIOPIC SYLLABLE DI	[2607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F2, 0x0062 };
    uint32_t const ces[9] = { 0x2607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_437)
{
    // 12F3 0021;	
    // (ዳ) ETHIOPIC SYLLABLE DAA	[2608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F3, 0x0021 };
    uint32_t const ces[9] = { 0x2608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_438)
{
    // 12F3 003F;	
    // (ዳ) ETHIOPIC SYLLABLE DAA	[2608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F3, 0x003F };
    uint32_t const ces[9] = { 0x2608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_439)
{
    // 12F3 0061;	
    // (ዳ) ETHIOPIC SYLLABLE DAA	[2608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F3, 0x0061 };
    uint32_t const ces[9] = { 0x2608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_440)
{
    // 12F3 0041;	
    // (ዳ) ETHIOPIC SYLLABLE DAA	[2608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F3, 0x0041 };
    uint32_t const ces[9] = { 0x2608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_441)
{
    // 12F3 0062;	
    // (ዳ) ETHIOPIC SYLLABLE DAA	[2608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F3, 0x0062 };
    uint32_t const ces[9] = { 0x2608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_442)
{
    // 12F4 0021;	
    // (ዴ) ETHIOPIC SYLLABLE DEE	[2609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F4, 0x0021 };
    uint32_t const ces[9] = { 0x2609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_443)
{
    // 12F4 003F;	
    // (ዴ) ETHIOPIC SYLLABLE DEE	[2609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F4, 0x003F };
    uint32_t const ces[9] = { 0x2609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_444)
{
    // 12F4 0061;	
    // (ዴ) ETHIOPIC SYLLABLE DEE	[2609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F4, 0x0061 };
    uint32_t const ces[9] = { 0x2609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_445)
{
    // 12F4 0041;	
    // (ዴ) ETHIOPIC SYLLABLE DEE	[2609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F4, 0x0041 };
    uint32_t const ces[9] = { 0x2609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_446)
{
    // 12F4 0062;	
    // (ዴ) ETHIOPIC SYLLABLE DEE	[2609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F4, 0x0062 };
    uint32_t const ces[9] = { 0x2609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_447)
{
    // 12F5 0021;	
    // (ድ) ETHIOPIC SYLLABLE DE	[260A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F5, 0x0021 };
    uint32_t const ces[9] = { 0x260A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_448)
{
    // 12F5 003F;	
    // (ድ) ETHIOPIC SYLLABLE DE	[260A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F5, 0x003F };
    uint32_t const ces[9] = { 0x260A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_449)
{
    // 12F5 0061;	
    // (ድ) ETHIOPIC SYLLABLE DE	[260A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F5, 0x0061 };
    uint32_t const ces[9] = { 0x260A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_450)
{
    // 12F5 0041;	
    // (ድ) ETHIOPIC SYLLABLE DE	[260A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F5, 0x0041 };
    uint32_t const ces[9] = { 0x260A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_451)
{
    // 12F5 0062;	
    // (ድ) ETHIOPIC SYLLABLE DE	[260A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F5, 0x0062 };
    uint32_t const ces[9] = { 0x260A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_452)
{
    // 12F6 0021;	
    // (ዶ) ETHIOPIC SYLLABLE DO	[260B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F6, 0x0021 };
    uint32_t const ces[9] = { 0x260B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_453)
{
    // 12F6 003F;	
    // (ዶ) ETHIOPIC SYLLABLE DO	[260B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F6, 0x003F };
    uint32_t const ces[9] = { 0x260B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_454)
{
    // 12F6 0061;	
    // (ዶ) ETHIOPIC SYLLABLE DO	[260B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F6, 0x0061 };
    uint32_t const ces[9] = { 0x260B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_455)
{
    // 12F6 0041;	
    // (ዶ) ETHIOPIC SYLLABLE DO	[260B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F6, 0x0041 };
    uint32_t const ces[9] = { 0x260B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_456)
{
    // 12F6 0062;	
    // (ዶ) ETHIOPIC SYLLABLE DO	[260B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F6, 0x0062 };
    uint32_t const ces[9] = { 0x260B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_457)
{
    // 12F7 0021;	
    // (ዷ) ETHIOPIC SYLLABLE DWA	[260C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F7, 0x0021 };
    uint32_t const ces[9] = { 0x260C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_458)
{
    // 12F7 003F;	
    // (ዷ) ETHIOPIC SYLLABLE DWA	[260C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F7, 0x003F };
    uint32_t const ces[9] = { 0x260C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_459)
{
    // 12F7 0061;	
    // (ዷ) ETHIOPIC SYLLABLE DWA	[260C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F7, 0x0061 };
    uint32_t const ces[9] = { 0x260C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_460)
{
    // 12F7 0041;	
    // (ዷ) ETHIOPIC SYLLABLE DWA	[260C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12F7, 0x0041 };
    uint32_t const ces[9] = { 0x260C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_461)
{
    // 12F7 0062;	
    // (ዷ) ETHIOPIC SYLLABLE DWA	[260C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F7, 0x0062 };
    uint32_t const ces[9] = { 0x260C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_462)
{
    // 2D8C 0021;	
    // (ⶌ) ETHIOPIC SYLLABLE DOA	[260D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8C, 0x0021 };
    uint32_t const ces[9] = { 0x260D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_463)
{
    // 2D8C 003F;	
    // (ⶌ) ETHIOPIC SYLLABLE DOA	[260D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8C, 0x003F };
    uint32_t const ces[9] = { 0x260D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_464)
{
    // 2D8C 0061;	
    // (ⶌ) ETHIOPIC SYLLABLE DOA	[260D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8C, 0x0061 };
    uint32_t const ces[9] = { 0x260D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_465)
{
    // 2D8C 0041;	
    // (ⶌ) ETHIOPIC SYLLABLE DOA	[260D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D8C, 0x0041 };
    uint32_t const ces[9] = { 0x260D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_466)
{
    // 2D8C 0062;	
    // (ⶌ) ETHIOPIC SYLLABLE DOA	[260D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D8C, 0x0062 };
    uint32_t const ces[9] = { 0x260D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_467)
{
    // AB09 0021;	
    // (ꬉ) ETHIOPIC SYLLABLE DDHU	[260E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB09, 0x0021 };
    uint32_t const ces[9] = { 0x260E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_468)
{
    // AB09 003F;	
    // (ꬉ) ETHIOPIC SYLLABLE DDHU	[260E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB09, 0x003F };
    uint32_t const ces[9] = { 0x260E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_469)
{
    // AB09 0061;	
    // (ꬉ) ETHIOPIC SYLLABLE DDHU	[260E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB09, 0x0061 };
    uint32_t const ces[9] = { 0x260E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_470)
{
    // AB09 0041;	
    // (ꬉ) ETHIOPIC SYLLABLE DDHU	[260E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB09, 0x0041 };
    uint32_t const ces[9] = { 0x260E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_471)
{
    // AB09 0062;	
    // (ꬉ) ETHIOPIC SYLLABLE DDHU	[260E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB09, 0x0062 };
    uint32_t const ces[9] = { 0x260E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_472)
{
    // AB0A 0021;	
    // (ꬊ) ETHIOPIC SYLLABLE DDHI	[260F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0A, 0x0021 };
    uint32_t const ces[9] = { 0x260F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_473)
{
    // AB0A 003F;	
    // (ꬊ) ETHIOPIC SYLLABLE DDHI	[260F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0A, 0x003F };
    uint32_t const ces[9] = { 0x260F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_474)
{
    // AB0A 0061;	
    // (ꬊ) ETHIOPIC SYLLABLE DDHI	[260F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0A, 0x0061 };
    uint32_t const ces[9] = { 0x260F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_475)
{
    // AB0A 0041;	
    // (ꬊ) ETHIOPIC SYLLABLE DDHI	[260F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB0A, 0x0041 };
    uint32_t const ces[9] = { 0x260F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_476)
{
    // AB0A 0062;	
    // (ꬊ) ETHIOPIC SYLLABLE DDHI	[260F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0A, 0x0062 };
    uint32_t const ces[9] = { 0x260F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_477)
{
    // AB0B 0021;	
    // (ꬋ) ETHIOPIC SYLLABLE DDHAA	[2610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0B, 0x0021 };
    uint32_t const ces[9] = { 0x2610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_478)
{
    // AB0B 003F;	
    // (ꬋ) ETHIOPIC SYLLABLE DDHAA	[2610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0B, 0x003F };
    uint32_t const ces[9] = { 0x2610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_479)
{
    // AB0B 0061;	
    // (ꬋ) ETHIOPIC SYLLABLE DDHAA	[2610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0B, 0x0061 };
    uint32_t const ces[9] = { 0x2610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_480)
{
    // AB0B 0041;	
    // (ꬋ) ETHIOPIC SYLLABLE DDHAA	[2610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB0B, 0x0041 };
    uint32_t const ces[9] = { 0x2610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_481)
{
    // AB0B 0062;	
    // (ꬋ) ETHIOPIC SYLLABLE DDHAA	[2610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0B, 0x0062 };
    uint32_t const ces[9] = { 0x2610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_482)
{
    // AB0C 0021;	
    // (ꬌ) ETHIOPIC SYLLABLE DDHEE	[2611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0C, 0x0021 };
    uint32_t const ces[9] = { 0x2611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_483)
{
    // AB0C 003F;	
    // (ꬌ) ETHIOPIC SYLLABLE DDHEE	[2611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0C, 0x003F };
    uint32_t const ces[9] = { 0x2611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_484)
{
    // AB0C 0061;	
    // (ꬌ) ETHIOPIC SYLLABLE DDHEE	[2611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0C, 0x0061 };
    uint32_t const ces[9] = { 0x2611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_485)
{
    // AB0C 0041;	
    // (ꬌ) ETHIOPIC SYLLABLE DDHEE	[2611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB0C, 0x0041 };
    uint32_t const ces[9] = { 0x2611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_486)
{
    // AB0C 0062;	
    // (ꬌ) ETHIOPIC SYLLABLE DDHEE	[2611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0C, 0x0062 };
    uint32_t const ces[9] = { 0x2611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_487)
{
    // AB0D 0021;	
    // (ꬍ) ETHIOPIC SYLLABLE DDHE	[2612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0D, 0x0021 };
    uint32_t const ces[9] = { 0x2612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_488)
{
    // AB0D 003F;	
    // (ꬍ) ETHIOPIC SYLLABLE DDHE	[2612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0D, 0x003F };
    uint32_t const ces[9] = { 0x2612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_489)
{
    // AB0D 0061;	
    // (ꬍ) ETHIOPIC SYLLABLE DDHE	[2612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0D, 0x0061 };
    uint32_t const ces[9] = { 0x2612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_490)
{
    // AB0D 0041;	
    // (ꬍ) ETHIOPIC SYLLABLE DDHE	[2612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB0D, 0x0041 };
    uint32_t const ces[9] = { 0x2612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_491)
{
    // AB0D 0062;	
    // (ꬍ) ETHIOPIC SYLLABLE DDHE	[2612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0D, 0x0062 };
    uint32_t const ces[9] = { 0x2612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_492)
{
    // AB0E 0021;	
    // (ꬎ) ETHIOPIC SYLLABLE DDHO	[2613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0E, 0x0021 };
    uint32_t const ces[9] = { 0x2613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_493)
{
    // AB0E 003F;	
    // (ꬎ) ETHIOPIC SYLLABLE DDHO	[2613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0E, 0x003F };
    uint32_t const ces[9] = { 0x2613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_494)
{
    // AB0E 0061;	
    // (ꬎ) ETHIOPIC SYLLABLE DDHO	[2613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0E, 0x0061 };
    uint32_t const ces[9] = { 0x2613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_495)
{
    // AB0E 0041;	
    // (ꬎ) ETHIOPIC SYLLABLE DDHO	[2613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB0E, 0x0041 };
    uint32_t const ces[9] = { 0x2613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_496)
{
    // AB0E 0062;	
    // (ꬎ) ETHIOPIC SYLLABLE DDHO	[2613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB0E, 0x0062 };
    uint32_t const ces[9] = { 0x2613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_497)
{
    // 12F8 0021;	
    // (ዸ) ETHIOPIC SYLLABLE DDA	[2614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F8, 0x0021 };
    uint32_t const ces[9] = { 0x2614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_498)
{
    // 12F8 003F;	
    // (ዸ) ETHIOPIC SYLLABLE DDA	[2614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F8, 0x003F };
    uint32_t const ces[9] = { 0x2614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_162_499)
{
    // 12F8 0061;	
    // (ዸ) ETHIOPIC SYLLABLE DDA	[2614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12F8, 0x0061 };
    uint32_t const ces[9] = { 0x2614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

