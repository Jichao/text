// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_273_000)
{
    // 1BC42 003F;	
    // (𛱂) DUPLOYAN LETTER SLOAN OW	[4723 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC42, 0x003F };
    uint32_t const ces[9] = { 0x4723, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_001)
{
    // 1BC42 0061;	
    // (𛱂) DUPLOYAN LETTER SLOAN OW	[4723 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC42, 0x0061 };
    uint32_t const ces[9] = { 0x4723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_002)
{
    // 1BC42 0041;	
    // (𛱂) DUPLOYAN LETTER SLOAN OW	[4723 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC42, 0x0041 };
    uint32_t const ces[9] = { 0x4723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_003)
{
    // 1BC42 0062;	
    // (𛱂) DUPLOYAN LETTER SLOAN OW	[4723 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC42, 0x0062 };
    uint32_t const ces[9] = { 0x4723, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_004)
{
    // 1BC43 0021;	
    // (𛱃) DUPLOYAN LETTER OA	[4724 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC43, 0x0021 };
    uint32_t const ces[9] = { 0x4724, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_005)
{
    // 1BC43 003F;	
    // (𛱃) DUPLOYAN LETTER OA	[4724 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC43, 0x003F };
    uint32_t const ces[9] = { 0x4724, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_006)
{
    // 1BC43 0061;	
    // (𛱃) DUPLOYAN LETTER OA	[4724 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC43, 0x0061 };
    uint32_t const ces[9] = { 0x4724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_007)
{
    // 1BC43 0041;	
    // (𛱃) DUPLOYAN LETTER OA	[4724 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC43, 0x0041 };
    uint32_t const ces[9] = { 0x4724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_008)
{
    // 1BC43 0062;	
    // (𛱃) DUPLOYAN LETTER OA	[4724 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC43, 0x0062 };
    uint32_t const ces[9] = { 0x4724, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_009)
{
    // 1BC44 0021;	
    // (𛱄) DUPLOYAN LETTER O	[4725 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC44, 0x0021 };
    uint32_t const ces[9] = { 0x4725, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_010)
{
    // 1BC44 003F;	
    // (𛱄) DUPLOYAN LETTER O	[4725 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC44, 0x003F };
    uint32_t const ces[9] = { 0x4725, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_011)
{
    // 1BC44 0061;	
    // (𛱄) DUPLOYAN LETTER O	[4725 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC44, 0x0061 };
    uint32_t const ces[9] = { 0x4725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_012)
{
    // 1BC44 0041;	
    // (𛱄) DUPLOYAN LETTER O	[4725 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC44, 0x0041 };
    uint32_t const ces[9] = { 0x4725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_013)
{
    // 1BC44 0062;	
    // (𛱄) DUPLOYAN LETTER O	[4725 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC44, 0x0062 };
    uint32_t const ces[9] = { 0x4725, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_014)
{
    // 1BC45 0021;	
    // (𛱅) DUPLOYAN LETTER AOU	[4726 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC45, 0x0021 };
    uint32_t const ces[9] = { 0x4726, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_015)
{
    // 1BC45 003F;	
    // (𛱅) DUPLOYAN LETTER AOU	[4726 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC45, 0x003F };
    uint32_t const ces[9] = { 0x4726, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_016)
{
    // 1BC45 0061;	
    // (𛱅) DUPLOYAN LETTER AOU	[4726 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC45, 0x0061 };
    uint32_t const ces[9] = { 0x4726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_017)
{
    // 1BC45 0041;	
    // (𛱅) DUPLOYAN LETTER AOU	[4726 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC45, 0x0041 };
    uint32_t const ces[9] = { 0x4726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_018)
{
    // 1BC45 0062;	
    // (𛱅) DUPLOYAN LETTER AOU	[4726 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC45, 0x0062 };
    uint32_t const ces[9] = { 0x4726, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_019)
{
    // 1BC46 0021;	
    // (𛱆) DUPLOYAN LETTER I	[4727 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC46, 0x0021 };
    uint32_t const ces[9] = { 0x4727, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_020)
{
    // 1BC46 003F;	
    // (𛱆) DUPLOYAN LETTER I	[4727 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC46, 0x003F };
    uint32_t const ces[9] = { 0x4727, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_021)
{
    // 1BC46 0061;	
    // (𛱆) DUPLOYAN LETTER I	[4727 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC46, 0x0061 };
    uint32_t const ces[9] = { 0x4727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_022)
{
    // 1BC46 0041;	
    // (𛱆) DUPLOYAN LETTER I	[4727 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC46, 0x0041 };
    uint32_t const ces[9] = { 0x4727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_023)
{
    // 1BC46 0062;	
    // (𛱆) DUPLOYAN LETTER I	[4727 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC46, 0x0062 };
    uint32_t const ces[9] = { 0x4727, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_024)
{
    // 1BC47 0021;	
    // (𛱇) DUPLOYAN LETTER E	[4728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC47, 0x0021 };
    uint32_t const ces[9] = { 0x4728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_025)
{
    // 1BC47 003F;	
    // (𛱇) DUPLOYAN LETTER E	[4728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC47, 0x003F };
    uint32_t const ces[9] = { 0x4728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_026)
{
    // 1BC47 0061;	
    // (𛱇) DUPLOYAN LETTER E	[4728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC47, 0x0061 };
    uint32_t const ces[9] = { 0x4728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_027)
{
    // 1BC47 0041;	
    // (𛱇) DUPLOYAN LETTER E	[4728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC47, 0x0041 };
    uint32_t const ces[9] = { 0x4728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_028)
{
    // 1BC47 0062;	
    // (𛱇) DUPLOYAN LETTER E	[4728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC47, 0x0062 };
    uint32_t const ces[9] = { 0x4728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_029)
{
    // 1BC48 0021;	
    // (𛱈) DUPLOYAN LETTER IE	[4729 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC48, 0x0021 };
    uint32_t const ces[9] = { 0x4729, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_030)
{
    // 1BC48 003F;	
    // (𛱈) DUPLOYAN LETTER IE	[4729 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC48, 0x003F };
    uint32_t const ces[9] = { 0x4729, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_031)
{
    // 1BC48 0061;	
    // (𛱈) DUPLOYAN LETTER IE	[4729 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC48, 0x0061 };
    uint32_t const ces[9] = { 0x4729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_032)
{
    // 1BC48 0041;	
    // (𛱈) DUPLOYAN LETTER IE	[4729 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC48, 0x0041 };
    uint32_t const ces[9] = { 0x4729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_033)
{
    // 1BC48 0062;	
    // (𛱈) DUPLOYAN LETTER IE	[4729 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC48, 0x0062 };
    uint32_t const ces[9] = { 0x4729, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_034)
{
    // 1BC49 0021;	
    // (𛱉) DUPLOYAN LETTER SHORT I	[472A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC49, 0x0021 };
    uint32_t const ces[9] = { 0x472A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_035)
{
    // 1BC49 003F;	
    // (𛱉) DUPLOYAN LETTER SHORT I	[472A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC49, 0x003F };
    uint32_t const ces[9] = { 0x472A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_036)
{
    // 1BC49 0061;	
    // (𛱉) DUPLOYAN LETTER SHORT I	[472A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC49, 0x0061 };
    uint32_t const ces[9] = { 0x472A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_037)
{
    // 1BC49 0041;	
    // (𛱉) DUPLOYAN LETTER SHORT I	[472A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC49, 0x0041 };
    uint32_t const ces[9] = { 0x472A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_038)
{
    // 1BC49 0062;	
    // (𛱉) DUPLOYAN LETTER SHORT I	[472A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC49, 0x0062 };
    uint32_t const ces[9] = { 0x472A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_039)
{
    // 1BC4A 0021;	
    // (𛱊) DUPLOYAN LETTER UI	[472B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4A, 0x0021 };
    uint32_t const ces[9] = { 0x472B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_040)
{
    // 1BC4A 003F;	
    // (𛱊) DUPLOYAN LETTER UI	[472B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4A, 0x003F };
    uint32_t const ces[9] = { 0x472B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_041)
{
    // 1BC4A 0061;	
    // (𛱊) DUPLOYAN LETTER UI	[472B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4A, 0x0061 };
    uint32_t const ces[9] = { 0x472B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_042)
{
    // 1BC4A 0041;	
    // (𛱊) DUPLOYAN LETTER UI	[472B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4A, 0x0041 };
    uint32_t const ces[9] = { 0x472B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_043)
{
    // 1BC4A 0062;	
    // (𛱊) DUPLOYAN LETTER UI	[472B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4A, 0x0062 };
    uint32_t const ces[9] = { 0x472B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_044)
{
    // 1BC4B 0021;	
    // (𛱋) DUPLOYAN LETTER EE	[472C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4B, 0x0021 };
    uint32_t const ces[9] = { 0x472C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_045)
{
    // 1BC4B 003F;	
    // (𛱋) DUPLOYAN LETTER EE	[472C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4B, 0x003F };
    uint32_t const ces[9] = { 0x472C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_046)
{
    // 1BC4B 0061;	
    // (𛱋) DUPLOYAN LETTER EE	[472C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4B, 0x0061 };
    uint32_t const ces[9] = { 0x472C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_047)
{
    // 1BC4B 0041;	
    // (𛱋) DUPLOYAN LETTER EE	[472C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4B, 0x0041 };
    uint32_t const ces[9] = { 0x472C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_048)
{
    // 1BC4B 0062;	
    // (𛱋) DUPLOYAN LETTER EE	[472C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4B, 0x0062 };
    uint32_t const ces[9] = { 0x472C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_049)
{
    // 1BC4C 0021;	
    // (𛱌) DUPLOYAN LETTER SLOAN EH	[472D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4C, 0x0021 };
    uint32_t const ces[9] = { 0x472D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_050)
{
    // 1BC4C 003F;	
    // (𛱌) DUPLOYAN LETTER SLOAN EH	[472D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4C, 0x003F };
    uint32_t const ces[9] = { 0x472D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_051)
{
    // 1BC4C 0061;	
    // (𛱌) DUPLOYAN LETTER SLOAN EH	[472D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4C, 0x0061 };
    uint32_t const ces[9] = { 0x472D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_052)
{
    // 1BC4C 0041;	
    // (𛱌) DUPLOYAN LETTER SLOAN EH	[472D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4C, 0x0041 };
    uint32_t const ces[9] = { 0x472D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_053)
{
    // 1BC4C 0062;	
    // (𛱌) DUPLOYAN LETTER SLOAN EH	[472D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4C, 0x0062 };
    uint32_t const ces[9] = { 0x472D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_054)
{
    // 1BC4D 0021;	
    // (𛱍) DUPLOYAN LETTER ROMANIAN I	[472E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4D, 0x0021 };
    uint32_t const ces[9] = { 0x472E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_055)
{
    // 1BC4D 003F;	
    // (𛱍) DUPLOYAN LETTER ROMANIAN I	[472E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4D, 0x003F };
    uint32_t const ces[9] = { 0x472E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_056)
{
    // 1BC4D 0061;	
    // (𛱍) DUPLOYAN LETTER ROMANIAN I	[472E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4D, 0x0061 };
    uint32_t const ces[9] = { 0x472E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_057)
{
    // 1BC4D 0041;	
    // (𛱍) DUPLOYAN LETTER ROMANIAN I	[472E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4D, 0x0041 };
    uint32_t const ces[9] = { 0x472E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_058)
{
    // 1BC4D 0062;	
    // (𛱍) DUPLOYAN LETTER ROMANIAN I	[472E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4D, 0x0062 };
    uint32_t const ces[9] = { 0x472E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_059)
{
    // 1BC4E 0021;	
    // (𛱎) DUPLOYAN LETTER SLOAN EE	[472F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4E, 0x0021 };
    uint32_t const ces[9] = { 0x472F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_060)
{
    // 1BC4E 003F;	
    // (𛱎) DUPLOYAN LETTER SLOAN EE	[472F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4E, 0x003F };
    uint32_t const ces[9] = { 0x472F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_061)
{
    // 1BC4E 0061;	
    // (𛱎) DUPLOYAN LETTER SLOAN EE	[472F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4E, 0x0061 };
    uint32_t const ces[9] = { 0x472F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_062)
{
    // 1BC4E 0041;	
    // (𛱎) DUPLOYAN LETTER SLOAN EE	[472F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4E, 0x0041 };
    uint32_t const ces[9] = { 0x472F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_063)
{
    // 1BC4E 0062;	
    // (𛱎) DUPLOYAN LETTER SLOAN EE	[472F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4E, 0x0062 };
    uint32_t const ces[9] = { 0x472F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_064)
{
    // 1BC4F 0021;	
    // (𛱏) DUPLOYAN LETTER LONG I	[4730 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4F, 0x0021 };
    uint32_t const ces[9] = { 0x4730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_065)
{
    // 1BC4F 003F;	
    // (𛱏) DUPLOYAN LETTER LONG I	[4730 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4F, 0x003F };
    uint32_t const ces[9] = { 0x4730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_066)
{
    // 1BC4F 0061;	
    // (𛱏) DUPLOYAN LETTER LONG I	[4730 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4F, 0x0061 };
    uint32_t const ces[9] = { 0x4730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_067)
{
    // 1BC4F 0041;	
    // (𛱏) DUPLOYAN LETTER LONG I	[4730 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC4F, 0x0041 };
    uint32_t const ces[9] = { 0x4730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_068)
{
    // 1BC4F 0062;	
    // (𛱏) DUPLOYAN LETTER LONG I	[4730 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC4F, 0x0062 };
    uint32_t const ces[9] = { 0x4730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_069)
{
    // 1BC50 0021;	
    // (𛱐) DUPLOYAN LETTER YE	[4731 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC50, 0x0021 };
    uint32_t const ces[9] = { 0x4731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_070)
{
    // 1BC50 003F;	
    // (𛱐) DUPLOYAN LETTER YE	[4731 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC50, 0x003F };
    uint32_t const ces[9] = { 0x4731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_071)
{
    // 1BC50 0061;	
    // (𛱐) DUPLOYAN LETTER YE	[4731 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC50, 0x0061 };
    uint32_t const ces[9] = { 0x4731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_072)
{
    // 1BC50 0041;	
    // (𛱐) DUPLOYAN LETTER YE	[4731 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC50, 0x0041 };
    uint32_t const ces[9] = { 0x4731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_073)
{
    // 1BC50 0062;	
    // (𛱐) DUPLOYAN LETTER YE	[4731 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC50, 0x0062 };
    uint32_t const ces[9] = { 0x4731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_074)
{
    // 1BC51 0021;	
    // (𛱑) DUPLOYAN LETTER U	[4732 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC51, 0x0021 };
    uint32_t const ces[9] = { 0x4732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_075)
{
    // 1BC51 003F;	
    // (𛱑) DUPLOYAN LETTER U	[4732 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC51, 0x003F };
    uint32_t const ces[9] = { 0x4732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_076)
{
    // 1BC51 0061;	
    // (𛱑) DUPLOYAN LETTER U	[4732 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC51, 0x0061 };
    uint32_t const ces[9] = { 0x4732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_077)
{
    // 1BC51 0041;	
    // (𛱑) DUPLOYAN LETTER U	[4732 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC51, 0x0041 };
    uint32_t const ces[9] = { 0x4732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_078)
{
    // 1BC51 0062;	
    // (𛱑) DUPLOYAN LETTER U	[4732 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC51, 0x0062 };
    uint32_t const ces[9] = { 0x4732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_079)
{
    // 1BC52 0021;	
    // (𛱒) DUPLOYAN LETTER EU	[4733 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC52, 0x0021 };
    uint32_t const ces[9] = { 0x4733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_080)
{
    // 1BC52 003F;	
    // (𛱒) DUPLOYAN LETTER EU	[4733 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC52, 0x003F };
    uint32_t const ces[9] = { 0x4733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_081)
{
    // 1BC52 0061;	
    // (𛱒) DUPLOYAN LETTER EU	[4733 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC52, 0x0061 };
    uint32_t const ces[9] = { 0x4733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_082)
{
    // 1BC52 0041;	
    // (𛱒) DUPLOYAN LETTER EU	[4733 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC52, 0x0041 };
    uint32_t const ces[9] = { 0x4733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_083)
{
    // 1BC52 0062;	
    // (𛱒) DUPLOYAN LETTER EU	[4733 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC52, 0x0062 };
    uint32_t const ces[9] = { 0x4733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_084)
{
    // 1BC53 0021;	
    // (𛱓) DUPLOYAN LETTER XW	[4734 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC53, 0x0021 };
    uint32_t const ces[9] = { 0x4734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_085)
{
    // 1BC53 003F;	
    // (𛱓) DUPLOYAN LETTER XW	[4734 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC53, 0x003F };
    uint32_t const ces[9] = { 0x4734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_086)
{
    // 1BC53 0061;	
    // (𛱓) DUPLOYAN LETTER XW	[4734 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC53, 0x0061 };
    uint32_t const ces[9] = { 0x4734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_087)
{
    // 1BC53 0041;	
    // (𛱓) DUPLOYAN LETTER XW	[4734 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC53, 0x0041 };
    uint32_t const ces[9] = { 0x4734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_088)
{
    // 1BC53 0062;	
    // (𛱓) DUPLOYAN LETTER XW	[4734 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC53, 0x0062 };
    uint32_t const ces[9] = { 0x4734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_089)
{
    // 1BC54 0021;	
    // (𛱔) DUPLOYAN LETTER U N	[4735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC54, 0x0021 };
    uint32_t const ces[9] = { 0x4735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_090)
{
    // 1BC54 003F;	
    // (𛱔) DUPLOYAN LETTER U N	[4735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC54, 0x003F };
    uint32_t const ces[9] = { 0x4735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_091)
{
    // 1BC54 0061;	
    // (𛱔) DUPLOYAN LETTER U N	[4735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC54, 0x0061 };
    uint32_t const ces[9] = { 0x4735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_092)
{
    // 1BC54 0041;	
    // (𛱔) DUPLOYAN LETTER U N	[4735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC54, 0x0041 };
    uint32_t const ces[9] = { 0x4735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_093)
{
    // 1BC54 0062;	
    // (𛱔) DUPLOYAN LETTER U N	[4735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC54, 0x0062 };
    uint32_t const ces[9] = { 0x4735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_094)
{
    // 1BC55 0021;	
    // (𛱕) DUPLOYAN LETTER LONG U	[4736 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC55, 0x0021 };
    uint32_t const ces[9] = { 0x4736, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_095)
{
    // 1BC55 003F;	
    // (𛱕) DUPLOYAN LETTER LONG U	[4736 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC55, 0x003F };
    uint32_t const ces[9] = { 0x4736, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_096)
{
    // 1BC55 0061;	
    // (𛱕) DUPLOYAN LETTER LONG U	[4736 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC55, 0x0061 };
    uint32_t const ces[9] = { 0x4736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_097)
{
    // 1BC55 0041;	
    // (𛱕) DUPLOYAN LETTER LONG U	[4736 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC55, 0x0041 };
    uint32_t const ces[9] = { 0x4736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_098)
{
    // 1BC55 0062;	
    // (𛱕) DUPLOYAN LETTER LONG U	[4736 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC55, 0x0062 };
    uint32_t const ces[9] = { 0x4736, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_099)
{
    // 1BC56 0021;	
    // (𛱖) DUPLOYAN LETTER ROMANIAN U	[4737 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC56, 0x0021 };
    uint32_t const ces[9] = { 0x4737, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_100)
{
    // 1BC56 003F;	
    // (𛱖) DUPLOYAN LETTER ROMANIAN U	[4737 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC56, 0x003F };
    uint32_t const ces[9] = { 0x4737, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_101)
{
    // 1BC56 0061;	
    // (𛱖) DUPLOYAN LETTER ROMANIAN U	[4737 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC56, 0x0061 };
    uint32_t const ces[9] = { 0x4737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_102)
{
    // 1BC56 0041;	
    // (𛱖) DUPLOYAN LETTER ROMANIAN U	[4737 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC56, 0x0041 };
    uint32_t const ces[9] = { 0x4737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_103)
{
    // 1BC56 0062;	
    // (𛱖) DUPLOYAN LETTER ROMANIAN U	[4737 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC56, 0x0062 };
    uint32_t const ces[9] = { 0x4737, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_104)
{
    // 1BC57 0021;	
    // (𛱗) DUPLOYAN LETTER UH	[4738 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC57, 0x0021 };
    uint32_t const ces[9] = { 0x4738, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_105)
{
    // 1BC57 003F;	
    // (𛱗) DUPLOYAN LETTER UH	[4738 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC57, 0x003F };
    uint32_t const ces[9] = { 0x4738, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_106)
{
    // 1BC57 0061;	
    // (𛱗) DUPLOYAN LETTER UH	[4738 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC57, 0x0061 };
    uint32_t const ces[9] = { 0x4738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_107)
{
    // 1BC57 0041;	
    // (𛱗) DUPLOYAN LETTER UH	[4738 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC57, 0x0041 };
    uint32_t const ces[9] = { 0x4738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_108)
{
    // 1BC57 0062;	
    // (𛱗) DUPLOYAN LETTER UH	[4738 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC57, 0x0062 };
    uint32_t const ces[9] = { 0x4738, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_109)
{
    // 1BC58 0021;	
    // (𛱘) DUPLOYAN LETTER SLOAN U	[4739 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC58, 0x0021 };
    uint32_t const ces[9] = { 0x4739, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_110)
{
    // 1BC58 003F;	
    // (𛱘) DUPLOYAN LETTER SLOAN U	[4739 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC58, 0x003F };
    uint32_t const ces[9] = { 0x4739, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_111)
{
    // 1BC58 0061;	
    // (𛱘) DUPLOYAN LETTER SLOAN U	[4739 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC58, 0x0061 };
    uint32_t const ces[9] = { 0x4739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_112)
{
    // 1BC58 0041;	
    // (𛱘) DUPLOYAN LETTER SLOAN U	[4739 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC58, 0x0041 };
    uint32_t const ces[9] = { 0x4739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_113)
{
    // 1BC58 0062;	
    // (𛱘) DUPLOYAN LETTER SLOAN U	[4739 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC58, 0x0062 };
    uint32_t const ces[9] = { 0x4739, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_114)
{
    // 1BC59 0021;	
    // (𛱙) DUPLOYAN LETTER OOH	[473A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC59, 0x0021 };
    uint32_t const ces[9] = { 0x473A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_115)
{
    // 1BC59 003F;	
    // (𛱙) DUPLOYAN LETTER OOH	[473A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC59, 0x003F };
    uint32_t const ces[9] = { 0x473A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_116)
{
    // 1BC59 0061;	
    // (𛱙) DUPLOYAN LETTER OOH	[473A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC59, 0x0061 };
    uint32_t const ces[9] = { 0x473A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_117)
{
    // 1BC59 0041;	
    // (𛱙) DUPLOYAN LETTER OOH	[473A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC59, 0x0041 };
    uint32_t const ces[9] = { 0x473A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_118)
{
    // 1BC59 0062;	
    // (𛱙) DUPLOYAN LETTER OOH	[473A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC59, 0x0062 };
    uint32_t const ces[9] = { 0x473A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_119)
{
    // 1BC5A 0021;	
    // (𛱚) DUPLOYAN LETTER OW	[473B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5A, 0x0021 };
    uint32_t const ces[9] = { 0x473B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_120)
{
    // 1BC5A 003F;	
    // (𛱚) DUPLOYAN LETTER OW	[473B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5A, 0x003F };
    uint32_t const ces[9] = { 0x473B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_121)
{
    // 1BC5A 0061;	
    // (𛱚) DUPLOYAN LETTER OW	[473B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5A, 0x0061 };
    uint32_t const ces[9] = { 0x473B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_122)
{
    // 1BC5A 0041;	
    // (𛱚) DUPLOYAN LETTER OW	[473B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5A, 0x0041 };
    uint32_t const ces[9] = { 0x473B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_123)
{
    // 1BC5A 0062;	
    // (𛱚) DUPLOYAN LETTER OW	[473B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5A, 0x0062 };
    uint32_t const ces[9] = { 0x473B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_124)
{
    // 1BC5B 0021;	
    // (𛱛) DUPLOYAN LETTER OU	[473C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5B, 0x0021 };
    uint32_t const ces[9] = { 0x473C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_125)
{
    // 1BC5B 003F;	
    // (𛱛) DUPLOYAN LETTER OU	[473C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5B, 0x003F };
    uint32_t const ces[9] = { 0x473C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_126)
{
    // 1BC5B 0061;	
    // (𛱛) DUPLOYAN LETTER OU	[473C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5B, 0x0061 };
    uint32_t const ces[9] = { 0x473C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_127)
{
    // 1BC5B 0041;	
    // (𛱛) DUPLOYAN LETTER OU	[473C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5B, 0x0041 };
    uint32_t const ces[9] = { 0x473C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_128)
{
    // 1BC5B 0062;	
    // (𛱛) DUPLOYAN LETTER OU	[473C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5B, 0x0062 };
    uint32_t const ces[9] = { 0x473C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_129)
{
    // 1BC5C 0021;	
    // (𛱜) DUPLOYAN LETTER WA	[473D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5C, 0x0021 };
    uint32_t const ces[9] = { 0x473D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_130)
{
    // 1BC5C 003F;	
    // (𛱜) DUPLOYAN LETTER WA	[473D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5C, 0x003F };
    uint32_t const ces[9] = { 0x473D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_131)
{
    // 1BC5C 0061;	
    // (𛱜) DUPLOYAN LETTER WA	[473D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5C, 0x0061 };
    uint32_t const ces[9] = { 0x473D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_132)
{
    // 1BC5C 0041;	
    // (𛱜) DUPLOYAN LETTER WA	[473D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5C, 0x0041 };
    uint32_t const ces[9] = { 0x473D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_133)
{
    // 1BC5C 0062;	
    // (𛱜) DUPLOYAN LETTER WA	[473D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5C, 0x0062 };
    uint32_t const ces[9] = { 0x473D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_134)
{
    // 1BC5D 0021;	
    // (𛱝) DUPLOYAN LETTER WO	[473E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5D, 0x0021 };
    uint32_t const ces[9] = { 0x473E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_135)
{
    // 1BC5D 003F;	
    // (𛱝) DUPLOYAN LETTER WO	[473E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5D, 0x003F };
    uint32_t const ces[9] = { 0x473E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_136)
{
    // 1BC5D 0061;	
    // (𛱝) DUPLOYAN LETTER WO	[473E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5D, 0x0061 };
    uint32_t const ces[9] = { 0x473E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_137)
{
    // 1BC5D 0041;	
    // (𛱝) DUPLOYAN LETTER WO	[473E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5D, 0x0041 };
    uint32_t const ces[9] = { 0x473E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_138)
{
    // 1BC5D 0062;	
    // (𛱝) DUPLOYAN LETTER WO	[473E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5D, 0x0062 };
    uint32_t const ces[9] = { 0x473E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_139)
{
    // 1BC5E 0021;	
    // (𛱞) DUPLOYAN LETTER WI	[473F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5E, 0x0021 };
    uint32_t const ces[9] = { 0x473F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_140)
{
    // 1BC5E 003F;	
    // (𛱞) DUPLOYAN LETTER WI	[473F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5E, 0x003F };
    uint32_t const ces[9] = { 0x473F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_141)
{
    // 1BC5E 0061;	
    // (𛱞) DUPLOYAN LETTER WI	[473F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5E, 0x0061 };
    uint32_t const ces[9] = { 0x473F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_142)
{
    // 1BC5E 0041;	
    // (𛱞) DUPLOYAN LETTER WI	[473F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5E, 0x0041 };
    uint32_t const ces[9] = { 0x473F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_143)
{
    // 1BC5E 0062;	
    // (𛱞) DUPLOYAN LETTER WI	[473F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5E, 0x0062 };
    uint32_t const ces[9] = { 0x473F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_144)
{
    // 1BC5F 0021;	
    // (𛱟) DUPLOYAN LETTER WEI	[4740 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5F, 0x0021 };
    uint32_t const ces[9] = { 0x4740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_145)
{
    // 1BC5F 003F;	
    // (𛱟) DUPLOYAN LETTER WEI	[4740 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5F, 0x003F };
    uint32_t const ces[9] = { 0x4740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_146)
{
    // 1BC5F 0061;	
    // (𛱟) DUPLOYAN LETTER WEI	[4740 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5F, 0x0061 };
    uint32_t const ces[9] = { 0x4740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_147)
{
    // 1BC5F 0041;	
    // (𛱟) DUPLOYAN LETTER WEI	[4740 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC5F, 0x0041 };
    uint32_t const ces[9] = { 0x4740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_148)
{
    // 1BC5F 0062;	
    // (𛱟) DUPLOYAN LETTER WEI	[4740 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5F, 0x0062 };
    uint32_t const ces[9] = { 0x4740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_149)
{
    // 1BC60 0021;	
    // (𛱠) DUPLOYAN LETTER WOW	[4741 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC60, 0x0021 };
    uint32_t const ces[9] = { 0x4741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_150)
{
    // 1BC60 003F;	
    // (𛱠) DUPLOYAN LETTER WOW	[4741 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC60, 0x003F };
    uint32_t const ces[9] = { 0x4741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_151)
{
    // 1BC60 0061;	
    // (𛱠) DUPLOYAN LETTER WOW	[4741 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC60, 0x0061 };
    uint32_t const ces[9] = { 0x4741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_152)
{
    // 1BC60 0041;	
    // (𛱠) DUPLOYAN LETTER WOW	[4741 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC60, 0x0041 };
    uint32_t const ces[9] = { 0x4741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_153)
{
    // 1BC60 0062;	
    // (𛱠) DUPLOYAN LETTER WOW	[4741 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC60, 0x0062 };
    uint32_t const ces[9] = { 0x4741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_154)
{
    // 1BC61 0021;	
    // (𛱡) DUPLOYAN LETTER NASAL U	[4742 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC61, 0x0021 };
    uint32_t const ces[9] = { 0x4742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_155)
{
    // 1BC61 003F;	
    // (𛱡) DUPLOYAN LETTER NASAL U	[4742 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC61, 0x003F };
    uint32_t const ces[9] = { 0x4742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_156)
{
    // 1BC61 0061;	
    // (𛱡) DUPLOYAN LETTER NASAL U	[4742 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC61, 0x0061 };
    uint32_t const ces[9] = { 0x4742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_157)
{
    // 1BC61 0041;	
    // (𛱡) DUPLOYAN LETTER NASAL U	[4742 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC61, 0x0041 };
    uint32_t const ces[9] = { 0x4742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_158)
{
    // 1BC61 0062;	
    // (𛱡) DUPLOYAN LETTER NASAL U	[4742 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC61, 0x0062 };
    uint32_t const ces[9] = { 0x4742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_159)
{
    // 1BC62 0021;	
    // (𛱢) DUPLOYAN LETTER NASAL O	[4743 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC62, 0x0021 };
    uint32_t const ces[9] = { 0x4743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_160)
{
    // 1BC62 003F;	
    // (𛱢) DUPLOYAN LETTER NASAL O	[4743 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC62, 0x003F };
    uint32_t const ces[9] = { 0x4743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_161)
{
    // 1BC62 0061;	
    // (𛱢) DUPLOYAN LETTER NASAL O	[4743 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC62, 0x0061 };
    uint32_t const ces[9] = { 0x4743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_162)
{
    // 1BC62 0041;	
    // (𛱢) DUPLOYAN LETTER NASAL O	[4743 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC62, 0x0041 };
    uint32_t const ces[9] = { 0x4743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_163)
{
    // 1BC62 0062;	
    // (𛱢) DUPLOYAN LETTER NASAL O	[4743 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC62, 0x0062 };
    uint32_t const ces[9] = { 0x4743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_164)
{
    // 1BC63 0021;	
    // (𛱣) DUPLOYAN LETTER NASAL I	[4744 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC63, 0x0021 };
    uint32_t const ces[9] = { 0x4744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_165)
{
    // 1BC63 003F;	
    // (𛱣) DUPLOYAN LETTER NASAL I	[4744 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC63, 0x003F };
    uint32_t const ces[9] = { 0x4744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_166)
{
    // 1BC63 0061;	
    // (𛱣) DUPLOYAN LETTER NASAL I	[4744 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC63, 0x0061 };
    uint32_t const ces[9] = { 0x4744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_167)
{
    // 1BC63 0041;	
    // (𛱣) DUPLOYAN LETTER NASAL I	[4744 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC63, 0x0041 };
    uint32_t const ces[9] = { 0x4744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_168)
{
    // 1BC63 0062;	
    // (𛱣) DUPLOYAN LETTER NASAL I	[4744 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC63, 0x0062 };
    uint32_t const ces[9] = { 0x4744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_169)
{
    // 1BC64 0021;	
    // (𛱤) DUPLOYAN LETTER NASAL A	[4745 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC64, 0x0021 };
    uint32_t const ces[9] = { 0x4745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_170)
{
    // 1BC64 003F;	
    // (𛱤) DUPLOYAN LETTER NASAL A	[4745 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC64, 0x003F };
    uint32_t const ces[9] = { 0x4745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_171)
{
    // 1BC64 0061;	
    // (𛱤) DUPLOYAN LETTER NASAL A	[4745 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC64, 0x0061 };
    uint32_t const ces[9] = { 0x4745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_172)
{
    // 1BC64 0041;	
    // (𛱤) DUPLOYAN LETTER NASAL A	[4745 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC64, 0x0041 };
    uint32_t const ces[9] = { 0x4745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_173)
{
    // 1BC64 0062;	
    // (𛱤) DUPLOYAN LETTER NASAL A	[4745 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC64, 0x0062 };
    uint32_t const ces[9] = { 0x4745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_174)
{
    // 1BC65 0021;	
    // (𛱥) DUPLOYAN LETTER PERNIN AN	[4746 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC65, 0x0021 };
    uint32_t const ces[9] = { 0x4746, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_175)
{
    // 1BC65 003F;	
    // (𛱥) DUPLOYAN LETTER PERNIN AN	[4746 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC65, 0x003F };
    uint32_t const ces[9] = { 0x4746, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_176)
{
    // 1BC65 0061;	
    // (𛱥) DUPLOYAN LETTER PERNIN AN	[4746 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC65, 0x0061 };
    uint32_t const ces[9] = { 0x4746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_177)
{
    // 1BC65 0041;	
    // (𛱥) DUPLOYAN LETTER PERNIN AN	[4746 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC65, 0x0041 };
    uint32_t const ces[9] = { 0x4746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_178)
{
    // 1BC65 0062;	
    // (𛱥) DUPLOYAN LETTER PERNIN AN	[4746 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC65, 0x0062 };
    uint32_t const ces[9] = { 0x4746, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_179)
{
    // 1BC66 0021;	
    // (𛱦) DUPLOYAN LETTER PERNIN AM	[4747 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC66, 0x0021 };
    uint32_t const ces[9] = { 0x4747, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_180)
{
    // 1BC66 003F;	
    // (𛱦) DUPLOYAN LETTER PERNIN AM	[4747 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC66, 0x003F };
    uint32_t const ces[9] = { 0x4747, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_181)
{
    // 1BC66 0061;	
    // (𛱦) DUPLOYAN LETTER PERNIN AM	[4747 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC66, 0x0061 };
    uint32_t const ces[9] = { 0x4747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_182)
{
    // 1BC66 0041;	
    // (𛱦) DUPLOYAN LETTER PERNIN AM	[4747 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC66, 0x0041 };
    uint32_t const ces[9] = { 0x4747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_183)
{
    // 1BC66 0062;	
    // (𛱦) DUPLOYAN LETTER PERNIN AM	[4747 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC66, 0x0062 };
    uint32_t const ces[9] = { 0x4747, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_184)
{
    // 1BC67 0021;	
    // (𛱧) DUPLOYAN LETTER SLOAN EN	[4748 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC67, 0x0021 };
    uint32_t const ces[9] = { 0x4748, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_185)
{
    // 1BC67 003F;	
    // (𛱧) DUPLOYAN LETTER SLOAN EN	[4748 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC67, 0x003F };
    uint32_t const ces[9] = { 0x4748, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_186)
{
    // 1BC67 0061;	
    // (𛱧) DUPLOYAN LETTER SLOAN EN	[4748 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC67, 0x0061 };
    uint32_t const ces[9] = { 0x4748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_187)
{
    // 1BC67 0041;	
    // (𛱧) DUPLOYAN LETTER SLOAN EN	[4748 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC67, 0x0041 };
    uint32_t const ces[9] = { 0x4748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_188)
{
    // 1BC67 0062;	
    // (𛱧) DUPLOYAN LETTER SLOAN EN	[4748 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC67, 0x0062 };
    uint32_t const ces[9] = { 0x4748, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_189)
{
    // 1BC68 0021;	
    // (𛱨) DUPLOYAN LETTER SLOAN AN	[4749 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC68, 0x0021 };
    uint32_t const ces[9] = { 0x4749, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_190)
{
    // 1BC68 003F;	
    // (𛱨) DUPLOYAN LETTER SLOAN AN	[4749 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC68, 0x003F };
    uint32_t const ces[9] = { 0x4749, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_191)
{
    // 1BC68 0061;	
    // (𛱨) DUPLOYAN LETTER SLOAN AN	[4749 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC68, 0x0061 };
    uint32_t const ces[9] = { 0x4749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_192)
{
    // 1BC68 0041;	
    // (𛱨) DUPLOYAN LETTER SLOAN AN	[4749 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC68, 0x0041 };
    uint32_t const ces[9] = { 0x4749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_193)
{
    // 1BC68 0062;	
    // (𛱨) DUPLOYAN LETTER SLOAN AN	[4749 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC68, 0x0062 };
    uint32_t const ces[9] = { 0x4749, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_194)
{
    // 1BC69 0021;	
    // (𛱩) DUPLOYAN LETTER SLOAN ON	[474A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC69, 0x0021 };
    uint32_t const ces[9] = { 0x474A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_195)
{
    // 1BC69 003F;	
    // (𛱩) DUPLOYAN LETTER SLOAN ON	[474A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC69, 0x003F };
    uint32_t const ces[9] = { 0x474A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_196)
{
    // 1BC69 0061;	
    // (𛱩) DUPLOYAN LETTER SLOAN ON	[474A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC69, 0x0061 };
    uint32_t const ces[9] = { 0x474A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_197)
{
    // 1BC69 0041;	
    // (𛱩) DUPLOYAN LETTER SLOAN ON	[474A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC69, 0x0041 };
    uint32_t const ces[9] = { 0x474A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_198)
{
    // 1BC69 0062;	
    // (𛱩) DUPLOYAN LETTER SLOAN ON	[474A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC69, 0x0062 };
    uint32_t const ces[9] = { 0x474A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_199)
{
    // 1BC6A 0021;	
    // (𛱪) DUPLOYAN LETTER VOCALIC M	[474B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC6A, 0x0021 };
    uint32_t const ces[9] = { 0x474B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_200)
{
    // 1BC6A 003F;	
    // (𛱪) DUPLOYAN LETTER VOCALIC M	[474B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC6A, 0x003F };
    uint32_t const ces[9] = { 0x474B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_201)
{
    // 1BC6A 0061;	
    // (𛱪) DUPLOYAN LETTER VOCALIC M	[474B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC6A, 0x0061 };
    uint32_t const ces[9] = { 0x474B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_202)
{
    // 1BC6A 0041;	
    // (𛱪) DUPLOYAN LETTER VOCALIC M	[474B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC6A, 0x0041 };
    uint32_t const ces[9] = { 0x474B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_203)
{
    // 1BC6A 0062;	
    // (𛱪) DUPLOYAN LETTER VOCALIC M	[474B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC6A, 0x0062 };
    uint32_t const ces[9] = { 0x474B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_204)
{
    // 1BC70 0021;	
    // (𛱰) DUPLOYAN AFFIX LEFT HORIZONTAL SECANT	[474C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC70, 0x0021 };
    uint32_t const ces[9] = { 0x474C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_205)
{
    // 1BC70 003F;	
    // (𛱰) DUPLOYAN AFFIX LEFT HORIZONTAL SECANT	[474C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC70, 0x003F };
    uint32_t const ces[9] = { 0x474C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_206)
{
    // 1BC70 0061;	
    // (𛱰) DUPLOYAN AFFIX LEFT HORIZONTAL SECANT	[474C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC70, 0x0061 };
    uint32_t const ces[9] = { 0x474C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_207)
{
    // 1BC70 0041;	
    // (𛱰) DUPLOYAN AFFIX LEFT HORIZONTAL SECANT	[474C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC70, 0x0041 };
    uint32_t const ces[9] = { 0x474C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_208)
{
    // 1BC70 0062;	
    // (𛱰) DUPLOYAN AFFIX LEFT HORIZONTAL SECANT	[474C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC70, 0x0062 };
    uint32_t const ces[9] = { 0x474C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_209)
{
    // 1BC71 0021;	
    // (𛱱) DUPLOYAN AFFIX MID HORIZONTAL SECANT	[474D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC71, 0x0021 };
    uint32_t const ces[9] = { 0x474D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_210)
{
    // 1BC71 003F;	
    // (𛱱) DUPLOYAN AFFIX MID HORIZONTAL SECANT	[474D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC71, 0x003F };
    uint32_t const ces[9] = { 0x474D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_211)
{
    // 1BC71 0061;	
    // (𛱱) DUPLOYAN AFFIX MID HORIZONTAL SECANT	[474D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC71, 0x0061 };
    uint32_t const ces[9] = { 0x474D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_212)
{
    // 1BC71 0041;	
    // (𛱱) DUPLOYAN AFFIX MID HORIZONTAL SECANT	[474D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC71, 0x0041 };
    uint32_t const ces[9] = { 0x474D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_213)
{
    // 1BC71 0062;	
    // (𛱱) DUPLOYAN AFFIX MID HORIZONTAL SECANT	[474D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC71, 0x0062 };
    uint32_t const ces[9] = { 0x474D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_214)
{
    // 1BC72 0021;	
    // (𛱲) DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT	[474E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC72, 0x0021 };
    uint32_t const ces[9] = { 0x474E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_215)
{
    // 1BC72 003F;	
    // (𛱲) DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT	[474E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC72, 0x003F };
    uint32_t const ces[9] = { 0x474E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_216)
{
    // 1BC72 0061;	
    // (𛱲) DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT	[474E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC72, 0x0061 };
    uint32_t const ces[9] = { 0x474E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_217)
{
    // 1BC72 0041;	
    // (𛱲) DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT	[474E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC72, 0x0041 };
    uint32_t const ces[9] = { 0x474E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_218)
{
    // 1BC72 0062;	
    // (𛱲) DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT	[474E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC72, 0x0062 };
    uint32_t const ces[9] = { 0x474E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_219)
{
    // 1BC73 0021;	
    // (𛱳) DUPLOYAN AFFIX LOW VERTICAL SECANT	[474F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC73, 0x0021 };
    uint32_t const ces[9] = { 0x474F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_220)
{
    // 1BC73 003F;	
    // (𛱳) DUPLOYAN AFFIX LOW VERTICAL SECANT	[474F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC73, 0x003F };
    uint32_t const ces[9] = { 0x474F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_221)
{
    // 1BC73 0061;	
    // (𛱳) DUPLOYAN AFFIX LOW VERTICAL SECANT	[474F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC73, 0x0061 };
    uint32_t const ces[9] = { 0x474F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_222)
{
    // 1BC73 0041;	
    // (𛱳) DUPLOYAN AFFIX LOW VERTICAL SECANT	[474F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC73, 0x0041 };
    uint32_t const ces[9] = { 0x474F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_223)
{
    // 1BC73 0062;	
    // (𛱳) DUPLOYAN AFFIX LOW VERTICAL SECANT	[474F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC73, 0x0062 };
    uint32_t const ces[9] = { 0x474F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_224)
{
    // 1BC74 0021;	
    // (𛱴) DUPLOYAN AFFIX MID VERTICAL SECANT	[4750 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC74, 0x0021 };
    uint32_t const ces[9] = { 0x4750, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_225)
{
    // 1BC74 003F;	
    // (𛱴) DUPLOYAN AFFIX MID VERTICAL SECANT	[4750 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC74, 0x003F };
    uint32_t const ces[9] = { 0x4750, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_226)
{
    // 1BC74 0061;	
    // (𛱴) DUPLOYAN AFFIX MID VERTICAL SECANT	[4750 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC74, 0x0061 };
    uint32_t const ces[9] = { 0x4750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_227)
{
    // 1BC74 0041;	
    // (𛱴) DUPLOYAN AFFIX MID VERTICAL SECANT	[4750 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC74, 0x0041 };
    uint32_t const ces[9] = { 0x4750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_228)
{
    // 1BC74 0062;	
    // (𛱴) DUPLOYAN AFFIX MID VERTICAL SECANT	[4750 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC74, 0x0062 };
    uint32_t const ces[9] = { 0x4750, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_229)
{
    // 1BC75 0021;	
    // (𛱵) DUPLOYAN AFFIX HIGH VERTICAL SECANT	[4751 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC75, 0x0021 };
    uint32_t const ces[9] = { 0x4751, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_230)
{
    // 1BC75 003F;	
    // (𛱵) DUPLOYAN AFFIX HIGH VERTICAL SECANT	[4751 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC75, 0x003F };
    uint32_t const ces[9] = { 0x4751, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_231)
{
    // 1BC75 0061;	
    // (𛱵) DUPLOYAN AFFIX HIGH VERTICAL SECANT	[4751 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC75, 0x0061 };
    uint32_t const ces[9] = { 0x4751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_232)
{
    // 1BC75 0041;	
    // (𛱵) DUPLOYAN AFFIX HIGH VERTICAL SECANT	[4751 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC75, 0x0041 };
    uint32_t const ces[9] = { 0x4751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_233)
{
    // 1BC75 0062;	
    // (𛱵) DUPLOYAN AFFIX HIGH VERTICAL SECANT	[4751 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC75, 0x0062 };
    uint32_t const ces[9] = { 0x4751, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_234)
{
    // 1BC76 0021;	
    // (𛱶) DUPLOYAN AFFIX ATTACHED SECANT	[4752 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC76, 0x0021 };
    uint32_t const ces[9] = { 0x4752, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_235)
{
    // 1BC76 003F;	
    // (𛱶) DUPLOYAN AFFIX ATTACHED SECANT	[4752 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC76, 0x003F };
    uint32_t const ces[9] = { 0x4752, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_236)
{
    // 1BC76 0061;	
    // (𛱶) DUPLOYAN AFFIX ATTACHED SECANT	[4752 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC76, 0x0061 };
    uint32_t const ces[9] = { 0x4752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_237)
{
    // 1BC76 0041;	
    // (𛱶) DUPLOYAN AFFIX ATTACHED SECANT	[4752 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC76, 0x0041 };
    uint32_t const ces[9] = { 0x4752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_238)
{
    // 1BC76 0062;	
    // (𛱶) DUPLOYAN AFFIX ATTACHED SECANT	[4752 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC76, 0x0062 };
    uint32_t const ces[9] = { 0x4752, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_239)
{
    // 1BC77 0021;	
    // (𛱷) DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT	[4753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC77, 0x0021 };
    uint32_t const ces[9] = { 0x4753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_240)
{
    // 1BC77 003F;	
    // (𛱷) DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT	[4753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC77, 0x003F };
    uint32_t const ces[9] = { 0x4753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_241)
{
    // 1BC77 0061;	
    // (𛱷) DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT	[4753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC77, 0x0061 };
    uint32_t const ces[9] = { 0x4753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_242)
{
    // 1BC77 0041;	
    // (𛱷) DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT	[4753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC77, 0x0041 };
    uint32_t const ces[9] = { 0x4753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_243)
{
    // 1BC77 0062;	
    // (𛱷) DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT	[4753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC77, 0x0062 };
    uint32_t const ces[9] = { 0x4753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_244)
{
    // 1BC78 0021;	
    // (𛱸) DUPLOYAN AFFIX ATTACHED TANGENT	[4754 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC78, 0x0021 };
    uint32_t const ces[9] = { 0x4754, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_245)
{
    // 1BC78 003F;	
    // (𛱸) DUPLOYAN AFFIX ATTACHED TANGENT	[4754 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC78, 0x003F };
    uint32_t const ces[9] = { 0x4754, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_246)
{
    // 1BC78 0061;	
    // (𛱸) DUPLOYAN AFFIX ATTACHED TANGENT	[4754 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC78, 0x0061 };
    uint32_t const ces[9] = { 0x4754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_247)
{
    // 1BC78 0041;	
    // (𛱸) DUPLOYAN AFFIX ATTACHED TANGENT	[4754 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC78, 0x0041 };
    uint32_t const ces[9] = { 0x4754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_248)
{
    // 1BC78 0062;	
    // (𛱸) DUPLOYAN AFFIX ATTACHED TANGENT	[4754 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC78, 0x0062 };
    uint32_t const ces[9] = { 0x4754, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_249)
{
    // 1BC79 0021;	
    // (𛱹) DUPLOYAN AFFIX ATTACHED TAIL	[4755 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC79, 0x0021 };
    uint32_t const ces[9] = { 0x4755, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_250)
{
    // 1BC79 003F;	
    // (𛱹) DUPLOYAN AFFIX ATTACHED TAIL	[4755 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC79, 0x003F };
    uint32_t const ces[9] = { 0x4755, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_251)
{
    // 1BC79 0061;	
    // (𛱹) DUPLOYAN AFFIX ATTACHED TAIL	[4755 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC79, 0x0061 };
    uint32_t const ces[9] = { 0x4755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_252)
{
    // 1BC79 0041;	
    // (𛱹) DUPLOYAN AFFIX ATTACHED TAIL	[4755 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC79, 0x0041 };
    uint32_t const ces[9] = { 0x4755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_253)
{
    // 1BC79 0062;	
    // (𛱹) DUPLOYAN AFFIX ATTACHED TAIL	[4755 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC79, 0x0062 };
    uint32_t const ces[9] = { 0x4755, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_254)
{
    // 1BC7A 0021;	
    // (𛱺) DUPLOYAN AFFIX ATTACHED E HOOK	[4756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7A, 0x0021 };
    uint32_t const ces[9] = { 0x4756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_255)
{
    // 1BC7A 003F;	
    // (𛱺) DUPLOYAN AFFIX ATTACHED E HOOK	[4756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7A, 0x003F };
    uint32_t const ces[9] = { 0x4756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_256)
{
    // 1BC7A 0061;	
    // (𛱺) DUPLOYAN AFFIX ATTACHED E HOOK	[4756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7A, 0x0061 };
    uint32_t const ces[9] = { 0x4756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_257)
{
    // 1BC7A 0041;	
    // (𛱺) DUPLOYAN AFFIX ATTACHED E HOOK	[4756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC7A, 0x0041 };
    uint32_t const ces[9] = { 0x4756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_258)
{
    // 1BC7A 0062;	
    // (𛱺) DUPLOYAN AFFIX ATTACHED E HOOK	[4756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7A, 0x0062 };
    uint32_t const ces[9] = { 0x4756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_259)
{
    // 1BC7B 0021;	
    // (𛱻) DUPLOYAN AFFIX ATTACHED I HOOK	[4757 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7B, 0x0021 };
    uint32_t const ces[9] = { 0x4757, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_260)
{
    // 1BC7B 003F;	
    // (𛱻) DUPLOYAN AFFIX ATTACHED I HOOK	[4757 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7B, 0x003F };
    uint32_t const ces[9] = { 0x4757, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_261)
{
    // 1BC7B 0061;	
    // (𛱻) DUPLOYAN AFFIX ATTACHED I HOOK	[4757 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7B, 0x0061 };
    uint32_t const ces[9] = { 0x4757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_262)
{
    // 1BC7B 0041;	
    // (𛱻) DUPLOYAN AFFIX ATTACHED I HOOK	[4757 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC7B, 0x0041 };
    uint32_t const ces[9] = { 0x4757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_263)
{
    // 1BC7B 0062;	
    // (𛱻) DUPLOYAN AFFIX ATTACHED I HOOK	[4757 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7B, 0x0062 };
    uint32_t const ces[9] = { 0x4757, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_264)
{
    // 1BC7C 0021;	
    // (𛱼) DUPLOYAN AFFIX ATTACHED TANGENT HOOK	[4758 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7C, 0x0021 };
    uint32_t const ces[9] = { 0x4758, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_265)
{
    // 1BC7C 003F;	
    // (𛱼) DUPLOYAN AFFIX ATTACHED TANGENT HOOK	[4758 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7C, 0x003F };
    uint32_t const ces[9] = { 0x4758, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_266)
{
    // 1BC7C 0061;	
    // (𛱼) DUPLOYAN AFFIX ATTACHED TANGENT HOOK	[4758 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7C, 0x0061 };
    uint32_t const ces[9] = { 0x4758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_267)
{
    // 1BC7C 0041;	
    // (𛱼) DUPLOYAN AFFIX ATTACHED TANGENT HOOK	[4758 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC7C, 0x0041 };
    uint32_t const ces[9] = { 0x4758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_268)
{
    // 1BC7C 0062;	
    // (𛱼) DUPLOYAN AFFIX ATTACHED TANGENT HOOK	[4758 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC7C, 0x0062 };
    uint32_t const ces[9] = { 0x4758, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_269)
{
    // 1BC80 0021;	
    // (𛲀) DUPLOYAN AFFIX HIGH ACUTE	[4759 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC80, 0x0021 };
    uint32_t const ces[9] = { 0x4759, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_270)
{
    // 1BC80 003F;	
    // (𛲀) DUPLOYAN AFFIX HIGH ACUTE	[4759 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC80, 0x003F };
    uint32_t const ces[9] = { 0x4759, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_271)
{
    // 1BC80 0061;	
    // (𛲀) DUPLOYAN AFFIX HIGH ACUTE	[4759 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC80, 0x0061 };
    uint32_t const ces[9] = { 0x4759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_272)
{
    // 1BC80 0041;	
    // (𛲀) DUPLOYAN AFFIX HIGH ACUTE	[4759 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC80, 0x0041 };
    uint32_t const ces[9] = { 0x4759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_273)
{
    // 1BC80 0062;	
    // (𛲀) DUPLOYAN AFFIX HIGH ACUTE	[4759 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC80, 0x0062 };
    uint32_t const ces[9] = { 0x4759, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_274)
{
    // 1BC81 0021;	
    // (𛲁) DUPLOYAN AFFIX HIGH TIGHT ACUTE	[475A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC81, 0x0021 };
    uint32_t const ces[9] = { 0x475A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_275)
{
    // 1BC81 003F;	
    // (𛲁) DUPLOYAN AFFIX HIGH TIGHT ACUTE	[475A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC81, 0x003F };
    uint32_t const ces[9] = { 0x475A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_276)
{
    // 1BC81 0061;	
    // (𛲁) DUPLOYAN AFFIX HIGH TIGHT ACUTE	[475A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC81, 0x0061 };
    uint32_t const ces[9] = { 0x475A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_277)
{
    // 1BC81 0041;	
    // (𛲁) DUPLOYAN AFFIX HIGH TIGHT ACUTE	[475A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC81, 0x0041 };
    uint32_t const ces[9] = { 0x475A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_278)
{
    // 1BC81 0062;	
    // (𛲁) DUPLOYAN AFFIX HIGH TIGHT ACUTE	[475A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC81, 0x0062 };
    uint32_t const ces[9] = { 0x475A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_279)
{
    // 1BC82 0021;	
    // (𛲂) DUPLOYAN AFFIX HIGH GRAVE	[475B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC82, 0x0021 };
    uint32_t const ces[9] = { 0x475B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_280)
{
    // 1BC82 003F;	
    // (𛲂) DUPLOYAN AFFIX HIGH GRAVE	[475B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC82, 0x003F };
    uint32_t const ces[9] = { 0x475B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_281)
{
    // 1BC82 0061;	
    // (𛲂) DUPLOYAN AFFIX HIGH GRAVE	[475B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC82, 0x0061 };
    uint32_t const ces[9] = { 0x475B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_282)
{
    // 1BC82 0041;	
    // (𛲂) DUPLOYAN AFFIX HIGH GRAVE	[475B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC82, 0x0041 };
    uint32_t const ces[9] = { 0x475B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_283)
{
    // 1BC82 0062;	
    // (𛲂) DUPLOYAN AFFIX HIGH GRAVE	[475B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC82, 0x0062 };
    uint32_t const ces[9] = { 0x475B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_284)
{
    // 1BC83 0021;	
    // (𛲃) DUPLOYAN AFFIX HIGH LONG GRAVE	[475C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC83, 0x0021 };
    uint32_t const ces[9] = { 0x475C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_285)
{
    // 1BC83 003F;	
    // (𛲃) DUPLOYAN AFFIX HIGH LONG GRAVE	[475C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC83, 0x003F };
    uint32_t const ces[9] = { 0x475C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_286)
{
    // 1BC83 0061;	
    // (𛲃) DUPLOYAN AFFIX HIGH LONG GRAVE	[475C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC83, 0x0061 };
    uint32_t const ces[9] = { 0x475C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_287)
{
    // 1BC83 0041;	
    // (𛲃) DUPLOYAN AFFIX HIGH LONG GRAVE	[475C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC83, 0x0041 };
    uint32_t const ces[9] = { 0x475C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_288)
{
    // 1BC83 0062;	
    // (𛲃) DUPLOYAN AFFIX HIGH LONG GRAVE	[475C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC83, 0x0062 };
    uint32_t const ces[9] = { 0x475C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_289)
{
    // 1BC84 0021;	
    // (𛲄) DUPLOYAN AFFIX HIGH DOT	[475D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC84, 0x0021 };
    uint32_t const ces[9] = { 0x475D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_290)
{
    // 1BC84 003F;	
    // (𛲄) DUPLOYAN AFFIX HIGH DOT	[475D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC84, 0x003F };
    uint32_t const ces[9] = { 0x475D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_291)
{
    // 1BC84 0061;	
    // (𛲄) DUPLOYAN AFFIX HIGH DOT	[475D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC84, 0x0061 };
    uint32_t const ces[9] = { 0x475D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_292)
{
    // 1BC84 0041;	
    // (𛲄) DUPLOYAN AFFIX HIGH DOT	[475D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC84, 0x0041 };
    uint32_t const ces[9] = { 0x475D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_293)
{
    // 1BC84 0062;	
    // (𛲄) DUPLOYAN AFFIX HIGH DOT	[475D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC84, 0x0062 };
    uint32_t const ces[9] = { 0x475D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_294)
{
    // 1BC85 0021;	
    // (𛲅) DUPLOYAN AFFIX HIGH CIRCLE	[475E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC85, 0x0021 };
    uint32_t const ces[9] = { 0x475E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_295)
{
    // 1BC85 003F;	
    // (𛲅) DUPLOYAN AFFIX HIGH CIRCLE	[475E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC85, 0x003F };
    uint32_t const ces[9] = { 0x475E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_296)
{
    // 1BC85 0061;	
    // (𛲅) DUPLOYAN AFFIX HIGH CIRCLE	[475E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC85, 0x0061 };
    uint32_t const ces[9] = { 0x475E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_297)
{
    // 1BC85 0041;	
    // (𛲅) DUPLOYAN AFFIX HIGH CIRCLE	[475E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC85, 0x0041 };
    uint32_t const ces[9] = { 0x475E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_298)
{
    // 1BC85 0062;	
    // (𛲅) DUPLOYAN AFFIX HIGH CIRCLE	[475E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC85, 0x0062 };
    uint32_t const ces[9] = { 0x475E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_299)
{
    // 1BC86 0021;	
    // (𛲆) DUPLOYAN AFFIX HIGH LINE	[475F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC86, 0x0021 };
    uint32_t const ces[9] = { 0x475F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_300)
{
    // 1BC86 003F;	
    // (𛲆) DUPLOYAN AFFIX HIGH LINE	[475F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC86, 0x003F };
    uint32_t const ces[9] = { 0x475F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_301)
{
    // 1BC86 0061;	
    // (𛲆) DUPLOYAN AFFIX HIGH LINE	[475F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC86, 0x0061 };
    uint32_t const ces[9] = { 0x475F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_302)
{
    // 1BC86 0041;	
    // (𛲆) DUPLOYAN AFFIX HIGH LINE	[475F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC86, 0x0041 };
    uint32_t const ces[9] = { 0x475F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_303)
{
    // 1BC86 0062;	
    // (𛲆) DUPLOYAN AFFIX HIGH LINE	[475F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC86, 0x0062 };
    uint32_t const ces[9] = { 0x475F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_304)
{
    // 1BC87 0021;	
    // (𛲇) DUPLOYAN AFFIX HIGH WAVE	[4760 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC87, 0x0021 };
    uint32_t const ces[9] = { 0x4760, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_305)
{
    // 1BC87 003F;	
    // (𛲇) DUPLOYAN AFFIX HIGH WAVE	[4760 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC87, 0x003F };
    uint32_t const ces[9] = { 0x4760, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_306)
{
    // 1BC87 0061;	
    // (𛲇) DUPLOYAN AFFIX HIGH WAVE	[4760 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC87, 0x0061 };
    uint32_t const ces[9] = { 0x4760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_307)
{
    // 1BC87 0041;	
    // (𛲇) DUPLOYAN AFFIX HIGH WAVE	[4760 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC87, 0x0041 };
    uint32_t const ces[9] = { 0x4760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_308)
{
    // 1BC87 0062;	
    // (𛲇) DUPLOYAN AFFIX HIGH WAVE	[4760 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC87, 0x0062 };
    uint32_t const ces[9] = { 0x4760, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_309)
{
    // 1BC88 0021;	
    // (𛲈) DUPLOYAN AFFIX HIGH VERTICAL	[4761 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC88, 0x0021 };
    uint32_t const ces[9] = { 0x4761, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_310)
{
    // 1BC88 003F;	
    // (𛲈) DUPLOYAN AFFIX HIGH VERTICAL	[4761 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC88, 0x003F };
    uint32_t const ces[9] = { 0x4761, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_311)
{
    // 1BC88 0061;	
    // (𛲈) DUPLOYAN AFFIX HIGH VERTICAL	[4761 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC88, 0x0061 };
    uint32_t const ces[9] = { 0x4761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_312)
{
    // 1BC88 0041;	
    // (𛲈) DUPLOYAN AFFIX HIGH VERTICAL	[4761 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC88, 0x0041 };
    uint32_t const ces[9] = { 0x4761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_313)
{
    // 1BC88 0062;	
    // (𛲈) DUPLOYAN AFFIX HIGH VERTICAL	[4761 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC88, 0x0062 };
    uint32_t const ces[9] = { 0x4761, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_314)
{
    // 1BC90 0021;	
    // (𛲐) DUPLOYAN AFFIX LOW ACUTE	[4762 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC90, 0x0021 };
    uint32_t const ces[9] = { 0x4762, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_315)
{
    // 1BC90 003F;	
    // (𛲐) DUPLOYAN AFFIX LOW ACUTE	[4762 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC90, 0x003F };
    uint32_t const ces[9] = { 0x4762, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_316)
{
    // 1BC90 0061;	
    // (𛲐) DUPLOYAN AFFIX LOW ACUTE	[4762 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC90, 0x0061 };
    uint32_t const ces[9] = { 0x4762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_317)
{
    // 1BC90 0041;	
    // (𛲐) DUPLOYAN AFFIX LOW ACUTE	[4762 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC90, 0x0041 };
    uint32_t const ces[9] = { 0x4762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_318)
{
    // 1BC90 0062;	
    // (𛲐) DUPLOYAN AFFIX LOW ACUTE	[4762 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC90, 0x0062 };
    uint32_t const ces[9] = { 0x4762, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_319)
{
    // 1BC91 0021;	
    // (𛲑) DUPLOYAN AFFIX LOW TIGHT ACUTE	[4763 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC91, 0x0021 };
    uint32_t const ces[9] = { 0x4763, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_320)
{
    // 1BC91 003F;	
    // (𛲑) DUPLOYAN AFFIX LOW TIGHT ACUTE	[4763 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC91, 0x003F };
    uint32_t const ces[9] = { 0x4763, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_321)
{
    // 1BC91 0061;	
    // (𛲑) DUPLOYAN AFFIX LOW TIGHT ACUTE	[4763 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC91, 0x0061 };
    uint32_t const ces[9] = { 0x4763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_322)
{
    // 1BC91 0041;	
    // (𛲑) DUPLOYAN AFFIX LOW TIGHT ACUTE	[4763 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC91, 0x0041 };
    uint32_t const ces[9] = { 0x4763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_323)
{
    // 1BC91 0062;	
    // (𛲑) DUPLOYAN AFFIX LOW TIGHT ACUTE	[4763 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC91, 0x0062 };
    uint32_t const ces[9] = { 0x4763, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_324)
{
    // 1BC92 0021;	
    // (𛲒) DUPLOYAN AFFIX LOW GRAVE	[4764 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC92, 0x0021 };
    uint32_t const ces[9] = { 0x4764, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_325)
{
    // 1BC92 003F;	
    // (𛲒) DUPLOYAN AFFIX LOW GRAVE	[4764 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC92, 0x003F };
    uint32_t const ces[9] = { 0x4764, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_326)
{
    // 1BC92 0061;	
    // (𛲒) DUPLOYAN AFFIX LOW GRAVE	[4764 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC92, 0x0061 };
    uint32_t const ces[9] = { 0x4764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_327)
{
    // 1BC92 0041;	
    // (𛲒) DUPLOYAN AFFIX LOW GRAVE	[4764 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC92, 0x0041 };
    uint32_t const ces[9] = { 0x4764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_328)
{
    // 1BC92 0062;	
    // (𛲒) DUPLOYAN AFFIX LOW GRAVE	[4764 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC92, 0x0062 };
    uint32_t const ces[9] = { 0x4764, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_329)
{
    // 1BC93 0021;	
    // (𛲓) DUPLOYAN AFFIX LOW LONG GRAVE	[4765 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC93, 0x0021 };
    uint32_t const ces[9] = { 0x4765, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_330)
{
    // 1BC93 003F;	
    // (𛲓) DUPLOYAN AFFIX LOW LONG GRAVE	[4765 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC93, 0x003F };
    uint32_t const ces[9] = { 0x4765, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_331)
{
    // 1BC93 0061;	
    // (𛲓) DUPLOYAN AFFIX LOW LONG GRAVE	[4765 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC93, 0x0061 };
    uint32_t const ces[9] = { 0x4765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_332)
{
    // 1BC93 0041;	
    // (𛲓) DUPLOYAN AFFIX LOW LONG GRAVE	[4765 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC93, 0x0041 };
    uint32_t const ces[9] = { 0x4765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_333)
{
    // 1BC93 0062;	
    // (𛲓) DUPLOYAN AFFIX LOW LONG GRAVE	[4765 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC93, 0x0062 };
    uint32_t const ces[9] = { 0x4765, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_334)
{
    // 1BC94 0021;	
    // (𛲔) DUPLOYAN AFFIX LOW DOT	[4766 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC94, 0x0021 };
    uint32_t const ces[9] = { 0x4766, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_335)
{
    // 1BC94 003F;	
    // (𛲔) DUPLOYAN AFFIX LOW DOT	[4766 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC94, 0x003F };
    uint32_t const ces[9] = { 0x4766, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_336)
{
    // 1BC94 0061;	
    // (𛲔) DUPLOYAN AFFIX LOW DOT	[4766 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC94, 0x0061 };
    uint32_t const ces[9] = { 0x4766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_337)
{
    // 1BC94 0041;	
    // (𛲔) DUPLOYAN AFFIX LOW DOT	[4766 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC94, 0x0041 };
    uint32_t const ces[9] = { 0x4766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_338)
{
    // 1BC94 0062;	
    // (𛲔) DUPLOYAN AFFIX LOW DOT	[4766 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC94, 0x0062 };
    uint32_t const ces[9] = { 0x4766, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_339)
{
    // 1BC95 0021;	
    // (𛲕) DUPLOYAN AFFIX LOW CIRCLE	[4767 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC95, 0x0021 };
    uint32_t const ces[9] = { 0x4767, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_340)
{
    // 1BC95 003F;	
    // (𛲕) DUPLOYAN AFFIX LOW CIRCLE	[4767 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC95, 0x003F };
    uint32_t const ces[9] = { 0x4767, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_341)
{
    // 1BC95 0061;	
    // (𛲕) DUPLOYAN AFFIX LOW CIRCLE	[4767 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC95, 0x0061 };
    uint32_t const ces[9] = { 0x4767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_342)
{
    // 1BC95 0041;	
    // (𛲕) DUPLOYAN AFFIX LOW CIRCLE	[4767 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC95, 0x0041 };
    uint32_t const ces[9] = { 0x4767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_343)
{
    // 1BC95 0062;	
    // (𛲕) DUPLOYAN AFFIX LOW CIRCLE	[4767 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC95, 0x0062 };
    uint32_t const ces[9] = { 0x4767, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_344)
{
    // 1BC96 0021;	
    // (𛲖) DUPLOYAN AFFIX LOW LINE	[4768 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC96, 0x0021 };
    uint32_t const ces[9] = { 0x4768, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_345)
{
    // 1BC96 003F;	
    // (𛲖) DUPLOYAN AFFIX LOW LINE	[4768 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC96, 0x003F };
    uint32_t const ces[9] = { 0x4768, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_346)
{
    // 1BC96 0061;	
    // (𛲖) DUPLOYAN AFFIX LOW LINE	[4768 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC96, 0x0061 };
    uint32_t const ces[9] = { 0x4768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_347)
{
    // 1BC96 0041;	
    // (𛲖) DUPLOYAN AFFIX LOW LINE	[4768 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC96, 0x0041 };
    uint32_t const ces[9] = { 0x4768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_348)
{
    // 1BC96 0062;	
    // (𛲖) DUPLOYAN AFFIX LOW LINE	[4768 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC96, 0x0062 };
    uint32_t const ces[9] = { 0x4768, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_349)
{
    // 1BC97 0021;	
    // (𛲗) DUPLOYAN AFFIX LOW WAVE	[4769 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC97, 0x0021 };
    uint32_t const ces[9] = { 0x4769, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_350)
{
    // 1BC97 003F;	
    // (𛲗) DUPLOYAN AFFIX LOW WAVE	[4769 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC97, 0x003F };
    uint32_t const ces[9] = { 0x4769, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_351)
{
    // 1BC97 0061;	
    // (𛲗) DUPLOYAN AFFIX LOW WAVE	[4769 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC97, 0x0061 };
    uint32_t const ces[9] = { 0x4769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_352)
{
    // 1BC97 0041;	
    // (𛲗) DUPLOYAN AFFIX LOW WAVE	[4769 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC97, 0x0041 };
    uint32_t const ces[9] = { 0x4769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_353)
{
    // 1BC97 0062;	
    // (𛲗) DUPLOYAN AFFIX LOW WAVE	[4769 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC97, 0x0062 };
    uint32_t const ces[9] = { 0x4769, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_354)
{
    // 1BC98 0021;	
    // (𛲘) DUPLOYAN AFFIX LOW VERTICAL	[476A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC98, 0x0021 };
    uint32_t const ces[9] = { 0x476A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_355)
{
    // 1BC98 003F;	
    // (𛲘) DUPLOYAN AFFIX LOW VERTICAL	[476A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC98, 0x003F };
    uint32_t const ces[9] = { 0x476A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_356)
{
    // 1BC98 0061;	
    // (𛲘) DUPLOYAN AFFIX LOW VERTICAL	[476A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC98, 0x0061 };
    uint32_t const ces[9] = { 0x476A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_357)
{
    // 1BC98 0041;	
    // (𛲘) DUPLOYAN AFFIX LOW VERTICAL	[476A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC98, 0x0041 };
    uint32_t const ces[9] = { 0x476A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_358)
{
    // 1BC98 0062;	
    // (𛲘) DUPLOYAN AFFIX LOW VERTICAL	[476A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC98, 0x0062 };
    uint32_t const ces[9] = { 0x476A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_359)
{
    // 1BC99 0021;	
    // (𛲙) DUPLOYAN AFFIX LOW ARROW	[476B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC99, 0x0021 };
    uint32_t const ces[9] = { 0x476B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_360)
{
    // 1BC99 003F;	
    // (𛲙) DUPLOYAN AFFIX LOW ARROW	[476B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC99, 0x003F };
    uint32_t const ces[9] = { 0x476B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_361)
{
    // 1BC99 0061;	
    // (𛲙) DUPLOYAN AFFIX LOW ARROW	[476B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC99, 0x0061 };
    uint32_t const ces[9] = { 0x476B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_362)
{
    // 1BC99 0041;	
    // (𛲙) DUPLOYAN AFFIX LOW ARROW	[476B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC99, 0x0041 };
    uint32_t const ces[9] = { 0x476B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_363)
{
    // 1BC99 0062;	
    // (𛲙) DUPLOYAN AFFIX LOW ARROW	[476B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC99, 0x0062 };
    uint32_t const ces[9] = { 0x476B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_364)
{
    // 10480 0021;	
    // (𐒀) OSMANYA LETTER ALEF	[476C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10480, 0x0021 };
    uint32_t const ces[9] = { 0x476C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_365)
{
    // 10480 003F;	
    // (𐒀) OSMANYA LETTER ALEF	[476C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10480, 0x003F };
    uint32_t const ces[9] = { 0x476C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_366)
{
    // 10480 0061;	
    // (𐒀) OSMANYA LETTER ALEF	[476C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10480, 0x0061 };
    uint32_t const ces[9] = { 0x476C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_367)
{
    // 10480 0041;	
    // (𐒀) OSMANYA LETTER ALEF	[476C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10480, 0x0041 };
    uint32_t const ces[9] = { 0x476C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_368)
{
    // 10480 0062;	
    // (𐒀) OSMANYA LETTER ALEF	[476C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10480, 0x0062 };
    uint32_t const ces[9] = { 0x476C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_369)
{
    // 10481 0021;	
    // (𐒁) OSMANYA LETTER BA	[476D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10481, 0x0021 };
    uint32_t const ces[9] = { 0x476D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_370)
{
    // 10481 003F;	
    // (𐒁) OSMANYA LETTER BA	[476D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10481, 0x003F };
    uint32_t const ces[9] = { 0x476D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_371)
{
    // 10481 0061;	
    // (𐒁) OSMANYA LETTER BA	[476D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10481, 0x0061 };
    uint32_t const ces[9] = { 0x476D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_372)
{
    // 10481 0041;	
    // (𐒁) OSMANYA LETTER BA	[476D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10481, 0x0041 };
    uint32_t const ces[9] = { 0x476D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_373)
{
    // 10481 0062;	
    // (𐒁) OSMANYA LETTER BA	[476D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10481, 0x0062 };
    uint32_t const ces[9] = { 0x476D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_374)
{
    // 10482 0021;	
    // (𐒂) OSMANYA LETTER TA	[476E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10482, 0x0021 };
    uint32_t const ces[9] = { 0x476E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_375)
{
    // 10482 003F;	
    // (𐒂) OSMANYA LETTER TA	[476E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10482, 0x003F };
    uint32_t const ces[9] = { 0x476E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_376)
{
    // 10482 0061;	
    // (𐒂) OSMANYA LETTER TA	[476E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10482, 0x0061 };
    uint32_t const ces[9] = { 0x476E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_377)
{
    // 10482 0041;	
    // (𐒂) OSMANYA LETTER TA	[476E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10482, 0x0041 };
    uint32_t const ces[9] = { 0x476E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_378)
{
    // 10482 0062;	
    // (𐒂) OSMANYA LETTER TA	[476E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10482, 0x0062 };
    uint32_t const ces[9] = { 0x476E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_379)
{
    // 10483 0021;	
    // (𐒃) OSMANYA LETTER JA	[476F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10483, 0x0021 };
    uint32_t const ces[9] = { 0x476F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_380)
{
    // 10483 003F;	
    // (𐒃) OSMANYA LETTER JA	[476F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10483, 0x003F };
    uint32_t const ces[9] = { 0x476F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_381)
{
    // 10483 0061;	
    // (𐒃) OSMANYA LETTER JA	[476F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10483, 0x0061 };
    uint32_t const ces[9] = { 0x476F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_382)
{
    // 10483 0041;	
    // (𐒃) OSMANYA LETTER JA	[476F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10483, 0x0041 };
    uint32_t const ces[9] = { 0x476F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_383)
{
    // 10483 0062;	
    // (𐒃) OSMANYA LETTER JA	[476F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10483, 0x0062 };
    uint32_t const ces[9] = { 0x476F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_384)
{
    // 10484 0021;	
    // (𐒄) OSMANYA LETTER XA	[4770 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10484, 0x0021 };
    uint32_t const ces[9] = { 0x4770, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_385)
{
    // 10484 003F;	
    // (𐒄) OSMANYA LETTER XA	[4770 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10484, 0x003F };
    uint32_t const ces[9] = { 0x4770, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_386)
{
    // 10484 0061;	
    // (𐒄) OSMANYA LETTER XA	[4770 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10484, 0x0061 };
    uint32_t const ces[9] = { 0x4770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_387)
{
    // 10484 0041;	
    // (𐒄) OSMANYA LETTER XA	[4770 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10484, 0x0041 };
    uint32_t const ces[9] = { 0x4770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_388)
{
    // 10484 0062;	
    // (𐒄) OSMANYA LETTER XA	[4770 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10484, 0x0062 };
    uint32_t const ces[9] = { 0x4770, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_389)
{
    // 10485 0021;	
    // (𐒅) OSMANYA LETTER KHA	[4771 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10485, 0x0021 };
    uint32_t const ces[9] = { 0x4771, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_390)
{
    // 10485 003F;	
    // (𐒅) OSMANYA LETTER KHA	[4771 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10485, 0x003F };
    uint32_t const ces[9] = { 0x4771, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_391)
{
    // 10485 0061;	
    // (𐒅) OSMANYA LETTER KHA	[4771 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10485, 0x0061 };
    uint32_t const ces[9] = { 0x4771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_392)
{
    // 10485 0041;	
    // (𐒅) OSMANYA LETTER KHA	[4771 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10485, 0x0041 };
    uint32_t const ces[9] = { 0x4771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_393)
{
    // 10485 0062;	
    // (𐒅) OSMANYA LETTER KHA	[4771 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10485, 0x0062 };
    uint32_t const ces[9] = { 0x4771, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_394)
{
    // 10486 0021;	
    // (𐒆) OSMANYA LETTER DEEL	[4772 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10486, 0x0021 };
    uint32_t const ces[9] = { 0x4772, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_395)
{
    // 10486 003F;	
    // (𐒆) OSMANYA LETTER DEEL	[4772 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10486, 0x003F };
    uint32_t const ces[9] = { 0x4772, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_396)
{
    // 10486 0061;	
    // (𐒆) OSMANYA LETTER DEEL	[4772 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10486, 0x0061 };
    uint32_t const ces[9] = { 0x4772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_397)
{
    // 10486 0041;	
    // (𐒆) OSMANYA LETTER DEEL	[4772 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10486, 0x0041 };
    uint32_t const ces[9] = { 0x4772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_398)
{
    // 10486 0062;	
    // (𐒆) OSMANYA LETTER DEEL	[4772 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10486, 0x0062 };
    uint32_t const ces[9] = { 0x4772, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_399)
{
    // 10487 0021;	
    // (𐒇) OSMANYA LETTER RA	[4773 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10487, 0x0021 };
    uint32_t const ces[9] = { 0x4773, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_400)
{
    // 10487 003F;	
    // (𐒇) OSMANYA LETTER RA	[4773 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10487, 0x003F };
    uint32_t const ces[9] = { 0x4773, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_401)
{
    // 10487 0061;	
    // (𐒇) OSMANYA LETTER RA	[4773 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10487, 0x0061 };
    uint32_t const ces[9] = { 0x4773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_402)
{
    // 10487 0041;	
    // (𐒇) OSMANYA LETTER RA	[4773 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10487, 0x0041 };
    uint32_t const ces[9] = { 0x4773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_403)
{
    // 10487 0062;	
    // (𐒇) OSMANYA LETTER RA	[4773 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10487, 0x0062 };
    uint32_t const ces[9] = { 0x4773, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_404)
{
    // 10488 0021;	
    // (𐒈) OSMANYA LETTER SA	[4774 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10488, 0x0021 };
    uint32_t const ces[9] = { 0x4774, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_405)
{
    // 10488 003F;	
    // (𐒈) OSMANYA LETTER SA	[4774 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10488, 0x003F };
    uint32_t const ces[9] = { 0x4774, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_406)
{
    // 10488 0061;	
    // (𐒈) OSMANYA LETTER SA	[4774 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10488, 0x0061 };
    uint32_t const ces[9] = { 0x4774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_407)
{
    // 10488 0041;	
    // (𐒈) OSMANYA LETTER SA	[4774 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10488, 0x0041 };
    uint32_t const ces[9] = { 0x4774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_408)
{
    // 10488 0062;	
    // (𐒈) OSMANYA LETTER SA	[4774 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10488, 0x0062 };
    uint32_t const ces[9] = { 0x4774, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_409)
{
    // 10489 0021;	
    // (𐒉) OSMANYA LETTER SHIIN	[4775 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10489, 0x0021 };
    uint32_t const ces[9] = { 0x4775, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_410)
{
    // 10489 003F;	
    // (𐒉) OSMANYA LETTER SHIIN	[4775 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10489, 0x003F };
    uint32_t const ces[9] = { 0x4775, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_411)
{
    // 10489 0061;	
    // (𐒉) OSMANYA LETTER SHIIN	[4775 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10489, 0x0061 };
    uint32_t const ces[9] = { 0x4775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_412)
{
    // 10489 0041;	
    // (𐒉) OSMANYA LETTER SHIIN	[4775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10489, 0x0041 };
    uint32_t const ces[9] = { 0x4775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_413)
{
    // 10489 0062;	
    // (𐒉) OSMANYA LETTER SHIIN	[4775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10489, 0x0062 };
    uint32_t const ces[9] = { 0x4775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_414)
{
    // 1048A 0021;	
    // (𐒊) OSMANYA LETTER DHA	[4776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048A, 0x0021 };
    uint32_t const ces[9] = { 0x4776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_415)
{
    // 1048A 003F;	
    // (𐒊) OSMANYA LETTER DHA	[4776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048A, 0x003F };
    uint32_t const ces[9] = { 0x4776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_416)
{
    // 1048A 0061;	
    // (𐒊) OSMANYA LETTER DHA	[4776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048A, 0x0061 };
    uint32_t const ces[9] = { 0x4776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_417)
{
    // 1048A 0041;	
    // (𐒊) OSMANYA LETTER DHA	[4776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048A, 0x0041 };
    uint32_t const ces[9] = { 0x4776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_418)
{
    // 1048A 0062;	
    // (𐒊) OSMANYA LETTER DHA	[4776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048A, 0x0062 };
    uint32_t const ces[9] = { 0x4776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_419)
{
    // 1048B 0021;	
    // (𐒋) OSMANYA LETTER CAYN	[4777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048B, 0x0021 };
    uint32_t const ces[9] = { 0x4777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_420)
{
    // 1048B 003F;	
    // (𐒋) OSMANYA LETTER CAYN	[4777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048B, 0x003F };
    uint32_t const ces[9] = { 0x4777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_421)
{
    // 1048B 0061;	
    // (𐒋) OSMANYA LETTER CAYN	[4777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048B, 0x0061 };
    uint32_t const ces[9] = { 0x4777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_422)
{
    // 1048B 0041;	
    // (𐒋) OSMANYA LETTER CAYN	[4777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048B, 0x0041 };
    uint32_t const ces[9] = { 0x4777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_423)
{
    // 1048B 0062;	
    // (𐒋) OSMANYA LETTER CAYN	[4777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048B, 0x0062 };
    uint32_t const ces[9] = { 0x4777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_424)
{
    // 1048C 0021;	
    // (𐒌) OSMANYA LETTER GA	[4778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048C, 0x0021 };
    uint32_t const ces[9] = { 0x4778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_425)
{
    // 1048C 003F;	
    // (𐒌) OSMANYA LETTER GA	[4778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048C, 0x003F };
    uint32_t const ces[9] = { 0x4778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_426)
{
    // 1048C 0061;	
    // (𐒌) OSMANYA LETTER GA	[4778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048C, 0x0061 };
    uint32_t const ces[9] = { 0x4778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_427)
{
    // 1048C 0041;	
    // (𐒌) OSMANYA LETTER GA	[4778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048C, 0x0041 };
    uint32_t const ces[9] = { 0x4778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_428)
{
    // 1048C 0062;	
    // (𐒌) OSMANYA LETTER GA	[4778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048C, 0x0062 };
    uint32_t const ces[9] = { 0x4778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_429)
{
    // 1048D 0021;	
    // (𐒍) OSMANYA LETTER FA	[4779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048D, 0x0021 };
    uint32_t const ces[9] = { 0x4779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_430)
{
    // 1048D 003F;	
    // (𐒍) OSMANYA LETTER FA	[4779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048D, 0x003F };
    uint32_t const ces[9] = { 0x4779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_431)
{
    // 1048D 0061;	
    // (𐒍) OSMANYA LETTER FA	[4779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048D, 0x0061 };
    uint32_t const ces[9] = { 0x4779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_432)
{
    // 1048D 0041;	
    // (𐒍) OSMANYA LETTER FA	[4779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048D, 0x0041 };
    uint32_t const ces[9] = { 0x4779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_433)
{
    // 1048D 0062;	
    // (𐒍) OSMANYA LETTER FA	[4779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048D, 0x0062 };
    uint32_t const ces[9] = { 0x4779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_434)
{
    // 1048E 0021;	
    // (𐒎) OSMANYA LETTER QAAF	[477A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048E, 0x0021 };
    uint32_t const ces[9] = { 0x477A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_435)
{
    // 1048E 003F;	
    // (𐒎) OSMANYA LETTER QAAF	[477A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048E, 0x003F };
    uint32_t const ces[9] = { 0x477A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_436)
{
    // 1048E 0061;	
    // (𐒎) OSMANYA LETTER QAAF	[477A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048E, 0x0061 };
    uint32_t const ces[9] = { 0x477A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_437)
{
    // 1048E 0041;	
    // (𐒎) OSMANYA LETTER QAAF	[477A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048E, 0x0041 };
    uint32_t const ces[9] = { 0x477A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_438)
{
    // 1048E 0062;	
    // (𐒎) OSMANYA LETTER QAAF	[477A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048E, 0x0062 };
    uint32_t const ces[9] = { 0x477A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_439)
{
    // 1048F 0021;	
    // (𐒏) OSMANYA LETTER KAAF	[477B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048F, 0x0021 };
    uint32_t const ces[9] = { 0x477B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_440)
{
    // 1048F 003F;	
    // (𐒏) OSMANYA LETTER KAAF	[477B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048F, 0x003F };
    uint32_t const ces[9] = { 0x477B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_441)
{
    // 1048F 0061;	
    // (𐒏) OSMANYA LETTER KAAF	[477B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048F, 0x0061 };
    uint32_t const ces[9] = { 0x477B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_442)
{
    // 1048F 0041;	
    // (𐒏) OSMANYA LETTER KAAF	[477B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048F, 0x0041 };
    uint32_t const ces[9] = { 0x477B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_443)
{
    // 1048F 0062;	
    // (𐒏) OSMANYA LETTER KAAF	[477B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048F, 0x0062 };
    uint32_t const ces[9] = { 0x477B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_444)
{
    // 10490 0021;	
    // (𐒐) OSMANYA LETTER LAAN	[477C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10490, 0x0021 };
    uint32_t const ces[9] = { 0x477C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_445)
{
    // 10490 003F;	
    // (𐒐) OSMANYA LETTER LAAN	[477C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10490, 0x003F };
    uint32_t const ces[9] = { 0x477C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_446)
{
    // 10490 0061;	
    // (𐒐) OSMANYA LETTER LAAN	[477C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10490, 0x0061 };
    uint32_t const ces[9] = { 0x477C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_447)
{
    // 10490 0041;	
    // (𐒐) OSMANYA LETTER LAAN	[477C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10490, 0x0041 };
    uint32_t const ces[9] = { 0x477C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_448)
{
    // 10490 0062;	
    // (𐒐) OSMANYA LETTER LAAN	[477C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10490, 0x0062 };
    uint32_t const ces[9] = { 0x477C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_449)
{
    // 10491 0021;	
    // (𐒑) OSMANYA LETTER MIIN	[477D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10491, 0x0021 };
    uint32_t const ces[9] = { 0x477D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_450)
{
    // 10491 003F;	
    // (𐒑) OSMANYA LETTER MIIN	[477D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10491, 0x003F };
    uint32_t const ces[9] = { 0x477D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_451)
{
    // 10491 0061;	
    // (𐒑) OSMANYA LETTER MIIN	[477D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10491, 0x0061 };
    uint32_t const ces[9] = { 0x477D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_452)
{
    // 10491 0041;	
    // (𐒑) OSMANYA LETTER MIIN	[477D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10491, 0x0041 };
    uint32_t const ces[9] = { 0x477D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_453)
{
    // 10491 0062;	
    // (𐒑) OSMANYA LETTER MIIN	[477D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10491, 0x0062 };
    uint32_t const ces[9] = { 0x477D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_454)
{
    // 10492 0021;	
    // (𐒒) OSMANYA LETTER NUUN	[477E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10492, 0x0021 };
    uint32_t const ces[9] = { 0x477E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_455)
{
    // 10492 003F;	
    // (𐒒) OSMANYA LETTER NUUN	[477E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10492, 0x003F };
    uint32_t const ces[9] = { 0x477E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_456)
{
    // 10492 0061;	
    // (𐒒) OSMANYA LETTER NUUN	[477E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10492, 0x0061 };
    uint32_t const ces[9] = { 0x477E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_457)
{
    // 10492 0041;	
    // (𐒒) OSMANYA LETTER NUUN	[477E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10492, 0x0041 };
    uint32_t const ces[9] = { 0x477E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_458)
{
    // 10492 0062;	
    // (𐒒) OSMANYA LETTER NUUN	[477E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10492, 0x0062 };
    uint32_t const ces[9] = { 0x477E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_459)
{
    // 10493 0021;	
    // (𐒓) OSMANYA LETTER WAW	[477F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10493, 0x0021 };
    uint32_t const ces[9] = { 0x477F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_460)
{
    // 10493 003F;	
    // (𐒓) OSMANYA LETTER WAW	[477F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10493, 0x003F };
    uint32_t const ces[9] = { 0x477F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_461)
{
    // 10493 0061;	
    // (𐒓) OSMANYA LETTER WAW	[477F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10493, 0x0061 };
    uint32_t const ces[9] = { 0x477F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_462)
{
    // 10493 0041;	
    // (𐒓) OSMANYA LETTER WAW	[477F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10493, 0x0041 };
    uint32_t const ces[9] = { 0x477F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_463)
{
    // 10493 0062;	
    // (𐒓) OSMANYA LETTER WAW	[477F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10493, 0x0062 };
    uint32_t const ces[9] = { 0x477F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_464)
{
    // 10494 0021;	
    // (𐒔) OSMANYA LETTER HA	[4780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10494, 0x0021 };
    uint32_t const ces[9] = { 0x4780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_465)
{
    // 10494 003F;	
    // (𐒔) OSMANYA LETTER HA	[4780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10494, 0x003F };
    uint32_t const ces[9] = { 0x4780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_466)
{
    // 10494 0061;	
    // (𐒔) OSMANYA LETTER HA	[4780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10494, 0x0061 };
    uint32_t const ces[9] = { 0x4780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_467)
{
    // 10494 0041;	
    // (𐒔) OSMANYA LETTER HA	[4780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10494, 0x0041 };
    uint32_t const ces[9] = { 0x4780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_468)
{
    // 10494 0062;	
    // (𐒔) OSMANYA LETTER HA	[4780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10494, 0x0062 };
    uint32_t const ces[9] = { 0x4780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_469)
{
    // 10495 0021;	
    // (𐒕) OSMANYA LETTER YA	[4781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10495, 0x0021 };
    uint32_t const ces[9] = { 0x4781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_470)
{
    // 10495 003F;	
    // (𐒕) OSMANYA LETTER YA	[4781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10495, 0x003F };
    uint32_t const ces[9] = { 0x4781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_471)
{
    // 10495 0061;	
    // (𐒕) OSMANYA LETTER YA	[4781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10495, 0x0061 };
    uint32_t const ces[9] = { 0x4781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_472)
{
    // 10495 0041;	
    // (𐒕) OSMANYA LETTER YA	[4781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10495, 0x0041 };
    uint32_t const ces[9] = { 0x4781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_473)
{
    // 10495 0062;	
    // (𐒕) OSMANYA LETTER YA	[4781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10495, 0x0062 };
    uint32_t const ces[9] = { 0x4781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_474)
{
    // 10496 0021;	
    // (𐒖) OSMANYA LETTER A	[4782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10496, 0x0021 };
    uint32_t const ces[9] = { 0x4782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_475)
{
    // 10496 003F;	
    // (𐒖) OSMANYA LETTER A	[4782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10496, 0x003F };
    uint32_t const ces[9] = { 0x4782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_476)
{
    // 10496 0061;	
    // (𐒖) OSMANYA LETTER A	[4782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10496, 0x0061 };
    uint32_t const ces[9] = { 0x4782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_477)
{
    // 10496 0041;	
    // (𐒖) OSMANYA LETTER A	[4782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10496, 0x0041 };
    uint32_t const ces[9] = { 0x4782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_478)
{
    // 10496 0062;	
    // (𐒖) OSMANYA LETTER A	[4782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10496, 0x0062 };
    uint32_t const ces[9] = { 0x4782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_479)
{
    // 10497 0021;	
    // (𐒗) OSMANYA LETTER E	[4783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10497, 0x0021 };
    uint32_t const ces[9] = { 0x4783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_480)
{
    // 10497 003F;	
    // (𐒗) OSMANYA LETTER E	[4783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10497, 0x003F };
    uint32_t const ces[9] = { 0x4783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_481)
{
    // 10497 0061;	
    // (𐒗) OSMANYA LETTER E	[4783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10497, 0x0061 };
    uint32_t const ces[9] = { 0x4783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_482)
{
    // 10497 0041;	
    // (𐒗) OSMANYA LETTER E	[4783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10497, 0x0041 };
    uint32_t const ces[9] = { 0x4783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_483)
{
    // 10497 0062;	
    // (𐒗) OSMANYA LETTER E	[4783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10497, 0x0062 };
    uint32_t const ces[9] = { 0x4783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_484)
{
    // 10498 0021;	
    // (𐒘) OSMANYA LETTER I	[4784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10498, 0x0021 };
    uint32_t const ces[9] = { 0x4784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_485)
{
    // 10498 003F;	
    // (𐒘) OSMANYA LETTER I	[4784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10498, 0x003F };
    uint32_t const ces[9] = { 0x4784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_486)
{
    // 10498 0061;	
    // (𐒘) OSMANYA LETTER I	[4784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10498, 0x0061 };
    uint32_t const ces[9] = { 0x4784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_487)
{
    // 10498 0041;	
    // (𐒘) OSMANYA LETTER I	[4784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10498, 0x0041 };
    uint32_t const ces[9] = { 0x4784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_488)
{
    // 10498 0062;	
    // (𐒘) OSMANYA LETTER I	[4784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10498, 0x0062 };
    uint32_t const ces[9] = { 0x4784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_489)
{
    // 10499 0021;	
    // (𐒙) OSMANYA LETTER O	[4785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10499, 0x0021 };
    uint32_t const ces[9] = { 0x4785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_490)
{
    // 10499 003F;	
    // (𐒙) OSMANYA LETTER O	[4785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10499, 0x003F };
    uint32_t const ces[9] = { 0x4785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_491)
{
    // 10499 0061;	
    // (𐒙) OSMANYA LETTER O	[4785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10499, 0x0061 };
    uint32_t const ces[9] = { 0x4785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_492)
{
    // 10499 0041;	
    // (𐒙) OSMANYA LETTER O	[4785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10499, 0x0041 };
    uint32_t const ces[9] = { 0x4785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_493)
{
    // 10499 0062;	
    // (𐒙) OSMANYA LETTER O	[4785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10499, 0x0062 };
    uint32_t const ces[9] = { 0x4785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_494)
{
    // 1049A 0021;	
    // (𐒚) OSMANYA LETTER U	[4786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049A, 0x0021 };
    uint32_t const ces[9] = { 0x4786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_495)
{
    // 1049A 003F;	
    // (𐒚) OSMANYA LETTER U	[4786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049A, 0x003F };
    uint32_t const ces[9] = { 0x4786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_496)
{
    // 1049A 0061;	
    // (𐒚) OSMANYA LETTER U	[4786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049A, 0x0061 };
    uint32_t const ces[9] = { 0x4786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_497)
{
    // 1049A 0041;	
    // (𐒚) OSMANYA LETTER U	[4786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1049A, 0x0041 };
    uint32_t const ces[9] = { 0x4786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_498)
{
    // 1049A 0062;	
    // (𐒚) OSMANYA LETTER U	[4786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049A, 0x0062 };
    uint32_t const ces[9] = { 0x4786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_273_499)
{
    // 1049B 0021;	
    // (𐒛) OSMANYA LETTER AA	[4787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049B, 0x0021 };
    uint32_t const ces[9] = { 0x4787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

