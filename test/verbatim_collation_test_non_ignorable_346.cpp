// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_346_000)
{
    // 3B72 003F;	
    // (㭲) CJK UNIFIED IDEOGRAPH-3B72	[FB80 BB72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_001)
{
    // 3B72 0061;	
    // (㭲) CJK UNIFIED IDEOGRAPH-3B72	[FB80 BB72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_002)
{
    // 3B72 0041;	
    // (㭲) CJK UNIFIED IDEOGRAPH-3B72	[FB80 BB72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_003)
{
    // 3B72 0062;	
    // (㭲) CJK UNIFIED IDEOGRAPH-3B72	[FB80 BB72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_004)
{
    // 3B73 0021;	
    // (㭳) CJK UNIFIED IDEOGRAPH-3B73	[FB80 BB73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_005)
{
    // 3B73 003F;	
    // (㭳) CJK UNIFIED IDEOGRAPH-3B73	[FB80 BB73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_006)
{
    // 3B73 0061;	
    // (㭳) CJK UNIFIED IDEOGRAPH-3B73	[FB80 BB73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_007)
{
    // 3B73 0041;	
    // (㭳) CJK UNIFIED IDEOGRAPH-3B73	[FB80 BB73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_008)
{
    // 3B73 0062;	
    // (㭳) CJK UNIFIED IDEOGRAPH-3B73	[FB80 BB73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_009)
{
    // 3B74 0021;	
    // (㭴) CJK UNIFIED IDEOGRAPH-3B74	[FB80 BB74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_010)
{
    // 3B74 003F;	
    // (㭴) CJK UNIFIED IDEOGRAPH-3B74	[FB80 BB74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_011)
{
    // 3B74 0061;	
    // (㭴) CJK UNIFIED IDEOGRAPH-3B74	[FB80 BB74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_012)
{
    // 3B74 0041;	
    // (㭴) CJK UNIFIED IDEOGRAPH-3B74	[FB80 BB74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_013)
{
    // 3B74 0062;	
    // (㭴) CJK UNIFIED IDEOGRAPH-3B74	[FB80 BB74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_014)
{
    // 3B75 0021;	
    // (㭵) CJK UNIFIED IDEOGRAPH-3B75	[FB80 BB75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_015)
{
    // 3B75 003F;	
    // (㭵) CJK UNIFIED IDEOGRAPH-3B75	[FB80 BB75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_016)
{
    // 3B75 0061;	
    // (㭵) CJK UNIFIED IDEOGRAPH-3B75	[FB80 BB75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_017)
{
    // 3B75 0041;	
    // (㭵) CJK UNIFIED IDEOGRAPH-3B75	[FB80 BB75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_018)
{
    // 3B75 0062;	
    // (㭵) CJK UNIFIED IDEOGRAPH-3B75	[FB80 BB75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_019)
{
    // 3B76 0021;	
    // (㭶) CJK UNIFIED IDEOGRAPH-3B76	[FB80 BB76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_020)
{
    // 3B76 003F;	
    // (㭶) CJK UNIFIED IDEOGRAPH-3B76	[FB80 BB76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_021)
{
    // 3B76 0061;	
    // (㭶) CJK UNIFIED IDEOGRAPH-3B76	[FB80 BB76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_022)
{
    // 3B76 0041;	
    // (㭶) CJK UNIFIED IDEOGRAPH-3B76	[FB80 BB76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_023)
{
    // 3B76 0062;	
    // (㭶) CJK UNIFIED IDEOGRAPH-3B76	[FB80 BB76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_024)
{
    // 3B77 0021;	
    // (㭷) CJK UNIFIED IDEOGRAPH-3B77	[FB80 BB77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_025)
{
    // 3B77 003F;	
    // (㭷) CJK UNIFIED IDEOGRAPH-3B77	[FB80 BB77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_026)
{
    // 3B77 0061;	
    // (㭷) CJK UNIFIED IDEOGRAPH-3B77	[FB80 BB77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_027)
{
    // 3B77 0041;	
    // (㭷) CJK UNIFIED IDEOGRAPH-3B77	[FB80 BB77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_028)
{
    // 3B77 0062;	
    // (㭷) CJK UNIFIED IDEOGRAPH-3B77	[FB80 BB77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_029)
{
    // 3B78 0021;	
    // (㭸) CJK UNIFIED IDEOGRAPH-3B78	[FB80 BB78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_030)
{
    // 3B78 003F;	
    // (㭸) CJK UNIFIED IDEOGRAPH-3B78	[FB80 BB78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_031)
{
    // 3B78 0061;	
    // (㭸) CJK UNIFIED IDEOGRAPH-3B78	[FB80 BB78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_032)
{
    // 3B78 0041;	
    // (㭸) CJK UNIFIED IDEOGRAPH-3B78	[FB80 BB78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_033)
{
    // 3B78 0062;	
    // (㭸) CJK UNIFIED IDEOGRAPH-3B78	[FB80 BB78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_034)
{
    // 3B79 0021;	
    // (㭹) CJK UNIFIED IDEOGRAPH-3B79	[FB80 BB79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_035)
{
    // 3B79 003F;	
    // (㭹) CJK UNIFIED IDEOGRAPH-3B79	[FB80 BB79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_036)
{
    // 3B79 0061;	
    // (㭹) CJK UNIFIED IDEOGRAPH-3B79	[FB80 BB79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_037)
{
    // 3B79 0041;	
    // (㭹) CJK UNIFIED IDEOGRAPH-3B79	[FB80 BB79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_038)
{
    // 3B79 0062;	
    // (㭹) CJK UNIFIED IDEOGRAPH-3B79	[FB80 BB79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_039)
{
    // 3B7A 0021;	
    // (㭺) CJK UNIFIED IDEOGRAPH-3B7A	[FB80 BB7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_040)
{
    // 3B7A 003F;	
    // (㭺) CJK UNIFIED IDEOGRAPH-3B7A	[FB80 BB7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_041)
{
    // 3B7A 0061;	
    // (㭺) CJK UNIFIED IDEOGRAPH-3B7A	[FB80 BB7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_042)
{
    // 3B7A 0041;	
    // (㭺) CJK UNIFIED IDEOGRAPH-3B7A	[FB80 BB7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_043)
{
    // 3B7A 0062;	
    // (㭺) CJK UNIFIED IDEOGRAPH-3B7A	[FB80 BB7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_044)
{
    // 3B7B 0021;	
    // (㭻) CJK UNIFIED IDEOGRAPH-3B7B	[FB80 BB7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_045)
{
    // 3B7B 003F;	
    // (㭻) CJK UNIFIED IDEOGRAPH-3B7B	[FB80 BB7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_046)
{
    // 3B7B 0061;	
    // (㭻) CJK UNIFIED IDEOGRAPH-3B7B	[FB80 BB7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_047)
{
    // 3B7B 0041;	
    // (㭻) CJK UNIFIED IDEOGRAPH-3B7B	[FB80 BB7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_048)
{
    // 3B7B 0062;	
    // (㭻) CJK UNIFIED IDEOGRAPH-3B7B	[FB80 BB7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_049)
{
    // 3B7C 0021;	
    // (㭼) CJK UNIFIED IDEOGRAPH-3B7C	[FB80 BB7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_050)
{
    // 3B7C 003F;	
    // (㭼) CJK UNIFIED IDEOGRAPH-3B7C	[FB80 BB7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_051)
{
    // 3B7C 0061;	
    // (㭼) CJK UNIFIED IDEOGRAPH-3B7C	[FB80 BB7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_052)
{
    // 3B7C 0041;	
    // (㭼) CJK UNIFIED IDEOGRAPH-3B7C	[FB80 BB7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_053)
{
    // 3B7C 0062;	
    // (㭼) CJK UNIFIED IDEOGRAPH-3B7C	[FB80 BB7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_054)
{
    // 3B7D 0021;	
    // (㭽) CJK UNIFIED IDEOGRAPH-3B7D	[FB80 BB7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_055)
{
    // 3B7D 003F;	
    // (㭽) CJK UNIFIED IDEOGRAPH-3B7D	[FB80 BB7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_056)
{
    // 3B7D 0061;	
    // (㭽) CJK UNIFIED IDEOGRAPH-3B7D	[FB80 BB7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_057)
{
    // 3B7D 0041;	
    // (㭽) CJK UNIFIED IDEOGRAPH-3B7D	[FB80 BB7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_058)
{
    // 3B7D 0062;	
    // (㭽) CJK UNIFIED IDEOGRAPH-3B7D	[FB80 BB7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_059)
{
    // 3B7E 0021;	
    // (㭾) CJK UNIFIED IDEOGRAPH-3B7E	[FB80 BB7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_060)
{
    // 3B7E 003F;	
    // (㭾) CJK UNIFIED IDEOGRAPH-3B7E	[FB80 BB7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_061)
{
    // 3B7E 0061;	
    // (㭾) CJK UNIFIED IDEOGRAPH-3B7E	[FB80 BB7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_062)
{
    // 3B7E 0041;	
    // (㭾) CJK UNIFIED IDEOGRAPH-3B7E	[FB80 BB7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_063)
{
    // 3B7E 0062;	
    // (㭾) CJK UNIFIED IDEOGRAPH-3B7E	[FB80 BB7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_064)
{
    // 3B7F 0021;	
    // (㭿) CJK UNIFIED IDEOGRAPH-3B7F	[FB80 BB7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_065)
{
    // 3B7F 003F;	
    // (㭿) CJK UNIFIED IDEOGRAPH-3B7F	[FB80 BB7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_066)
{
    // 3B7F 0061;	
    // (㭿) CJK UNIFIED IDEOGRAPH-3B7F	[FB80 BB7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_067)
{
    // 3B7F 0041;	
    // (㭿) CJK UNIFIED IDEOGRAPH-3B7F	[FB80 BB7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_068)
{
    // 3B7F 0062;	
    // (㭿) CJK UNIFIED IDEOGRAPH-3B7F	[FB80 BB7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_069)
{
    // 3B80 0021;	
    // (㮀) CJK UNIFIED IDEOGRAPH-3B80	[FB80 BB80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_070)
{
    // 3B80 003F;	
    // (㮀) CJK UNIFIED IDEOGRAPH-3B80	[FB80 BB80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_071)
{
    // 3B80 0061;	
    // (㮀) CJK UNIFIED IDEOGRAPH-3B80	[FB80 BB80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_072)
{
    // 3B80 0041;	
    // (㮀) CJK UNIFIED IDEOGRAPH-3B80	[FB80 BB80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_073)
{
    // 3B80 0062;	
    // (㮀) CJK UNIFIED IDEOGRAPH-3B80	[FB80 BB80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_074)
{
    // 3B81 0021;	
    // (㮁) CJK UNIFIED IDEOGRAPH-3B81	[FB80 BB81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_075)
{
    // 3B81 003F;	
    // (㮁) CJK UNIFIED IDEOGRAPH-3B81	[FB80 BB81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_076)
{
    // 3B81 0061;	
    // (㮁) CJK UNIFIED IDEOGRAPH-3B81	[FB80 BB81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_077)
{
    // 3B81 0041;	
    // (㮁) CJK UNIFIED IDEOGRAPH-3B81	[FB80 BB81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_078)
{
    // 3B81 0062;	
    // (㮁) CJK UNIFIED IDEOGRAPH-3B81	[FB80 BB81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_079)
{
    // 3B82 0021;	
    // (㮂) CJK UNIFIED IDEOGRAPH-3B82	[FB80 BB82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_080)
{
    // 3B82 003F;	
    // (㮂) CJK UNIFIED IDEOGRAPH-3B82	[FB80 BB82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_081)
{
    // 3B82 0061;	
    // (㮂) CJK UNIFIED IDEOGRAPH-3B82	[FB80 BB82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_082)
{
    // 3B82 0041;	
    // (㮂) CJK UNIFIED IDEOGRAPH-3B82	[FB80 BB82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_083)
{
    // 3B82 0062;	
    // (㮂) CJK UNIFIED IDEOGRAPH-3B82	[FB80 BB82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_084)
{
    // 3B83 0021;	
    // (㮃) CJK UNIFIED IDEOGRAPH-3B83	[FB80 BB83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_085)
{
    // 3B83 003F;	
    // (㮃) CJK UNIFIED IDEOGRAPH-3B83	[FB80 BB83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_086)
{
    // 3B83 0061;	
    // (㮃) CJK UNIFIED IDEOGRAPH-3B83	[FB80 BB83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_087)
{
    // 3B83 0041;	
    // (㮃) CJK UNIFIED IDEOGRAPH-3B83	[FB80 BB83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_088)
{
    // 3B83 0062;	
    // (㮃) CJK UNIFIED IDEOGRAPH-3B83	[FB80 BB83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_089)
{
    // 3B84 0021;	
    // (㮄) CJK UNIFIED IDEOGRAPH-3B84	[FB80 BB84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_090)
{
    // 3B84 003F;	
    // (㮄) CJK UNIFIED IDEOGRAPH-3B84	[FB80 BB84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_091)
{
    // 3B84 0061;	
    // (㮄) CJK UNIFIED IDEOGRAPH-3B84	[FB80 BB84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_092)
{
    // 3B84 0041;	
    // (㮄) CJK UNIFIED IDEOGRAPH-3B84	[FB80 BB84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_093)
{
    // 3B84 0062;	
    // (㮄) CJK UNIFIED IDEOGRAPH-3B84	[FB80 BB84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_094)
{
    // 3B85 0021;	
    // (㮅) CJK UNIFIED IDEOGRAPH-3B85	[FB80 BB85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_095)
{
    // 3B85 003F;	
    // (㮅) CJK UNIFIED IDEOGRAPH-3B85	[FB80 BB85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_096)
{
    // 3B85 0061;	
    // (㮅) CJK UNIFIED IDEOGRAPH-3B85	[FB80 BB85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_097)
{
    // 3B85 0041;	
    // (㮅) CJK UNIFIED IDEOGRAPH-3B85	[FB80 BB85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_098)
{
    // 3B85 0062;	
    // (㮅) CJK UNIFIED IDEOGRAPH-3B85	[FB80 BB85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_099)
{
    // 3B86 0021;	
    // (㮆) CJK UNIFIED IDEOGRAPH-3B86	[FB80 BB86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_100)
{
    // 3B86 003F;	
    // (㮆) CJK UNIFIED IDEOGRAPH-3B86	[FB80 BB86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_101)
{
    // 3B86 0061;	
    // (㮆) CJK UNIFIED IDEOGRAPH-3B86	[FB80 BB86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_102)
{
    // 3B86 0041;	
    // (㮆) CJK UNIFIED IDEOGRAPH-3B86	[FB80 BB86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_103)
{
    // 3B86 0062;	
    // (㮆) CJK UNIFIED IDEOGRAPH-3B86	[FB80 BB86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_104)
{
    // 3B87 0021;	
    // (㮇) CJK UNIFIED IDEOGRAPH-3B87	[FB80 BB87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_105)
{
    // 3B87 003F;	
    // (㮇) CJK UNIFIED IDEOGRAPH-3B87	[FB80 BB87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_106)
{
    // 3B87 0061;	
    // (㮇) CJK UNIFIED IDEOGRAPH-3B87	[FB80 BB87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_107)
{
    // 3B87 0041;	
    // (㮇) CJK UNIFIED IDEOGRAPH-3B87	[FB80 BB87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_108)
{
    // 3B87 0062;	
    // (㮇) CJK UNIFIED IDEOGRAPH-3B87	[FB80 BB87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_109)
{
    // 3B88 0021;	
    // (㮈) CJK UNIFIED IDEOGRAPH-3B88	[FB80 BB88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_110)
{
    // 3B88 003F;	
    // (㮈) CJK UNIFIED IDEOGRAPH-3B88	[FB80 BB88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_111)
{
    // 3B88 0061;	
    // (㮈) CJK UNIFIED IDEOGRAPH-3B88	[FB80 BB88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_112)
{
    // 3B88 0041;	
    // (㮈) CJK UNIFIED IDEOGRAPH-3B88	[FB80 BB88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_113)
{
    // 3B88 0062;	
    // (㮈) CJK UNIFIED IDEOGRAPH-3B88	[FB80 BB88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_114)
{
    // 3B89 0021;	
    // (㮉) CJK UNIFIED IDEOGRAPH-3B89	[FB80 BB89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_115)
{
    // 3B89 003F;	
    // (㮉) CJK UNIFIED IDEOGRAPH-3B89	[FB80 BB89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_116)
{
    // 3B89 0061;	
    // (㮉) CJK UNIFIED IDEOGRAPH-3B89	[FB80 BB89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_117)
{
    // 3B89 0041;	
    // (㮉) CJK UNIFIED IDEOGRAPH-3B89	[FB80 BB89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_118)
{
    // 3B89 0062;	
    // (㮉) CJK UNIFIED IDEOGRAPH-3B89	[FB80 BB89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_119)
{
    // 3B8A 0021;	
    // (㮊) CJK UNIFIED IDEOGRAPH-3B8A	[FB80 BB8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_120)
{
    // 3B8A 003F;	
    // (㮊) CJK UNIFIED IDEOGRAPH-3B8A	[FB80 BB8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_121)
{
    // 3B8A 0061;	
    // (㮊) CJK UNIFIED IDEOGRAPH-3B8A	[FB80 BB8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_122)
{
    // 3B8A 0041;	
    // (㮊) CJK UNIFIED IDEOGRAPH-3B8A	[FB80 BB8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_123)
{
    // 3B8A 0062;	
    // (㮊) CJK UNIFIED IDEOGRAPH-3B8A	[FB80 BB8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_124)
{
    // 3B8B 0021;	
    // (㮋) CJK UNIFIED IDEOGRAPH-3B8B	[FB80 BB8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_125)
{
    // 3B8B 003F;	
    // (㮋) CJK UNIFIED IDEOGRAPH-3B8B	[FB80 BB8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_126)
{
    // 3B8B 0061;	
    // (㮋) CJK UNIFIED IDEOGRAPH-3B8B	[FB80 BB8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_127)
{
    // 3B8B 0041;	
    // (㮋) CJK UNIFIED IDEOGRAPH-3B8B	[FB80 BB8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_128)
{
    // 3B8B 0062;	
    // (㮋) CJK UNIFIED IDEOGRAPH-3B8B	[FB80 BB8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_129)
{
    // 3B8C 0021;	
    // (㮌) CJK UNIFIED IDEOGRAPH-3B8C	[FB80 BB8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_130)
{
    // 3B8C 003F;	
    // (㮌) CJK UNIFIED IDEOGRAPH-3B8C	[FB80 BB8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_131)
{
    // 3B8C 0061;	
    // (㮌) CJK UNIFIED IDEOGRAPH-3B8C	[FB80 BB8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_132)
{
    // 3B8C 0041;	
    // (㮌) CJK UNIFIED IDEOGRAPH-3B8C	[FB80 BB8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_133)
{
    // 3B8C 0062;	
    // (㮌) CJK UNIFIED IDEOGRAPH-3B8C	[FB80 BB8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_134)
{
    // 3B8D 0021;	
    // (㮍) CJK UNIFIED IDEOGRAPH-3B8D	[FB80 BB8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_135)
{
    // 3B8D 003F;	
    // (㮍) CJK UNIFIED IDEOGRAPH-3B8D	[FB80 BB8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_136)
{
    // 3B8D 0061;	
    // (㮍) CJK UNIFIED IDEOGRAPH-3B8D	[FB80 BB8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_137)
{
    // 3B8D 0041;	
    // (㮍) CJK UNIFIED IDEOGRAPH-3B8D	[FB80 BB8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_138)
{
    // 3B8D 0062;	
    // (㮍) CJK UNIFIED IDEOGRAPH-3B8D	[FB80 BB8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_139)
{
    // 3B8E 0021;	
    // (㮎) CJK UNIFIED IDEOGRAPH-3B8E	[FB80 BB8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_140)
{
    // 3B8E 003F;	
    // (㮎) CJK UNIFIED IDEOGRAPH-3B8E	[FB80 BB8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_141)
{
    // 3B8E 0061;	
    // (㮎) CJK UNIFIED IDEOGRAPH-3B8E	[FB80 BB8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_142)
{
    // 3B8E 0041;	
    // (㮎) CJK UNIFIED IDEOGRAPH-3B8E	[FB80 BB8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_143)
{
    // 3B8E 0062;	
    // (㮎) CJK UNIFIED IDEOGRAPH-3B8E	[FB80 BB8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_144)
{
    // 3B8F 0021;	
    // (㮏) CJK UNIFIED IDEOGRAPH-3B8F	[FB80 BB8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_145)
{
    // 3B8F 003F;	
    // (㮏) CJK UNIFIED IDEOGRAPH-3B8F	[FB80 BB8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_146)
{
    // 3B8F 0061;	
    // (㮏) CJK UNIFIED IDEOGRAPH-3B8F	[FB80 BB8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_147)
{
    // 3B8F 0041;	
    // (㮏) CJK UNIFIED IDEOGRAPH-3B8F	[FB80 BB8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_148)
{
    // 3B8F 0062;	
    // (㮏) CJK UNIFIED IDEOGRAPH-3B8F	[FB80 BB8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_149)
{
    // 3B90 0021;	
    // (㮐) CJK UNIFIED IDEOGRAPH-3B90	[FB80 BB90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_150)
{
    // 3B90 003F;	
    // (㮐) CJK UNIFIED IDEOGRAPH-3B90	[FB80 BB90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_151)
{
    // 3B90 0061;	
    // (㮐) CJK UNIFIED IDEOGRAPH-3B90	[FB80 BB90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_152)
{
    // 3B90 0041;	
    // (㮐) CJK UNIFIED IDEOGRAPH-3B90	[FB80 BB90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_153)
{
    // 3B90 0062;	
    // (㮐) CJK UNIFIED IDEOGRAPH-3B90	[FB80 BB90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_154)
{
    // 3B91 0021;	
    // (㮑) CJK UNIFIED IDEOGRAPH-3B91	[FB80 BB91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_155)
{
    // 3B91 003F;	
    // (㮑) CJK UNIFIED IDEOGRAPH-3B91	[FB80 BB91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_156)
{
    // 3B91 0061;	
    // (㮑) CJK UNIFIED IDEOGRAPH-3B91	[FB80 BB91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_157)
{
    // 3B91 0041;	
    // (㮑) CJK UNIFIED IDEOGRAPH-3B91	[FB80 BB91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_158)
{
    // 3B91 0062;	
    // (㮑) CJK UNIFIED IDEOGRAPH-3B91	[FB80 BB91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_159)
{
    // 3B92 0021;	
    // (㮒) CJK UNIFIED IDEOGRAPH-3B92	[FB80 BB92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_160)
{
    // 3B92 003F;	
    // (㮒) CJK UNIFIED IDEOGRAPH-3B92	[FB80 BB92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_161)
{
    // 3B92 0061;	
    // (㮒) CJK UNIFIED IDEOGRAPH-3B92	[FB80 BB92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_162)
{
    // 3B92 0041;	
    // (㮒) CJK UNIFIED IDEOGRAPH-3B92	[FB80 BB92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_163)
{
    // 3B92 0062;	
    // (㮒) CJK UNIFIED IDEOGRAPH-3B92	[FB80 BB92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_164)
{
    // 3B93 0021;	
    // (㮓) CJK UNIFIED IDEOGRAPH-3B93	[FB80 BB93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_165)
{
    // 3B93 003F;	
    // (㮓) CJK UNIFIED IDEOGRAPH-3B93	[FB80 BB93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_166)
{
    // 3B93 0061;	
    // (㮓) CJK UNIFIED IDEOGRAPH-3B93	[FB80 BB93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_167)
{
    // 3B93 0041;	
    // (㮓) CJK UNIFIED IDEOGRAPH-3B93	[FB80 BB93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_168)
{
    // 3B93 0062;	
    // (㮓) CJK UNIFIED IDEOGRAPH-3B93	[FB80 BB93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_169)
{
    // 3B94 0021;	
    // (㮔) CJK UNIFIED IDEOGRAPH-3B94	[FB80 BB94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_170)
{
    // 3B94 003F;	
    // (㮔) CJK UNIFIED IDEOGRAPH-3B94	[FB80 BB94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_171)
{
    // 3B94 0061;	
    // (㮔) CJK UNIFIED IDEOGRAPH-3B94	[FB80 BB94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_172)
{
    // 3B94 0041;	
    // (㮔) CJK UNIFIED IDEOGRAPH-3B94	[FB80 BB94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_173)
{
    // 3B94 0062;	
    // (㮔) CJK UNIFIED IDEOGRAPH-3B94	[FB80 BB94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_174)
{
    // 3B95 0021;	
    // (㮕) CJK UNIFIED IDEOGRAPH-3B95	[FB80 BB95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_175)
{
    // 3B95 003F;	
    // (㮕) CJK UNIFIED IDEOGRAPH-3B95	[FB80 BB95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_176)
{
    // 3B95 0061;	
    // (㮕) CJK UNIFIED IDEOGRAPH-3B95	[FB80 BB95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_177)
{
    // 3B95 0041;	
    // (㮕) CJK UNIFIED IDEOGRAPH-3B95	[FB80 BB95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_178)
{
    // 3B95 0062;	
    // (㮕) CJK UNIFIED IDEOGRAPH-3B95	[FB80 BB95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_179)
{
    // 3B96 0021;	
    // (㮖) CJK UNIFIED IDEOGRAPH-3B96	[FB80 BB96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_180)
{
    // 3B96 003F;	
    // (㮖) CJK UNIFIED IDEOGRAPH-3B96	[FB80 BB96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_181)
{
    // 3B96 0061;	
    // (㮖) CJK UNIFIED IDEOGRAPH-3B96	[FB80 BB96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_182)
{
    // 3B96 0041;	
    // (㮖) CJK UNIFIED IDEOGRAPH-3B96	[FB80 BB96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_183)
{
    // 3B96 0062;	
    // (㮖) CJK UNIFIED IDEOGRAPH-3B96	[FB80 BB96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_184)
{
    // 3B97 0021;	
    // (㮗) CJK UNIFIED IDEOGRAPH-3B97	[FB80 BB97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_185)
{
    // 3B97 003F;	
    // (㮗) CJK UNIFIED IDEOGRAPH-3B97	[FB80 BB97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_186)
{
    // 3B97 0061;	
    // (㮗) CJK UNIFIED IDEOGRAPH-3B97	[FB80 BB97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_187)
{
    // 3B97 0041;	
    // (㮗) CJK UNIFIED IDEOGRAPH-3B97	[FB80 BB97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_188)
{
    // 3B97 0062;	
    // (㮗) CJK UNIFIED IDEOGRAPH-3B97	[FB80 BB97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_189)
{
    // 3B98 0021;	
    // (㮘) CJK UNIFIED IDEOGRAPH-3B98	[FB80 BB98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_190)
{
    // 3B98 003F;	
    // (㮘) CJK UNIFIED IDEOGRAPH-3B98	[FB80 BB98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_191)
{
    // 3B98 0061;	
    // (㮘) CJK UNIFIED IDEOGRAPH-3B98	[FB80 BB98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_192)
{
    // 3B98 0041;	
    // (㮘) CJK UNIFIED IDEOGRAPH-3B98	[FB80 BB98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_193)
{
    // 3B98 0062;	
    // (㮘) CJK UNIFIED IDEOGRAPH-3B98	[FB80 BB98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_194)
{
    // 3B99 0021;	
    // (㮙) CJK UNIFIED IDEOGRAPH-3B99	[FB80 BB99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_195)
{
    // 3B99 003F;	
    // (㮙) CJK UNIFIED IDEOGRAPH-3B99	[FB80 BB99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_196)
{
    // 3B99 0061;	
    // (㮙) CJK UNIFIED IDEOGRAPH-3B99	[FB80 BB99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_197)
{
    // 3B99 0041;	
    // (㮙) CJK UNIFIED IDEOGRAPH-3B99	[FB80 BB99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_198)
{
    // 3B99 0062;	
    // (㮙) CJK UNIFIED IDEOGRAPH-3B99	[FB80 BB99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_199)
{
    // 3B9A 0021;	
    // (㮚) CJK UNIFIED IDEOGRAPH-3B9A	[FB80 BB9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_200)
{
    // 3B9A 003F;	
    // (㮚) CJK UNIFIED IDEOGRAPH-3B9A	[FB80 BB9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_201)
{
    // 3B9A 0061;	
    // (㮚) CJK UNIFIED IDEOGRAPH-3B9A	[FB80 BB9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_202)
{
    // 3B9A 0041;	
    // (㮚) CJK UNIFIED IDEOGRAPH-3B9A	[FB80 BB9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_203)
{
    // 3B9A 0062;	
    // (㮚) CJK UNIFIED IDEOGRAPH-3B9A	[FB80 BB9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_204)
{
    // 3B9B 0021;	
    // (㮛) CJK UNIFIED IDEOGRAPH-3B9B	[FB80 BB9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_205)
{
    // 3B9B 003F;	
    // (㮛) CJK UNIFIED IDEOGRAPH-3B9B	[FB80 BB9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_206)
{
    // 3B9B 0061;	
    // (㮛) CJK UNIFIED IDEOGRAPH-3B9B	[FB80 BB9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_207)
{
    // 3B9B 0041;	
    // (㮛) CJK UNIFIED IDEOGRAPH-3B9B	[FB80 BB9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_208)
{
    // 3B9B 0062;	
    // (㮛) CJK UNIFIED IDEOGRAPH-3B9B	[FB80 BB9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_209)
{
    // 3B9C 0021;	
    // (㮜) CJK UNIFIED IDEOGRAPH-3B9C	[FB80 BB9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_210)
{
    // 3B9C 003F;	
    // (㮜) CJK UNIFIED IDEOGRAPH-3B9C	[FB80 BB9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_211)
{
    // 3B9C 0061;	
    // (㮜) CJK UNIFIED IDEOGRAPH-3B9C	[FB80 BB9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_212)
{
    // 3B9C 0041;	
    // (㮜) CJK UNIFIED IDEOGRAPH-3B9C	[FB80 BB9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_213)
{
    // 3B9C 0062;	
    // (㮜) CJK UNIFIED IDEOGRAPH-3B9C	[FB80 BB9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_214)
{
    // 3B9D 0021;	
    // (㮝) CJK UNIFIED IDEOGRAPH-3B9D	[FB80 BB9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_215)
{
    // FAD2 0021;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-FAD2	[FB80 BB9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_216)
{
    // 2F8E7 0021;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-2F8E7	[FB80 BB9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_217)
{
    // 3B9D 003F;	
    // (㮝) CJK UNIFIED IDEOGRAPH-3B9D	[FB80 BB9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_218)
{
    // FAD2 003F;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-FAD2	[FB80 BB9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_219)
{
    // 2F8E7 003F;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-2F8E7	[FB80 BB9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_220)
{
    // 3B9D 0061;	
    // (㮝) CJK UNIFIED IDEOGRAPH-3B9D	[FB80 BB9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_221)
{
    // FAD2 0061;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-FAD2	[FB80 BB9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_222)
{
    // 2F8E7 0061;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-2F8E7	[FB80 BB9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_223)
{
    // 3B9D 0041;	
    // (㮝) CJK UNIFIED IDEOGRAPH-3B9D	[FB80 BB9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_224)
{
    // FAD2 0041;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-FAD2	[FB80 BB9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_225)
{
    // 2F8E7 0041;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-2F8E7	[FB80 BB9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_226)
{
    // 3B9D 0062;	
    // (㮝) CJK UNIFIED IDEOGRAPH-3B9D	[FB80 BB9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_227)
{
    // FAD2 0062;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-FAD2	[FB80 BB9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_228)
{
    // 2F8E7 0062;	
    // (㮝) CJK COMPATIBILITY IDEOGRAPH-2F8E7	[FB80 BB9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_229)
{
    // 3B9E 0021;	
    // (㮞) CJK UNIFIED IDEOGRAPH-3B9E	[FB80 BB9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_230)
{
    // 3B9E 003F;	
    // (㮞) CJK UNIFIED IDEOGRAPH-3B9E	[FB80 BB9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_231)
{
    // 3B9E 0061;	
    // (㮞) CJK UNIFIED IDEOGRAPH-3B9E	[FB80 BB9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_232)
{
    // 3B9E 0041;	
    // (㮞) CJK UNIFIED IDEOGRAPH-3B9E	[FB80 BB9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_233)
{
    // 3B9E 0062;	
    // (㮞) CJK UNIFIED IDEOGRAPH-3B9E	[FB80 BB9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_234)
{
    // 3B9F 0021;	
    // (㮟) CJK UNIFIED IDEOGRAPH-3B9F	[FB80 BB9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_235)
{
    // 3B9F 003F;	
    // (㮟) CJK UNIFIED IDEOGRAPH-3B9F	[FB80 BB9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_236)
{
    // 3B9F 0061;	
    // (㮟) CJK UNIFIED IDEOGRAPH-3B9F	[FB80 BB9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_237)
{
    // 3B9F 0041;	
    // (㮟) CJK UNIFIED IDEOGRAPH-3B9F	[FB80 BB9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_238)
{
    // 3B9F 0062;	
    // (㮟) CJK UNIFIED IDEOGRAPH-3B9F	[FB80 BB9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_239)
{
    // 3BA0 0021;	
    // (㮠) CJK UNIFIED IDEOGRAPH-3BA0	[FB80 BBA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_240)
{
    // 3BA0 003F;	
    // (㮠) CJK UNIFIED IDEOGRAPH-3BA0	[FB80 BBA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_241)
{
    // 3BA0 0061;	
    // (㮠) CJK UNIFIED IDEOGRAPH-3BA0	[FB80 BBA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_242)
{
    // 3BA0 0041;	
    // (㮠) CJK UNIFIED IDEOGRAPH-3BA0	[FB80 BBA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_243)
{
    // 3BA0 0062;	
    // (㮠) CJK UNIFIED IDEOGRAPH-3BA0	[FB80 BBA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_244)
{
    // 3BA1 0021;	
    // (㮡) CJK UNIFIED IDEOGRAPH-3BA1	[FB80 BBA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_245)
{
    // 3BA1 003F;	
    // (㮡) CJK UNIFIED IDEOGRAPH-3BA1	[FB80 BBA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_246)
{
    // 3BA1 0061;	
    // (㮡) CJK UNIFIED IDEOGRAPH-3BA1	[FB80 BBA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_247)
{
    // 3BA1 0041;	
    // (㮡) CJK UNIFIED IDEOGRAPH-3BA1	[FB80 BBA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_248)
{
    // 3BA1 0062;	
    // (㮡) CJK UNIFIED IDEOGRAPH-3BA1	[FB80 BBA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_249)
{
    // 3BA2 0021;	
    // (㮢) CJK UNIFIED IDEOGRAPH-3BA2	[FB80 BBA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_250)
{
    // 3BA2 003F;	
    // (㮢) CJK UNIFIED IDEOGRAPH-3BA2	[FB80 BBA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_251)
{
    // 3BA2 0061;	
    // (㮢) CJK UNIFIED IDEOGRAPH-3BA2	[FB80 BBA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_252)
{
    // 3BA2 0041;	
    // (㮢) CJK UNIFIED IDEOGRAPH-3BA2	[FB80 BBA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_253)
{
    // 3BA2 0062;	
    // (㮢) CJK UNIFIED IDEOGRAPH-3BA2	[FB80 BBA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_254)
{
    // 3BA3 0021;	
    // (㮣) CJK UNIFIED IDEOGRAPH-3BA3	[FB80 BBA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_255)
{
    // 3BA3 003F;	
    // (㮣) CJK UNIFIED IDEOGRAPH-3BA3	[FB80 BBA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_256)
{
    // 3BA3 0061;	
    // (㮣) CJK UNIFIED IDEOGRAPH-3BA3	[FB80 BBA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_257)
{
    // 3BA3 0041;	
    // (㮣) CJK UNIFIED IDEOGRAPH-3BA3	[FB80 BBA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_258)
{
    // 3BA3 0062;	
    // (㮣) CJK UNIFIED IDEOGRAPH-3BA3	[FB80 BBA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_259)
{
    // 3BA4 0021;	
    // (㮤) CJK UNIFIED IDEOGRAPH-3BA4	[FB80 BBA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_260)
{
    // 3BA4 003F;	
    // (㮤) CJK UNIFIED IDEOGRAPH-3BA4	[FB80 BBA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_261)
{
    // 3BA4 0061;	
    // (㮤) CJK UNIFIED IDEOGRAPH-3BA4	[FB80 BBA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_262)
{
    // 3BA4 0041;	
    // (㮤) CJK UNIFIED IDEOGRAPH-3BA4	[FB80 BBA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_263)
{
    // 3BA4 0062;	
    // (㮤) CJK UNIFIED IDEOGRAPH-3BA4	[FB80 BBA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_264)
{
    // 3BA5 0021;	
    // (㮥) CJK UNIFIED IDEOGRAPH-3BA5	[FB80 BBA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_265)
{
    // 3BA5 003F;	
    // (㮥) CJK UNIFIED IDEOGRAPH-3BA5	[FB80 BBA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_266)
{
    // 3BA5 0061;	
    // (㮥) CJK UNIFIED IDEOGRAPH-3BA5	[FB80 BBA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_267)
{
    // 3BA5 0041;	
    // (㮥) CJK UNIFIED IDEOGRAPH-3BA5	[FB80 BBA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_268)
{
    // 3BA5 0062;	
    // (㮥) CJK UNIFIED IDEOGRAPH-3BA5	[FB80 BBA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_269)
{
    // 3BA6 0021;	
    // (㮦) CJK UNIFIED IDEOGRAPH-3BA6	[FB80 BBA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_270)
{
    // 3BA6 003F;	
    // (㮦) CJK UNIFIED IDEOGRAPH-3BA6	[FB80 BBA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_271)
{
    // 3BA6 0061;	
    // (㮦) CJK UNIFIED IDEOGRAPH-3BA6	[FB80 BBA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_272)
{
    // 3BA6 0041;	
    // (㮦) CJK UNIFIED IDEOGRAPH-3BA6	[FB80 BBA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_273)
{
    // 3BA6 0062;	
    // (㮦) CJK UNIFIED IDEOGRAPH-3BA6	[FB80 BBA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_274)
{
    // 3BA7 0021;	
    // (㮧) CJK UNIFIED IDEOGRAPH-3BA7	[FB80 BBA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_275)
{
    // 3BA7 003F;	
    // (㮧) CJK UNIFIED IDEOGRAPH-3BA7	[FB80 BBA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_276)
{
    // 3BA7 0061;	
    // (㮧) CJK UNIFIED IDEOGRAPH-3BA7	[FB80 BBA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_277)
{
    // 3BA7 0041;	
    // (㮧) CJK UNIFIED IDEOGRAPH-3BA7	[FB80 BBA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_278)
{
    // 3BA7 0062;	
    // (㮧) CJK UNIFIED IDEOGRAPH-3BA7	[FB80 BBA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_279)
{
    // 3BA8 0021;	
    // (㮨) CJK UNIFIED IDEOGRAPH-3BA8	[FB80 BBA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_280)
{
    // 3BA8 003F;	
    // (㮨) CJK UNIFIED IDEOGRAPH-3BA8	[FB80 BBA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_281)
{
    // 3BA8 0061;	
    // (㮨) CJK UNIFIED IDEOGRAPH-3BA8	[FB80 BBA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_282)
{
    // 3BA8 0041;	
    // (㮨) CJK UNIFIED IDEOGRAPH-3BA8	[FB80 BBA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_283)
{
    // 3BA8 0062;	
    // (㮨) CJK UNIFIED IDEOGRAPH-3BA8	[FB80 BBA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_284)
{
    // 3BA9 0021;	
    // (㮩) CJK UNIFIED IDEOGRAPH-3BA9	[FB80 BBA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_285)
{
    // 3BA9 003F;	
    // (㮩) CJK UNIFIED IDEOGRAPH-3BA9	[FB80 BBA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_286)
{
    // 3BA9 0061;	
    // (㮩) CJK UNIFIED IDEOGRAPH-3BA9	[FB80 BBA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_287)
{
    // 3BA9 0041;	
    // (㮩) CJK UNIFIED IDEOGRAPH-3BA9	[FB80 BBA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_288)
{
    // 3BA9 0062;	
    // (㮩) CJK UNIFIED IDEOGRAPH-3BA9	[FB80 BBA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_289)
{
    // 3BAA 0021;	
    // (㮪) CJK UNIFIED IDEOGRAPH-3BAA	[FB80 BBAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_290)
{
    // 3BAA 003F;	
    // (㮪) CJK UNIFIED IDEOGRAPH-3BAA	[FB80 BBAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_291)
{
    // 3BAA 0061;	
    // (㮪) CJK UNIFIED IDEOGRAPH-3BAA	[FB80 BBAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_292)
{
    // 3BAA 0041;	
    // (㮪) CJK UNIFIED IDEOGRAPH-3BAA	[FB80 BBAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_293)
{
    // 3BAA 0062;	
    // (㮪) CJK UNIFIED IDEOGRAPH-3BAA	[FB80 BBAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_294)
{
    // 3BAB 0021;	
    // (㮫) CJK UNIFIED IDEOGRAPH-3BAB	[FB80 BBAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_295)
{
    // 3BAB 003F;	
    // (㮫) CJK UNIFIED IDEOGRAPH-3BAB	[FB80 BBAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_296)
{
    // 3BAB 0061;	
    // (㮫) CJK UNIFIED IDEOGRAPH-3BAB	[FB80 BBAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_297)
{
    // 3BAB 0041;	
    // (㮫) CJK UNIFIED IDEOGRAPH-3BAB	[FB80 BBAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_298)
{
    // 3BAB 0062;	
    // (㮫) CJK UNIFIED IDEOGRAPH-3BAB	[FB80 BBAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_299)
{
    // 3BAC 0021;	
    // (㮬) CJK UNIFIED IDEOGRAPH-3BAC	[FB80 BBAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_300)
{
    // 3BAC 003F;	
    // (㮬) CJK UNIFIED IDEOGRAPH-3BAC	[FB80 BBAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_301)
{
    // 3BAC 0061;	
    // (㮬) CJK UNIFIED IDEOGRAPH-3BAC	[FB80 BBAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_302)
{
    // 3BAC 0041;	
    // (㮬) CJK UNIFIED IDEOGRAPH-3BAC	[FB80 BBAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_303)
{
    // 3BAC 0062;	
    // (㮬) CJK UNIFIED IDEOGRAPH-3BAC	[FB80 BBAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_304)
{
    // 3BAD 0021;	
    // (㮭) CJK UNIFIED IDEOGRAPH-3BAD	[FB80 BBAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_305)
{
    // 3BAD 003F;	
    // (㮭) CJK UNIFIED IDEOGRAPH-3BAD	[FB80 BBAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_306)
{
    // 3BAD 0061;	
    // (㮭) CJK UNIFIED IDEOGRAPH-3BAD	[FB80 BBAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_307)
{
    // 3BAD 0041;	
    // (㮭) CJK UNIFIED IDEOGRAPH-3BAD	[FB80 BBAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_308)
{
    // 3BAD 0062;	
    // (㮭) CJK UNIFIED IDEOGRAPH-3BAD	[FB80 BBAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_309)
{
    // 3BAE 0021;	
    // (㮮) CJK UNIFIED IDEOGRAPH-3BAE	[FB80 BBAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_310)
{
    // 3BAE 003F;	
    // (㮮) CJK UNIFIED IDEOGRAPH-3BAE	[FB80 BBAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_311)
{
    // 3BAE 0061;	
    // (㮮) CJK UNIFIED IDEOGRAPH-3BAE	[FB80 BBAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_312)
{
    // 3BAE 0041;	
    // (㮮) CJK UNIFIED IDEOGRAPH-3BAE	[FB80 BBAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_313)
{
    // 3BAE 0062;	
    // (㮮) CJK UNIFIED IDEOGRAPH-3BAE	[FB80 BBAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_314)
{
    // 3BAF 0021;	
    // (㮯) CJK UNIFIED IDEOGRAPH-3BAF	[FB80 BBAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_315)
{
    // 3BAF 003F;	
    // (㮯) CJK UNIFIED IDEOGRAPH-3BAF	[FB80 BBAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_316)
{
    // 3BAF 0061;	
    // (㮯) CJK UNIFIED IDEOGRAPH-3BAF	[FB80 BBAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_317)
{
    // 3BAF 0041;	
    // (㮯) CJK UNIFIED IDEOGRAPH-3BAF	[FB80 BBAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_318)
{
    // 3BAF 0062;	
    // (㮯) CJK UNIFIED IDEOGRAPH-3BAF	[FB80 BBAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_319)
{
    // 3BB0 0021;	
    // (㮰) CJK UNIFIED IDEOGRAPH-3BB0	[FB80 BBB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_320)
{
    // 3BB0 003F;	
    // (㮰) CJK UNIFIED IDEOGRAPH-3BB0	[FB80 BBB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_321)
{
    // 3BB0 0061;	
    // (㮰) CJK UNIFIED IDEOGRAPH-3BB0	[FB80 BBB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_322)
{
    // 3BB0 0041;	
    // (㮰) CJK UNIFIED IDEOGRAPH-3BB0	[FB80 BBB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_323)
{
    // 3BB0 0062;	
    // (㮰) CJK UNIFIED IDEOGRAPH-3BB0	[FB80 BBB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_324)
{
    // 3BB1 0021;	
    // (㮱) CJK UNIFIED IDEOGRAPH-3BB1	[FB80 BBB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_325)
{
    // 3BB1 003F;	
    // (㮱) CJK UNIFIED IDEOGRAPH-3BB1	[FB80 BBB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_326)
{
    // 3BB1 0061;	
    // (㮱) CJK UNIFIED IDEOGRAPH-3BB1	[FB80 BBB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_327)
{
    // 3BB1 0041;	
    // (㮱) CJK UNIFIED IDEOGRAPH-3BB1	[FB80 BBB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_328)
{
    // 3BB1 0062;	
    // (㮱) CJK UNIFIED IDEOGRAPH-3BB1	[FB80 BBB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_329)
{
    // 3BB2 0021;	
    // (㮲) CJK UNIFIED IDEOGRAPH-3BB2	[FB80 BBB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_330)
{
    // 3BB2 003F;	
    // (㮲) CJK UNIFIED IDEOGRAPH-3BB2	[FB80 BBB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_331)
{
    // 3BB2 0061;	
    // (㮲) CJK UNIFIED IDEOGRAPH-3BB2	[FB80 BBB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_332)
{
    // 3BB2 0041;	
    // (㮲) CJK UNIFIED IDEOGRAPH-3BB2	[FB80 BBB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_333)
{
    // 3BB2 0062;	
    // (㮲) CJK UNIFIED IDEOGRAPH-3BB2	[FB80 BBB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_334)
{
    // 3BB3 0021;	
    // (㮳) CJK UNIFIED IDEOGRAPH-3BB3	[FB80 BBB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_335)
{
    // 3BB3 003F;	
    // (㮳) CJK UNIFIED IDEOGRAPH-3BB3	[FB80 BBB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_336)
{
    // 3BB3 0061;	
    // (㮳) CJK UNIFIED IDEOGRAPH-3BB3	[FB80 BBB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_337)
{
    // 3BB3 0041;	
    // (㮳) CJK UNIFIED IDEOGRAPH-3BB3	[FB80 BBB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_338)
{
    // 3BB3 0062;	
    // (㮳) CJK UNIFIED IDEOGRAPH-3BB3	[FB80 BBB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_339)
{
    // 3BB4 0021;	
    // (㮴) CJK UNIFIED IDEOGRAPH-3BB4	[FB80 BBB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_340)
{
    // 3BB4 003F;	
    // (㮴) CJK UNIFIED IDEOGRAPH-3BB4	[FB80 BBB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_341)
{
    // 3BB4 0061;	
    // (㮴) CJK UNIFIED IDEOGRAPH-3BB4	[FB80 BBB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_342)
{
    // 3BB4 0041;	
    // (㮴) CJK UNIFIED IDEOGRAPH-3BB4	[FB80 BBB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_343)
{
    // 3BB4 0062;	
    // (㮴) CJK UNIFIED IDEOGRAPH-3BB4	[FB80 BBB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_344)
{
    // 3BB5 0021;	
    // (㮵) CJK UNIFIED IDEOGRAPH-3BB5	[FB80 BBB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_345)
{
    // 3BB5 003F;	
    // (㮵) CJK UNIFIED IDEOGRAPH-3BB5	[FB80 BBB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_346)
{
    // 3BB5 0061;	
    // (㮵) CJK UNIFIED IDEOGRAPH-3BB5	[FB80 BBB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_347)
{
    // 3BB5 0041;	
    // (㮵) CJK UNIFIED IDEOGRAPH-3BB5	[FB80 BBB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_348)
{
    // 3BB5 0062;	
    // (㮵) CJK UNIFIED IDEOGRAPH-3BB5	[FB80 BBB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_349)
{
    // 3BB6 0021;	
    // (㮶) CJK UNIFIED IDEOGRAPH-3BB6	[FB80 BBB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_350)
{
    // 3BB6 003F;	
    // (㮶) CJK UNIFIED IDEOGRAPH-3BB6	[FB80 BBB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_351)
{
    // 3BB6 0061;	
    // (㮶) CJK UNIFIED IDEOGRAPH-3BB6	[FB80 BBB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_352)
{
    // 3BB6 0041;	
    // (㮶) CJK UNIFIED IDEOGRAPH-3BB6	[FB80 BBB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_353)
{
    // 3BB6 0062;	
    // (㮶) CJK UNIFIED IDEOGRAPH-3BB6	[FB80 BBB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_354)
{
    // 3BB7 0021;	
    // (㮷) CJK UNIFIED IDEOGRAPH-3BB7	[FB80 BBB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_355)
{
    // 3BB7 003F;	
    // (㮷) CJK UNIFIED IDEOGRAPH-3BB7	[FB80 BBB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_356)
{
    // 3BB7 0061;	
    // (㮷) CJK UNIFIED IDEOGRAPH-3BB7	[FB80 BBB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_357)
{
    // 3BB7 0041;	
    // (㮷) CJK UNIFIED IDEOGRAPH-3BB7	[FB80 BBB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_358)
{
    // 3BB7 0062;	
    // (㮷) CJK UNIFIED IDEOGRAPH-3BB7	[FB80 BBB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_359)
{
    // 3BB8 0021;	
    // (㮸) CJK UNIFIED IDEOGRAPH-3BB8	[FB80 BBB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_360)
{
    // 3BB8 003F;	
    // (㮸) CJK UNIFIED IDEOGRAPH-3BB8	[FB80 BBB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_361)
{
    // 3BB8 0061;	
    // (㮸) CJK UNIFIED IDEOGRAPH-3BB8	[FB80 BBB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_362)
{
    // 3BB8 0041;	
    // (㮸) CJK UNIFIED IDEOGRAPH-3BB8	[FB80 BBB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_363)
{
    // 3BB8 0062;	
    // (㮸) CJK UNIFIED IDEOGRAPH-3BB8	[FB80 BBB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_364)
{
    // 3BB9 0021;	
    // (㮹) CJK UNIFIED IDEOGRAPH-3BB9	[FB80 BBB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_365)
{
    // 3BB9 003F;	
    // (㮹) CJK UNIFIED IDEOGRAPH-3BB9	[FB80 BBB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_366)
{
    // 3BB9 0061;	
    // (㮹) CJK UNIFIED IDEOGRAPH-3BB9	[FB80 BBB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_367)
{
    // 3BB9 0041;	
    // (㮹) CJK UNIFIED IDEOGRAPH-3BB9	[FB80 BBB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_368)
{
    // 3BB9 0062;	
    // (㮹) CJK UNIFIED IDEOGRAPH-3BB9	[FB80 BBB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_369)
{
    // 3BBA 0021;	
    // (㮺) CJK UNIFIED IDEOGRAPH-3BBA	[FB80 BBBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_370)
{
    // 3BBA 003F;	
    // (㮺) CJK UNIFIED IDEOGRAPH-3BBA	[FB80 BBBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_371)
{
    // 3BBA 0061;	
    // (㮺) CJK UNIFIED IDEOGRAPH-3BBA	[FB80 BBBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_372)
{
    // 3BBA 0041;	
    // (㮺) CJK UNIFIED IDEOGRAPH-3BBA	[FB80 BBBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_373)
{
    // 3BBA 0062;	
    // (㮺) CJK UNIFIED IDEOGRAPH-3BBA	[FB80 BBBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_374)
{
    // 3BBB 0021;	
    // (㮻) CJK UNIFIED IDEOGRAPH-3BBB	[FB80 BBBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_375)
{
    // 3BBB 003F;	
    // (㮻) CJK UNIFIED IDEOGRAPH-3BBB	[FB80 BBBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_376)
{
    // 3BBB 0061;	
    // (㮻) CJK UNIFIED IDEOGRAPH-3BBB	[FB80 BBBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_377)
{
    // 3BBB 0041;	
    // (㮻) CJK UNIFIED IDEOGRAPH-3BBB	[FB80 BBBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_378)
{
    // 3BBB 0062;	
    // (㮻) CJK UNIFIED IDEOGRAPH-3BBB	[FB80 BBBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_379)
{
    // 3BBC 0021;	
    // (㮼) CJK UNIFIED IDEOGRAPH-3BBC	[FB80 BBBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_380)
{
    // 3BBC 003F;	
    // (㮼) CJK UNIFIED IDEOGRAPH-3BBC	[FB80 BBBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_381)
{
    // 3BBC 0061;	
    // (㮼) CJK UNIFIED IDEOGRAPH-3BBC	[FB80 BBBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_382)
{
    // 3BBC 0041;	
    // (㮼) CJK UNIFIED IDEOGRAPH-3BBC	[FB80 BBBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_383)
{
    // 3BBC 0062;	
    // (㮼) CJK UNIFIED IDEOGRAPH-3BBC	[FB80 BBBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_384)
{
    // 3BBD 0021;	
    // (㮽) CJK UNIFIED IDEOGRAPH-3BBD	[FB80 BBBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_385)
{
    // 3BBD 003F;	
    // (㮽) CJK UNIFIED IDEOGRAPH-3BBD	[FB80 BBBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_386)
{
    // 3BBD 0061;	
    // (㮽) CJK UNIFIED IDEOGRAPH-3BBD	[FB80 BBBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_387)
{
    // 3BBD 0041;	
    // (㮽) CJK UNIFIED IDEOGRAPH-3BBD	[FB80 BBBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_388)
{
    // 3BBD 0062;	
    // (㮽) CJK UNIFIED IDEOGRAPH-3BBD	[FB80 BBBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_389)
{
    // 3BBE 0021;	
    // (㮾) CJK UNIFIED IDEOGRAPH-3BBE	[FB80 BBBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_390)
{
    // 3BBE 003F;	
    // (㮾) CJK UNIFIED IDEOGRAPH-3BBE	[FB80 BBBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_391)
{
    // 3BBE 0061;	
    // (㮾) CJK UNIFIED IDEOGRAPH-3BBE	[FB80 BBBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_392)
{
    // 3BBE 0041;	
    // (㮾) CJK UNIFIED IDEOGRAPH-3BBE	[FB80 BBBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_393)
{
    // 3BBE 0062;	
    // (㮾) CJK UNIFIED IDEOGRAPH-3BBE	[FB80 BBBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_394)
{
    // 3BBF 0021;	
    // (㮿) CJK UNIFIED IDEOGRAPH-3BBF	[FB80 BBBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_395)
{
    // 3BBF 003F;	
    // (㮿) CJK UNIFIED IDEOGRAPH-3BBF	[FB80 BBBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_396)
{
    // 3BBF 0061;	
    // (㮿) CJK UNIFIED IDEOGRAPH-3BBF	[FB80 BBBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_397)
{
    // 3BBF 0041;	
    // (㮿) CJK UNIFIED IDEOGRAPH-3BBF	[FB80 BBBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_398)
{
    // 3BBF 0062;	
    // (㮿) CJK UNIFIED IDEOGRAPH-3BBF	[FB80 BBBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_399)
{
    // 3BC0 0021;	
    // (㯀) CJK UNIFIED IDEOGRAPH-3BC0	[FB80 BBC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_400)
{
    // 3BC0 003F;	
    // (㯀) CJK UNIFIED IDEOGRAPH-3BC0	[FB80 BBC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_401)
{
    // 3BC0 0061;	
    // (㯀) CJK UNIFIED IDEOGRAPH-3BC0	[FB80 BBC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_402)
{
    // 3BC0 0041;	
    // (㯀) CJK UNIFIED IDEOGRAPH-3BC0	[FB80 BBC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_403)
{
    // 3BC0 0062;	
    // (㯀) CJK UNIFIED IDEOGRAPH-3BC0	[FB80 BBC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_404)
{
    // 3BC1 0021;	
    // (㯁) CJK UNIFIED IDEOGRAPH-3BC1	[FB80 BBC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_405)
{
    // 3BC1 003F;	
    // (㯁) CJK UNIFIED IDEOGRAPH-3BC1	[FB80 BBC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_406)
{
    // 3BC1 0061;	
    // (㯁) CJK UNIFIED IDEOGRAPH-3BC1	[FB80 BBC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_407)
{
    // 3BC1 0041;	
    // (㯁) CJK UNIFIED IDEOGRAPH-3BC1	[FB80 BBC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_408)
{
    // 3BC1 0062;	
    // (㯁) CJK UNIFIED IDEOGRAPH-3BC1	[FB80 BBC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_409)
{
    // 3BC2 0021;	
    // (㯂) CJK UNIFIED IDEOGRAPH-3BC2	[FB80 BBC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_410)
{
    // 3BC2 003F;	
    // (㯂) CJK UNIFIED IDEOGRAPH-3BC2	[FB80 BBC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_411)
{
    // 3BC2 0061;	
    // (㯂) CJK UNIFIED IDEOGRAPH-3BC2	[FB80 BBC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_412)
{
    // 3BC2 0041;	
    // (㯂) CJK UNIFIED IDEOGRAPH-3BC2	[FB80 BBC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_413)
{
    // 3BC2 0062;	
    // (㯂) CJK UNIFIED IDEOGRAPH-3BC2	[FB80 BBC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_414)
{
    // 3BC3 0021;	
    // (㯃) CJK UNIFIED IDEOGRAPH-3BC3	[FB80 BBC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_415)
{
    // 3BC3 003F;	
    // (㯃) CJK UNIFIED IDEOGRAPH-3BC3	[FB80 BBC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_416)
{
    // 3BC3 0061;	
    // (㯃) CJK UNIFIED IDEOGRAPH-3BC3	[FB80 BBC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_417)
{
    // 3BC3 0041;	
    // (㯃) CJK UNIFIED IDEOGRAPH-3BC3	[FB80 BBC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_418)
{
    // 3BC3 0062;	
    // (㯃) CJK UNIFIED IDEOGRAPH-3BC3	[FB80 BBC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_419)
{
    // 3BC4 0021;	
    // (㯄) CJK UNIFIED IDEOGRAPH-3BC4	[FB80 BBC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_420)
{
    // 3BC4 003F;	
    // (㯄) CJK UNIFIED IDEOGRAPH-3BC4	[FB80 BBC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_421)
{
    // 3BC4 0061;	
    // (㯄) CJK UNIFIED IDEOGRAPH-3BC4	[FB80 BBC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_422)
{
    // 3BC4 0041;	
    // (㯄) CJK UNIFIED IDEOGRAPH-3BC4	[FB80 BBC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_423)
{
    // 3BC4 0062;	
    // (㯄) CJK UNIFIED IDEOGRAPH-3BC4	[FB80 BBC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_424)
{
    // 3BC5 0021;	
    // (㯅) CJK UNIFIED IDEOGRAPH-3BC5	[FB80 BBC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_425)
{
    // 3BC5 003F;	
    // (㯅) CJK UNIFIED IDEOGRAPH-3BC5	[FB80 BBC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_426)
{
    // 3BC5 0061;	
    // (㯅) CJK UNIFIED IDEOGRAPH-3BC5	[FB80 BBC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_427)
{
    // 3BC5 0041;	
    // (㯅) CJK UNIFIED IDEOGRAPH-3BC5	[FB80 BBC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_428)
{
    // 3BC5 0062;	
    // (㯅) CJK UNIFIED IDEOGRAPH-3BC5	[FB80 BBC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_429)
{
    // 3BC6 0021;	
    // (㯆) CJK UNIFIED IDEOGRAPH-3BC6	[FB80 BBC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_430)
{
    // 3BC6 003F;	
    // (㯆) CJK UNIFIED IDEOGRAPH-3BC6	[FB80 BBC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_431)
{
    // 3BC6 0061;	
    // (㯆) CJK UNIFIED IDEOGRAPH-3BC6	[FB80 BBC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_432)
{
    // 3BC6 0041;	
    // (㯆) CJK UNIFIED IDEOGRAPH-3BC6	[FB80 BBC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_433)
{
    // 3BC6 0062;	
    // (㯆) CJK UNIFIED IDEOGRAPH-3BC6	[FB80 BBC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_434)
{
    // 3BC7 0021;	
    // (㯇) CJK UNIFIED IDEOGRAPH-3BC7	[FB80 BBC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_435)
{
    // 3BC7 003F;	
    // (㯇) CJK UNIFIED IDEOGRAPH-3BC7	[FB80 BBC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_436)
{
    // 3BC7 0061;	
    // (㯇) CJK UNIFIED IDEOGRAPH-3BC7	[FB80 BBC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_437)
{
    // 3BC7 0041;	
    // (㯇) CJK UNIFIED IDEOGRAPH-3BC7	[FB80 BBC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_438)
{
    // 3BC7 0062;	
    // (㯇) CJK UNIFIED IDEOGRAPH-3BC7	[FB80 BBC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_439)
{
    // 3BC8 0021;	
    // (㯈) CJK UNIFIED IDEOGRAPH-3BC8	[FB80 BBC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_440)
{
    // 3BC8 003F;	
    // (㯈) CJK UNIFIED IDEOGRAPH-3BC8	[FB80 BBC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_441)
{
    // 3BC8 0061;	
    // (㯈) CJK UNIFIED IDEOGRAPH-3BC8	[FB80 BBC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_442)
{
    // 3BC8 0041;	
    // (㯈) CJK UNIFIED IDEOGRAPH-3BC8	[FB80 BBC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_443)
{
    // 3BC8 0062;	
    // (㯈) CJK UNIFIED IDEOGRAPH-3BC8	[FB80 BBC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_444)
{
    // 3BC9 0021;	
    // (㯉) CJK UNIFIED IDEOGRAPH-3BC9	[FB80 BBC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_445)
{
    // 3BC9 003F;	
    // (㯉) CJK UNIFIED IDEOGRAPH-3BC9	[FB80 BBC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_446)
{
    // 3BC9 0061;	
    // (㯉) CJK UNIFIED IDEOGRAPH-3BC9	[FB80 BBC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_447)
{
    // 3BC9 0041;	
    // (㯉) CJK UNIFIED IDEOGRAPH-3BC9	[FB80 BBC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_448)
{
    // 3BC9 0062;	
    // (㯉) CJK UNIFIED IDEOGRAPH-3BC9	[FB80 BBC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_449)
{
    // 3BCA 0021;	
    // (㯊) CJK UNIFIED IDEOGRAPH-3BCA	[FB80 BBCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_450)
{
    // 3BCA 003F;	
    // (㯊) CJK UNIFIED IDEOGRAPH-3BCA	[FB80 BBCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_451)
{
    // 3BCA 0061;	
    // (㯊) CJK UNIFIED IDEOGRAPH-3BCA	[FB80 BBCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_452)
{
    // 3BCA 0041;	
    // (㯊) CJK UNIFIED IDEOGRAPH-3BCA	[FB80 BBCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_453)
{
    // 3BCA 0062;	
    // (㯊) CJK UNIFIED IDEOGRAPH-3BCA	[FB80 BBCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_454)
{
    // 3BCB 0021;	
    // (㯋) CJK UNIFIED IDEOGRAPH-3BCB	[FB80 BBCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_455)
{
    // 3BCB 003F;	
    // (㯋) CJK UNIFIED IDEOGRAPH-3BCB	[FB80 BBCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_456)
{
    // 3BCB 0061;	
    // (㯋) CJK UNIFIED IDEOGRAPH-3BCB	[FB80 BBCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_457)
{
    // 3BCB 0041;	
    // (㯋) CJK UNIFIED IDEOGRAPH-3BCB	[FB80 BBCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_458)
{
    // 3BCB 0062;	
    // (㯋) CJK UNIFIED IDEOGRAPH-3BCB	[FB80 BBCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_459)
{
    // 3BCC 0021;	
    // (㯌) CJK UNIFIED IDEOGRAPH-3BCC	[FB80 BBCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_460)
{
    // 3BCC 003F;	
    // (㯌) CJK UNIFIED IDEOGRAPH-3BCC	[FB80 BBCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_461)
{
    // 3BCC 0061;	
    // (㯌) CJK UNIFIED IDEOGRAPH-3BCC	[FB80 BBCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_462)
{
    // 3BCC 0041;	
    // (㯌) CJK UNIFIED IDEOGRAPH-3BCC	[FB80 BBCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_463)
{
    // 3BCC 0062;	
    // (㯌) CJK UNIFIED IDEOGRAPH-3BCC	[FB80 BBCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_464)
{
    // 3BCD 0021;	
    // (㯍) CJK UNIFIED IDEOGRAPH-3BCD	[FB80 BBCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_465)
{
    // 3BCD 003F;	
    // (㯍) CJK UNIFIED IDEOGRAPH-3BCD	[FB80 BBCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_466)
{
    // 3BCD 0061;	
    // (㯍) CJK UNIFIED IDEOGRAPH-3BCD	[FB80 BBCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_467)
{
    // 3BCD 0041;	
    // (㯍) CJK UNIFIED IDEOGRAPH-3BCD	[FB80 BBCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_468)
{
    // 3BCD 0062;	
    // (㯍) CJK UNIFIED IDEOGRAPH-3BCD	[FB80 BBCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_469)
{
    // 3BCE 0021;	
    // (㯎) CJK UNIFIED IDEOGRAPH-3BCE	[FB80 BBCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_470)
{
    // 3BCE 003F;	
    // (㯎) CJK UNIFIED IDEOGRAPH-3BCE	[FB80 BBCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_471)
{
    // 3BCE 0061;	
    // (㯎) CJK UNIFIED IDEOGRAPH-3BCE	[FB80 BBCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_472)
{
    // 3BCE 0041;	
    // (㯎) CJK UNIFIED IDEOGRAPH-3BCE	[FB80 BBCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_473)
{
    // 3BCE 0062;	
    // (㯎) CJK UNIFIED IDEOGRAPH-3BCE	[FB80 BBCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_474)
{
    // 3BCF 0021;	
    // (㯏) CJK UNIFIED IDEOGRAPH-3BCF	[FB80 BBCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_475)
{
    // 3BCF 003F;	
    // (㯏) CJK UNIFIED IDEOGRAPH-3BCF	[FB80 BBCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_476)
{
    // 3BCF 0061;	
    // (㯏) CJK UNIFIED IDEOGRAPH-3BCF	[FB80 BBCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_477)
{
    // 3BCF 0041;	
    // (㯏) CJK UNIFIED IDEOGRAPH-3BCF	[FB80 BBCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_478)
{
    // 3BCF 0062;	
    // (㯏) CJK UNIFIED IDEOGRAPH-3BCF	[FB80 BBCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_479)
{
    // 3BD0 0021;	
    // (㯐) CJK UNIFIED IDEOGRAPH-3BD0	[FB80 BBD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_480)
{
    // 3BD0 003F;	
    // (㯐) CJK UNIFIED IDEOGRAPH-3BD0	[FB80 BBD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_481)
{
    // 3BD0 0061;	
    // (㯐) CJK UNIFIED IDEOGRAPH-3BD0	[FB80 BBD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_482)
{
    // 3BD0 0041;	
    // (㯐) CJK UNIFIED IDEOGRAPH-3BD0	[FB80 BBD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_483)
{
    // 3BD0 0062;	
    // (㯐) CJK UNIFIED IDEOGRAPH-3BD0	[FB80 BBD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_484)
{
    // 3BD1 0021;	
    // (㯑) CJK UNIFIED IDEOGRAPH-3BD1	[FB80 BBD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_485)
{
    // 3BD1 003F;	
    // (㯑) CJK UNIFIED IDEOGRAPH-3BD1	[FB80 BBD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_486)
{
    // 3BD1 0061;	
    // (㯑) CJK UNIFIED IDEOGRAPH-3BD1	[FB80 BBD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_487)
{
    // 3BD1 0041;	
    // (㯑) CJK UNIFIED IDEOGRAPH-3BD1	[FB80 BBD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_488)
{
    // 3BD1 0062;	
    // (㯑) CJK UNIFIED IDEOGRAPH-3BD1	[FB80 BBD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_489)
{
    // 3BD2 0021;	
    // (㯒) CJK UNIFIED IDEOGRAPH-3BD2	[FB80 BBD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_490)
{
    // 3BD2 003F;	
    // (㯒) CJK UNIFIED IDEOGRAPH-3BD2	[FB80 BBD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_491)
{
    // 3BD2 0061;	
    // (㯒) CJK UNIFIED IDEOGRAPH-3BD2	[FB80 BBD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_492)
{
    // 3BD2 0041;	
    // (㯒) CJK UNIFIED IDEOGRAPH-3BD2	[FB80 BBD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_493)
{
    // 3BD2 0062;	
    // (㯒) CJK UNIFIED IDEOGRAPH-3BD2	[FB80 BBD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_494)
{
    // 3BD3 0021;	
    // (㯓) CJK UNIFIED IDEOGRAPH-3BD3	[FB80 BBD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_495)
{
    // 3BD3 003F;	
    // (㯓) CJK UNIFIED IDEOGRAPH-3BD3	[FB80 BBD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_496)
{
    // 3BD3 0061;	
    // (㯓) CJK UNIFIED IDEOGRAPH-3BD3	[FB80 BBD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_497)
{
    // 3BD3 0041;	
    // (㯓) CJK UNIFIED IDEOGRAPH-3BD3	[FB80 BBD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_498)
{
    // 3BD3 0062;	
    // (㯓) CJK UNIFIED IDEOGRAPH-3BD3	[FB80 BBD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_346_499)
{
    // 3BD4 0021;	
    // (㯔) CJK UNIFIED IDEOGRAPH-3BD4	[FB80 BBD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

