// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_308_000)
{
    // 14410 003F;	
    // (îêê) ANATOLIAN HIEROGLYPH A016	[54A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14410, 0x003F };
    uint32_t const ces[9] = { 0x54A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_001)
{
    // 14410 0061;	
    // (îêê) ANATOLIAN HIEROGLYPH A016	[54A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14410, 0x0061 };
    uint32_t const ces[9] = { 0x54A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_002)
{
    // 14410 0041;	
    // (îêê) ANATOLIAN HIEROGLYPH A016	[54A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14410, 0x0041 };
    uint32_t const ces[9] = { 0x54A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_003)
{
    // 14410 0062;	
    // (îêê) ANATOLIAN HIEROGLYPH A016	[54A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14410, 0x0062 };
    uint32_t const ces[9] = { 0x54A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_004)
{
    // 14411 0021;	
    // (îêë) ANATOLIAN HIEROGLYPH A017	[54A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14411, 0x0021 };
    uint32_t const ces[9] = { 0x54A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_005)
{
    // 14411 003F;	
    // (îêë) ANATOLIAN HIEROGLYPH A017	[54A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14411, 0x003F };
    uint32_t const ces[9] = { 0x54A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_006)
{
    // 14411 0061;	
    // (îêë) ANATOLIAN HIEROGLYPH A017	[54A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14411, 0x0061 };
    uint32_t const ces[9] = { 0x54A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_007)
{
    // 14411 0041;	
    // (îêë) ANATOLIAN HIEROGLYPH A017	[54A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14411, 0x0041 };
    uint32_t const ces[9] = { 0x54A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_008)
{
    // 14411 0062;	
    // (îêë) ANATOLIAN HIEROGLYPH A017	[54A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14411, 0x0062 };
    uint32_t const ces[9] = { 0x54A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_009)
{
    // 14412 0021;	
    // (îêí) ANATOLIAN HIEROGLYPH A018	[54A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14412, 0x0021 };
    uint32_t const ces[9] = { 0x54A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_010)
{
    // 14412 003F;	
    // (îêí) ANATOLIAN HIEROGLYPH A018	[54A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14412, 0x003F };
    uint32_t const ces[9] = { 0x54A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_011)
{
    // 14412 0061;	
    // (îêí) ANATOLIAN HIEROGLYPH A018	[54A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14412, 0x0061 };
    uint32_t const ces[9] = { 0x54A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_012)
{
    // 14412 0041;	
    // (îêí) ANATOLIAN HIEROGLYPH A018	[54A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14412, 0x0041 };
    uint32_t const ces[9] = { 0x54A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_013)
{
    // 14412 0062;	
    // (îêí) ANATOLIAN HIEROGLYPH A018	[54A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14412, 0x0062 };
    uint32_t const ces[9] = { 0x54A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_014)
{
    // 14413 0021;	
    // (îêì) ANATOLIAN HIEROGLYPH A019	[54A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14413, 0x0021 };
    uint32_t const ces[9] = { 0x54A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_015)
{
    // 14413 003F;	
    // (îêì) ANATOLIAN HIEROGLYPH A019	[54A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14413, 0x003F };
    uint32_t const ces[9] = { 0x54A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_016)
{
    // 14413 0061;	
    // (îêì) ANATOLIAN HIEROGLYPH A019	[54A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14413, 0x0061 };
    uint32_t const ces[9] = { 0x54A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_017)
{
    // 14413 0041;	
    // (îêì) ANATOLIAN HIEROGLYPH A019	[54A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14413, 0x0041 };
    uint32_t const ces[9] = { 0x54A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_018)
{
    // 14413 0062;	
    // (îêì) ANATOLIAN HIEROGLYPH A019	[54A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14413, 0x0062 };
    uint32_t const ces[9] = { 0x54A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_019)
{
    // 14414 0021;	
    // (îêî) ANATOLIAN HIEROGLYPH A020	[54A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14414, 0x0021 };
    uint32_t const ces[9] = { 0x54A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_020)
{
    // 14414 003F;	
    // (îêî) ANATOLIAN HIEROGLYPH A020	[54A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14414, 0x003F };
    uint32_t const ces[9] = { 0x54A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_021)
{
    // 14414 0061;	
    // (îêî) ANATOLIAN HIEROGLYPH A020	[54A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14414, 0x0061 };
    uint32_t const ces[9] = { 0x54A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_022)
{
    // 14414 0041;	
    // (îêî) ANATOLIAN HIEROGLYPH A020	[54A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14414, 0x0041 };
    uint32_t const ces[9] = { 0x54A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_023)
{
    // 14414 0062;	
    // (îêî) ANATOLIAN HIEROGLYPH A020	[54A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14414, 0x0062 };
    uint32_t const ces[9] = { 0x54A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_024)
{
    // 14415 0021;	
    // (îêï) ANATOLIAN HIEROGLYPH A021	[54A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14415, 0x0021 };
    uint32_t const ces[9] = { 0x54A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_025)
{
    // 14415 003F;	
    // (îêï) ANATOLIAN HIEROGLYPH A021	[54A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14415, 0x003F };
    uint32_t const ces[9] = { 0x54A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_026)
{
    // 14415 0061;	
    // (îêï) ANATOLIAN HIEROGLYPH A021	[54A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14415, 0x0061 };
    uint32_t const ces[9] = { 0x54A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_027)
{
    // 14415 0041;	
    // (îêï) ANATOLIAN HIEROGLYPH A021	[54A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14415, 0x0041 };
    uint32_t const ces[9] = { 0x54A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_028)
{
    // 14415 0062;	
    // (îêï) ANATOLIAN HIEROGLYPH A021	[54A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14415, 0x0062 };
    uint32_t const ces[9] = { 0x54A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_029)
{
    // 14416 0021;	
    // (îêñ) ANATOLIAN HIEROGLYPH A022	[54AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14416, 0x0021 };
    uint32_t const ces[9] = { 0x54AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_030)
{
    // 14416 003F;	
    // (îêñ) ANATOLIAN HIEROGLYPH A022	[54AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14416, 0x003F };
    uint32_t const ces[9] = { 0x54AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_031)
{
    // 14416 0061;	
    // (îêñ) ANATOLIAN HIEROGLYPH A022	[54AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14416, 0x0061 };
    uint32_t const ces[9] = { 0x54AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_032)
{
    // 14416 0041;	
    // (îêñ) ANATOLIAN HIEROGLYPH A022	[54AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14416, 0x0041 };
    uint32_t const ces[9] = { 0x54AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_033)
{
    // 14416 0062;	
    // (îêñ) ANATOLIAN HIEROGLYPH A022	[54AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14416, 0x0062 };
    uint32_t const ces[9] = { 0x54AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_034)
{
    // 14417 0021;	
    // (îêó) ANATOLIAN HIEROGLYPH A023	[54AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14417, 0x0021 };
    uint32_t const ces[9] = { 0x54AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_035)
{
    // 14417 003F;	
    // (îêó) ANATOLIAN HIEROGLYPH A023	[54AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14417, 0x003F };
    uint32_t const ces[9] = { 0x54AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_036)
{
    // 14417 0061;	
    // (îêó) ANATOLIAN HIEROGLYPH A023	[54AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14417, 0x0061 };
    uint32_t const ces[9] = { 0x54AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_037)
{
    // 14417 0041;	
    // (îêó) ANATOLIAN HIEROGLYPH A023	[54AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14417, 0x0041 };
    uint32_t const ces[9] = { 0x54AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_038)
{
    // 14417 0062;	
    // (îêó) ANATOLIAN HIEROGLYPH A023	[54AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14417, 0x0062 };
    uint32_t const ces[9] = { 0x54AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_039)
{
    // 14418 0021;	
    // (îêò) ANATOLIAN HIEROGLYPH A024	[54AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14418, 0x0021 };
    uint32_t const ces[9] = { 0x54AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_040)
{
    // 14418 003F;	
    // (îêò) ANATOLIAN HIEROGLYPH A024	[54AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14418, 0x003F };
    uint32_t const ces[9] = { 0x54AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_041)
{
    // 14418 0061;	
    // (îêò) ANATOLIAN HIEROGLYPH A024	[54AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14418, 0x0061 };
    uint32_t const ces[9] = { 0x54AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_042)
{
    // 14418 0041;	
    // (îêò) ANATOLIAN HIEROGLYPH A024	[54AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14418, 0x0041 };
    uint32_t const ces[9] = { 0x54AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_043)
{
    // 14418 0062;	
    // (îêò) ANATOLIAN HIEROGLYPH A024	[54AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14418, 0x0062 };
    uint32_t const ces[9] = { 0x54AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_044)
{
    // 14419 0021;	
    // (îêô) ANATOLIAN HIEROGLYPH A025	[54AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14419, 0x0021 };
    uint32_t const ces[9] = { 0x54AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_045)
{
    // 14419 003F;	
    // (îêô) ANATOLIAN HIEROGLYPH A025	[54AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14419, 0x003F };
    uint32_t const ces[9] = { 0x54AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_046)
{
    // 14419 0061;	
    // (îêô) ANATOLIAN HIEROGLYPH A025	[54AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14419, 0x0061 };
    uint32_t const ces[9] = { 0x54AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_047)
{
    // 14419 0041;	
    // (îêô) ANATOLIAN HIEROGLYPH A025	[54AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14419, 0x0041 };
    uint32_t const ces[9] = { 0x54AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_048)
{
    // 14419 0062;	
    // (îêô) ANATOLIAN HIEROGLYPH A025	[54AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14419, 0x0062 };
    uint32_t const ces[9] = { 0x54AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_049)
{
    // 1441A 0021;	
    // (îêö) ANATOLIAN HIEROGLYPH A026	[54AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441A, 0x0021 };
    uint32_t const ces[9] = { 0x54AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_050)
{
    // 1441A 003F;	
    // (îêö) ANATOLIAN HIEROGLYPH A026	[54AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441A, 0x003F };
    uint32_t const ces[9] = { 0x54AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_051)
{
    // 1441A 0061;	
    // (îêö) ANATOLIAN HIEROGLYPH A026	[54AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441A, 0x0061 };
    uint32_t const ces[9] = { 0x54AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_052)
{
    // 1441A 0041;	
    // (îêö) ANATOLIAN HIEROGLYPH A026	[54AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441A, 0x0041 };
    uint32_t const ces[9] = { 0x54AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_053)
{
    // 1441A 0062;	
    // (îêö) ANATOLIAN HIEROGLYPH A026	[54AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441A, 0x0062 };
    uint32_t const ces[9] = { 0x54AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_054)
{
    // 1441B 0021;	
    // (îêõ) ANATOLIAN HIEROGLYPH A026A	[54AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441B, 0x0021 };
    uint32_t const ces[9] = { 0x54AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_055)
{
    // 1441B 003F;	
    // (îêõ) ANATOLIAN HIEROGLYPH A026A	[54AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441B, 0x003F };
    uint32_t const ces[9] = { 0x54AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_056)
{
    // 1441B 0061;	
    // (îêõ) ANATOLIAN HIEROGLYPH A026A	[54AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441B, 0x0061 };
    uint32_t const ces[9] = { 0x54AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_057)
{
    // 1441B 0041;	
    // (îêõ) ANATOLIAN HIEROGLYPH A026A	[54AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441B, 0x0041 };
    uint32_t const ces[9] = { 0x54AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_058)
{
    // 1441B 0062;	
    // (îêõ) ANATOLIAN HIEROGLYPH A026A	[54AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441B, 0x0062 };
    uint32_t const ces[9] = { 0x54AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_059)
{
    // 1441C 0021;	
    // (îêú) ANATOLIAN HIEROGLYPH A027	[54B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441C, 0x0021 };
    uint32_t const ces[9] = { 0x54B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_060)
{
    // 1441C 003F;	
    // (îêú) ANATOLIAN HIEROGLYPH A027	[54B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441C, 0x003F };
    uint32_t const ces[9] = { 0x54B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_061)
{
    // 1441C 0061;	
    // (îêú) ANATOLIAN HIEROGLYPH A027	[54B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441C, 0x0061 };
    uint32_t const ces[9] = { 0x54B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_062)
{
    // 1441C 0041;	
    // (îêú) ANATOLIAN HIEROGLYPH A027	[54B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441C, 0x0041 };
    uint32_t const ces[9] = { 0x54B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_063)
{
    // 1441C 0062;	
    // (îêú) ANATOLIAN HIEROGLYPH A027	[54B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441C, 0x0062 };
    uint32_t const ces[9] = { 0x54B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_064)
{
    // 1441D 0021;	
    // (îêù) ANATOLIAN HIEROGLYPH A028	[54B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441D, 0x0021 };
    uint32_t const ces[9] = { 0x54B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_065)
{
    // 1441D 003F;	
    // (îêù) ANATOLIAN HIEROGLYPH A028	[54B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441D, 0x003F };
    uint32_t const ces[9] = { 0x54B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_066)
{
    // 1441D 0061;	
    // (îêù) ANATOLIAN HIEROGLYPH A028	[54B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441D, 0x0061 };
    uint32_t const ces[9] = { 0x54B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_067)
{
    // 1441D 0041;	
    // (îêù) ANATOLIAN HIEROGLYPH A028	[54B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441D, 0x0041 };
    uint32_t const ces[9] = { 0x54B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_068)
{
    // 1441D 0062;	
    // (îêù) ANATOLIAN HIEROGLYPH A028	[54B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441D, 0x0062 };
    uint32_t const ces[9] = { 0x54B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_069)
{
    // 1441E 0021;	
    // (îêû) ANATOLIAN HIEROGLYPH A029	[54B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441E, 0x0021 };
    uint32_t const ces[9] = { 0x54B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_070)
{
    // 1441E 003F;	
    // (îêû) ANATOLIAN HIEROGLYPH A029	[54B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441E, 0x003F };
    uint32_t const ces[9] = { 0x54B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_071)
{
    // 1441E 0061;	
    // (îêû) ANATOLIAN HIEROGLYPH A029	[54B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441E, 0x0061 };
    uint32_t const ces[9] = { 0x54B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_072)
{
    // 1441E 0041;	
    // (îêû) ANATOLIAN HIEROGLYPH A029	[54B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441E, 0x0041 };
    uint32_t const ces[9] = { 0x54B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_073)
{
    // 1441E 0062;	
    // (îêû) ANATOLIAN HIEROGLYPH A029	[54B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441E, 0x0062 };
    uint32_t const ces[9] = { 0x54B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_074)
{
    // 1441F 0021;	
    // (îêü) ANATOLIAN HIEROGLYPH A030	[54B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441F, 0x0021 };
    uint32_t const ces[9] = { 0x54B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_075)
{
    // 1441F 003F;	
    // (îêü) ANATOLIAN HIEROGLYPH A030	[54B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441F, 0x003F };
    uint32_t const ces[9] = { 0x54B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_076)
{
    // 1441F 0061;	
    // (îêü) ANATOLIAN HIEROGLYPH A030	[54B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441F, 0x0061 };
    uint32_t const ces[9] = { 0x54B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_077)
{
    // 1441F 0041;	
    // (îêü) ANATOLIAN HIEROGLYPH A030	[54B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1441F, 0x0041 };
    uint32_t const ces[9] = { 0x54B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_078)
{
    // 1441F 0062;	
    // (îêü) ANATOLIAN HIEROGLYPH A030	[54B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1441F, 0x0062 };
    uint32_t const ces[9] = { 0x54B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_079)
{
    // 14420 0021;	
    // (îê†) ANATOLIAN HIEROGLYPH A031	[54B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14420, 0x0021 };
    uint32_t const ces[9] = { 0x54B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_080)
{
    // 14420 003F;	
    // (îê†) ANATOLIAN HIEROGLYPH A031	[54B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14420, 0x003F };
    uint32_t const ces[9] = { 0x54B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_081)
{
    // 14420 0061;	
    // (îê†) ANATOLIAN HIEROGLYPH A031	[54B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14420, 0x0061 };
    uint32_t const ces[9] = { 0x54B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_082)
{
    // 14420 0041;	
    // (îê†) ANATOLIAN HIEROGLYPH A031	[54B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14420, 0x0041 };
    uint32_t const ces[9] = { 0x54B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_083)
{
    // 14420 0062;	
    // (îê†) ANATOLIAN HIEROGLYPH A031	[54B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14420, 0x0062 };
    uint32_t const ces[9] = { 0x54B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_084)
{
    // 14421 0021;	
    // (îê°) ANATOLIAN HIEROGLYPH A032	[54B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14421, 0x0021 };
    uint32_t const ces[9] = { 0x54B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_085)
{
    // 14421 003F;	
    // (îê°) ANATOLIAN HIEROGLYPH A032	[54B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14421, 0x003F };
    uint32_t const ces[9] = { 0x54B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_086)
{
    // 14421 0061;	
    // (îê°) ANATOLIAN HIEROGLYPH A032	[54B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14421, 0x0061 };
    uint32_t const ces[9] = { 0x54B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_087)
{
    // 14421 0041;	
    // (îê°) ANATOLIAN HIEROGLYPH A032	[54B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14421, 0x0041 };
    uint32_t const ces[9] = { 0x54B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_088)
{
    // 14421 0062;	
    // (îê°) ANATOLIAN HIEROGLYPH A032	[54B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14421, 0x0062 };
    uint32_t const ces[9] = { 0x54B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_089)
{
    // 14422 0021;	
    // (îê¢) ANATOLIAN HIEROGLYPH A033	[54B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14422, 0x0021 };
    uint32_t const ces[9] = { 0x54B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_090)
{
    // 14422 003F;	
    // (îê¢) ANATOLIAN HIEROGLYPH A033	[54B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14422, 0x003F };
    uint32_t const ces[9] = { 0x54B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_091)
{
    // 14422 0061;	
    // (îê¢) ANATOLIAN HIEROGLYPH A033	[54B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14422, 0x0061 };
    uint32_t const ces[9] = { 0x54B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_092)
{
    // 14422 0041;	
    // (îê¢) ANATOLIAN HIEROGLYPH A033	[54B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14422, 0x0041 };
    uint32_t const ces[9] = { 0x54B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_093)
{
    // 14422 0062;	
    // (îê¢) ANATOLIAN HIEROGLYPH A033	[54B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14422, 0x0062 };
    uint32_t const ces[9] = { 0x54B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_094)
{
    // 14423 0021;	
    // (îê£) ANATOLIAN HIEROGLYPH A034	[54B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14423, 0x0021 };
    uint32_t const ces[9] = { 0x54B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_095)
{
    // 14423 003F;	
    // (îê£) ANATOLIAN HIEROGLYPH A034	[54B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14423, 0x003F };
    uint32_t const ces[9] = { 0x54B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_096)
{
    // 14423 0061;	
    // (îê£) ANATOLIAN HIEROGLYPH A034	[54B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14423, 0x0061 };
    uint32_t const ces[9] = { 0x54B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_097)
{
    // 14423 0041;	
    // (îê£) ANATOLIAN HIEROGLYPH A034	[54B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14423, 0x0041 };
    uint32_t const ces[9] = { 0x54B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_098)
{
    // 14423 0062;	
    // (îê£) ANATOLIAN HIEROGLYPH A034	[54B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14423, 0x0062 };
    uint32_t const ces[9] = { 0x54B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_099)
{
    // 14424 0021;	
    // (îê§) ANATOLIAN HIEROGLYPH A035	[54B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14424, 0x0021 };
    uint32_t const ces[9] = { 0x54B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_100)
{
    // 14424 003F;	
    // (îê§) ANATOLIAN HIEROGLYPH A035	[54B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14424, 0x003F };
    uint32_t const ces[9] = { 0x54B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_101)
{
    // 14424 0061;	
    // (îê§) ANATOLIAN HIEROGLYPH A035	[54B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14424, 0x0061 };
    uint32_t const ces[9] = { 0x54B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_102)
{
    // 14424 0041;	
    // (îê§) ANATOLIAN HIEROGLYPH A035	[54B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14424, 0x0041 };
    uint32_t const ces[9] = { 0x54B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_103)
{
    // 14424 0062;	
    // (îê§) ANATOLIAN HIEROGLYPH A035	[54B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14424, 0x0062 };
    uint32_t const ces[9] = { 0x54B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_104)
{
    // 14425 0021;	
    // (îê•) ANATOLIAN HIEROGLYPH A036	[54B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14425, 0x0021 };
    uint32_t const ces[9] = { 0x54B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_105)
{
    // 14425 003F;	
    // (îê•) ANATOLIAN HIEROGLYPH A036	[54B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14425, 0x003F };
    uint32_t const ces[9] = { 0x54B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_106)
{
    // 14425 0061;	
    // (îê•) ANATOLIAN HIEROGLYPH A036	[54B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14425, 0x0061 };
    uint32_t const ces[9] = { 0x54B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_107)
{
    // 14425 0041;	
    // (îê•) ANATOLIAN HIEROGLYPH A036	[54B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14425, 0x0041 };
    uint32_t const ces[9] = { 0x54B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_108)
{
    // 14425 0062;	
    // (îê•) ANATOLIAN HIEROGLYPH A036	[54B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14425, 0x0062 };
    uint32_t const ces[9] = { 0x54B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_109)
{
    // 14426 0021;	
    // (îê¶) ANATOLIAN HIEROGLYPH A037	[54BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14426, 0x0021 };
    uint32_t const ces[9] = { 0x54BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_110)
{
    // 14426 003F;	
    // (îê¶) ANATOLIAN HIEROGLYPH A037	[54BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14426, 0x003F };
    uint32_t const ces[9] = { 0x54BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_111)
{
    // 14426 0061;	
    // (îê¶) ANATOLIAN HIEROGLYPH A037	[54BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14426, 0x0061 };
    uint32_t const ces[9] = { 0x54BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_112)
{
    // 14426 0041;	
    // (îê¶) ANATOLIAN HIEROGLYPH A037	[54BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14426, 0x0041 };
    uint32_t const ces[9] = { 0x54BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_113)
{
    // 14426 0062;	
    // (îê¶) ANATOLIAN HIEROGLYPH A037	[54BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14426, 0x0062 };
    uint32_t const ces[9] = { 0x54BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_114)
{
    // 14427 0021;	
    // (îêß) ANATOLIAN HIEROGLYPH A038	[54BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14427, 0x0021 };
    uint32_t const ces[9] = { 0x54BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_115)
{
    // 14427 003F;	
    // (îêß) ANATOLIAN HIEROGLYPH A038	[54BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14427, 0x003F };
    uint32_t const ces[9] = { 0x54BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_116)
{
    // 14427 0061;	
    // (îêß) ANATOLIAN HIEROGLYPH A038	[54BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14427, 0x0061 };
    uint32_t const ces[9] = { 0x54BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_117)
{
    // 14427 0041;	
    // (îêß) ANATOLIAN HIEROGLYPH A038	[54BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14427, 0x0041 };
    uint32_t const ces[9] = { 0x54BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_118)
{
    // 14427 0062;	
    // (îêß) ANATOLIAN HIEROGLYPH A038	[54BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14427, 0x0062 };
    uint32_t const ces[9] = { 0x54BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_119)
{
    // 14428 0021;	
    // (îê®) ANATOLIAN HIEROGLYPH A039	[54BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14428, 0x0021 };
    uint32_t const ces[9] = { 0x54BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_120)
{
    // 14428 003F;	
    // (îê®) ANATOLIAN HIEROGLYPH A039	[54BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14428, 0x003F };
    uint32_t const ces[9] = { 0x54BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_121)
{
    // 14428 0061;	
    // (îê®) ANATOLIAN HIEROGLYPH A039	[54BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14428, 0x0061 };
    uint32_t const ces[9] = { 0x54BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_122)
{
    // 14428 0041;	
    // (îê®) ANATOLIAN HIEROGLYPH A039	[54BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14428, 0x0041 };
    uint32_t const ces[9] = { 0x54BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_123)
{
    // 14428 0062;	
    // (îê®) ANATOLIAN HIEROGLYPH A039	[54BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14428, 0x0062 };
    uint32_t const ces[9] = { 0x54BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_124)
{
    // 14429 0021;	
    // (îê©) ANATOLIAN HIEROGLYPH A039A	[54BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14429, 0x0021 };
    uint32_t const ces[9] = { 0x54BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_125)
{
    // 14429 003F;	
    // (îê©) ANATOLIAN HIEROGLYPH A039A	[54BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14429, 0x003F };
    uint32_t const ces[9] = { 0x54BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_126)
{
    // 14429 0061;	
    // (îê©) ANATOLIAN HIEROGLYPH A039A	[54BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14429, 0x0061 };
    uint32_t const ces[9] = { 0x54BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_127)
{
    // 14429 0041;	
    // (îê©) ANATOLIAN HIEROGLYPH A039A	[54BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14429, 0x0041 };
    uint32_t const ces[9] = { 0x54BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_128)
{
    // 14429 0062;	
    // (îê©) ANATOLIAN HIEROGLYPH A039A	[54BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14429, 0x0062 };
    uint32_t const ces[9] = { 0x54BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_129)
{
    // 1442A 0021;	
    // (îê™) ANATOLIAN HIEROGLYPH A040	[54BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442A, 0x0021 };
    uint32_t const ces[9] = { 0x54BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_130)
{
    // 1442A 003F;	
    // (îê™) ANATOLIAN HIEROGLYPH A040	[54BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442A, 0x003F };
    uint32_t const ces[9] = { 0x54BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_131)
{
    // 1442A 0061;	
    // (îê™) ANATOLIAN HIEROGLYPH A040	[54BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442A, 0x0061 };
    uint32_t const ces[9] = { 0x54BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_132)
{
    // 1442A 0041;	
    // (îê™) ANATOLIAN HIEROGLYPH A040	[54BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442A, 0x0041 };
    uint32_t const ces[9] = { 0x54BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_133)
{
    // 1442A 0062;	
    // (îê™) ANATOLIAN HIEROGLYPH A040	[54BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442A, 0x0062 };
    uint32_t const ces[9] = { 0x54BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_134)
{
    // 1442B 0021;	
    // (îê´) ANATOLIAN HIEROGLYPH A041	[54BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442B, 0x0021 };
    uint32_t const ces[9] = { 0x54BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_135)
{
    // 1442B 003F;	
    // (îê´) ANATOLIAN HIEROGLYPH A041	[54BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442B, 0x003F };
    uint32_t const ces[9] = { 0x54BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_136)
{
    // 1442B 0061;	
    // (îê´) ANATOLIAN HIEROGLYPH A041	[54BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442B, 0x0061 };
    uint32_t const ces[9] = { 0x54BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_137)
{
    // 1442B 0041;	
    // (îê´) ANATOLIAN HIEROGLYPH A041	[54BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442B, 0x0041 };
    uint32_t const ces[9] = { 0x54BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_138)
{
    // 1442B 0062;	
    // (îê´) ANATOLIAN HIEROGLYPH A041	[54BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442B, 0x0062 };
    uint32_t const ces[9] = { 0x54BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_139)
{
    // 1442C 0021;	
    // (îê¨) ANATOLIAN HIEROGLYPH A041A	[54C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442C, 0x0021 };
    uint32_t const ces[9] = { 0x54C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_140)
{
    // 1442C 003F;	
    // (îê¨) ANATOLIAN HIEROGLYPH A041A	[54C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442C, 0x003F };
    uint32_t const ces[9] = { 0x54C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_141)
{
    // 1442C 0061;	
    // (îê¨) ANATOLIAN HIEROGLYPH A041A	[54C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442C, 0x0061 };
    uint32_t const ces[9] = { 0x54C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_142)
{
    // 1442C 0041;	
    // (îê¨) ANATOLIAN HIEROGLYPH A041A	[54C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442C, 0x0041 };
    uint32_t const ces[9] = { 0x54C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_143)
{
    // 1442C 0062;	
    // (îê¨) ANATOLIAN HIEROGLYPH A041A	[54C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442C, 0x0062 };
    uint32_t const ces[9] = { 0x54C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_144)
{
    // 1442D 0021;	
    // (îê≠) ANATOLIAN HIEROGLYPH A042	[54C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442D, 0x0021 };
    uint32_t const ces[9] = { 0x54C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_145)
{
    // 1442D 003F;	
    // (îê≠) ANATOLIAN HIEROGLYPH A042	[54C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442D, 0x003F };
    uint32_t const ces[9] = { 0x54C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_146)
{
    // 1442D 0061;	
    // (îê≠) ANATOLIAN HIEROGLYPH A042	[54C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442D, 0x0061 };
    uint32_t const ces[9] = { 0x54C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_147)
{
    // 1442D 0041;	
    // (îê≠) ANATOLIAN HIEROGLYPH A042	[54C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442D, 0x0041 };
    uint32_t const ces[9] = { 0x54C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_148)
{
    // 1442D 0062;	
    // (îê≠) ANATOLIAN HIEROGLYPH A042	[54C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442D, 0x0062 };
    uint32_t const ces[9] = { 0x54C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_149)
{
    // 1442E 0021;	
    // (îêÆ) ANATOLIAN HIEROGLYPH A043	[54C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442E, 0x0021 };
    uint32_t const ces[9] = { 0x54C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_150)
{
    // 1442E 003F;	
    // (îêÆ) ANATOLIAN HIEROGLYPH A043	[54C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442E, 0x003F };
    uint32_t const ces[9] = { 0x54C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_151)
{
    // 1442E 0061;	
    // (îêÆ) ANATOLIAN HIEROGLYPH A043	[54C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442E, 0x0061 };
    uint32_t const ces[9] = { 0x54C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_152)
{
    // 1442E 0041;	
    // (îêÆ) ANATOLIAN HIEROGLYPH A043	[54C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442E, 0x0041 };
    uint32_t const ces[9] = { 0x54C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_153)
{
    // 1442E 0062;	
    // (îêÆ) ANATOLIAN HIEROGLYPH A043	[54C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442E, 0x0062 };
    uint32_t const ces[9] = { 0x54C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_154)
{
    // 1442F 0021;	
    // (îêØ) ANATOLIAN HIEROGLYPH A044	[54C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442F, 0x0021 };
    uint32_t const ces[9] = { 0x54C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_155)
{
    // 1442F 003F;	
    // (îêØ) ANATOLIAN HIEROGLYPH A044	[54C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442F, 0x003F };
    uint32_t const ces[9] = { 0x54C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_156)
{
    // 1442F 0061;	
    // (îêØ) ANATOLIAN HIEROGLYPH A044	[54C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442F, 0x0061 };
    uint32_t const ces[9] = { 0x54C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_157)
{
    // 1442F 0041;	
    // (îêØ) ANATOLIAN HIEROGLYPH A044	[54C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1442F, 0x0041 };
    uint32_t const ces[9] = { 0x54C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_158)
{
    // 1442F 0062;	
    // (îêØ) ANATOLIAN HIEROGLYPH A044	[54C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1442F, 0x0062 };
    uint32_t const ces[9] = { 0x54C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_159)
{
    // 14430 0021;	
    // (îê∞) ANATOLIAN HIEROGLYPH A045	[54C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14430, 0x0021 };
    uint32_t const ces[9] = { 0x54C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_160)
{
    // 14430 003F;	
    // (îê∞) ANATOLIAN HIEROGLYPH A045	[54C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14430, 0x003F };
    uint32_t const ces[9] = { 0x54C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_161)
{
    // 14430 0061;	
    // (îê∞) ANATOLIAN HIEROGLYPH A045	[54C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14430, 0x0061 };
    uint32_t const ces[9] = { 0x54C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_162)
{
    // 14430 0041;	
    // (îê∞) ANATOLIAN HIEROGLYPH A045	[54C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14430, 0x0041 };
    uint32_t const ces[9] = { 0x54C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_163)
{
    // 14430 0062;	
    // (îê∞) ANATOLIAN HIEROGLYPH A045	[54C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14430, 0x0062 };
    uint32_t const ces[9] = { 0x54C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_164)
{
    // 14431 0021;	
    // (îê±) ANATOLIAN HIEROGLYPH A045A	[54C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14431, 0x0021 };
    uint32_t const ces[9] = { 0x54C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_165)
{
    // 14431 003F;	
    // (îê±) ANATOLIAN HIEROGLYPH A045A	[54C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14431, 0x003F };
    uint32_t const ces[9] = { 0x54C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_166)
{
    // 14431 0061;	
    // (îê±) ANATOLIAN HIEROGLYPH A045A	[54C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14431, 0x0061 };
    uint32_t const ces[9] = { 0x54C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_167)
{
    // 14431 0041;	
    // (îê±) ANATOLIAN HIEROGLYPH A045A	[54C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14431, 0x0041 };
    uint32_t const ces[9] = { 0x54C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_168)
{
    // 14431 0062;	
    // (îê±) ANATOLIAN HIEROGLYPH A045A	[54C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14431, 0x0062 };
    uint32_t const ces[9] = { 0x54C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_169)
{
    // 14432 0021;	
    // (îê≤) ANATOLIAN HIEROGLYPH A046	[54C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14432, 0x0021 };
    uint32_t const ces[9] = { 0x54C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_170)
{
    // 14432 003F;	
    // (îê≤) ANATOLIAN HIEROGLYPH A046	[54C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14432, 0x003F };
    uint32_t const ces[9] = { 0x54C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_171)
{
    // 14432 0061;	
    // (îê≤) ANATOLIAN HIEROGLYPH A046	[54C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14432, 0x0061 };
    uint32_t const ces[9] = { 0x54C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_172)
{
    // 14432 0041;	
    // (îê≤) ANATOLIAN HIEROGLYPH A046	[54C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14432, 0x0041 };
    uint32_t const ces[9] = { 0x54C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_173)
{
    // 14432 0062;	
    // (îê≤) ANATOLIAN HIEROGLYPH A046	[54C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14432, 0x0062 };
    uint32_t const ces[9] = { 0x54C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_174)
{
    // 14433 0021;	
    // (îê≥) ANATOLIAN HIEROGLYPH A046A	[54C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14433, 0x0021 };
    uint32_t const ces[9] = { 0x54C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_175)
{
    // 14433 003F;	
    // (îê≥) ANATOLIAN HIEROGLYPH A046A	[54C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14433, 0x003F };
    uint32_t const ces[9] = { 0x54C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_176)
{
    // 14433 0061;	
    // (îê≥) ANATOLIAN HIEROGLYPH A046A	[54C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14433, 0x0061 };
    uint32_t const ces[9] = { 0x54C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_177)
{
    // 14433 0041;	
    // (îê≥) ANATOLIAN HIEROGLYPH A046A	[54C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14433, 0x0041 };
    uint32_t const ces[9] = { 0x54C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_178)
{
    // 14433 0062;	
    // (îê≥) ANATOLIAN HIEROGLYPH A046A	[54C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14433, 0x0062 };
    uint32_t const ces[9] = { 0x54C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_179)
{
    // 14434 0021;	
    // (îê¥) ANATOLIAN HIEROGLYPH A046B	[54C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14434, 0x0021 };
    uint32_t const ces[9] = { 0x54C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_180)
{
    // 14434 003F;	
    // (îê¥) ANATOLIAN HIEROGLYPH A046B	[54C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14434, 0x003F };
    uint32_t const ces[9] = { 0x54C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_181)
{
    // 14434 0061;	
    // (îê¥) ANATOLIAN HIEROGLYPH A046B	[54C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14434, 0x0061 };
    uint32_t const ces[9] = { 0x54C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_182)
{
    // 14434 0041;	
    // (îê¥) ANATOLIAN HIEROGLYPH A046B	[54C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14434, 0x0041 };
    uint32_t const ces[9] = { 0x54C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_183)
{
    // 14434 0062;	
    // (îê¥) ANATOLIAN HIEROGLYPH A046B	[54C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14434, 0x0062 };
    uint32_t const ces[9] = { 0x54C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_184)
{
    // 14435 0021;	
    // (îêµ) ANATOLIAN HIEROGLYPH A047	[54C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14435, 0x0021 };
    uint32_t const ces[9] = { 0x54C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_185)
{
    // 14435 003F;	
    // (îêµ) ANATOLIAN HIEROGLYPH A047	[54C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14435, 0x003F };
    uint32_t const ces[9] = { 0x54C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_186)
{
    // 14435 0061;	
    // (îêµ) ANATOLIAN HIEROGLYPH A047	[54C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14435, 0x0061 };
    uint32_t const ces[9] = { 0x54C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_187)
{
    // 14435 0041;	
    // (îêµ) ANATOLIAN HIEROGLYPH A047	[54C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14435, 0x0041 };
    uint32_t const ces[9] = { 0x54C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_188)
{
    // 14435 0062;	
    // (îêµ) ANATOLIAN HIEROGLYPH A047	[54C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14435, 0x0062 };
    uint32_t const ces[9] = { 0x54C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_189)
{
    // 14436 0021;	
    // (îê∂) ANATOLIAN HIEROGLYPH A048	[54CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14436, 0x0021 };
    uint32_t const ces[9] = { 0x54CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_190)
{
    // 14436 003F;	
    // (îê∂) ANATOLIAN HIEROGLYPH A048	[54CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14436, 0x003F };
    uint32_t const ces[9] = { 0x54CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_191)
{
    // 14436 0061;	
    // (îê∂) ANATOLIAN HIEROGLYPH A048	[54CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14436, 0x0061 };
    uint32_t const ces[9] = { 0x54CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_192)
{
    // 14436 0041;	
    // (îê∂) ANATOLIAN HIEROGLYPH A048	[54CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14436, 0x0041 };
    uint32_t const ces[9] = { 0x54CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_193)
{
    // 14436 0062;	
    // (îê∂) ANATOLIAN HIEROGLYPH A048	[54CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14436, 0x0062 };
    uint32_t const ces[9] = { 0x54CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_194)
{
    // 14437 0021;	
    // (îê∑) ANATOLIAN HIEROGLYPH A049	[54CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14437, 0x0021 };
    uint32_t const ces[9] = { 0x54CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_195)
{
    // 14437 003F;	
    // (îê∑) ANATOLIAN HIEROGLYPH A049	[54CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14437, 0x003F };
    uint32_t const ces[9] = { 0x54CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_196)
{
    // 14437 0061;	
    // (îê∑) ANATOLIAN HIEROGLYPH A049	[54CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14437, 0x0061 };
    uint32_t const ces[9] = { 0x54CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_197)
{
    // 14437 0041;	
    // (îê∑) ANATOLIAN HIEROGLYPH A049	[54CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14437, 0x0041 };
    uint32_t const ces[9] = { 0x54CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_198)
{
    // 14437 0062;	
    // (îê∑) ANATOLIAN HIEROGLYPH A049	[54CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14437, 0x0062 };
    uint32_t const ces[9] = { 0x54CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_199)
{
    // 14438 0021;	
    // (îê∏) ANATOLIAN HIEROGLYPH A050	[54CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14438, 0x0021 };
    uint32_t const ces[9] = { 0x54CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_200)
{
    // 14438 003F;	
    // (îê∏) ANATOLIAN HIEROGLYPH A050	[54CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14438, 0x003F };
    uint32_t const ces[9] = { 0x54CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_201)
{
    // 14438 0061;	
    // (îê∏) ANATOLIAN HIEROGLYPH A050	[54CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14438, 0x0061 };
    uint32_t const ces[9] = { 0x54CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_202)
{
    // 14438 0041;	
    // (îê∏) ANATOLIAN HIEROGLYPH A050	[54CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14438, 0x0041 };
    uint32_t const ces[9] = { 0x54CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_203)
{
    // 14438 0062;	
    // (îê∏) ANATOLIAN HIEROGLYPH A050	[54CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14438, 0x0062 };
    uint32_t const ces[9] = { 0x54CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_204)
{
    // 14439 0021;	
    // (îêπ) ANATOLIAN HIEROGLYPH A051	[54CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14439, 0x0021 };
    uint32_t const ces[9] = { 0x54CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_205)
{
    // 14439 003F;	
    // (îêπ) ANATOLIAN HIEROGLYPH A051	[54CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14439, 0x003F };
    uint32_t const ces[9] = { 0x54CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_206)
{
    // 14439 0061;	
    // (îêπ) ANATOLIAN HIEROGLYPH A051	[54CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14439, 0x0061 };
    uint32_t const ces[9] = { 0x54CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_207)
{
    // 14439 0041;	
    // (îêπ) ANATOLIAN HIEROGLYPH A051	[54CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14439, 0x0041 };
    uint32_t const ces[9] = { 0x54CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_208)
{
    // 14439 0062;	
    // (îêπ) ANATOLIAN HIEROGLYPH A051	[54CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14439, 0x0062 };
    uint32_t const ces[9] = { 0x54CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_209)
{
    // 1443A 0021;	
    // (îê∫) ANATOLIAN HIEROGLYPH A052	[54CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443A, 0x0021 };
    uint32_t const ces[9] = { 0x54CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_210)
{
    // 1443A 003F;	
    // (îê∫) ANATOLIAN HIEROGLYPH A052	[54CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443A, 0x003F };
    uint32_t const ces[9] = { 0x54CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_211)
{
    // 1443A 0061;	
    // (îê∫) ANATOLIAN HIEROGLYPH A052	[54CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443A, 0x0061 };
    uint32_t const ces[9] = { 0x54CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_212)
{
    // 1443A 0041;	
    // (îê∫) ANATOLIAN HIEROGLYPH A052	[54CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443A, 0x0041 };
    uint32_t const ces[9] = { 0x54CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_213)
{
    // 1443A 0062;	
    // (îê∫) ANATOLIAN HIEROGLYPH A052	[54CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443A, 0x0062 };
    uint32_t const ces[9] = { 0x54CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_214)
{
    // 1443B 0021;	
    // (îêª) ANATOLIAN HIEROGLYPH A053	[54CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443B, 0x0021 };
    uint32_t const ces[9] = { 0x54CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_215)
{
    // 1443B 003F;	
    // (îêª) ANATOLIAN HIEROGLYPH A053	[54CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443B, 0x003F };
    uint32_t const ces[9] = { 0x54CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_216)
{
    // 1443B 0061;	
    // (îêª) ANATOLIAN HIEROGLYPH A053	[54CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443B, 0x0061 };
    uint32_t const ces[9] = { 0x54CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_217)
{
    // 1443B 0041;	
    // (îêª) ANATOLIAN HIEROGLYPH A053	[54CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443B, 0x0041 };
    uint32_t const ces[9] = { 0x54CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_218)
{
    // 1443B 0062;	
    // (îêª) ANATOLIAN HIEROGLYPH A053	[54CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443B, 0x0062 };
    uint32_t const ces[9] = { 0x54CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_219)
{
    // 1443C 0021;	
    // (îêº) ANATOLIAN HIEROGLYPH A054	[54D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443C, 0x0021 };
    uint32_t const ces[9] = { 0x54D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_220)
{
    // 1443C 003F;	
    // (îêº) ANATOLIAN HIEROGLYPH A054	[54D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443C, 0x003F };
    uint32_t const ces[9] = { 0x54D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_221)
{
    // 1443C 0061;	
    // (îêº) ANATOLIAN HIEROGLYPH A054	[54D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443C, 0x0061 };
    uint32_t const ces[9] = { 0x54D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_222)
{
    // 1443C 0041;	
    // (îêº) ANATOLIAN HIEROGLYPH A054	[54D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443C, 0x0041 };
    uint32_t const ces[9] = { 0x54D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_223)
{
    // 1443C 0062;	
    // (îêº) ANATOLIAN HIEROGLYPH A054	[54D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443C, 0x0062 };
    uint32_t const ces[9] = { 0x54D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_224)
{
    // 1443D 0021;	
    // (îêΩ) ANATOLIAN HIEROGLYPH A055	[54D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443D, 0x0021 };
    uint32_t const ces[9] = { 0x54D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_225)
{
    // 1443D 003F;	
    // (îêΩ) ANATOLIAN HIEROGLYPH A055	[54D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443D, 0x003F };
    uint32_t const ces[9] = { 0x54D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_226)
{
    // 1443D 0061;	
    // (îêΩ) ANATOLIAN HIEROGLYPH A055	[54D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443D, 0x0061 };
    uint32_t const ces[9] = { 0x54D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_227)
{
    // 1443D 0041;	
    // (îêΩ) ANATOLIAN HIEROGLYPH A055	[54D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443D, 0x0041 };
    uint32_t const ces[9] = { 0x54D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_228)
{
    // 1443D 0062;	
    // (îêΩ) ANATOLIAN HIEROGLYPH A055	[54D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443D, 0x0062 };
    uint32_t const ces[9] = { 0x54D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_229)
{
    // 1443E 0021;	
    // (îêæ) ANATOLIAN HIEROGLYPH A056	[54D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443E, 0x0021 };
    uint32_t const ces[9] = { 0x54D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_230)
{
    // 1443E 003F;	
    // (îêæ) ANATOLIAN HIEROGLYPH A056	[54D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443E, 0x003F };
    uint32_t const ces[9] = { 0x54D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_231)
{
    // 1443E 0061;	
    // (îêæ) ANATOLIAN HIEROGLYPH A056	[54D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443E, 0x0061 };
    uint32_t const ces[9] = { 0x54D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_232)
{
    // 1443E 0041;	
    // (îêæ) ANATOLIAN HIEROGLYPH A056	[54D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443E, 0x0041 };
    uint32_t const ces[9] = { 0x54D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_233)
{
    // 1443E 0062;	
    // (îêæ) ANATOLIAN HIEROGLYPH A056	[54D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443E, 0x0062 };
    uint32_t const ces[9] = { 0x54D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_234)
{
    // 1443F 0021;	
    // (îêø) ANATOLIAN HIEROGLYPH A057	[54D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443F, 0x0021 };
    uint32_t const ces[9] = { 0x54D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_235)
{
    // 1443F 003F;	
    // (îêø) ANATOLIAN HIEROGLYPH A057	[54D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443F, 0x003F };
    uint32_t const ces[9] = { 0x54D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_236)
{
    // 1443F 0061;	
    // (îêø) ANATOLIAN HIEROGLYPH A057	[54D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443F, 0x0061 };
    uint32_t const ces[9] = { 0x54D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_237)
{
    // 1443F 0041;	
    // (îêø) ANATOLIAN HIEROGLYPH A057	[54D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1443F, 0x0041 };
    uint32_t const ces[9] = { 0x54D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_238)
{
    // 1443F 0062;	
    // (îêø) ANATOLIAN HIEROGLYPH A057	[54D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1443F, 0x0062 };
    uint32_t const ces[9] = { 0x54D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_239)
{
    // 14440 0021;	
    // (îëÄ) ANATOLIAN HIEROGLYPH A058	[54D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14440, 0x0021 };
    uint32_t const ces[9] = { 0x54D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_240)
{
    // 14440 003F;	
    // (îëÄ) ANATOLIAN HIEROGLYPH A058	[54D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14440, 0x003F };
    uint32_t const ces[9] = { 0x54D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_241)
{
    // 14440 0061;	
    // (îëÄ) ANATOLIAN HIEROGLYPH A058	[54D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14440, 0x0061 };
    uint32_t const ces[9] = { 0x54D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_242)
{
    // 14440 0041;	
    // (îëÄ) ANATOLIAN HIEROGLYPH A058	[54D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14440, 0x0041 };
    uint32_t const ces[9] = { 0x54D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_243)
{
    // 14440 0062;	
    // (îëÄ) ANATOLIAN HIEROGLYPH A058	[54D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14440, 0x0062 };
    uint32_t const ces[9] = { 0x54D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_244)
{
    // 14441 0021;	
    // (îëÅ) ANATOLIAN HIEROGLYPH A059	[54D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14441, 0x0021 };
    uint32_t const ces[9] = { 0x54D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_245)
{
    // 14441 003F;	
    // (îëÅ) ANATOLIAN HIEROGLYPH A059	[54D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14441, 0x003F };
    uint32_t const ces[9] = { 0x54D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_246)
{
    // 14441 0061;	
    // (îëÅ) ANATOLIAN HIEROGLYPH A059	[54D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14441, 0x0061 };
    uint32_t const ces[9] = { 0x54D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_247)
{
    // 14441 0041;	
    // (îëÅ) ANATOLIAN HIEROGLYPH A059	[54D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14441, 0x0041 };
    uint32_t const ces[9] = { 0x54D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_248)
{
    // 14441 0062;	
    // (îëÅ) ANATOLIAN HIEROGLYPH A059	[54D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14441, 0x0062 };
    uint32_t const ces[9] = { 0x54D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_249)
{
    // 14442 0021;	
    // (îëÇ) ANATOLIAN HIEROGLYPH A060	[54D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14442, 0x0021 };
    uint32_t const ces[9] = { 0x54D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_250)
{
    // 14442 003F;	
    // (îëÇ) ANATOLIAN HIEROGLYPH A060	[54D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14442, 0x003F };
    uint32_t const ces[9] = { 0x54D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_251)
{
    // 14442 0061;	
    // (îëÇ) ANATOLIAN HIEROGLYPH A060	[54D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14442, 0x0061 };
    uint32_t const ces[9] = { 0x54D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_252)
{
    // 14442 0041;	
    // (îëÇ) ANATOLIAN HIEROGLYPH A060	[54D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14442, 0x0041 };
    uint32_t const ces[9] = { 0x54D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_253)
{
    // 14442 0062;	
    // (îëÇ) ANATOLIAN HIEROGLYPH A060	[54D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14442, 0x0062 };
    uint32_t const ces[9] = { 0x54D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_254)
{
    // 14443 0021;	
    // (îëÉ) ANATOLIAN HIEROGLYPH A061	[54D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14443, 0x0021 };
    uint32_t const ces[9] = { 0x54D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_255)
{
    // 14443 003F;	
    // (îëÉ) ANATOLIAN HIEROGLYPH A061	[54D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14443, 0x003F };
    uint32_t const ces[9] = { 0x54D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_256)
{
    // 14443 0061;	
    // (îëÉ) ANATOLIAN HIEROGLYPH A061	[54D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14443, 0x0061 };
    uint32_t const ces[9] = { 0x54D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_257)
{
    // 14443 0041;	
    // (îëÉ) ANATOLIAN HIEROGLYPH A061	[54D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14443, 0x0041 };
    uint32_t const ces[9] = { 0x54D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_258)
{
    // 14443 0062;	
    // (îëÉ) ANATOLIAN HIEROGLYPH A061	[54D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14443, 0x0062 };
    uint32_t const ces[9] = { 0x54D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_259)
{
    // 14444 0021;	
    // (îëÑ) ANATOLIAN HIEROGLYPH A062	[54D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14444, 0x0021 };
    uint32_t const ces[9] = { 0x54D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_260)
{
    // 14444 003F;	
    // (îëÑ) ANATOLIAN HIEROGLYPH A062	[54D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14444, 0x003F };
    uint32_t const ces[9] = { 0x54D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_261)
{
    // 14444 0061;	
    // (îëÑ) ANATOLIAN HIEROGLYPH A062	[54D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14444, 0x0061 };
    uint32_t const ces[9] = { 0x54D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_262)
{
    // 14444 0041;	
    // (îëÑ) ANATOLIAN HIEROGLYPH A062	[54D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14444, 0x0041 };
    uint32_t const ces[9] = { 0x54D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_263)
{
    // 14444 0062;	
    // (îëÑ) ANATOLIAN HIEROGLYPH A062	[54D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14444, 0x0062 };
    uint32_t const ces[9] = { 0x54D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_264)
{
    // 14445 0021;	
    // (îëÖ) ANATOLIAN HIEROGLYPH A063	[54D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14445, 0x0021 };
    uint32_t const ces[9] = { 0x54D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_265)
{
    // 14445 003F;	
    // (îëÖ) ANATOLIAN HIEROGLYPH A063	[54D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14445, 0x003F };
    uint32_t const ces[9] = { 0x54D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_266)
{
    // 14445 0061;	
    // (îëÖ) ANATOLIAN HIEROGLYPH A063	[54D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14445, 0x0061 };
    uint32_t const ces[9] = { 0x54D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_267)
{
    // 14445 0041;	
    // (îëÖ) ANATOLIAN HIEROGLYPH A063	[54D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14445, 0x0041 };
    uint32_t const ces[9] = { 0x54D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_268)
{
    // 14445 0062;	
    // (îëÖ) ANATOLIAN HIEROGLYPH A063	[54D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14445, 0x0062 };
    uint32_t const ces[9] = { 0x54D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_269)
{
    // 14446 0021;	
    // (îëÜ) ANATOLIAN HIEROGLYPH A064	[54DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14446, 0x0021 };
    uint32_t const ces[9] = { 0x54DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_270)
{
    // 14446 003F;	
    // (îëÜ) ANATOLIAN HIEROGLYPH A064	[54DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14446, 0x003F };
    uint32_t const ces[9] = { 0x54DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_271)
{
    // 14446 0061;	
    // (îëÜ) ANATOLIAN HIEROGLYPH A064	[54DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14446, 0x0061 };
    uint32_t const ces[9] = { 0x54DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_272)
{
    // 14446 0041;	
    // (îëÜ) ANATOLIAN HIEROGLYPH A064	[54DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14446, 0x0041 };
    uint32_t const ces[9] = { 0x54DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_273)
{
    // 14446 0062;	
    // (îëÜ) ANATOLIAN HIEROGLYPH A064	[54DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14446, 0x0062 };
    uint32_t const ces[9] = { 0x54DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_274)
{
    // 14447 0021;	
    // (îëá) ANATOLIAN HIEROGLYPH A065	[54DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14447, 0x0021 };
    uint32_t const ces[9] = { 0x54DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_275)
{
    // 14447 003F;	
    // (îëá) ANATOLIAN HIEROGLYPH A065	[54DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14447, 0x003F };
    uint32_t const ces[9] = { 0x54DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_276)
{
    // 14447 0061;	
    // (îëá) ANATOLIAN HIEROGLYPH A065	[54DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14447, 0x0061 };
    uint32_t const ces[9] = { 0x54DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_277)
{
    // 14447 0041;	
    // (îëá) ANATOLIAN HIEROGLYPH A065	[54DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14447, 0x0041 };
    uint32_t const ces[9] = { 0x54DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_278)
{
    // 14447 0062;	
    // (îëá) ANATOLIAN HIEROGLYPH A065	[54DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14447, 0x0062 };
    uint32_t const ces[9] = { 0x54DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_279)
{
    // 14448 0021;	
    // (îëà) ANATOLIAN HIEROGLYPH A066	[54DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14448, 0x0021 };
    uint32_t const ces[9] = { 0x54DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_280)
{
    // 14448 003F;	
    // (îëà) ANATOLIAN HIEROGLYPH A066	[54DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14448, 0x003F };
    uint32_t const ces[9] = { 0x54DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_281)
{
    // 14448 0061;	
    // (îëà) ANATOLIAN HIEROGLYPH A066	[54DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14448, 0x0061 };
    uint32_t const ces[9] = { 0x54DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_282)
{
    // 14448 0041;	
    // (îëà) ANATOLIAN HIEROGLYPH A066	[54DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14448, 0x0041 };
    uint32_t const ces[9] = { 0x54DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_283)
{
    // 14448 0062;	
    // (îëà) ANATOLIAN HIEROGLYPH A066	[54DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14448, 0x0062 };
    uint32_t const ces[9] = { 0x54DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_284)
{
    // 14449 0021;	
    // (îëâ) ANATOLIAN HIEROGLYPH A066A	[54DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14449, 0x0021 };
    uint32_t const ces[9] = { 0x54DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_285)
{
    // 14449 003F;	
    // (îëâ) ANATOLIAN HIEROGLYPH A066A	[54DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14449, 0x003F };
    uint32_t const ces[9] = { 0x54DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_286)
{
    // 14449 0061;	
    // (îëâ) ANATOLIAN HIEROGLYPH A066A	[54DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14449, 0x0061 };
    uint32_t const ces[9] = { 0x54DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_287)
{
    // 14449 0041;	
    // (îëâ) ANATOLIAN HIEROGLYPH A066A	[54DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14449, 0x0041 };
    uint32_t const ces[9] = { 0x54DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_288)
{
    // 14449 0062;	
    // (îëâ) ANATOLIAN HIEROGLYPH A066A	[54DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14449, 0x0062 };
    uint32_t const ces[9] = { 0x54DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_289)
{
    // 1444A 0021;	
    // (îëä) ANATOLIAN HIEROGLYPH A066B	[54DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444A, 0x0021 };
    uint32_t const ces[9] = { 0x54DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_290)
{
    // 1444A 003F;	
    // (îëä) ANATOLIAN HIEROGLYPH A066B	[54DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444A, 0x003F };
    uint32_t const ces[9] = { 0x54DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_291)
{
    // 1444A 0061;	
    // (îëä) ANATOLIAN HIEROGLYPH A066B	[54DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444A, 0x0061 };
    uint32_t const ces[9] = { 0x54DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_292)
{
    // 1444A 0041;	
    // (îëä) ANATOLIAN HIEROGLYPH A066B	[54DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444A, 0x0041 };
    uint32_t const ces[9] = { 0x54DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_293)
{
    // 1444A 0062;	
    // (îëä) ANATOLIAN HIEROGLYPH A066B	[54DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444A, 0x0062 };
    uint32_t const ces[9] = { 0x54DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_294)
{
    // 1444B 0021;	
    // (îëã) ANATOLIAN HIEROGLYPH A066C	[54DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444B, 0x0021 };
    uint32_t const ces[9] = { 0x54DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_295)
{
    // 1444B 003F;	
    // (îëã) ANATOLIAN HIEROGLYPH A066C	[54DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444B, 0x003F };
    uint32_t const ces[9] = { 0x54DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_296)
{
    // 1444B 0061;	
    // (îëã) ANATOLIAN HIEROGLYPH A066C	[54DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444B, 0x0061 };
    uint32_t const ces[9] = { 0x54DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_297)
{
    // 1444B 0041;	
    // (îëã) ANATOLIAN HIEROGLYPH A066C	[54DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444B, 0x0041 };
    uint32_t const ces[9] = { 0x54DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_298)
{
    // 1444B 0062;	
    // (îëã) ANATOLIAN HIEROGLYPH A066C	[54DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444B, 0x0062 };
    uint32_t const ces[9] = { 0x54DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_299)
{
    // 1444C 0021;	
    // (îëå) ANATOLIAN HIEROGLYPH A067	[54E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444C, 0x0021 };
    uint32_t const ces[9] = { 0x54E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_300)
{
    // 1444C 003F;	
    // (îëå) ANATOLIAN HIEROGLYPH A067	[54E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444C, 0x003F };
    uint32_t const ces[9] = { 0x54E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_301)
{
    // 1444C 0061;	
    // (îëå) ANATOLIAN HIEROGLYPH A067	[54E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444C, 0x0061 };
    uint32_t const ces[9] = { 0x54E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_302)
{
    // 1444C 0041;	
    // (îëå) ANATOLIAN HIEROGLYPH A067	[54E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444C, 0x0041 };
    uint32_t const ces[9] = { 0x54E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_303)
{
    // 1444C 0062;	
    // (îëå) ANATOLIAN HIEROGLYPH A067	[54E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444C, 0x0062 };
    uint32_t const ces[9] = { 0x54E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_304)
{
    // 1444D 0021;	
    // (îëç) ANATOLIAN HIEROGLYPH A068	[54E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444D, 0x0021 };
    uint32_t const ces[9] = { 0x54E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_305)
{
    // 1444D 003F;	
    // (îëç) ANATOLIAN HIEROGLYPH A068	[54E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444D, 0x003F };
    uint32_t const ces[9] = { 0x54E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_306)
{
    // 1444D 0061;	
    // (îëç) ANATOLIAN HIEROGLYPH A068	[54E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444D, 0x0061 };
    uint32_t const ces[9] = { 0x54E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_307)
{
    // 1444D 0041;	
    // (îëç) ANATOLIAN HIEROGLYPH A068	[54E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444D, 0x0041 };
    uint32_t const ces[9] = { 0x54E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_308)
{
    // 1444D 0062;	
    // (îëç) ANATOLIAN HIEROGLYPH A068	[54E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444D, 0x0062 };
    uint32_t const ces[9] = { 0x54E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_309)
{
    // 1444E 0021;	
    // (îëé) ANATOLIAN HIEROGLYPH A069	[54E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444E, 0x0021 };
    uint32_t const ces[9] = { 0x54E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_310)
{
    // 1444E 003F;	
    // (îëé) ANATOLIAN HIEROGLYPH A069	[54E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444E, 0x003F };
    uint32_t const ces[9] = { 0x54E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_311)
{
    // 1444E 0061;	
    // (îëé) ANATOLIAN HIEROGLYPH A069	[54E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444E, 0x0061 };
    uint32_t const ces[9] = { 0x54E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_312)
{
    // 1444E 0041;	
    // (îëé) ANATOLIAN HIEROGLYPH A069	[54E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444E, 0x0041 };
    uint32_t const ces[9] = { 0x54E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_313)
{
    // 1444E 0062;	
    // (îëé) ANATOLIAN HIEROGLYPH A069	[54E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444E, 0x0062 };
    uint32_t const ces[9] = { 0x54E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_314)
{
    // 1444F 0021;	
    // (îëè) ANATOLIAN HIEROGLYPH A070	[54E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444F, 0x0021 };
    uint32_t const ces[9] = { 0x54E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_315)
{
    // 1444F 003F;	
    // (îëè) ANATOLIAN HIEROGLYPH A070	[54E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444F, 0x003F };
    uint32_t const ces[9] = { 0x54E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_316)
{
    // 1444F 0061;	
    // (îëè) ANATOLIAN HIEROGLYPH A070	[54E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444F, 0x0061 };
    uint32_t const ces[9] = { 0x54E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_317)
{
    // 1444F 0041;	
    // (îëè) ANATOLIAN HIEROGLYPH A070	[54E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1444F, 0x0041 };
    uint32_t const ces[9] = { 0x54E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_318)
{
    // 1444F 0062;	
    // (îëè) ANATOLIAN HIEROGLYPH A070	[54E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1444F, 0x0062 };
    uint32_t const ces[9] = { 0x54E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_319)
{
    // 14450 0021;	
    // (îëê) ANATOLIAN HIEROGLYPH A071	[54E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14450, 0x0021 };
    uint32_t const ces[9] = { 0x54E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_320)
{
    // 14450 003F;	
    // (îëê) ANATOLIAN HIEROGLYPH A071	[54E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14450, 0x003F };
    uint32_t const ces[9] = { 0x54E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_321)
{
    // 14450 0061;	
    // (îëê) ANATOLIAN HIEROGLYPH A071	[54E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14450, 0x0061 };
    uint32_t const ces[9] = { 0x54E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_322)
{
    // 14450 0041;	
    // (îëê) ANATOLIAN HIEROGLYPH A071	[54E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14450, 0x0041 };
    uint32_t const ces[9] = { 0x54E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_323)
{
    // 14450 0062;	
    // (îëê) ANATOLIAN HIEROGLYPH A071	[54E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14450, 0x0062 };
    uint32_t const ces[9] = { 0x54E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_324)
{
    // 14451 0021;	
    // (îëë) ANATOLIAN HIEROGLYPH A072	[54E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14451, 0x0021 };
    uint32_t const ces[9] = { 0x54E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_325)
{
    // 14451 003F;	
    // (îëë) ANATOLIAN HIEROGLYPH A072	[54E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14451, 0x003F };
    uint32_t const ces[9] = { 0x54E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_326)
{
    // 14451 0061;	
    // (îëë) ANATOLIAN HIEROGLYPH A072	[54E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14451, 0x0061 };
    uint32_t const ces[9] = { 0x54E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_327)
{
    // 14451 0041;	
    // (îëë) ANATOLIAN HIEROGLYPH A072	[54E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14451, 0x0041 };
    uint32_t const ces[9] = { 0x54E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_328)
{
    // 14451 0062;	
    // (îëë) ANATOLIAN HIEROGLYPH A072	[54E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14451, 0x0062 };
    uint32_t const ces[9] = { 0x54E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_329)
{
    // 14452 0021;	
    // (îëí) ANATOLIAN HIEROGLYPH A073	[54E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14452, 0x0021 };
    uint32_t const ces[9] = { 0x54E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_330)
{
    // 14452 003F;	
    // (îëí) ANATOLIAN HIEROGLYPH A073	[54E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14452, 0x003F };
    uint32_t const ces[9] = { 0x54E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_331)
{
    // 14452 0061;	
    // (îëí) ANATOLIAN HIEROGLYPH A073	[54E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14452, 0x0061 };
    uint32_t const ces[9] = { 0x54E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_332)
{
    // 14452 0041;	
    // (îëí) ANATOLIAN HIEROGLYPH A073	[54E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14452, 0x0041 };
    uint32_t const ces[9] = { 0x54E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_333)
{
    // 14452 0062;	
    // (îëí) ANATOLIAN HIEROGLYPH A073	[54E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14452, 0x0062 };
    uint32_t const ces[9] = { 0x54E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_334)
{
    // 14453 0021;	
    // (îëì) ANATOLIAN HIEROGLYPH A074	[54E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14453, 0x0021 };
    uint32_t const ces[9] = { 0x54E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_335)
{
    // 14453 003F;	
    // (îëì) ANATOLIAN HIEROGLYPH A074	[54E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14453, 0x003F };
    uint32_t const ces[9] = { 0x54E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_336)
{
    // 14453 0061;	
    // (îëì) ANATOLIAN HIEROGLYPH A074	[54E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14453, 0x0061 };
    uint32_t const ces[9] = { 0x54E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_337)
{
    // 14453 0041;	
    // (îëì) ANATOLIAN HIEROGLYPH A074	[54E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14453, 0x0041 };
    uint32_t const ces[9] = { 0x54E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_338)
{
    // 14453 0062;	
    // (îëì) ANATOLIAN HIEROGLYPH A074	[54E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14453, 0x0062 };
    uint32_t const ces[9] = { 0x54E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_339)
{
    // 14454 0021;	
    // (îëî) ANATOLIAN HIEROGLYPH A075	[54E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14454, 0x0021 };
    uint32_t const ces[9] = { 0x54E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_340)
{
    // 14454 003F;	
    // (îëî) ANATOLIAN HIEROGLYPH A075	[54E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14454, 0x003F };
    uint32_t const ces[9] = { 0x54E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_341)
{
    // 14454 0061;	
    // (îëî) ANATOLIAN HIEROGLYPH A075	[54E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14454, 0x0061 };
    uint32_t const ces[9] = { 0x54E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_342)
{
    // 14454 0041;	
    // (îëî) ANATOLIAN HIEROGLYPH A075	[54E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14454, 0x0041 };
    uint32_t const ces[9] = { 0x54E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_343)
{
    // 14454 0062;	
    // (îëî) ANATOLIAN HIEROGLYPH A075	[54E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14454, 0x0062 };
    uint32_t const ces[9] = { 0x54E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_344)
{
    // 14455 0021;	
    // (îëï) ANATOLIAN HIEROGLYPH A076	[54E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14455, 0x0021 };
    uint32_t const ces[9] = { 0x54E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_345)
{
    // 14455 003F;	
    // (îëï) ANATOLIAN HIEROGLYPH A076	[54E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14455, 0x003F };
    uint32_t const ces[9] = { 0x54E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_346)
{
    // 14455 0061;	
    // (îëï) ANATOLIAN HIEROGLYPH A076	[54E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14455, 0x0061 };
    uint32_t const ces[9] = { 0x54E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_347)
{
    // 14455 0041;	
    // (îëï) ANATOLIAN HIEROGLYPH A076	[54E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14455, 0x0041 };
    uint32_t const ces[9] = { 0x54E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_348)
{
    // 14455 0062;	
    // (îëï) ANATOLIAN HIEROGLYPH A076	[54E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14455, 0x0062 };
    uint32_t const ces[9] = { 0x54E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_349)
{
    // 14456 0021;	
    // (îëñ) ANATOLIAN HIEROGLYPH A077	[54EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14456, 0x0021 };
    uint32_t const ces[9] = { 0x54EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_350)
{
    // 14456 003F;	
    // (îëñ) ANATOLIAN HIEROGLYPH A077	[54EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14456, 0x003F };
    uint32_t const ces[9] = { 0x54EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_351)
{
    // 14456 0061;	
    // (îëñ) ANATOLIAN HIEROGLYPH A077	[54EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14456, 0x0061 };
    uint32_t const ces[9] = { 0x54EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_352)
{
    // 14456 0041;	
    // (îëñ) ANATOLIAN HIEROGLYPH A077	[54EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14456, 0x0041 };
    uint32_t const ces[9] = { 0x54EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_353)
{
    // 14456 0062;	
    // (îëñ) ANATOLIAN HIEROGLYPH A077	[54EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14456, 0x0062 };
    uint32_t const ces[9] = { 0x54EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_354)
{
    // 14457 0021;	
    // (îëó) ANATOLIAN HIEROGLYPH A078	[54EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14457, 0x0021 };
    uint32_t const ces[9] = { 0x54EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_355)
{
    // 14457 003F;	
    // (îëó) ANATOLIAN HIEROGLYPH A078	[54EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14457, 0x003F };
    uint32_t const ces[9] = { 0x54EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_356)
{
    // 14457 0061;	
    // (îëó) ANATOLIAN HIEROGLYPH A078	[54EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14457, 0x0061 };
    uint32_t const ces[9] = { 0x54EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_357)
{
    // 14457 0041;	
    // (îëó) ANATOLIAN HIEROGLYPH A078	[54EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14457, 0x0041 };
    uint32_t const ces[9] = { 0x54EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_358)
{
    // 14457 0062;	
    // (îëó) ANATOLIAN HIEROGLYPH A078	[54EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14457, 0x0062 };
    uint32_t const ces[9] = { 0x54EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_359)
{
    // 14458 0021;	
    // (îëò) ANATOLIAN HIEROGLYPH A079	[54EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14458, 0x0021 };
    uint32_t const ces[9] = { 0x54EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_360)
{
    // 14458 003F;	
    // (îëò) ANATOLIAN HIEROGLYPH A079	[54EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14458, 0x003F };
    uint32_t const ces[9] = { 0x54EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_361)
{
    // 14458 0061;	
    // (îëò) ANATOLIAN HIEROGLYPH A079	[54EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14458, 0x0061 };
    uint32_t const ces[9] = { 0x54EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_362)
{
    // 14458 0041;	
    // (îëò) ANATOLIAN HIEROGLYPH A079	[54EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14458, 0x0041 };
    uint32_t const ces[9] = { 0x54EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_363)
{
    // 14458 0062;	
    // (îëò) ANATOLIAN HIEROGLYPH A079	[54EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14458, 0x0062 };
    uint32_t const ces[9] = { 0x54EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_364)
{
    // 14459 0021;	
    // (îëô) ANATOLIAN HIEROGLYPH A080	[54ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14459, 0x0021 };
    uint32_t const ces[9] = { 0x54ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_365)
{
    // 14459 003F;	
    // (îëô) ANATOLIAN HIEROGLYPH A080	[54ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14459, 0x003F };
    uint32_t const ces[9] = { 0x54ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_366)
{
    // 14459 0061;	
    // (îëô) ANATOLIAN HIEROGLYPH A080	[54ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14459, 0x0061 };
    uint32_t const ces[9] = { 0x54ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_367)
{
    // 14459 0041;	
    // (îëô) ANATOLIAN HIEROGLYPH A080	[54ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14459, 0x0041 };
    uint32_t const ces[9] = { 0x54ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_368)
{
    // 14459 0062;	
    // (îëô) ANATOLIAN HIEROGLYPH A080	[54ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14459, 0x0062 };
    uint32_t const ces[9] = { 0x54ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_369)
{
    // 1445A 0021;	
    // (îëö) ANATOLIAN HIEROGLYPH A081	[54EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445A, 0x0021 };
    uint32_t const ces[9] = { 0x54EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_370)
{
    // 1445A 003F;	
    // (îëö) ANATOLIAN HIEROGLYPH A081	[54EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445A, 0x003F };
    uint32_t const ces[9] = { 0x54EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_371)
{
    // 1445A 0061;	
    // (îëö) ANATOLIAN HIEROGLYPH A081	[54EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445A, 0x0061 };
    uint32_t const ces[9] = { 0x54EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_372)
{
    // 1445A 0041;	
    // (îëö) ANATOLIAN HIEROGLYPH A081	[54EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445A, 0x0041 };
    uint32_t const ces[9] = { 0x54EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_373)
{
    // 1445A 0062;	
    // (îëö) ANATOLIAN HIEROGLYPH A081	[54EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445A, 0x0062 };
    uint32_t const ces[9] = { 0x54EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_374)
{
    // 1445B 0021;	
    // (îëõ) ANATOLIAN HIEROGLYPH A082	[54EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445B, 0x0021 };
    uint32_t const ces[9] = { 0x54EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_375)
{
    // 1445B 003F;	
    // (îëõ) ANATOLIAN HIEROGLYPH A082	[54EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445B, 0x003F };
    uint32_t const ces[9] = { 0x54EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_376)
{
    // 1445B 0061;	
    // (îëõ) ANATOLIAN HIEROGLYPH A082	[54EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445B, 0x0061 };
    uint32_t const ces[9] = { 0x54EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_377)
{
    // 1445B 0041;	
    // (îëõ) ANATOLIAN HIEROGLYPH A082	[54EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445B, 0x0041 };
    uint32_t const ces[9] = { 0x54EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_378)
{
    // 1445B 0062;	
    // (îëõ) ANATOLIAN HIEROGLYPH A082	[54EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445B, 0x0062 };
    uint32_t const ces[9] = { 0x54EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_379)
{
    // 1445C 0021;	
    // (îëú) ANATOLIAN HIEROGLYPH A083	[54F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445C, 0x0021 };
    uint32_t const ces[9] = { 0x54F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_380)
{
    // 1445C 003F;	
    // (îëú) ANATOLIAN HIEROGLYPH A083	[54F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445C, 0x003F };
    uint32_t const ces[9] = { 0x54F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_381)
{
    // 1445C 0061;	
    // (îëú) ANATOLIAN HIEROGLYPH A083	[54F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445C, 0x0061 };
    uint32_t const ces[9] = { 0x54F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_382)
{
    // 1445C 0041;	
    // (îëú) ANATOLIAN HIEROGLYPH A083	[54F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445C, 0x0041 };
    uint32_t const ces[9] = { 0x54F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_383)
{
    // 1445C 0062;	
    // (îëú) ANATOLIAN HIEROGLYPH A083	[54F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445C, 0x0062 };
    uint32_t const ces[9] = { 0x54F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_384)
{
    // 1445D 0021;	
    // (îëù) ANATOLIAN HIEROGLYPH A084	[54F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445D, 0x0021 };
    uint32_t const ces[9] = { 0x54F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_385)
{
    // 1445D 003F;	
    // (îëù) ANATOLIAN HIEROGLYPH A084	[54F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445D, 0x003F };
    uint32_t const ces[9] = { 0x54F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_386)
{
    // 1445D 0061;	
    // (îëù) ANATOLIAN HIEROGLYPH A084	[54F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445D, 0x0061 };
    uint32_t const ces[9] = { 0x54F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_387)
{
    // 1445D 0041;	
    // (îëù) ANATOLIAN HIEROGLYPH A084	[54F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445D, 0x0041 };
    uint32_t const ces[9] = { 0x54F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_388)
{
    // 1445D 0062;	
    // (îëù) ANATOLIAN HIEROGLYPH A084	[54F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445D, 0x0062 };
    uint32_t const ces[9] = { 0x54F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_389)
{
    // 1445E 0021;	
    // (îëû) ANATOLIAN HIEROGLYPH A085	[54F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445E, 0x0021 };
    uint32_t const ces[9] = { 0x54F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_390)
{
    // 1445E 003F;	
    // (îëû) ANATOLIAN HIEROGLYPH A085	[54F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445E, 0x003F };
    uint32_t const ces[9] = { 0x54F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_391)
{
    // 1445E 0061;	
    // (îëû) ANATOLIAN HIEROGLYPH A085	[54F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445E, 0x0061 };
    uint32_t const ces[9] = { 0x54F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_392)
{
    // 1445E 0041;	
    // (îëû) ANATOLIAN HIEROGLYPH A085	[54F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445E, 0x0041 };
    uint32_t const ces[9] = { 0x54F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_393)
{
    // 1445E 0062;	
    // (îëû) ANATOLIAN HIEROGLYPH A085	[54F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445E, 0x0062 };
    uint32_t const ces[9] = { 0x54F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_394)
{
    // 1445F 0021;	
    // (îëü) ANATOLIAN HIEROGLYPH A086	[54F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445F, 0x0021 };
    uint32_t const ces[9] = { 0x54F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_395)
{
    // 1445F 003F;	
    // (îëü) ANATOLIAN HIEROGLYPH A086	[54F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445F, 0x003F };
    uint32_t const ces[9] = { 0x54F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_396)
{
    // 1445F 0061;	
    // (îëü) ANATOLIAN HIEROGLYPH A086	[54F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445F, 0x0061 };
    uint32_t const ces[9] = { 0x54F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_397)
{
    // 1445F 0041;	
    // (îëü) ANATOLIAN HIEROGLYPH A086	[54F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1445F, 0x0041 };
    uint32_t const ces[9] = { 0x54F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_398)
{
    // 1445F 0062;	
    // (îëü) ANATOLIAN HIEROGLYPH A086	[54F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1445F, 0x0062 };
    uint32_t const ces[9] = { 0x54F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_399)
{
    // 14460 0021;	
    // (îë†) ANATOLIAN HIEROGLYPH A087	[54F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14460, 0x0021 };
    uint32_t const ces[9] = { 0x54F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_400)
{
    // 14460 003F;	
    // (îë†) ANATOLIAN HIEROGLYPH A087	[54F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14460, 0x003F };
    uint32_t const ces[9] = { 0x54F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_401)
{
    // 14460 0061;	
    // (îë†) ANATOLIAN HIEROGLYPH A087	[54F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14460, 0x0061 };
    uint32_t const ces[9] = { 0x54F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_402)
{
    // 14460 0041;	
    // (îë†) ANATOLIAN HIEROGLYPH A087	[54F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14460, 0x0041 };
    uint32_t const ces[9] = { 0x54F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_403)
{
    // 14460 0062;	
    // (îë†) ANATOLIAN HIEROGLYPH A087	[54F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14460, 0x0062 };
    uint32_t const ces[9] = { 0x54F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_404)
{
    // 14461 0021;	
    // (îë°) ANATOLIAN HIEROGLYPH A088	[54F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14461, 0x0021 };
    uint32_t const ces[9] = { 0x54F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_405)
{
    // 14461 003F;	
    // (îë°) ANATOLIAN HIEROGLYPH A088	[54F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14461, 0x003F };
    uint32_t const ces[9] = { 0x54F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_406)
{
    // 14461 0061;	
    // (îë°) ANATOLIAN HIEROGLYPH A088	[54F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14461, 0x0061 };
    uint32_t const ces[9] = { 0x54F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_407)
{
    // 14461 0041;	
    // (îë°) ANATOLIAN HIEROGLYPH A088	[54F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14461, 0x0041 };
    uint32_t const ces[9] = { 0x54F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_408)
{
    // 14461 0062;	
    // (îë°) ANATOLIAN HIEROGLYPH A088	[54F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14461, 0x0062 };
    uint32_t const ces[9] = { 0x54F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_409)
{
    // 14462 0021;	
    // (îë¢) ANATOLIAN HIEROGLYPH A089	[54F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14462, 0x0021 };
    uint32_t const ces[9] = { 0x54F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_410)
{
    // 14462 003F;	
    // (îë¢) ANATOLIAN HIEROGLYPH A089	[54F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14462, 0x003F };
    uint32_t const ces[9] = { 0x54F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_411)
{
    // 14462 0061;	
    // (îë¢) ANATOLIAN HIEROGLYPH A089	[54F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14462, 0x0061 };
    uint32_t const ces[9] = { 0x54F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_412)
{
    // 14462 0041;	
    // (îë¢) ANATOLIAN HIEROGLYPH A089	[54F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14462, 0x0041 };
    uint32_t const ces[9] = { 0x54F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_413)
{
    // 14462 0062;	
    // (îë¢) ANATOLIAN HIEROGLYPH A089	[54F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14462, 0x0062 };
    uint32_t const ces[9] = { 0x54F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_414)
{
    // 14463 0021;	
    // (îë£) ANATOLIAN HIEROGLYPH A090	[54F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14463, 0x0021 };
    uint32_t const ces[9] = { 0x54F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_415)
{
    // 14463 003F;	
    // (îë£) ANATOLIAN HIEROGLYPH A090	[54F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14463, 0x003F };
    uint32_t const ces[9] = { 0x54F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_416)
{
    // 14463 0061;	
    // (îë£) ANATOLIAN HIEROGLYPH A090	[54F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14463, 0x0061 };
    uint32_t const ces[9] = { 0x54F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_417)
{
    // 14463 0041;	
    // (îë£) ANATOLIAN HIEROGLYPH A090	[54F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14463, 0x0041 };
    uint32_t const ces[9] = { 0x54F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_418)
{
    // 14463 0062;	
    // (îë£) ANATOLIAN HIEROGLYPH A090	[54F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14463, 0x0062 };
    uint32_t const ces[9] = { 0x54F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_419)
{
    // 14464 0021;	
    // (îë§) ANATOLIAN HIEROGLYPH A091	[54F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14464, 0x0021 };
    uint32_t const ces[9] = { 0x54F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_420)
{
    // 14464 003F;	
    // (îë§) ANATOLIAN HIEROGLYPH A091	[54F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14464, 0x003F };
    uint32_t const ces[9] = { 0x54F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_421)
{
    // 14464 0061;	
    // (îë§) ANATOLIAN HIEROGLYPH A091	[54F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14464, 0x0061 };
    uint32_t const ces[9] = { 0x54F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_422)
{
    // 14464 0041;	
    // (îë§) ANATOLIAN HIEROGLYPH A091	[54F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14464, 0x0041 };
    uint32_t const ces[9] = { 0x54F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_423)
{
    // 14464 0062;	
    // (îë§) ANATOLIAN HIEROGLYPH A091	[54F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14464, 0x0062 };
    uint32_t const ces[9] = { 0x54F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_424)
{
    // 14465 0021;	
    // (îë•) ANATOLIAN HIEROGLYPH A092	[54F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14465, 0x0021 };
    uint32_t const ces[9] = { 0x54F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_425)
{
    // 14465 003F;	
    // (îë•) ANATOLIAN HIEROGLYPH A092	[54F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14465, 0x003F };
    uint32_t const ces[9] = { 0x54F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_426)
{
    // 14465 0061;	
    // (îë•) ANATOLIAN HIEROGLYPH A092	[54F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14465, 0x0061 };
    uint32_t const ces[9] = { 0x54F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_427)
{
    // 14465 0041;	
    // (îë•) ANATOLIAN HIEROGLYPH A092	[54F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14465, 0x0041 };
    uint32_t const ces[9] = { 0x54F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_428)
{
    // 14465 0062;	
    // (îë•) ANATOLIAN HIEROGLYPH A092	[54F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14465, 0x0062 };
    uint32_t const ces[9] = { 0x54F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_429)
{
    // 14466 0021;	
    // (îë¶) ANATOLIAN HIEROGLYPH A093	[54FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14466, 0x0021 };
    uint32_t const ces[9] = { 0x54FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_430)
{
    // 14466 003F;	
    // (îë¶) ANATOLIAN HIEROGLYPH A093	[54FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14466, 0x003F };
    uint32_t const ces[9] = { 0x54FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_431)
{
    // 14466 0061;	
    // (îë¶) ANATOLIAN HIEROGLYPH A093	[54FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14466, 0x0061 };
    uint32_t const ces[9] = { 0x54FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_432)
{
    // 14466 0041;	
    // (îë¶) ANATOLIAN HIEROGLYPH A093	[54FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14466, 0x0041 };
    uint32_t const ces[9] = { 0x54FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_433)
{
    // 14466 0062;	
    // (îë¶) ANATOLIAN HIEROGLYPH A093	[54FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14466, 0x0062 };
    uint32_t const ces[9] = { 0x54FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_434)
{
    // 14467 0021;	
    // (îëß) ANATOLIAN HIEROGLYPH A094	[54FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14467, 0x0021 };
    uint32_t const ces[9] = { 0x54FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_435)
{
    // 14467 003F;	
    // (îëß) ANATOLIAN HIEROGLYPH A094	[54FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14467, 0x003F };
    uint32_t const ces[9] = { 0x54FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_436)
{
    // 14467 0061;	
    // (îëß) ANATOLIAN HIEROGLYPH A094	[54FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14467, 0x0061 };
    uint32_t const ces[9] = { 0x54FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_437)
{
    // 14467 0041;	
    // (îëß) ANATOLIAN HIEROGLYPH A094	[54FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14467, 0x0041 };
    uint32_t const ces[9] = { 0x54FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_438)
{
    // 14467 0062;	
    // (îëß) ANATOLIAN HIEROGLYPH A094	[54FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14467, 0x0062 };
    uint32_t const ces[9] = { 0x54FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_439)
{
    // 14468 0021;	
    // (îë®) ANATOLIAN HIEROGLYPH A095	[54FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14468, 0x0021 };
    uint32_t const ces[9] = { 0x54FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_440)
{
    // 14468 003F;	
    // (îë®) ANATOLIAN HIEROGLYPH A095	[54FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14468, 0x003F };
    uint32_t const ces[9] = { 0x54FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_441)
{
    // 14468 0061;	
    // (îë®) ANATOLIAN HIEROGLYPH A095	[54FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14468, 0x0061 };
    uint32_t const ces[9] = { 0x54FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_442)
{
    // 14468 0041;	
    // (îë®) ANATOLIAN HIEROGLYPH A095	[54FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14468, 0x0041 };
    uint32_t const ces[9] = { 0x54FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_443)
{
    // 14468 0062;	
    // (îë®) ANATOLIAN HIEROGLYPH A095	[54FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14468, 0x0062 };
    uint32_t const ces[9] = { 0x54FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_444)
{
    // 14469 0021;	
    // (îë©) ANATOLIAN HIEROGLYPH A096	[54FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14469, 0x0021 };
    uint32_t const ces[9] = { 0x54FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_445)
{
    // 14469 003F;	
    // (îë©) ANATOLIAN HIEROGLYPH A096	[54FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14469, 0x003F };
    uint32_t const ces[9] = { 0x54FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_446)
{
    // 14469 0061;	
    // (îë©) ANATOLIAN HIEROGLYPH A096	[54FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14469, 0x0061 };
    uint32_t const ces[9] = { 0x54FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_447)
{
    // 14469 0041;	
    // (îë©) ANATOLIAN HIEROGLYPH A096	[54FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14469, 0x0041 };
    uint32_t const ces[9] = { 0x54FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_448)
{
    // 14469 0062;	
    // (îë©) ANATOLIAN HIEROGLYPH A096	[54FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14469, 0x0062 };
    uint32_t const ces[9] = { 0x54FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_449)
{
    // 1446A 0021;	
    // (îë™) ANATOLIAN HIEROGLYPH A097	[54FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446A, 0x0021 };
    uint32_t const ces[9] = { 0x54FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_450)
{
    // 1446A 003F;	
    // (îë™) ANATOLIAN HIEROGLYPH A097	[54FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446A, 0x003F };
    uint32_t const ces[9] = { 0x54FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_451)
{
    // 1446A 0061;	
    // (îë™) ANATOLIAN HIEROGLYPH A097	[54FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446A, 0x0061 };
    uint32_t const ces[9] = { 0x54FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_452)
{
    // 1446A 0041;	
    // (îë™) ANATOLIAN HIEROGLYPH A097	[54FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446A, 0x0041 };
    uint32_t const ces[9] = { 0x54FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_453)
{
    // 1446A 0062;	
    // (îë™) ANATOLIAN HIEROGLYPH A097	[54FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446A, 0x0062 };
    uint32_t const ces[9] = { 0x54FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_454)
{
    // 1446B 0021;	
    // (îë´) ANATOLIAN HIEROGLYPH A097A	[54FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446B, 0x0021 };
    uint32_t const ces[9] = { 0x54FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_455)
{
    // 1446B 003F;	
    // (îë´) ANATOLIAN HIEROGLYPH A097A	[54FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446B, 0x003F };
    uint32_t const ces[9] = { 0x54FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_456)
{
    // 1446B 0061;	
    // (îë´) ANATOLIAN HIEROGLYPH A097A	[54FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446B, 0x0061 };
    uint32_t const ces[9] = { 0x54FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_457)
{
    // 1446B 0041;	
    // (îë´) ANATOLIAN HIEROGLYPH A097A	[54FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446B, 0x0041 };
    uint32_t const ces[9] = { 0x54FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_458)
{
    // 1446B 0062;	
    // (îë´) ANATOLIAN HIEROGLYPH A097A	[54FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446B, 0x0062 };
    uint32_t const ces[9] = { 0x54FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_459)
{
    // 1446C 0021;	
    // (îë¨) ANATOLIAN HIEROGLYPH A098	[5500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446C, 0x0021 };
    uint32_t const ces[9] = { 0x5500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_460)
{
    // 1446C 003F;	
    // (îë¨) ANATOLIAN HIEROGLYPH A098	[5500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446C, 0x003F };
    uint32_t const ces[9] = { 0x5500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_461)
{
    // 1446C 0061;	
    // (îë¨) ANATOLIAN HIEROGLYPH A098	[5500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446C, 0x0061 };
    uint32_t const ces[9] = { 0x5500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_462)
{
    // 1446C 0041;	
    // (îë¨) ANATOLIAN HIEROGLYPH A098	[5500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446C, 0x0041 };
    uint32_t const ces[9] = { 0x5500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_463)
{
    // 1446C 0062;	
    // (îë¨) ANATOLIAN HIEROGLYPH A098	[5500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446C, 0x0062 };
    uint32_t const ces[9] = { 0x5500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_464)
{
    // 1446D 0021;	
    // (îë≠) ANATOLIAN HIEROGLYPH A098A	[5501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446D, 0x0021 };
    uint32_t const ces[9] = { 0x5501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_465)
{
    // 1446D 003F;	
    // (îë≠) ANATOLIAN HIEROGLYPH A098A	[5501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446D, 0x003F };
    uint32_t const ces[9] = { 0x5501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_466)
{
    // 1446D 0061;	
    // (îë≠) ANATOLIAN HIEROGLYPH A098A	[5501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446D, 0x0061 };
    uint32_t const ces[9] = { 0x5501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_467)
{
    // 1446D 0041;	
    // (îë≠) ANATOLIAN HIEROGLYPH A098A	[5501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446D, 0x0041 };
    uint32_t const ces[9] = { 0x5501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_468)
{
    // 1446D 0062;	
    // (îë≠) ANATOLIAN HIEROGLYPH A098A	[5501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446D, 0x0062 };
    uint32_t const ces[9] = { 0x5501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_469)
{
    // 1446E 0021;	
    // (îëÆ) ANATOLIAN HIEROGLYPH A099	[5502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446E, 0x0021 };
    uint32_t const ces[9] = { 0x5502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_470)
{
    // 1446E 003F;	
    // (îëÆ) ANATOLIAN HIEROGLYPH A099	[5502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446E, 0x003F };
    uint32_t const ces[9] = { 0x5502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_471)
{
    // 1446E 0061;	
    // (îëÆ) ANATOLIAN HIEROGLYPH A099	[5502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446E, 0x0061 };
    uint32_t const ces[9] = { 0x5502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_472)
{
    // 1446E 0041;	
    // (îëÆ) ANATOLIAN HIEROGLYPH A099	[5502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446E, 0x0041 };
    uint32_t const ces[9] = { 0x5502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_473)
{
    // 1446E 0062;	
    // (îëÆ) ANATOLIAN HIEROGLYPH A099	[5502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446E, 0x0062 };
    uint32_t const ces[9] = { 0x5502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_474)
{
    // 1446F 0021;	
    // (îëØ) ANATOLIAN HIEROGLYPH A100	[5503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446F, 0x0021 };
    uint32_t const ces[9] = { 0x5503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_475)
{
    // 1446F 003F;	
    // (îëØ) ANATOLIAN HIEROGLYPH A100	[5503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446F, 0x003F };
    uint32_t const ces[9] = { 0x5503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_476)
{
    // 1446F 0061;	
    // (îëØ) ANATOLIAN HIEROGLYPH A100	[5503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446F, 0x0061 };
    uint32_t const ces[9] = { 0x5503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_477)
{
    // 1446F 0041;	
    // (îëØ) ANATOLIAN HIEROGLYPH A100	[5503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1446F, 0x0041 };
    uint32_t const ces[9] = { 0x5503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_478)
{
    // 1446F 0062;	
    // (îëØ) ANATOLIAN HIEROGLYPH A100	[5503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1446F, 0x0062 };
    uint32_t const ces[9] = { 0x5503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_479)
{
    // 14470 0021;	
    // (îë∞) ANATOLIAN HIEROGLYPH A100A	[5504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14470, 0x0021 };
    uint32_t const ces[9] = { 0x5504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_480)
{
    // 14470 003F;	
    // (îë∞) ANATOLIAN HIEROGLYPH A100A	[5504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14470, 0x003F };
    uint32_t const ces[9] = { 0x5504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_481)
{
    // 14470 0061;	
    // (îë∞) ANATOLIAN HIEROGLYPH A100A	[5504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14470, 0x0061 };
    uint32_t const ces[9] = { 0x5504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_482)
{
    // 14470 0041;	
    // (îë∞) ANATOLIAN HIEROGLYPH A100A	[5504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14470, 0x0041 };
    uint32_t const ces[9] = { 0x5504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_483)
{
    // 14470 0062;	
    // (îë∞) ANATOLIAN HIEROGLYPH A100A	[5504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14470, 0x0062 };
    uint32_t const ces[9] = { 0x5504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_484)
{
    // 14471 0021;	
    // (îë±) ANATOLIAN HIEROGLYPH A101	[5505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14471, 0x0021 };
    uint32_t const ces[9] = { 0x5505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_485)
{
    // 14471 003F;	
    // (îë±) ANATOLIAN HIEROGLYPH A101	[5505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14471, 0x003F };
    uint32_t const ces[9] = { 0x5505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_486)
{
    // 14471 0061;	
    // (îë±) ANATOLIAN HIEROGLYPH A101	[5505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14471, 0x0061 };
    uint32_t const ces[9] = { 0x5505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_487)
{
    // 14471 0041;	
    // (îë±) ANATOLIAN HIEROGLYPH A101	[5505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14471, 0x0041 };
    uint32_t const ces[9] = { 0x5505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_488)
{
    // 14471 0062;	
    // (îë±) ANATOLIAN HIEROGLYPH A101	[5505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14471, 0x0062 };
    uint32_t const ces[9] = { 0x5505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_489)
{
    // 14472 0021;	
    // (îë≤) ANATOLIAN HIEROGLYPH A101A	[5506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14472, 0x0021 };
    uint32_t const ces[9] = { 0x5506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_490)
{
    // 14472 003F;	
    // (îë≤) ANATOLIAN HIEROGLYPH A101A	[5506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14472, 0x003F };
    uint32_t const ces[9] = { 0x5506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_491)
{
    // 14472 0061;	
    // (îë≤) ANATOLIAN HIEROGLYPH A101A	[5506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14472, 0x0061 };
    uint32_t const ces[9] = { 0x5506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_492)
{
    // 14472 0041;	
    // (îë≤) ANATOLIAN HIEROGLYPH A101A	[5506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14472, 0x0041 };
    uint32_t const ces[9] = { 0x5506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_493)
{
    // 14472 0062;	
    // (îë≤) ANATOLIAN HIEROGLYPH A101A	[5506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14472, 0x0062 };
    uint32_t const ces[9] = { 0x5506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_494)
{
    // 14473 0021;	
    // (îë≥) ANATOLIAN HIEROGLYPH A102	[5507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14473, 0x0021 };
    uint32_t const ces[9] = { 0x5507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_495)
{
    // 14473 003F;	
    // (îë≥) ANATOLIAN HIEROGLYPH A102	[5507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14473, 0x003F };
    uint32_t const ces[9] = { 0x5507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_496)
{
    // 14473 0061;	
    // (îë≥) ANATOLIAN HIEROGLYPH A102	[5507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14473, 0x0061 };
    uint32_t const ces[9] = { 0x5507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_497)
{
    // 14473 0041;	
    // (îë≥) ANATOLIAN HIEROGLYPH A102	[5507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14473, 0x0041 };
    uint32_t const ces[9] = { 0x5507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_498)
{
    // 14473 0062;	
    // (îë≥) ANATOLIAN HIEROGLYPH A102	[5507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14473, 0x0062 };
    uint32_t const ces[9] = { 0x5507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_308_499)
{
    // 14474 0021;	
    // (îë¥) ANATOLIAN HIEROGLYPH A102A	[5508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14474, 0x0021 };
    uint32_t const ces[9] = { 0x5508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

