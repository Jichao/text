// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_184_000)
{
    // 1D934 ; [*19D7.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE TRIPLE STRAIGHT MOVEMENT

    uint32_t const cps[1] = { 0x1d934 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_001)
{
    // 1D935 ; [*19D8.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE TRIPLE WRIST FLEX

    uint32_t const cps[1] = { 0x1d935 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_002)
{
    // 1D936 ; [*19D9.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING

    uint32_t const cps[1] = { 0x1d936 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_003)
{
    // 1D937 ; [*19DA.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING WRIST FLEX

    uint32_t const cps[1] = { 0x1d937 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19da), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_004)
{
    // 1D938 ; [*19DB.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BEND SMALL

    uint32_t const cps[1] = { 0x1d938 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19db), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_005)
{
    // 1D939 ; [*19DC.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BEND MEDIUM

    uint32_t const cps[1] = { 0x1d939 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_006)
{
    // 1D93A ; [*19DD.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BEND LARGE

    uint32_t const cps[1] = { 0x1d93a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_007)
{
    // 1D93B ; [*19DE.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CORNER SMALL

    uint32_t const cps[1] = { 0x1d93b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19de), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_008)
{
    // 1D93C ; [*19DF.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CORNER MEDIUM

    uint32_t const cps[1] = { 0x1d93c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19df), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_009)
{
    // 1D93D ; [*19E0.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CORNER LARGE

    uint32_t const cps[1] = { 0x1d93d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_010)
{
    // 1D93E ; [*19E1.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CORNER ROTATION

    uint32_t const cps[1] = { 0x1d93e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_011)
{
    // 1D93F ; [*19E2.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CHECK SMALL

    uint32_t const cps[1] = { 0x1d93f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_012)
{
    // 1D940 ; [*19E3.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CHECK MEDIUM

    uint32_t const cps[1] = { 0x1d940 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_013)
{
    // 1D941 ; [*19E4.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CHECK LARGE

    uint32_t const cps[1] = { 0x1d941 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_014)
{
    // 1D942 ; [*19E5.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BOX SMALL

    uint32_t const cps[1] = { 0x1d942 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_015)
{
    // 1D943 ; [*19E6.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BOX MEDIUM

    uint32_t const cps[1] = { 0x1d943 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_016)
{
    // 1D944 ; [*19E7.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE BOX LARGE

    uint32_t const cps[1] = { 0x1d944 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_017)
{
    // 1D945 ; [*19E8.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG SMALL

    uint32_t const cps[1] = { 0x1d945 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_018)
{
    // 1D946 ; [*19E9.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG MEDIUM

    uint32_t const cps[1] = { 0x1d946 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_019)
{
    // 1D947 ; [*19EA.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG LARGE

    uint32_t const cps[1] = { 0x1d947 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_020)
{
    // 1D948 ; [*19EB.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE PEAKS SMALL

    uint32_t const cps[1] = { 0x1d948 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_021)
{
    // 1D949 ; [*19EC.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE PEAKS MEDIUM

    uint32_t const cps[1] = { 0x1d949 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_022)
{
    // 1D94A ; [*19ED.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE PEAKS LARGE

    uint32_t const cps[1] = { 0x1d94a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_023)
{
    // 1D94B ; [*19EE.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE SINGLE

    uint32_t const cps[1] = { 0x1d94b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_024)
{
    // 1D94C ; [*19EF.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE DOUBLE

    uint32_t const cps[1] = { 0x1d94c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_025)
{
    // 1D94D ; [*19F0.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE ALTERNATING

    uint32_t const cps[1] = { 0x1d94d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_026)
{
    // 1D94E ; [*19F1.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE SINGLE

    uint32_t const cps[1] = { 0x1d94e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_027)
{
    // 1D94F ; [*19F2.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE DOUBLE

    uint32_t const cps[1] = { 0x1d94f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_028)
{
    // 1D950 ; [*19F3.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE ALTERNATING

    uint32_t const cps[1] = { 0x1d950 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_029)
{
    // 1D951 ; [*19F4.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE SHAKING

    uint32_t const cps[1] = { 0x1d951 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_030)
{
    // 1D952 ; [*19F5.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL SINGLE

    uint32_t const cps[1] = { 0x1d952 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_031)
{
    // 1D953 ; [*19F6.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL DOUBLE

    uint32_t const cps[1] = { 0x1d953 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_032)
{
    // 1D954 ; [*19F7.0020.0002] 
    // SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL TRIPLE

    uint32_t const cps[1] = { 0x1d954 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_033)
{
    // 1D955 ; [*19F8.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL AWAY SMALL

    uint32_t const cps[1] = { 0x1d955 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_034)
{
    // 1D956 ; [*19F9.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL AWAY MEDIUM

    uint32_t const cps[1] = { 0x1d956 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_035)
{
    // 1D957 ; [*19FA.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGE

    uint32_t const cps[1] = { 0x1d957 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_036)
{
    // 1D958 ; [*19FB.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGEST

    uint32_t const cps[1] = { 0x1d958 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_037)
{
    // 1D959 ; [*19FC.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL TOWARDS SMALL

    uint32_t const cps[1] = { 0x1d959 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_038)
{
    // 1D95A ; [*19FD.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL TOWARDS MEDIUM

    uint32_t const cps[1] = { 0x1d95a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_039)
{
    // 1D95B ; [*19FE.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGE

    uint32_t const cps[1] = { 0x1d95b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_040)
{
    // 1D95C ; [*19FF.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGEST

    uint32_t const cps[1] = { 0x1d95c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x19ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_041)
{
    // 1D95D ; [*1A00.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY SMALL

    uint32_t const cps[1] = { 0x1d95d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a00), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_042)
{
    // 1D95E ; [*1A01.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY MEDIUM

    uint32_t const cps[1] = { 0x1d95e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a01), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_043)
{
    // 1D95F ; [*1A02.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGE

    uint32_t const cps[1] = { 0x1d95f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a02), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_044)
{
    // 1D960 ; [*1A03.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGEST

    uint32_t const cps[1] = { 0x1d960 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a03), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_045)
{
    // 1D961 ; [*1A04.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS SMALL

    uint32_t const cps[1] = { 0x1d961 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a04), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_046)
{
    // 1D962 ; [*1A05.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS MEDIUM

    uint32_t const cps[1] = { 0x1d962 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a05), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_047)
{
    // 1D963 ; [*1A06.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGE

    uint32_t const cps[1] = { 0x1d963 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a06), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_048)
{
    // 1D964 ; [*1A07.0020.0002] 
    // SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGEST

    uint32_t const cps[1] = { 0x1d964 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a07), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_049)
{
    // 1D965 ; [*1A08.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT SMALL

    uint32_t const cps[1] = { 0x1d965 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a08), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_050)
{
    // 1D966 ; [*1A09.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT MEDIUM

    uint32_t const cps[1] = { 0x1d966 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a09), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_051)
{
    // 1D967 ; [*1A0A.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGE

    uint32_t const cps[1] = { 0x1d967 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_052)
{
    // 1D968 ; [*1A0B.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGEST

    uint32_t const cps[1] = { 0x1d968 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_053)
{
    // 1D969 ; [*1A0C.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE SINGLE WRIST FLEX

    uint32_t const cps[1] = { 0x1d969 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_054)
{
    // 1D96A ; [*1A0D.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE STRAIGHT

    uint32_t const cps[1] = { 0x1d96a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_055)
{
    // 1D96B ; [*1A0E.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE WRIST FLEX

    uint32_t const cps[1] = { 0x1d96b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_056)
{
    // 1D96C ; [*1A0F.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING

    uint32_t const cps[1] = { 0x1d96c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_057)
{
    // 1D96D ; [*1A10.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING WRIST FLEX

    uint32_t const cps[1] = { 0x1d96d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a10), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_058)
{
    // 1D96E ; [*1A11.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CROSS

    uint32_t const cps[1] = { 0x1d96e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a11), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_059)
{
    // 1D96F ; [*1A12.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE STRAIGHT MOVEMENT

    uint32_t const cps[1] = { 0x1d96f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a12), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_060)
{
    // 1D970 ; [*1A13.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE WRIST FLEX

    uint32_t const cps[1] = { 0x1d970 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a13), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_061)
{
    // 1D971 ; [*1A14.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING MOVEMENT

    uint32_t const cps[1] = { 0x1d971 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a14), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_062)
{
    // 1D972 ; [*1A15.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING WRIST FLEX

    uint32_t const cps[1] = { 0x1d972 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a15), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_063)
{
    // 1D973 ; [*1A16.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE BEND

    uint32_t const cps[1] = { 0x1d973 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a16), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_064)
{
    // 1D974 ; [*1A17.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CORNER SMALL

    uint32_t const cps[1] = { 0x1d974 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a17), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_065)
{
    // 1D975 ; [*1A18.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CORNER MEDIUM

    uint32_t const cps[1] = { 0x1d975 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a18), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_066)
{
    // 1D976 ; [*1A19.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CORNER LARGE

    uint32_t const cps[1] = { 0x1d976 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a19), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_067)
{
    // 1D977 ; [*1A1A.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CHECK

    uint32_t const cps[1] = { 0x1d977 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_068)
{
    // 1D978 ; [*1A1B.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE BOX SMALL

    uint32_t const cps[1] = { 0x1d978 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_069)
{
    // 1D979 ; [*1A1C.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE BOX MEDIUM

    uint32_t const cps[1] = { 0x1d979 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_070)
{
    // 1D97A ; [*1A1D.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE BOX LARGE

    uint32_t const cps[1] = { 0x1d97a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_071)
{
    // 1D97B ; [*1A1E.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG SMALL

    uint32_t const cps[1] = { 0x1d97b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_072)
{
    // 1D97C ; [*1A1F.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG MEDIUM

    uint32_t const cps[1] = { 0x1d97c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_073)
{
    // 1D97D ; [*1A20.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG LARGE

    uint32_t const cps[1] = { 0x1d97d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a20), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_074)
{
    // 1D97E ; [*1A21.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE PEAKS SMALL

    uint32_t const cps[1] = { 0x1d97e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a21), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_075)
{
    // 1D97F ; [*1A22.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE PEAKS MEDIUM

    uint32_t const cps[1] = { 0x1d97f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a22), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_076)
{
    // 1D980 ; [*1A23.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE PEAKS LARGE

    uint32_t const cps[1] = { 0x1d980 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a23), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_077)
{
    // 1D981 ; [*1A24.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE SINGLE

    uint32_t const cps[1] = { 0x1d981 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a24), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_078)
{
    // 1D982 ; [*1A25.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE DOUBLE

    uint32_t const cps[1] = { 0x1d982 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a25), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_079)
{
    // 1D983 ; [*1A26.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE ALTERNATING

    uint32_t const cps[1] = { 0x1d983 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a26), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_080)
{
    // 1D984 ; [*1A27.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE SINGLE

    uint32_t const cps[1] = { 0x1d984 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a27), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_081)
{
    // 1D985 ; [*1A28.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE DOUBLE

    uint32_t const cps[1] = { 0x1d985 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a28), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_082)
{
    // 1D986 ; [*1A29.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE ALTERNATING

    uint32_t const cps[1] = { 0x1d986 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a29), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_083)
{
    // 1D987 ; [*1A2A.0020.0002] 
    // SIGNWRITING TRAVEL-FLOORPLANE SHAKING

    uint32_t const cps[1] = { 0x1d987 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_084)
{
    // 1D988 ; [*1A2B.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER SMALL

    uint32_t const cps[1] = { 0x1d988 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_085)
{
    // 1D989 ; [*1A2C.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER MEDIUM

    uint32_t const cps[1] = { 0x1d989 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_086)
{
    // 1D98A ; [*1A2D.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGE

    uint32_t const cps[1] = { 0x1d98a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_087)
{
    // 1D98B ; [*1A2E.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGEST

    uint32_t const cps[1] = { 0x1d98b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_088)
{
    // 1D98C ; [*1A2F.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE SMALL

    uint32_t const cps[1] = { 0x1d98c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_089)
{
    // 1D98D ; [*1A30.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE MEDIUM

    uint32_t const cps[1] = { 0x1d98d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a30), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_090)
{
    // 1D98E ; [*1A31.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGE

    uint32_t const cps[1] = { 0x1d98e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a31), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_091)
{
    // 1D98F ; [*1A32.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGEST

    uint32_t const cps[1] = { 0x1d98f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a32), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_092)
{
    // 1D990 ; [*1A33.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE SMALL

    uint32_t const cps[1] = { 0x1d990 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a33), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_093)
{
    // 1D991 ; [*1A34.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE MEDIUM

    uint32_t const cps[1] = { 0x1d991 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a34), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_094)
{
    // 1D992 ; [*1A35.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE HUMP SMALL

    uint32_t const cps[1] = { 0x1d992 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a35), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_095)
{
    // 1D993 ; [*1A36.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE HUMP MEDIUM

    uint32_t const cps[1] = { 0x1d993 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a36), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_096)
{
    // 1D994 ; [*1A37.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE HUMP LARGE

    uint32_t const cps[1] = { 0x1d994 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a37), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_097)
{
    // 1D995 ; [*1A38.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL

    uint32_t const cps[1] = { 0x1d995 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a38), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_098)
{
    // 1D996 ; [*1A39.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP MEDIUM

    uint32_t const cps[1] = { 0x1d996 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a39), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_099)
{
    // 1D997 ; [*1A3A.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP LARGE

    uint32_t const cps[1] = { 0x1d997 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_100)
{
    // 1D998 ; [*1A3B.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL DOUBLE

    uint32_t const cps[1] = { 0x1d998 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_101)
{
    // 1D999 ; [*1A3C.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE SMALL

    uint32_t const cps[1] = { 0x1d999 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_102)
{
    // 1D99A ; [*1A3D.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE MEDIUM

    uint32_t const cps[1] = { 0x1d99a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_103)
{
    // 1D99B ; [*1A3E.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE LARGE

    uint32_t const cps[1] = { 0x1d99b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_104)
{
    // 1D99C ; [*1A3F.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE SMALL

    uint32_t const cps[1] = { 0x1d99c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_105)
{
    // 1D99D ; [*1A40.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE MEDIUM

    uint32_t const cps[1] = { 0x1d99d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a40), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_106)
{
    // 1D99E ; [*1A41.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE LARGE

    uint32_t const cps[1] = { 0x1d99e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a41), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_107)
{
    // 1D99F ; [*1A42.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE THEN STRAIGHT

    uint32_t const cps[1] = { 0x1d99f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a42), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_108)
{
    // 1D9A0 ; [*1A43.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS SMALL

    uint32_t const cps[1] = { 0x1d9a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a43), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_109)
{
    // 1D9A1 ; [*1A44.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS MEDIUM

    uint32_t const cps[1] = { 0x1d9a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a44), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_110)
{
    // 1D9A2 ; [*1A45.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE SINGLE

    uint32_t const cps[1] = { 0x1d9a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a45), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_111)
{
    // 1D9A3 ; [*1A46.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE DOUBLE

    uint32_t const cps[1] = { 0x1d9a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a46), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_112)
{
    // 1D9A4 ; [*1A47.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE ALTERNATE

    uint32_t const cps[1] = { 0x1d9a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a47), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_113)
{
    // 1D9A5 ; [*1A48.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE SHAKING

    uint32_t const cps[1] = { 0x1d9a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a48), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_114)
{
    // 1D9A6 ; [*1A49.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a49), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_115)
{
    // 1D9A7 ; [*1A4A.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_116)
{
    // 1D9A8 ; [*1A4B.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_117)
{
    // 1D9A9 ; [*1A4C.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_118)
{
    // 1D9AA ; [*1A4D.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_119)
{
    // 1D9AB ; [*1A4E.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_120)
{
    // 1D9AC ; [*1A4F.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING FRONT WALL

    uint32_t const cps[1] = { 0x1d9ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_121)
{
    // 1D9AD ; [*1A50.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING CHEST

    uint32_t const cps[1] = { 0x1d9ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a50), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_122)
{
    // 1D9AE ; [*1A51.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING CHEST

    uint32_t const cps[1] = { 0x1d9ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a51), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_123)
{
    // 1D9AF ; [*1A52.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING CHEST

    uint32_t const cps[1] = { 0x1d9af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a52), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_124)
{
    // 1D9B0 ; [*1A53.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING CHEST

    uint32_t const cps[1] = { 0x1d9b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a53), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_125)
{
    // 1D9B1 ; [*1A54.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING CHEST

    uint32_t const cps[1] = { 0x1d9b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a54), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_126)
{
    // 1D9B2 ; [*1A55.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING CHEST

    uint32_t const cps[1] = { 0x1d9b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a55), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_127)
{
    // 1D9B3 ; [*1A56.0020.0002] 
    // SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING CHEST

    uint32_t const cps[1] = { 0x1d9b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a56), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_128)
{
    // 1D9B4 ; [*1A57.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH SMALL

    uint32_t const cps[1] = { 0x1d9b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a57), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_129)
{
    // 1D9B5 ; [*1A58.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH MEDIUM

    uint32_t const cps[1] = { 0x1d9b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a58), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_130)
{
    // 1D9B6 ; [*1A59.0020.0002] 
    // SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH LARGE

    uint32_t const cps[1] = { 0x1d9b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a59), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_131)
{
    // 1D9B7 ; [*1A5A.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING SMALL

    uint32_t const cps[1] = { 0x1d9b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_132)
{
    // 1D9B8 ; [*1A5B.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING LARGE

    uint32_t const cps[1] = { 0x1d9b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_133)
{
    // 1D9B9 ; [*1A5C.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL DOUBLE

    uint32_t const cps[1] = { 0x1d9b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_134)
{
    // 1D9BA ; [*1A5D.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE DOUBLE

    uint32_t const cps[1] = { 0x1d9ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_135)
{
    // 1D9BB ; [*1A5E.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL TRIPLE

    uint32_t const cps[1] = { 0x1d9bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_136)
{
    // 1D9BC ; [*1A5F.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE TRIPLE

    uint32_t const cps[1] = { 0x1d9bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_137)
{
    // 1D9BD ; [*1A60.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL SINGLE

    uint32_t const cps[1] = { 0x1d9bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a60), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_138)
{
    // 1D9BE ; [*1A61.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE SINGLE

    uint32_t const cps[1] = { 0x1d9be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a61), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_139)
{
    // 1D9BF ; [*1A62.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL DOUBLE

    uint32_t const cps[1] = { 0x1d9bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_140)
{
    // 1D9C0 ; [*1A63.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE DOUBLE

    uint32_t const cps[1] = { 0x1d9c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a63), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_141)
{
    // 1D9C1 ; [*1A64.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING SMALL

    uint32_t const cps[1] = { 0x1d9c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a64), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_142)
{
    // 1D9C2 ; [*1A65.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING LARGE

    uint32_t const cps[1] = { 0x1d9c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a65), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_143)
{
    // 1D9C3 ; [*1A66.0020.0002] 
    // SIGNWRITING ROTATION-FLOORPLANE SINGLE HITTING CEILING

    uint32_t const cps[1] = { 0x1d9c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a66), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_144)
{
    // 1D9C4 ; [*1A67.0020.0002] 
    // SIGNWRITING ROTATION-FLOORPLANE DOUBLE HITTING CEILING

    uint32_t const cps[1] = { 0x1d9c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a67), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_145)
{
    // 1D9C5 ; [*1A68.0020.0002] 
    // SIGNWRITING ROTATION-FLOORPLANE ALTERNATING HITTING CEILING

    uint32_t const cps[1] = { 0x1d9c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a68), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_146)
{
    // 1D9C6 ; [*1A69.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR SMALL

    uint32_t const cps[1] = { 0x1d9c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a69), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_147)
{
    // 1D9C7 ; [*1A6A.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR LARGE

    uint32_t const cps[1] = { 0x1d9c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_148)
{
    // 1D9C8 ; [*1A6B.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR SMALL DOUBLE

    uint32_t const cps[1] = { 0x1d9c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_184_149)
{
    // 1D9C9 ; [*1A6C.0020.0002] 
    // SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR LARGE DOUBLE

    uint32_t const cps[1] = { 0x1d9c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1a6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

