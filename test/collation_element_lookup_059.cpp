// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_059_000)
{
    // 246F  ; [.1CA4.0020.0006][.1CA9.0020.0006] 
    // CIRCLED NUMBER SIXTEEN

    uint32_t const cps[1] = { 0x246f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_001)
{
    // 2470  ; [.1CA4.0020.0006][.1CAA.0020.0006] 
    // CIRCLED NUMBER SEVENTEEN

    uint32_t const cps[1] = { 0x2470 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_002)
{
    // 2471  ; [.1CA4.0020.0006][.1CAB.0020.0006] 
    // CIRCLED NUMBER EIGHTEEN

    uint32_t const cps[1] = { 0x2471 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_003)
{
    // 2472  ; [.1CA4.0020.0006][.1CAC.0020.0006] 
    // CIRCLED NUMBER NINETEEN

    uint32_t const cps[1] = { 0x2472 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_004)
{
    // 2473  ; [.1CA5.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER TWENTY

    uint32_t const cps[1] = { 0x2473 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_005)
{
    // 2474  ; [*0318.0020.0004][.1CA4.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT ONE

    uint32_t const cps[1] = { 0x2474 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_006)
{
    // 2475  ; [*0318.0020.0004][.1CA5.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT TWO

    uint32_t const cps[1] = { 0x2475 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_007)
{
    // 2476  ; [*0318.0020.0004][.1CA6.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT THREE

    uint32_t const cps[1] = { 0x2476 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_008)
{
    // 2477  ; [*0318.0020.0004][.1CA7.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT FOUR

    uint32_t const cps[1] = { 0x2477 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_009)
{
    // 2478  ; [*0318.0020.0004][.1CA8.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT FIVE

    uint32_t const cps[1] = { 0x2478 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_010)
{
    // 2479  ; [*0318.0020.0004][.1CA9.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT SIX

    uint32_t const cps[1] = { 0x2479 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_011)
{
    // 247A  ; [*0318.0020.0004][.1CAA.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT SEVEN

    uint32_t const cps[1] = { 0x247a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_012)
{
    // 247B  ; [*0318.0020.0004][.1CAB.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT EIGHT

    uint32_t const cps[1] = { 0x247b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_013)
{
    // 247C  ; [*0318.0020.0004][.1CAC.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED DIGIT NINE

    uint32_t const cps[1] = { 0x247c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_014)
{
    // 247D  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA3.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER TEN

    uint32_t const cps[1] = { 0x247d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_015)
{
    // 247E  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA4.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER ELEVEN

    uint32_t const cps[1] = { 0x247e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_016)
{
    // 247F  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA5.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER TWELVE

    uint32_t const cps[1] = { 0x247f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_017)
{
    // 2480  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA6.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER THIRTEEN

    uint32_t const cps[1] = { 0x2480 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_018)
{
    // 2481  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA7.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER FOURTEEN

    uint32_t const cps[1] = { 0x2481 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_019)
{
    // 2482  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA8.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER FIFTEEN

    uint32_t const cps[1] = { 0x2482 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_020)
{
    // 2483  ; [*0318.0020.0004][.1CA4.0020.0004][.1CA9.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER SIXTEEN

    uint32_t const cps[1] = { 0x2483 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_021)
{
    // 2484  ; [*0318.0020.0004][.1CA4.0020.0004][.1CAA.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER SEVENTEEN

    uint32_t const cps[1] = { 0x2484 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_022)
{
    // 2485  ; [*0318.0020.0004][.1CA4.0020.0004][.1CAB.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER EIGHTEEN

    uint32_t const cps[1] = { 0x2485 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_023)
{
    // 2486  ; [*0318.0020.0004][.1CA4.0020.0004][.1CAC.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER NINETEEN

    uint32_t const cps[1] = { 0x2486 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_024)
{
    // 2487  ; [*0318.0020.0004][.1CA5.0020.0004][.1CA3.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED NUMBER TWENTY

    uint32_t const cps[1] = { 0x2487 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_059_025)
{
    // 2488  ; [.1CA4.0020.0004][*0278.0020.0004] 
    // DIGIT ONE FULL STOP

    uint32_t const cps[1] = { 0x2488 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_026)
{
    // 2489  ; [.1CA5.0020.0004][*0278.0020.0004] 
    // DIGIT TWO FULL STOP

    uint32_t const cps[1] = { 0x2489 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_027)
{
    // 248A  ; [.1CA6.0020.0004][*0278.0020.0004] 
    // DIGIT THREE FULL STOP

    uint32_t const cps[1] = { 0x248a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_028)
{
    // 248B  ; [.1CA7.0020.0004][*0278.0020.0004] 
    // DIGIT FOUR FULL STOP

    uint32_t const cps[1] = { 0x248b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_029)
{
    // 248C  ; [.1CA8.0020.0004][*0278.0020.0004] 
    // DIGIT FIVE FULL STOP

    uint32_t const cps[1] = { 0x248c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_030)
{
    // 248D  ; [.1CA9.0020.0004][*0278.0020.0004] 
    // DIGIT SIX FULL STOP

    uint32_t const cps[1] = { 0x248d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_031)
{
    // 248E  ; [.1CAA.0020.0004][*0278.0020.0004] 
    // DIGIT SEVEN FULL STOP

    uint32_t const cps[1] = { 0x248e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_032)
{
    // 248F  ; [.1CAB.0020.0004][*0278.0020.0004] 
    // DIGIT EIGHT FULL STOP

    uint32_t const cps[1] = { 0x248f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_033)
{
    // 2490  ; [.1CAC.0020.0004][*0278.0020.0004] 
    // DIGIT NINE FULL STOP

    uint32_t const cps[1] = { 0x2490 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_034)
{
    // 2491  ; [.1CA4.0020.0004][.1CA3.0020.0004][*0278.0020.0004] 
    // NUMBER TEN FULL STOP

    uint32_t const cps[1] = { 0x2491 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_035)
{
    // 2492  ; [.1CA4.0020.0004][.1CA4.0020.0004][*0278.0020.0004] 
    // NUMBER ELEVEN FULL STOP

    uint32_t const cps[1] = { 0x2492 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_036)
{
    // 2493  ; [.1CA4.0020.0004][.1CA5.0020.0004][*0278.0020.0004] 
    // NUMBER TWELVE FULL STOP

    uint32_t const cps[1] = { 0x2493 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_037)
{
    // 2494  ; [.1CA4.0020.0004][.1CA6.0020.0004][*0278.0020.0004] 
    // NUMBER THIRTEEN FULL STOP

    uint32_t const cps[1] = { 0x2494 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_038)
{
    // 2495  ; [.1CA4.0020.0004][.1CA7.0020.0004][*0278.0020.0004] 
    // NUMBER FOURTEEN FULL STOP

    uint32_t const cps[1] = { 0x2495 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_039)
{
    // 2496  ; [.1CA4.0020.0004][.1CA8.0020.0004][*0278.0020.0004] 
    // NUMBER FIFTEEN FULL STOP

    uint32_t const cps[1] = { 0x2496 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_040)
{
    // 2497  ; [.1CA4.0020.0004][.1CA9.0020.0004][*0278.0020.0004] 
    // NUMBER SIXTEEN FULL STOP

    uint32_t const cps[1] = { 0x2497 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_041)
{
    // 2498  ; [.1CA4.0020.0004][.1CAA.0020.0004][*0278.0020.0004] 
    // NUMBER SEVENTEEN FULL STOP

    uint32_t const cps[1] = { 0x2498 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_042)
{
    // 2499  ; [.1CA4.0020.0004][.1CAB.0020.0004][*0278.0020.0004] 
    // NUMBER EIGHTEEN FULL STOP

    uint32_t const cps[1] = { 0x2499 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_043)
{
    // 249A  ; [.1CA4.0020.0004][.1CAC.0020.0004][*0278.0020.0004] 
    // NUMBER NINETEEN FULL STOP

    uint32_t const cps[1] = { 0x249a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_044)
{
    // 249B  ; [.1CA5.0020.0004][.1CA3.0020.0004][*0278.0020.0004] 
    // NUMBER TWENTY FULL STOP

    uint32_t const cps[1] = { 0x249b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_045)
{
    // 249C  ; [*0318.0020.0004][.1CAD.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER A

    uint32_t const cps[1] = { 0x249c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_046)
{
    // 249D  ; [*0318.0020.0004][.1CC6.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER B

    uint32_t const cps[1] = { 0x249d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_047)
{
    // 249E  ; [*0318.0020.0004][.1CE0.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER C

    uint32_t const cps[1] = { 0x249e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_048)
{
    // 249F  ; [*0318.0020.0004][.1CF5.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER D

    uint32_t const cps[1] = { 0x249f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_049)
{
    // 24A0  ; [*0318.0020.0004][.1D10.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER E

    uint32_t const cps[1] = { 0x24a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_050)
{
    // 24A1  ; [*0318.0020.0004][.1D4B.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER F

    uint32_t const cps[1] = { 0x24a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_051)
{
    // 24A2  ; [*0318.0020.0004][.1D5A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER G

    uint32_t const cps[1] = { 0x24a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_052)
{
    // 24A3  ; [*0318.0020.0004][.1D7E.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER H

    uint32_t const cps[1] = { 0x24a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_053)
{
    // 24A4  ; [*0318.0020.0004][.1D98.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER I

    uint32_t const cps[1] = { 0x24a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_054)
{
    // 24A5  ; [*0318.0020.0004][.1DB2.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER J

    uint32_t const cps[1] = { 0x24a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_055)
{
    // 24A6  ; [*0318.0020.0004][.1DCB.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER K

    uint32_t const cps[1] = { 0x24a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_056)
{
    // 24A7  ; [*0318.0020.0004][.1DDD.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER L

    uint32_t const cps[1] = { 0x24a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_057)
{
    // 24A8  ; [*0318.0020.0004][.1E10.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER M

    uint32_t const cps[1] = { 0x24a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_058)
{
    // 24A9  ; [*0318.0020.0004][.1E1F.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER N

    uint32_t const cps[1] = { 0x24a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_059)
{
    // 24AA  ; [*0318.0020.0004][.1E43.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER O

    uint32_t const cps[1] = { 0x24aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_060)
{
    // 24AB  ; [*0318.0020.0004][.1E72.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER P

    uint32_t const cps[1] = { 0x24ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_061)
{
    // 24AC  ; [*0318.0020.0004][.1E87.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER Q

    uint32_t const cps[1] = { 0x24ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_062)
{
    // 24AD  ; [*0318.0020.0004][.1E99.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER R

    uint32_t const cps[1] = { 0x24ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_063)
{
    // 24AE  ; [*0318.0020.0004][.1ED7.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER S

    uint32_t const cps[1] = { 0x24ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_064)
{
    // 24AF  ; [*0318.0020.0004][.1EFB.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER T

    uint32_t const cps[1] = { 0x24af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_065)
{
    // 24B0  ; [*0318.0020.0004][.1F1B.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER U

    uint32_t const cps[1] = { 0x24b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_066)
{
    // 24B1  ; [*0318.0020.0004][.1F49.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER V

    uint32_t const cps[1] = { 0x24b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_067)
{
    // 24B2  ; [*0318.0020.0004][.1F5B.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER W

    uint32_t const cps[1] = { 0x24b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_068)
{
    // 24B3  ; [*0318.0020.0004][.1F65.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER X

    uint32_t const cps[1] = { 0x24b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_069)
{
    // 24B4  ; [*0318.0020.0004][.1F71.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER Y

    uint32_t const cps[1] = { 0x24b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_070)
{
    // 24B5  ; [*0318.0020.0004][.1F87.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED LATIN SMALL LETTER Z

    uint32_t const cps[1] = { 0x24b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_059_071)
{
    // 24B6  ; [.1CAD.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER A

    uint32_t const cps[1] = { 0x24b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_072)
{
    // 24B7  ; [.1CC6.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER B

    uint32_t const cps[1] = { 0x24b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_073)
{
    // 24B8  ; [.1CE0.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER C

    uint32_t const cps[1] = { 0x24b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_074)
{
    // 24B9  ; [.1CF5.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER D

    uint32_t const cps[1] = { 0x24b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_075)
{
    // 24BA  ; [.1D10.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER E

    uint32_t const cps[1] = { 0x24ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_076)
{
    // 24BB  ; [.1D4B.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER F

    uint32_t const cps[1] = { 0x24bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_077)
{
    // 24BC  ; [.1D5A.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER G

    uint32_t const cps[1] = { 0x24bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_078)
{
    // 24BD  ; [.1D7E.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER H

    uint32_t const cps[1] = { 0x24bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_079)
{
    // 24BE  ; [.1D98.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER I

    uint32_t const cps[1] = { 0x24be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_080)
{
    // 24BF  ; [.1DB2.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER J

    uint32_t const cps[1] = { 0x24bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_081)
{
    // 24C0  ; [.1DCB.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER K

    uint32_t const cps[1] = { 0x24c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_082)
{
    // 24C1  ; [.1DDD.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER L

    uint32_t const cps[1] = { 0x24c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_083)
{
    // 24C2  ; [.1E10.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER M

    uint32_t const cps[1] = { 0x24c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_084)
{
    // 24C3  ; [.1E1F.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER N

    uint32_t const cps[1] = { 0x24c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_085)
{
    // 24C4  ; [.1E43.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER O

    uint32_t const cps[1] = { 0x24c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_086)
{
    // 24C5  ; [.1E72.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x24c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_087)
{
    // 24C6  ; [.1E87.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER Q

    uint32_t const cps[1] = { 0x24c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_088)
{
    // 24C7  ; [.1E99.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER R

    uint32_t const cps[1] = { 0x24c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_089)
{
    // 24C8  ; [.1ED7.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER S

    uint32_t const cps[1] = { 0x24c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_090)
{
    // 24C9  ; [.1EFB.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER T

    uint32_t const cps[1] = { 0x24c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_091)
{
    // 24CA  ; [.1F1B.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0x24ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_092)
{
    // 24CB  ; [.1F49.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0x24cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_093)
{
    // 24CC  ; [.1F5B.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0x24cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_094)
{
    // 24CD  ; [.1F65.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0x24cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_095)
{
    // 24CE  ; [.1F71.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0x24ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_096)
{
    // 24CF  ; [.1F87.0020.000C] 
    // CIRCLED LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0x24cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xc)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_097)
{
    // 24D0  ; [.1CAD.0020.0006] 
    // CIRCLED LATIN SMALL LETTER A

    uint32_t const cps[1] = { 0x24d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_098)
{
    // 24D1  ; [.1CC6.0020.0006] 
    // CIRCLED LATIN SMALL LETTER B

    uint32_t const cps[1] = { 0x24d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_099)
{
    // 24D2  ; [.1CE0.0020.0006] 
    // CIRCLED LATIN SMALL LETTER C

    uint32_t const cps[1] = { 0x24d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_100)
{
    // 24D3  ; [.1CF5.0020.0006] 
    // CIRCLED LATIN SMALL LETTER D

    uint32_t const cps[1] = { 0x24d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_101)
{
    // 24D4  ; [.1D10.0020.0006] 
    // CIRCLED LATIN SMALL LETTER E

    uint32_t const cps[1] = { 0x24d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_102)
{
    // 24D5  ; [.1D4B.0020.0006] 
    // CIRCLED LATIN SMALL LETTER F

    uint32_t const cps[1] = { 0x24d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_103)
{
    // 24D6  ; [.1D5A.0020.0006] 
    // CIRCLED LATIN SMALL LETTER G

    uint32_t const cps[1] = { 0x24d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_104)
{
    // 24D7  ; [.1D7E.0020.0006] 
    // CIRCLED LATIN SMALL LETTER H

    uint32_t const cps[1] = { 0x24d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_105)
{
    // 24D8  ; [.1D98.0020.0006] 
    // CIRCLED LATIN SMALL LETTER I

    uint32_t const cps[1] = { 0x24d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_106)
{
    // 24D9  ; [.1DB2.0020.0006] 
    // CIRCLED LATIN SMALL LETTER J

    uint32_t const cps[1] = { 0x24d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_107)
{
    // 24DA  ; [.1DCB.0020.0006] 
    // CIRCLED LATIN SMALL LETTER K

    uint32_t const cps[1] = { 0x24da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_108)
{
    // 24DB  ; [.1DDD.0020.0006] 
    // CIRCLED LATIN SMALL LETTER L

    uint32_t const cps[1] = { 0x24db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_109)
{
    // 24DC  ; [.1E10.0020.0006] 
    // CIRCLED LATIN SMALL LETTER M

    uint32_t const cps[1] = { 0x24dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_110)
{
    // 24DD  ; [.1E1F.0020.0006] 
    // CIRCLED LATIN SMALL LETTER N

    uint32_t const cps[1] = { 0x24dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_111)
{
    // 24DE  ; [.1E43.0020.0006] 
    // CIRCLED LATIN SMALL LETTER O

    uint32_t const cps[1] = { 0x24de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_112)
{
    // 24DF  ; [.1E72.0020.0006] 
    // CIRCLED LATIN SMALL LETTER P

    uint32_t const cps[1] = { 0x24df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_113)
{
    // 24E0  ; [.1E87.0020.0006] 
    // CIRCLED LATIN SMALL LETTER Q

    uint32_t const cps[1] = { 0x24e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_114)
{
    // 24E1  ; [.1E99.0020.0006] 
    // CIRCLED LATIN SMALL LETTER R

    uint32_t const cps[1] = { 0x24e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_115)
{
    // 24E2  ; [.1ED7.0020.0006] 
    // CIRCLED LATIN SMALL LETTER S

    uint32_t const cps[1] = { 0x24e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_116)
{
    // 24E3  ; [.1EFB.0020.0006] 
    // CIRCLED LATIN SMALL LETTER T

    uint32_t const cps[1] = { 0x24e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_117)
{
    // 24E4  ; [.1F1B.0020.0006] 
    // CIRCLED LATIN SMALL LETTER U

    uint32_t const cps[1] = { 0x24e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_118)
{
    // 24E5  ; [.1F49.0020.0006] 
    // CIRCLED LATIN SMALL LETTER V

    uint32_t const cps[1] = { 0x24e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_119)
{
    // 24E6  ; [.1F5B.0020.0006] 
    // CIRCLED LATIN SMALL LETTER W

    uint32_t const cps[1] = { 0x24e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_120)
{
    // 24E7  ; [.1F65.0020.0006] 
    // CIRCLED LATIN SMALL LETTER X

    uint32_t const cps[1] = { 0x24e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_121)
{
    // 24E8  ; [.1F71.0020.0006] 
    // CIRCLED LATIN SMALL LETTER Y

    uint32_t const cps[1] = { 0x24e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_122)
{
    // 24E9  ; [.1F87.0020.0006] 
    // CIRCLED LATIN SMALL LETTER Z

    uint32_t const cps[1] = { 0x24e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_123)
{
    // 24EA  ; [.1CA3.0020.0006] 
    // CIRCLED DIGIT ZERO

    uint32_t const cps[1] = { 0x24ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_124)
{
    // 24EB  ; [.1CA4.0020.0006][.1CA4.0020.0006] 
    // NEGATIVE CIRCLED NUMBER ELEVEN

    uint32_t const cps[1] = { 0x24eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_125)
{
    // 24EC  ; [.1CA4.0020.0006][.1CA5.0020.0006] 
    // NEGATIVE CIRCLED NUMBER TWELVE

    uint32_t const cps[1] = { 0x24ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_126)
{
    // 24ED  ; [.1CA4.0020.0006][.1CA6.0020.0006] 
    // NEGATIVE CIRCLED NUMBER THIRTEEN

    uint32_t const cps[1] = { 0x24ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_127)
{
    // 24EE  ; [.1CA4.0020.0006][.1CA7.0020.0006] 
    // NEGATIVE CIRCLED NUMBER FOURTEEN

    uint32_t const cps[1] = { 0x24ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_128)
{
    // 24EF  ; [.1CA4.0020.0006][.1CA8.0020.0006] 
    // NEGATIVE CIRCLED NUMBER FIFTEEN

    uint32_t const cps[1] = { 0x24ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_129)
{
    // 24F0  ; [.1CA4.0020.0006][.1CA9.0020.0006] 
    // NEGATIVE CIRCLED NUMBER SIXTEEN

    uint32_t const cps[1] = { 0x24f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_130)
{
    // 24F1  ; [.1CA4.0020.0006][.1CAA.0020.0006] 
    // NEGATIVE CIRCLED NUMBER SEVENTEEN

    uint32_t const cps[1] = { 0x24f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_131)
{
    // 24F2  ; [.1CA4.0020.0006][.1CAB.0020.0006] 
    // NEGATIVE CIRCLED NUMBER EIGHTEEN

    uint32_t const cps[1] = { 0x24f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_132)
{
    // 24F3  ; [.1CA4.0020.0006][.1CAC.0020.0006] 
    // NEGATIVE CIRCLED NUMBER NINETEEN

    uint32_t const cps[1] = { 0x24f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_133)
{
    // 24F4  ; [.1CA5.0020.0006][.1CA3.0020.0006] 
    // NEGATIVE CIRCLED NUMBER TWENTY

    uint32_t const cps[1] = { 0x24f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_134)
{
    // 24F5  ; [.1CA4.0020.0006] 
    // DOUBLE CIRCLED DIGIT ONE

    uint32_t const cps[1] = { 0x24f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_135)
{
    // 24F6  ; [.1CA5.0020.0006] 
    // DOUBLE CIRCLED DIGIT TWO

    uint32_t const cps[1] = { 0x24f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_136)
{
    // 24F7  ; [.1CA6.0020.0006] 
    // DOUBLE CIRCLED DIGIT THREE

    uint32_t const cps[1] = { 0x24f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_137)
{
    // 24F8  ; [.1CA7.0020.0006] 
    // DOUBLE CIRCLED DIGIT FOUR

    uint32_t const cps[1] = { 0x24f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_138)
{
    // 24F9  ; [.1CA8.0020.0006] 
    // DOUBLE CIRCLED DIGIT FIVE

    uint32_t const cps[1] = { 0x24f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_139)
{
    // 24FA  ; [.1CA9.0020.0006] 
    // DOUBLE CIRCLED DIGIT SIX

    uint32_t const cps[1] = { 0x24fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_140)
{
    // 24FB  ; [.1CAA.0020.0006] 
    // DOUBLE CIRCLED DIGIT SEVEN

    uint32_t const cps[1] = { 0x24fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_141)
{
    // 24FC  ; [.1CAB.0020.0006] 
    // DOUBLE CIRCLED DIGIT EIGHT

    uint32_t const cps[1] = { 0x24fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_142)
{
    // 24FD  ; [.1CAC.0020.0006] 
    // DOUBLE CIRCLED DIGIT NINE

    uint32_t const cps[1] = { 0x24fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_143)
{
    // 24FE  ; [.1CA4.0020.0006][.1CA3.0020.0006] 
    // DOUBLE CIRCLED NUMBER TEN

    uint32_t const cps[1] = { 0x24fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_059_144)
{
    // 24FF  ; [.1CA3.0020.0006] 
    // NEGATIVE CIRCLED DIGIT ZERO

    uint32_t const cps[1] = { 0x24ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_145)
{
    // 2500  ; [*082F.0020.0002] 
    // BOX DRAWINGS LIGHT HORIZONTAL

    uint32_t const cps[1] = { 0x2500 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x82f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_146)
{
    // 2501  ; [*0830.0020.0002] 
    // BOX DRAWINGS HEAVY HORIZONTAL

    uint32_t const cps[1] = { 0x2501 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x830), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_147)
{
    // 2502  ; [*0831.0020.0002] 
    // BOX DRAWINGS LIGHT VERTICAL

    uint32_t const cps[1] = { 0x2502 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x831), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_148)
{
    // 2503  ; [*0832.0020.0002] 
    // BOX DRAWINGS HEAVY VERTICAL

    uint32_t const cps[1] = { 0x2503 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x832), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_059_149)
{
    // 2504  ; [*0833.0020.0002] 
    // BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x2504 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x833), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

