// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_334_000)
{
    // 36D2 003F;	
    // (㛒) CJK UNIFIED IDEOGRAPH-36D2	[FB80 B6D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_001)
{
    // 36D2 0061;	
    // (㛒) CJK UNIFIED IDEOGRAPH-36D2	[FB80 B6D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_002)
{
    // 36D2 0041;	
    // (㛒) CJK UNIFIED IDEOGRAPH-36D2	[FB80 B6D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_003)
{
    // 36D2 0062;	
    // (㛒) CJK UNIFIED IDEOGRAPH-36D2	[FB80 B6D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_004)
{
    // 36D3 0021;	
    // (㛓) CJK UNIFIED IDEOGRAPH-36D3	[FB80 B6D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_005)
{
    // 36D3 003F;	
    // (㛓) CJK UNIFIED IDEOGRAPH-36D3	[FB80 B6D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_006)
{
    // 36D3 0061;	
    // (㛓) CJK UNIFIED IDEOGRAPH-36D3	[FB80 B6D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_007)
{
    // 36D3 0041;	
    // (㛓) CJK UNIFIED IDEOGRAPH-36D3	[FB80 B6D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_008)
{
    // 36D3 0062;	
    // (㛓) CJK UNIFIED IDEOGRAPH-36D3	[FB80 B6D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_009)
{
    // 36D4 0021;	
    // (㛔) CJK UNIFIED IDEOGRAPH-36D4	[FB80 B6D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_010)
{
    // 36D4 003F;	
    // (㛔) CJK UNIFIED IDEOGRAPH-36D4	[FB80 B6D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_011)
{
    // 36D4 0061;	
    // (㛔) CJK UNIFIED IDEOGRAPH-36D4	[FB80 B6D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_012)
{
    // 36D4 0041;	
    // (㛔) CJK UNIFIED IDEOGRAPH-36D4	[FB80 B6D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_013)
{
    // 36D4 0062;	
    // (㛔) CJK UNIFIED IDEOGRAPH-36D4	[FB80 B6D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_014)
{
    // 36D5 0021;	
    // (㛕) CJK UNIFIED IDEOGRAPH-36D5	[FB80 B6D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_015)
{
    // 36D5 003F;	
    // (㛕) CJK UNIFIED IDEOGRAPH-36D5	[FB80 B6D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_016)
{
    // 36D5 0061;	
    // (㛕) CJK UNIFIED IDEOGRAPH-36D5	[FB80 B6D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_017)
{
    // 36D5 0041;	
    // (㛕) CJK UNIFIED IDEOGRAPH-36D5	[FB80 B6D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_018)
{
    // 36D5 0062;	
    // (㛕) CJK UNIFIED IDEOGRAPH-36D5	[FB80 B6D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_019)
{
    // 36D6 0021;	
    // (㛖) CJK UNIFIED IDEOGRAPH-36D6	[FB80 B6D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_020)
{
    // 36D6 003F;	
    // (㛖) CJK UNIFIED IDEOGRAPH-36D6	[FB80 B6D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_021)
{
    // 36D6 0061;	
    // (㛖) CJK UNIFIED IDEOGRAPH-36D6	[FB80 B6D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_022)
{
    // 36D6 0041;	
    // (㛖) CJK UNIFIED IDEOGRAPH-36D6	[FB80 B6D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_023)
{
    // 36D6 0062;	
    // (㛖) CJK UNIFIED IDEOGRAPH-36D6	[FB80 B6D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_024)
{
    // 36D7 0021;	
    // (㛗) CJK UNIFIED IDEOGRAPH-36D7	[FB80 B6D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_025)
{
    // 36D7 003F;	
    // (㛗) CJK UNIFIED IDEOGRAPH-36D7	[FB80 B6D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_026)
{
    // 36D7 0061;	
    // (㛗) CJK UNIFIED IDEOGRAPH-36D7	[FB80 B6D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_027)
{
    // 36D7 0041;	
    // (㛗) CJK UNIFIED IDEOGRAPH-36D7	[FB80 B6D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_028)
{
    // 36D7 0062;	
    // (㛗) CJK UNIFIED IDEOGRAPH-36D7	[FB80 B6D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_029)
{
    // 36D8 0021;	
    // (㛘) CJK UNIFIED IDEOGRAPH-36D8	[FB80 B6D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_030)
{
    // 36D8 003F;	
    // (㛘) CJK UNIFIED IDEOGRAPH-36D8	[FB80 B6D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_031)
{
    // 36D8 0061;	
    // (㛘) CJK UNIFIED IDEOGRAPH-36D8	[FB80 B6D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_032)
{
    // 36D8 0041;	
    // (㛘) CJK UNIFIED IDEOGRAPH-36D8	[FB80 B6D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_033)
{
    // 36D8 0062;	
    // (㛘) CJK UNIFIED IDEOGRAPH-36D8	[FB80 B6D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_034)
{
    // 36D9 0021;	
    // (㛙) CJK UNIFIED IDEOGRAPH-36D9	[FB80 B6D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_035)
{
    // 36D9 003F;	
    // (㛙) CJK UNIFIED IDEOGRAPH-36D9	[FB80 B6D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_036)
{
    // 36D9 0061;	
    // (㛙) CJK UNIFIED IDEOGRAPH-36D9	[FB80 B6D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_037)
{
    // 36D9 0041;	
    // (㛙) CJK UNIFIED IDEOGRAPH-36D9	[FB80 B6D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_038)
{
    // 36D9 0062;	
    // (㛙) CJK UNIFIED IDEOGRAPH-36D9	[FB80 B6D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_039)
{
    // 36DA 0021;	
    // (㛚) CJK UNIFIED IDEOGRAPH-36DA	[FB80 B6DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_040)
{
    // 36DA 003F;	
    // (㛚) CJK UNIFIED IDEOGRAPH-36DA	[FB80 B6DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_041)
{
    // 36DA 0061;	
    // (㛚) CJK UNIFIED IDEOGRAPH-36DA	[FB80 B6DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_042)
{
    // 36DA 0041;	
    // (㛚) CJK UNIFIED IDEOGRAPH-36DA	[FB80 B6DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_043)
{
    // 36DA 0062;	
    // (㛚) CJK UNIFIED IDEOGRAPH-36DA	[FB80 B6DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_044)
{
    // 36DB 0021;	
    // (㛛) CJK UNIFIED IDEOGRAPH-36DB	[FB80 B6DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_045)
{
    // 36DB 003F;	
    // (㛛) CJK UNIFIED IDEOGRAPH-36DB	[FB80 B6DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_046)
{
    // 36DB 0061;	
    // (㛛) CJK UNIFIED IDEOGRAPH-36DB	[FB80 B6DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_047)
{
    // 36DB 0041;	
    // (㛛) CJK UNIFIED IDEOGRAPH-36DB	[FB80 B6DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_048)
{
    // 36DB 0062;	
    // (㛛) CJK UNIFIED IDEOGRAPH-36DB	[FB80 B6DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_049)
{
    // 36DC 0021;	
    // (㛜) CJK UNIFIED IDEOGRAPH-36DC	[FB80 B6DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_050)
{
    // 36DC 003F;	
    // (㛜) CJK UNIFIED IDEOGRAPH-36DC	[FB80 B6DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_051)
{
    // 36DC 0061;	
    // (㛜) CJK UNIFIED IDEOGRAPH-36DC	[FB80 B6DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_052)
{
    // 36DC 0041;	
    // (㛜) CJK UNIFIED IDEOGRAPH-36DC	[FB80 B6DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_053)
{
    // 36DC 0062;	
    // (㛜) CJK UNIFIED IDEOGRAPH-36DC	[FB80 B6DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_054)
{
    // 36DD 0021;	
    // (㛝) CJK UNIFIED IDEOGRAPH-36DD	[FB80 B6DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_055)
{
    // 36DD 003F;	
    // (㛝) CJK UNIFIED IDEOGRAPH-36DD	[FB80 B6DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_056)
{
    // 36DD 0061;	
    // (㛝) CJK UNIFIED IDEOGRAPH-36DD	[FB80 B6DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_057)
{
    // 36DD 0041;	
    // (㛝) CJK UNIFIED IDEOGRAPH-36DD	[FB80 B6DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_058)
{
    // 36DD 0062;	
    // (㛝) CJK UNIFIED IDEOGRAPH-36DD	[FB80 B6DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_059)
{
    // 36DE 0021;	
    // (㛞) CJK UNIFIED IDEOGRAPH-36DE	[FB80 B6DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_060)
{
    // 36DE 003F;	
    // (㛞) CJK UNIFIED IDEOGRAPH-36DE	[FB80 B6DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_061)
{
    // 36DE 0061;	
    // (㛞) CJK UNIFIED IDEOGRAPH-36DE	[FB80 B6DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_062)
{
    // 36DE 0041;	
    // (㛞) CJK UNIFIED IDEOGRAPH-36DE	[FB80 B6DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_063)
{
    // 36DE 0062;	
    // (㛞) CJK UNIFIED IDEOGRAPH-36DE	[FB80 B6DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_064)
{
    // 36DF 0021;	
    // (㛟) CJK UNIFIED IDEOGRAPH-36DF	[FB80 B6DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_065)
{
    // 36DF 003F;	
    // (㛟) CJK UNIFIED IDEOGRAPH-36DF	[FB80 B6DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_066)
{
    // 36DF 0061;	
    // (㛟) CJK UNIFIED IDEOGRAPH-36DF	[FB80 B6DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_067)
{
    // 36DF 0041;	
    // (㛟) CJK UNIFIED IDEOGRAPH-36DF	[FB80 B6DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_068)
{
    // 36DF 0062;	
    // (㛟) CJK UNIFIED IDEOGRAPH-36DF	[FB80 B6DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_069)
{
    // 36E0 0021;	
    // (㛠) CJK UNIFIED IDEOGRAPH-36E0	[FB80 B6E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_070)
{
    // 36E0 003F;	
    // (㛠) CJK UNIFIED IDEOGRAPH-36E0	[FB80 B6E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_071)
{
    // 36E0 0061;	
    // (㛠) CJK UNIFIED IDEOGRAPH-36E0	[FB80 B6E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_072)
{
    // 36E0 0041;	
    // (㛠) CJK UNIFIED IDEOGRAPH-36E0	[FB80 B6E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_073)
{
    // 36E0 0062;	
    // (㛠) CJK UNIFIED IDEOGRAPH-36E0	[FB80 B6E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_074)
{
    // 36E1 0021;	
    // (㛡) CJK UNIFIED IDEOGRAPH-36E1	[FB80 B6E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_075)
{
    // 36E1 003F;	
    // (㛡) CJK UNIFIED IDEOGRAPH-36E1	[FB80 B6E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_076)
{
    // 36E1 0061;	
    // (㛡) CJK UNIFIED IDEOGRAPH-36E1	[FB80 B6E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_077)
{
    // 36E1 0041;	
    // (㛡) CJK UNIFIED IDEOGRAPH-36E1	[FB80 B6E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_078)
{
    // 36E1 0062;	
    // (㛡) CJK UNIFIED IDEOGRAPH-36E1	[FB80 B6E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_079)
{
    // 36E2 0021;	
    // (㛢) CJK UNIFIED IDEOGRAPH-36E2	[FB80 B6E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_080)
{
    // 36E2 003F;	
    // (㛢) CJK UNIFIED IDEOGRAPH-36E2	[FB80 B6E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_081)
{
    // 36E2 0061;	
    // (㛢) CJK UNIFIED IDEOGRAPH-36E2	[FB80 B6E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_082)
{
    // 36E2 0041;	
    // (㛢) CJK UNIFIED IDEOGRAPH-36E2	[FB80 B6E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_083)
{
    // 36E2 0062;	
    // (㛢) CJK UNIFIED IDEOGRAPH-36E2	[FB80 B6E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_084)
{
    // 36E3 0021;	
    // (㛣) CJK UNIFIED IDEOGRAPH-36E3	[FB80 B6E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_085)
{
    // 36E3 003F;	
    // (㛣) CJK UNIFIED IDEOGRAPH-36E3	[FB80 B6E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_086)
{
    // 36E3 0061;	
    // (㛣) CJK UNIFIED IDEOGRAPH-36E3	[FB80 B6E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_087)
{
    // 36E3 0041;	
    // (㛣) CJK UNIFIED IDEOGRAPH-36E3	[FB80 B6E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_088)
{
    // 36E3 0062;	
    // (㛣) CJK UNIFIED IDEOGRAPH-36E3	[FB80 B6E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_089)
{
    // 36E4 0021;	
    // (㛤) CJK UNIFIED IDEOGRAPH-36E4	[FB80 B6E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_090)
{
    // 36E4 003F;	
    // (㛤) CJK UNIFIED IDEOGRAPH-36E4	[FB80 B6E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_091)
{
    // 36E4 0061;	
    // (㛤) CJK UNIFIED IDEOGRAPH-36E4	[FB80 B6E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_092)
{
    // 36E4 0041;	
    // (㛤) CJK UNIFIED IDEOGRAPH-36E4	[FB80 B6E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_093)
{
    // 36E4 0062;	
    // (㛤) CJK UNIFIED IDEOGRAPH-36E4	[FB80 B6E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_094)
{
    // 36E5 0021;	
    // (㛥) CJK UNIFIED IDEOGRAPH-36E5	[FB80 B6E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_095)
{
    // 36E5 003F;	
    // (㛥) CJK UNIFIED IDEOGRAPH-36E5	[FB80 B6E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_096)
{
    // 36E5 0061;	
    // (㛥) CJK UNIFIED IDEOGRAPH-36E5	[FB80 B6E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_097)
{
    // 36E5 0041;	
    // (㛥) CJK UNIFIED IDEOGRAPH-36E5	[FB80 B6E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_098)
{
    // 36E5 0062;	
    // (㛥) CJK UNIFIED IDEOGRAPH-36E5	[FB80 B6E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_099)
{
    // 36E6 0021;	
    // (㛦) CJK UNIFIED IDEOGRAPH-36E6	[FB80 B6E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_100)
{
    // 36E6 003F;	
    // (㛦) CJK UNIFIED IDEOGRAPH-36E6	[FB80 B6E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_101)
{
    // 36E6 0061;	
    // (㛦) CJK UNIFIED IDEOGRAPH-36E6	[FB80 B6E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_102)
{
    // 36E6 0041;	
    // (㛦) CJK UNIFIED IDEOGRAPH-36E6	[FB80 B6E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_103)
{
    // 36E6 0062;	
    // (㛦) CJK UNIFIED IDEOGRAPH-36E6	[FB80 B6E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_104)
{
    // 36E7 0021;	
    // (㛧) CJK UNIFIED IDEOGRAPH-36E7	[FB80 B6E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_105)
{
    // 36E7 003F;	
    // (㛧) CJK UNIFIED IDEOGRAPH-36E7	[FB80 B6E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_106)
{
    // 36E7 0061;	
    // (㛧) CJK UNIFIED IDEOGRAPH-36E7	[FB80 B6E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_107)
{
    // 36E7 0041;	
    // (㛧) CJK UNIFIED IDEOGRAPH-36E7	[FB80 B6E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_108)
{
    // 36E7 0062;	
    // (㛧) CJK UNIFIED IDEOGRAPH-36E7	[FB80 B6E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_109)
{
    // 36E8 0021;	
    // (㛨) CJK UNIFIED IDEOGRAPH-36E8	[FB80 B6E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_110)
{
    // 36E8 003F;	
    // (㛨) CJK UNIFIED IDEOGRAPH-36E8	[FB80 B6E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_111)
{
    // 36E8 0061;	
    // (㛨) CJK UNIFIED IDEOGRAPH-36E8	[FB80 B6E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_112)
{
    // 36E8 0041;	
    // (㛨) CJK UNIFIED IDEOGRAPH-36E8	[FB80 B6E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_113)
{
    // 36E8 0062;	
    // (㛨) CJK UNIFIED IDEOGRAPH-36E8	[FB80 B6E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_114)
{
    // 36E9 0021;	
    // (㛩) CJK UNIFIED IDEOGRAPH-36E9	[FB80 B6E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_115)
{
    // 36E9 003F;	
    // (㛩) CJK UNIFIED IDEOGRAPH-36E9	[FB80 B6E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_116)
{
    // 36E9 0061;	
    // (㛩) CJK UNIFIED IDEOGRAPH-36E9	[FB80 B6E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_117)
{
    // 36E9 0041;	
    // (㛩) CJK UNIFIED IDEOGRAPH-36E9	[FB80 B6E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_118)
{
    // 36E9 0062;	
    // (㛩) CJK UNIFIED IDEOGRAPH-36E9	[FB80 B6E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_119)
{
    // 36EA 0021;	
    // (㛪) CJK UNIFIED IDEOGRAPH-36EA	[FB80 B6EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_120)
{
    // 36EA 003F;	
    // (㛪) CJK UNIFIED IDEOGRAPH-36EA	[FB80 B6EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_121)
{
    // 36EA 0061;	
    // (㛪) CJK UNIFIED IDEOGRAPH-36EA	[FB80 B6EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_122)
{
    // 36EA 0041;	
    // (㛪) CJK UNIFIED IDEOGRAPH-36EA	[FB80 B6EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_123)
{
    // 36EA 0062;	
    // (㛪) CJK UNIFIED IDEOGRAPH-36EA	[FB80 B6EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_124)
{
    // 36EB 0021;	
    // (㛫) CJK UNIFIED IDEOGRAPH-36EB	[FB80 B6EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_125)
{
    // 36EB 003F;	
    // (㛫) CJK UNIFIED IDEOGRAPH-36EB	[FB80 B6EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_126)
{
    // 36EB 0061;	
    // (㛫) CJK UNIFIED IDEOGRAPH-36EB	[FB80 B6EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_127)
{
    // 36EB 0041;	
    // (㛫) CJK UNIFIED IDEOGRAPH-36EB	[FB80 B6EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_128)
{
    // 36EB 0062;	
    // (㛫) CJK UNIFIED IDEOGRAPH-36EB	[FB80 B6EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_129)
{
    // 36EC 0021;	
    // (㛬) CJK UNIFIED IDEOGRAPH-36EC	[FB80 B6EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_130)
{
    // 36EC 003F;	
    // (㛬) CJK UNIFIED IDEOGRAPH-36EC	[FB80 B6EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_131)
{
    // 36EC 0061;	
    // (㛬) CJK UNIFIED IDEOGRAPH-36EC	[FB80 B6EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_132)
{
    // 36EC 0041;	
    // (㛬) CJK UNIFIED IDEOGRAPH-36EC	[FB80 B6EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_133)
{
    // 36EC 0062;	
    // (㛬) CJK UNIFIED IDEOGRAPH-36EC	[FB80 B6EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_134)
{
    // 36ED 0021;	
    // (㛭) CJK UNIFIED IDEOGRAPH-36ED	[FB80 B6ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_135)
{
    // 36ED 003F;	
    // (㛭) CJK UNIFIED IDEOGRAPH-36ED	[FB80 B6ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_136)
{
    // 36ED 0061;	
    // (㛭) CJK UNIFIED IDEOGRAPH-36ED	[FB80 B6ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_137)
{
    // 36ED 0041;	
    // (㛭) CJK UNIFIED IDEOGRAPH-36ED	[FB80 B6ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_138)
{
    // 36ED 0062;	
    // (㛭) CJK UNIFIED IDEOGRAPH-36ED	[FB80 B6ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_139)
{
    // 36EE 0021;	
    // (㛮) CJK UNIFIED IDEOGRAPH-36EE	[FB80 B6EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_140)
{
    // 2F867 0021;	
    // (㛮) CJK COMPATIBILITY IDEOGRAPH-2F867	[FB80 B6EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F867, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_141)
{
    // 36EE 003F;	
    // (㛮) CJK UNIFIED IDEOGRAPH-36EE	[FB80 B6EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_142)
{
    // 2F867 003F;	
    // (㛮) CJK COMPATIBILITY IDEOGRAPH-2F867	[FB80 B6EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F867, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_143)
{
    // 36EE 0061;	
    // (㛮) CJK UNIFIED IDEOGRAPH-36EE	[FB80 B6EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_144)
{
    // 2F867 0061;	
    // (㛮) CJK COMPATIBILITY IDEOGRAPH-2F867	[FB80 B6EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F867, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_145)
{
    // 36EE 0041;	
    // (㛮) CJK UNIFIED IDEOGRAPH-36EE	[FB80 B6EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_146)
{
    // 2F867 0041;	
    // (㛮) CJK COMPATIBILITY IDEOGRAPH-2F867	[FB80 B6EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F867, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_147)
{
    // 36EE 0062;	
    // (㛮) CJK UNIFIED IDEOGRAPH-36EE	[FB80 B6EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_148)
{
    // 2F867 0062;	
    // (㛮) CJK COMPATIBILITY IDEOGRAPH-2F867	[FB80 B6EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F867, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_149)
{
    // 36EF 0021;	
    // (㛯) CJK UNIFIED IDEOGRAPH-36EF	[FB80 B6EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_150)
{
    // 36EF 003F;	
    // (㛯) CJK UNIFIED IDEOGRAPH-36EF	[FB80 B6EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_151)
{
    // 36EF 0061;	
    // (㛯) CJK UNIFIED IDEOGRAPH-36EF	[FB80 B6EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_152)
{
    // 36EF 0041;	
    // (㛯) CJK UNIFIED IDEOGRAPH-36EF	[FB80 B6EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_153)
{
    // 36EF 0062;	
    // (㛯) CJK UNIFIED IDEOGRAPH-36EF	[FB80 B6EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_154)
{
    // 36F0 0021;	
    // (㛰) CJK UNIFIED IDEOGRAPH-36F0	[FB80 B6F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_155)
{
    // 36F0 003F;	
    // (㛰) CJK UNIFIED IDEOGRAPH-36F0	[FB80 B6F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_156)
{
    // 36F0 0061;	
    // (㛰) CJK UNIFIED IDEOGRAPH-36F0	[FB80 B6F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_157)
{
    // 36F0 0041;	
    // (㛰) CJK UNIFIED IDEOGRAPH-36F0	[FB80 B6F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_158)
{
    // 36F0 0062;	
    // (㛰) CJK UNIFIED IDEOGRAPH-36F0	[FB80 B6F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_159)
{
    // 36F1 0021;	
    // (㛱) CJK UNIFIED IDEOGRAPH-36F1	[FB80 B6F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_160)
{
    // 36F1 003F;	
    // (㛱) CJK UNIFIED IDEOGRAPH-36F1	[FB80 B6F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_161)
{
    // 36F1 0061;	
    // (㛱) CJK UNIFIED IDEOGRAPH-36F1	[FB80 B6F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_162)
{
    // 36F1 0041;	
    // (㛱) CJK UNIFIED IDEOGRAPH-36F1	[FB80 B6F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_163)
{
    // 36F1 0062;	
    // (㛱) CJK UNIFIED IDEOGRAPH-36F1	[FB80 B6F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_164)
{
    // 36F2 0021;	
    // (㛲) CJK UNIFIED IDEOGRAPH-36F2	[FB80 B6F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_165)
{
    // 36F2 003F;	
    // (㛲) CJK UNIFIED IDEOGRAPH-36F2	[FB80 B6F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_166)
{
    // 36F2 0061;	
    // (㛲) CJK UNIFIED IDEOGRAPH-36F2	[FB80 B6F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_167)
{
    // 36F2 0041;	
    // (㛲) CJK UNIFIED IDEOGRAPH-36F2	[FB80 B6F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_168)
{
    // 36F2 0062;	
    // (㛲) CJK UNIFIED IDEOGRAPH-36F2	[FB80 B6F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_169)
{
    // 36F3 0021;	
    // (㛳) CJK UNIFIED IDEOGRAPH-36F3	[FB80 B6F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_170)
{
    // 36F3 003F;	
    // (㛳) CJK UNIFIED IDEOGRAPH-36F3	[FB80 B6F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_171)
{
    // 36F3 0061;	
    // (㛳) CJK UNIFIED IDEOGRAPH-36F3	[FB80 B6F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_172)
{
    // 36F3 0041;	
    // (㛳) CJK UNIFIED IDEOGRAPH-36F3	[FB80 B6F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_173)
{
    // 36F3 0062;	
    // (㛳) CJK UNIFIED IDEOGRAPH-36F3	[FB80 B6F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_174)
{
    // 36F4 0021;	
    // (㛴) CJK UNIFIED IDEOGRAPH-36F4	[FB80 B6F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_175)
{
    // 36F4 003F;	
    // (㛴) CJK UNIFIED IDEOGRAPH-36F4	[FB80 B6F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_176)
{
    // 36F4 0061;	
    // (㛴) CJK UNIFIED IDEOGRAPH-36F4	[FB80 B6F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_177)
{
    // 36F4 0041;	
    // (㛴) CJK UNIFIED IDEOGRAPH-36F4	[FB80 B6F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_178)
{
    // 36F4 0062;	
    // (㛴) CJK UNIFIED IDEOGRAPH-36F4	[FB80 B6F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_179)
{
    // 36F5 0021;	
    // (㛵) CJK UNIFIED IDEOGRAPH-36F5	[FB80 B6F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_180)
{
    // 36F5 003F;	
    // (㛵) CJK UNIFIED IDEOGRAPH-36F5	[FB80 B6F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_181)
{
    // 36F5 0061;	
    // (㛵) CJK UNIFIED IDEOGRAPH-36F5	[FB80 B6F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_182)
{
    // 36F5 0041;	
    // (㛵) CJK UNIFIED IDEOGRAPH-36F5	[FB80 B6F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_183)
{
    // 36F5 0062;	
    // (㛵) CJK UNIFIED IDEOGRAPH-36F5	[FB80 B6F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_184)
{
    // 36F6 0021;	
    // (㛶) CJK UNIFIED IDEOGRAPH-36F6	[FB80 B6F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_185)
{
    // 36F6 003F;	
    // (㛶) CJK UNIFIED IDEOGRAPH-36F6	[FB80 B6F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_186)
{
    // 36F6 0061;	
    // (㛶) CJK UNIFIED IDEOGRAPH-36F6	[FB80 B6F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_187)
{
    // 36F6 0041;	
    // (㛶) CJK UNIFIED IDEOGRAPH-36F6	[FB80 B6F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_188)
{
    // 36F6 0062;	
    // (㛶) CJK UNIFIED IDEOGRAPH-36F6	[FB80 B6F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_189)
{
    // 36F7 0021;	
    // (㛷) CJK UNIFIED IDEOGRAPH-36F7	[FB80 B6F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_190)
{
    // 36F7 003F;	
    // (㛷) CJK UNIFIED IDEOGRAPH-36F7	[FB80 B6F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_191)
{
    // 36F7 0061;	
    // (㛷) CJK UNIFIED IDEOGRAPH-36F7	[FB80 B6F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_192)
{
    // 36F7 0041;	
    // (㛷) CJK UNIFIED IDEOGRAPH-36F7	[FB80 B6F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_193)
{
    // 36F7 0062;	
    // (㛷) CJK UNIFIED IDEOGRAPH-36F7	[FB80 B6F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_194)
{
    // 36F8 0021;	
    // (㛸) CJK UNIFIED IDEOGRAPH-36F8	[FB80 B6F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_195)
{
    // 36F8 003F;	
    // (㛸) CJK UNIFIED IDEOGRAPH-36F8	[FB80 B6F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_196)
{
    // 36F8 0061;	
    // (㛸) CJK UNIFIED IDEOGRAPH-36F8	[FB80 B6F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_197)
{
    // 36F8 0041;	
    // (㛸) CJK UNIFIED IDEOGRAPH-36F8	[FB80 B6F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_198)
{
    // 36F8 0062;	
    // (㛸) CJK UNIFIED IDEOGRAPH-36F8	[FB80 B6F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_199)
{
    // 36F9 0021;	
    // (㛹) CJK UNIFIED IDEOGRAPH-36F9	[FB80 B6F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_200)
{
    // 36F9 003F;	
    // (㛹) CJK UNIFIED IDEOGRAPH-36F9	[FB80 B6F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_201)
{
    // 36F9 0061;	
    // (㛹) CJK UNIFIED IDEOGRAPH-36F9	[FB80 B6F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_202)
{
    // 36F9 0041;	
    // (㛹) CJK UNIFIED IDEOGRAPH-36F9	[FB80 B6F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_203)
{
    // 36F9 0062;	
    // (㛹) CJK UNIFIED IDEOGRAPH-36F9	[FB80 B6F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_204)
{
    // 36FA 0021;	
    // (㛺) CJK UNIFIED IDEOGRAPH-36FA	[FB80 B6FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_205)
{
    // 36FA 003F;	
    // (㛺) CJK UNIFIED IDEOGRAPH-36FA	[FB80 B6FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_206)
{
    // 36FA 0061;	
    // (㛺) CJK UNIFIED IDEOGRAPH-36FA	[FB80 B6FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_207)
{
    // 36FA 0041;	
    // (㛺) CJK UNIFIED IDEOGRAPH-36FA	[FB80 B6FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_208)
{
    // 36FA 0062;	
    // (㛺) CJK UNIFIED IDEOGRAPH-36FA	[FB80 B6FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_209)
{
    // 36FB 0021;	
    // (㛻) CJK UNIFIED IDEOGRAPH-36FB	[FB80 B6FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_210)
{
    // 36FB 003F;	
    // (㛻) CJK UNIFIED IDEOGRAPH-36FB	[FB80 B6FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_211)
{
    // 36FB 0061;	
    // (㛻) CJK UNIFIED IDEOGRAPH-36FB	[FB80 B6FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_212)
{
    // 36FB 0041;	
    // (㛻) CJK UNIFIED IDEOGRAPH-36FB	[FB80 B6FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_213)
{
    // 36FB 0062;	
    // (㛻) CJK UNIFIED IDEOGRAPH-36FB	[FB80 B6FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_214)
{
    // 36FC 0021;	
    // (㛼) CJK UNIFIED IDEOGRAPH-36FC	[FB80 B6FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_215)
{
    // 2F868 0021;	
    // (㛼) CJK COMPATIBILITY IDEOGRAPH-2F868	[FB80 B6FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F868, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_216)
{
    // 36FC 003F;	
    // (㛼) CJK UNIFIED IDEOGRAPH-36FC	[FB80 B6FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_217)
{
    // 2F868 003F;	
    // (㛼) CJK COMPATIBILITY IDEOGRAPH-2F868	[FB80 B6FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F868, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_218)
{
    // 36FC 0061;	
    // (㛼) CJK UNIFIED IDEOGRAPH-36FC	[FB80 B6FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_219)
{
    // 2F868 0061;	
    // (㛼) CJK COMPATIBILITY IDEOGRAPH-2F868	[FB80 B6FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F868, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_220)
{
    // 36FC 0041;	
    // (㛼) CJK UNIFIED IDEOGRAPH-36FC	[FB80 B6FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_221)
{
    // 2F868 0041;	
    // (㛼) CJK COMPATIBILITY IDEOGRAPH-2F868	[FB80 B6FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F868, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_222)
{
    // 36FC 0062;	
    // (㛼) CJK UNIFIED IDEOGRAPH-36FC	[FB80 B6FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_223)
{
    // 2F868 0062;	
    // (㛼) CJK COMPATIBILITY IDEOGRAPH-2F868	[FB80 B6FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F868, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_224)
{
    // 36FD 0021;	
    // (㛽) CJK UNIFIED IDEOGRAPH-36FD	[FB80 B6FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_225)
{
    // 36FD 003F;	
    // (㛽) CJK UNIFIED IDEOGRAPH-36FD	[FB80 B6FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_226)
{
    // 36FD 0061;	
    // (㛽) CJK UNIFIED IDEOGRAPH-36FD	[FB80 B6FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_227)
{
    // 36FD 0041;	
    // (㛽) CJK UNIFIED IDEOGRAPH-36FD	[FB80 B6FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_228)
{
    // 36FD 0062;	
    // (㛽) CJK UNIFIED IDEOGRAPH-36FD	[FB80 B6FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_229)
{
    // 36FE 0021;	
    // (㛾) CJK UNIFIED IDEOGRAPH-36FE	[FB80 B6FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_230)
{
    // 36FE 003F;	
    // (㛾) CJK UNIFIED IDEOGRAPH-36FE	[FB80 B6FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_231)
{
    // 36FE 0061;	
    // (㛾) CJK UNIFIED IDEOGRAPH-36FE	[FB80 B6FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_232)
{
    // 36FE 0041;	
    // (㛾) CJK UNIFIED IDEOGRAPH-36FE	[FB80 B6FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_233)
{
    // 36FE 0062;	
    // (㛾) CJK UNIFIED IDEOGRAPH-36FE	[FB80 B6FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_234)
{
    // 36FF 0021;	
    // (㛿) CJK UNIFIED IDEOGRAPH-36FF	[FB80 B6FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_235)
{
    // 36FF 003F;	
    // (㛿) CJK UNIFIED IDEOGRAPH-36FF	[FB80 B6FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_236)
{
    // 36FF 0061;	
    // (㛿) CJK UNIFIED IDEOGRAPH-36FF	[FB80 B6FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_237)
{
    // 36FF 0041;	
    // (㛿) CJK UNIFIED IDEOGRAPH-36FF	[FB80 B6FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_238)
{
    // 36FF 0062;	
    // (㛿) CJK UNIFIED IDEOGRAPH-36FF	[FB80 B6FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_239)
{
    // 3700 0021;	
    // (㜀) CJK UNIFIED IDEOGRAPH-3700	[FB80 B700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3700, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_240)
{
    // 3700 003F;	
    // (㜀) CJK UNIFIED IDEOGRAPH-3700	[FB80 B700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3700, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_241)
{
    // 3700 0061;	
    // (㜀) CJK UNIFIED IDEOGRAPH-3700	[FB80 B700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3700, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_242)
{
    // 3700 0041;	
    // (㜀) CJK UNIFIED IDEOGRAPH-3700	[FB80 B700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3700, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_243)
{
    // 3700 0062;	
    // (㜀) CJK UNIFIED IDEOGRAPH-3700	[FB80 B700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3700, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_244)
{
    // 3701 0021;	
    // (㜁) CJK UNIFIED IDEOGRAPH-3701	[FB80 B701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3701, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_245)
{
    // 3701 003F;	
    // (㜁) CJK UNIFIED IDEOGRAPH-3701	[FB80 B701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3701, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_246)
{
    // 3701 0061;	
    // (㜁) CJK UNIFIED IDEOGRAPH-3701	[FB80 B701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3701, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_247)
{
    // 3701 0041;	
    // (㜁) CJK UNIFIED IDEOGRAPH-3701	[FB80 B701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3701, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_248)
{
    // 3701 0062;	
    // (㜁) CJK UNIFIED IDEOGRAPH-3701	[FB80 B701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3701, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_249)
{
    // 3702 0021;	
    // (㜂) CJK UNIFIED IDEOGRAPH-3702	[FB80 B702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3702, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_250)
{
    // 3702 003F;	
    // (㜂) CJK UNIFIED IDEOGRAPH-3702	[FB80 B702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3702, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_251)
{
    // 3702 0061;	
    // (㜂) CJK UNIFIED IDEOGRAPH-3702	[FB80 B702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3702, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_252)
{
    // 3702 0041;	
    // (㜂) CJK UNIFIED IDEOGRAPH-3702	[FB80 B702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3702, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_253)
{
    // 3702 0062;	
    // (㜂) CJK UNIFIED IDEOGRAPH-3702	[FB80 B702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3702, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_254)
{
    // 3703 0021;	
    // (㜃) CJK UNIFIED IDEOGRAPH-3703	[FB80 B703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3703, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_255)
{
    // 3703 003F;	
    // (㜃) CJK UNIFIED IDEOGRAPH-3703	[FB80 B703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3703, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_256)
{
    // 3703 0061;	
    // (㜃) CJK UNIFIED IDEOGRAPH-3703	[FB80 B703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3703, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_257)
{
    // 3703 0041;	
    // (㜃) CJK UNIFIED IDEOGRAPH-3703	[FB80 B703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3703, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_258)
{
    // 3703 0062;	
    // (㜃) CJK UNIFIED IDEOGRAPH-3703	[FB80 B703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3703, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_259)
{
    // 3704 0021;	
    // (㜄) CJK UNIFIED IDEOGRAPH-3704	[FB80 B704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3704, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_260)
{
    // 3704 003F;	
    // (㜄) CJK UNIFIED IDEOGRAPH-3704	[FB80 B704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3704, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_261)
{
    // 3704 0061;	
    // (㜄) CJK UNIFIED IDEOGRAPH-3704	[FB80 B704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3704, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_262)
{
    // 3704 0041;	
    // (㜄) CJK UNIFIED IDEOGRAPH-3704	[FB80 B704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3704, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_263)
{
    // 3704 0062;	
    // (㜄) CJK UNIFIED IDEOGRAPH-3704	[FB80 B704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3704, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_264)
{
    // 3705 0021;	
    // (㜅) CJK UNIFIED IDEOGRAPH-3705	[FB80 B705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3705, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_265)
{
    // 3705 003F;	
    // (㜅) CJK UNIFIED IDEOGRAPH-3705	[FB80 B705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3705, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_266)
{
    // 3705 0061;	
    // (㜅) CJK UNIFIED IDEOGRAPH-3705	[FB80 B705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3705, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_267)
{
    // 3705 0041;	
    // (㜅) CJK UNIFIED IDEOGRAPH-3705	[FB80 B705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3705, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_268)
{
    // 3705 0062;	
    // (㜅) CJK UNIFIED IDEOGRAPH-3705	[FB80 B705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3705, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_269)
{
    // 3706 0021;	
    // (㜆) CJK UNIFIED IDEOGRAPH-3706	[FB80 B706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3706, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_270)
{
    // 3706 003F;	
    // (㜆) CJK UNIFIED IDEOGRAPH-3706	[FB80 B706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3706, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_271)
{
    // 3706 0061;	
    // (㜆) CJK UNIFIED IDEOGRAPH-3706	[FB80 B706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3706, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_272)
{
    // 3706 0041;	
    // (㜆) CJK UNIFIED IDEOGRAPH-3706	[FB80 B706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3706, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_273)
{
    // 3706 0062;	
    // (㜆) CJK UNIFIED IDEOGRAPH-3706	[FB80 B706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3706, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_274)
{
    // 3707 0021;	
    // (㜇) CJK UNIFIED IDEOGRAPH-3707	[FB80 B707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3707, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_275)
{
    // 3707 003F;	
    // (㜇) CJK UNIFIED IDEOGRAPH-3707	[FB80 B707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3707, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_276)
{
    // 3707 0061;	
    // (㜇) CJK UNIFIED IDEOGRAPH-3707	[FB80 B707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3707, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_277)
{
    // 3707 0041;	
    // (㜇) CJK UNIFIED IDEOGRAPH-3707	[FB80 B707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3707, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_278)
{
    // 3707 0062;	
    // (㜇) CJK UNIFIED IDEOGRAPH-3707	[FB80 B707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3707, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_279)
{
    // 3708 0021;	
    // (㜈) CJK UNIFIED IDEOGRAPH-3708	[FB80 B708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3708, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_280)
{
    // 3708 003F;	
    // (㜈) CJK UNIFIED IDEOGRAPH-3708	[FB80 B708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3708, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_281)
{
    // 3708 0061;	
    // (㜈) CJK UNIFIED IDEOGRAPH-3708	[FB80 B708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3708, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_282)
{
    // 3708 0041;	
    // (㜈) CJK UNIFIED IDEOGRAPH-3708	[FB80 B708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3708, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_283)
{
    // 3708 0062;	
    // (㜈) CJK UNIFIED IDEOGRAPH-3708	[FB80 B708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3708, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_284)
{
    // 3709 0021;	
    // (㜉) CJK UNIFIED IDEOGRAPH-3709	[FB80 B709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3709, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_285)
{
    // 3709 003F;	
    // (㜉) CJK UNIFIED IDEOGRAPH-3709	[FB80 B709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3709, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_286)
{
    // 3709 0061;	
    // (㜉) CJK UNIFIED IDEOGRAPH-3709	[FB80 B709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3709, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_287)
{
    // 3709 0041;	
    // (㜉) CJK UNIFIED IDEOGRAPH-3709	[FB80 B709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3709, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_288)
{
    // 3709 0062;	
    // (㜉) CJK UNIFIED IDEOGRAPH-3709	[FB80 B709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3709, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_289)
{
    // 370A 0021;	
    // (㜊) CJK UNIFIED IDEOGRAPH-370A	[FB80 B70A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_290)
{
    // 370A 003F;	
    // (㜊) CJK UNIFIED IDEOGRAPH-370A	[FB80 B70A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_291)
{
    // 370A 0061;	
    // (㜊) CJK UNIFIED IDEOGRAPH-370A	[FB80 B70A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_292)
{
    // 370A 0041;	
    // (㜊) CJK UNIFIED IDEOGRAPH-370A	[FB80 B70A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_293)
{
    // 370A 0062;	
    // (㜊) CJK UNIFIED IDEOGRAPH-370A	[FB80 B70A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_294)
{
    // 370B 0021;	
    // (㜋) CJK UNIFIED IDEOGRAPH-370B	[FB80 B70B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_295)
{
    // 370B 003F;	
    // (㜋) CJK UNIFIED IDEOGRAPH-370B	[FB80 B70B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_296)
{
    // 370B 0061;	
    // (㜋) CJK UNIFIED IDEOGRAPH-370B	[FB80 B70B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_297)
{
    // 370B 0041;	
    // (㜋) CJK UNIFIED IDEOGRAPH-370B	[FB80 B70B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_298)
{
    // 370B 0062;	
    // (㜋) CJK UNIFIED IDEOGRAPH-370B	[FB80 B70B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_299)
{
    // 370C 0021;	
    // (㜌) CJK UNIFIED IDEOGRAPH-370C	[FB80 B70C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_300)
{
    // 370C 003F;	
    // (㜌) CJK UNIFIED IDEOGRAPH-370C	[FB80 B70C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_301)
{
    // 370C 0061;	
    // (㜌) CJK UNIFIED IDEOGRAPH-370C	[FB80 B70C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_302)
{
    // 370C 0041;	
    // (㜌) CJK UNIFIED IDEOGRAPH-370C	[FB80 B70C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_303)
{
    // 370C 0062;	
    // (㜌) CJK UNIFIED IDEOGRAPH-370C	[FB80 B70C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_304)
{
    // 370D 0021;	
    // (㜍) CJK UNIFIED IDEOGRAPH-370D	[FB80 B70D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_305)
{
    // 370D 003F;	
    // (㜍) CJK UNIFIED IDEOGRAPH-370D	[FB80 B70D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_306)
{
    // 370D 0061;	
    // (㜍) CJK UNIFIED IDEOGRAPH-370D	[FB80 B70D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_307)
{
    // 370D 0041;	
    // (㜍) CJK UNIFIED IDEOGRAPH-370D	[FB80 B70D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_308)
{
    // 370D 0062;	
    // (㜍) CJK UNIFIED IDEOGRAPH-370D	[FB80 B70D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_309)
{
    // 370E 0021;	
    // (㜎) CJK UNIFIED IDEOGRAPH-370E	[FB80 B70E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_310)
{
    // 370E 003F;	
    // (㜎) CJK UNIFIED IDEOGRAPH-370E	[FB80 B70E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_311)
{
    // 370E 0061;	
    // (㜎) CJK UNIFIED IDEOGRAPH-370E	[FB80 B70E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_312)
{
    // 370E 0041;	
    // (㜎) CJK UNIFIED IDEOGRAPH-370E	[FB80 B70E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_313)
{
    // 370E 0062;	
    // (㜎) CJK UNIFIED IDEOGRAPH-370E	[FB80 B70E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_314)
{
    // 370F 0021;	
    // (㜏) CJK UNIFIED IDEOGRAPH-370F	[FB80 B70F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB70F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_315)
{
    // 370F 003F;	
    // (㜏) CJK UNIFIED IDEOGRAPH-370F	[FB80 B70F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB70F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_316)
{
    // 370F 0061;	
    // (㜏) CJK UNIFIED IDEOGRAPH-370F	[FB80 B70F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB70F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_317)
{
    // 370F 0041;	
    // (㜏) CJK UNIFIED IDEOGRAPH-370F	[FB80 B70F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x370F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB70F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_318)
{
    // 370F 0062;	
    // (㜏) CJK UNIFIED IDEOGRAPH-370F	[FB80 B70F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x370F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB70F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_319)
{
    // 3710 0021;	
    // (㜐) CJK UNIFIED IDEOGRAPH-3710	[FB80 B710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3710, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_320)
{
    // 3710 003F;	
    // (㜐) CJK UNIFIED IDEOGRAPH-3710	[FB80 B710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3710, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_321)
{
    // 3710 0061;	
    // (㜐) CJK UNIFIED IDEOGRAPH-3710	[FB80 B710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3710, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_322)
{
    // 3710 0041;	
    // (㜐) CJK UNIFIED IDEOGRAPH-3710	[FB80 B710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3710, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_323)
{
    // 3710 0062;	
    // (㜐) CJK UNIFIED IDEOGRAPH-3710	[FB80 B710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3710, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_324)
{
    // 3711 0021;	
    // (㜑) CJK UNIFIED IDEOGRAPH-3711	[FB80 B711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3711, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_325)
{
    // 3711 003F;	
    // (㜑) CJK UNIFIED IDEOGRAPH-3711	[FB80 B711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3711, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_326)
{
    // 3711 0061;	
    // (㜑) CJK UNIFIED IDEOGRAPH-3711	[FB80 B711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3711, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_327)
{
    // 3711 0041;	
    // (㜑) CJK UNIFIED IDEOGRAPH-3711	[FB80 B711 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3711, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_328)
{
    // 3711 0062;	
    // (㜑) CJK UNIFIED IDEOGRAPH-3711	[FB80 B711 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3711, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB711, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_329)
{
    // 3712 0021;	
    // (㜒) CJK UNIFIED IDEOGRAPH-3712	[FB80 B712 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3712, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_330)
{
    // 3712 003F;	
    // (㜒) CJK UNIFIED IDEOGRAPH-3712	[FB80 B712 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3712, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_331)
{
    // 3712 0061;	
    // (㜒) CJK UNIFIED IDEOGRAPH-3712	[FB80 B712 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3712, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_332)
{
    // 3712 0041;	
    // (㜒) CJK UNIFIED IDEOGRAPH-3712	[FB80 B712 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3712, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_333)
{
    // 3712 0062;	
    // (㜒) CJK UNIFIED IDEOGRAPH-3712	[FB80 B712 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3712, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_334)
{
    // 3713 0021;	
    // (㜓) CJK UNIFIED IDEOGRAPH-3713	[FB80 B713 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3713, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB713, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_335)
{
    // 3713 003F;	
    // (㜓) CJK UNIFIED IDEOGRAPH-3713	[FB80 B713 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3713, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB713, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_336)
{
    // 3713 0061;	
    // (㜓) CJK UNIFIED IDEOGRAPH-3713	[FB80 B713 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3713, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_337)
{
    // 3713 0041;	
    // (㜓) CJK UNIFIED IDEOGRAPH-3713	[FB80 B713 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3713, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_338)
{
    // 3713 0062;	
    // (㜓) CJK UNIFIED IDEOGRAPH-3713	[FB80 B713 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3713, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB713, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_339)
{
    // 3714 0021;	
    // (㜔) CJK UNIFIED IDEOGRAPH-3714	[FB80 B714 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3714, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB714, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_340)
{
    // 3714 003F;	
    // (㜔) CJK UNIFIED IDEOGRAPH-3714	[FB80 B714 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3714, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB714, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_341)
{
    // 3714 0061;	
    // (㜔) CJK UNIFIED IDEOGRAPH-3714	[FB80 B714 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3714, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_342)
{
    // 3714 0041;	
    // (㜔) CJK UNIFIED IDEOGRAPH-3714	[FB80 B714 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3714, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_343)
{
    // 3714 0062;	
    // (㜔) CJK UNIFIED IDEOGRAPH-3714	[FB80 B714 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3714, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB714, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_344)
{
    // 3715 0021;	
    // (㜕) CJK UNIFIED IDEOGRAPH-3715	[FB80 B715 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3715, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_345)
{
    // 3715 003F;	
    // (㜕) CJK UNIFIED IDEOGRAPH-3715	[FB80 B715 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3715, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_346)
{
    // 3715 0061;	
    // (㜕) CJK UNIFIED IDEOGRAPH-3715	[FB80 B715 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3715, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_347)
{
    // 3715 0041;	
    // (㜕) CJK UNIFIED IDEOGRAPH-3715	[FB80 B715 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3715, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_348)
{
    // 3715 0062;	
    // (㜕) CJK UNIFIED IDEOGRAPH-3715	[FB80 B715 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3715, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_349)
{
    // 3716 0021;	
    // (㜖) CJK UNIFIED IDEOGRAPH-3716	[FB80 B716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3716, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_350)
{
    // 3716 003F;	
    // (㜖) CJK UNIFIED IDEOGRAPH-3716	[FB80 B716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3716, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_351)
{
    // 3716 0061;	
    // (㜖) CJK UNIFIED IDEOGRAPH-3716	[FB80 B716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3716, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_352)
{
    // 3716 0041;	
    // (㜖) CJK UNIFIED IDEOGRAPH-3716	[FB80 B716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3716, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_353)
{
    // 3716 0062;	
    // (㜖) CJK UNIFIED IDEOGRAPH-3716	[FB80 B716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3716, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_354)
{
    // 3717 0021;	
    // (㜗) CJK UNIFIED IDEOGRAPH-3717	[FB80 B717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3717, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_355)
{
    // 3717 003F;	
    // (㜗) CJK UNIFIED IDEOGRAPH-3717	[FB80 B717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3717, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_356)
{
    // 3717 0061;	
    // (㜗) CJK UNIFIED IDEOGRAPH-3717	[FB80 B717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3717, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_357)
{
    // 3717 0041;	
    // (㜗) CJK UNIFIED IDEOGRAPH-3717	[FB80 B717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3717, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_358)
{
    // 3717 0062;	
    // (㜗) CJK UNIFIED IDEOGRAPH-3717	[FB80 B717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3717, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_359)
{
    // 3718 0021;	
    // (㜘) CJK UNIFIED IDEOGRAPH-3718	[FB80 B718 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3718, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB718, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_360)
{
    // 3718 003F;	
    // (㜘) CJK UNIFIED IDEOGRAPH-3718	[FB80 B718 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3718, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB718, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_361)
{
    // 3718 0061;	
    // (㜘) CJK UNIFIED IDEOGRAPH-3718	[FB80 B718 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3718, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_362)
{
    // 3718 0041;	
    // (㜘) CJK UNIFIED IDEOGRAPH-3718	[FB80 B718 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3718, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_363)
{
    // 3718 0062;	
    // (㜘) CJK UNIFIED IDEOGRAPH-3718	[FB80 B718 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3718, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB718, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_364)
{
    // 3719 0021;	
    // (㜙) CJK UNIFIED IDEOGRAPH-3719	[FB80 B719 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3719, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB719, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_365)
{
    // 3719 003F;	
    // (㜙) CJK UNIFIED IDEOGRAPH-3719	[FB80 B719 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3719, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB719, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_366)
{
    // 3719 0061;	
    // (㜙) CJK UNIFIED IDEOGRAPH-3719	[FB80 B719 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3719, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_367)
{
    // 3719 0041;	
    // (㜙) CJK UNIFIED IDEOGRAPH-3719	[FB80 B719 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3719, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_368)
{
    // 3719 0062;	
    // (㜙) CJK UNIFIED IDEOGRAPH-3719	[FB80 B719 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3719, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB719, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_369)
{
    // 371A 0021;	
    // (㜚) CJK UNIFIED IDEOGRAPH-371A	[FB80 B71A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_370)
{
    // 371A 003F;	
    // (㜚) CJK UNIFIED IDEOGRAPH-371A	[FB80 B71A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_371)
{
    // 371A 0061;	
    // (㜚) CJK UNIFIED IDEOGRAPH-371A	[FB80 B71A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_372)
{
    // 371A 0041;	
    // (㜚) CJK UNIFIED IDEOGRAPH-371A	[FB80 B71A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_373)
{
    // 371A 0062;	
    // (㜚) CJK UNIFIED IDEOGRAPH-371A	[FB80 B71A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_374)
{
    // 371B 0021;	
    // (㜛) CJK UNIFIED IDEOGRAPH-371B	[FB80 B71B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_375)
{
    // 371B 003F;	
    // (㜛) CJK UNIFIED IDEOGRAPH-371B	[FB80 B71B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_376)
{
    // 371B 0061;	
    // (㜛) CJK UNIFIED IDEOGRAPH-371B	[FB80 B71B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_377)
{
    // 371B 0041;	
    // (㜛) CJK UNIFIED IDEOGRAPH-371B	[FB80 B71B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_378)
{
    // 371B 0062;	
    // (㜛) CJK UNIFIED IDEOGRAPH-371B	[FB80 B71B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_379)
{
    // 371C 0021;	
    // (㜜) CJK UNIFIED IDEOGRAPH-371C	[FB80 B71C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_380)
{
    // 371C 003F;	
    // (㜜) CJK UNIFIED IDEOGRAPH-371C	[FB80 B71C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_381)
{
    // 371C 0061;	
    // (㜜) CJK UNIFIED IDEOGRAPH-371C	[FB80 B71C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_382)
{
    // 371C 0041;	
    // (㜜) CJK UNIFIED IDEOGRAPH-371C	[FB80 B71C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_383)
{
    // 371C 0062;	
    // (㜜) CJK UNIFIED IDEOGRAPH-371C	[FB80 B71C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_384)
{
    // 371D 0021;	
    // (㜝) CJK UNIFIED IDEOGRAPH-371D	[FB80 B71D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_385)
{
    // 371D 003F;	
    // (㜝) CJK UNIFIED IDEOGRAPH-371D	[FB80 B71D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_386)
{
    // 371D 0061;	
    // (㜝) CJK UNIFIED IDEOGRAPH-371D	[FB80 B71D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_387)
{
    // 371D 0041;	
    // (㜝) CJK UNIFIED IDEOGRAPH-371D	[FB80 B71D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_388)
{
    // 371D 0062;	
    // (㜝) CJK UNIFIED IDEOGRAPH-371D	[FB80 B71D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_389)
{
    // 371E 0021;	
    // (㜞) CJK UNIFIED IDEOGRAPH-371E	[FB80 B71E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_390)
{
    // 371E 003F;	
    // (㜞) CJK UNIFIED IDEOGRAPH-371E	[FB80 B71E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_391)
{
    // 371E 0061;	
    // (㜞) CJK UNIFIED IDEOGRAPH-371E	[FB80 B71E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_392)
{
    // 371E 0041;	
    // (㜞) CJK UNIFIED IDEOGRAPH-371E	[FB80 B71E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_393)
{
    // 371E 0062;	
    // (㜞) CJK UNIFIED IDEOGRAPH-371E	[FB80 B71E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_394)
{
    // 371F 0021;	
    // (㜟) CJK UNIFIED IDEOGRAPH-371F	[FB80 B71F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB71F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_395)
{
    // 371F 003F;	
    // (㜟) CJK UNIFIED IDEOGRAPH-371F	[FB80 B71F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB71F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_396)
{
    // 371F 0061;	
    // (㜟) CJK UNIFIED IDEOGRAPH-371F	[FB80 B71F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_397)
{
    // 371F 0041;	
    // (㜟) CJK UNIFIED IDEOGRAPH-371F	[FB80 B71F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x371F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_398)
{
    // 371F 0062;	
    // (㜟) CJK UNIFIED IDEOGRAPH-371F	[FB80 B71F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x371F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB71F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_399)
{
    // 3720 0021;	
    // (㜠) CJK UNIFIED IDEOGRAPH-3720	[FB80 B720 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3720, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB720, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_400)
{
    // 3720 003F;	
    // (㜠) CJK UNIFIED IDEOGRAPH-3720	[FB80 B720 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3720, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB720, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_401)
{
    // 3720 0061;	
    // (㜠) CJK UNIFIED IDEOGRAPH-3720	[FB80 B720 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3720, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_402)
{
    // 3720 0041;	
    // (㜠) CJK UNIFIED IDEOGRAPH-3720	[FB80 B720 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3720, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_403)
{
    // 3720 0062;	
    // (㜠) CJK UNIFIED IDEOGRAPH-3720	[FB80 B720 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3720, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB720, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_404)
{
    // 3721 0021;	
    // (㜡) CJK UNIFIED IDEOGRAPH-3721	[FB80 B721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3721, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_405)
{
    // 3721 003F;	
    // (㜡) CJK UNIFIED IDEOGRAPH-3721	[FB80 B721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3721, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_406)
{
    // 3721 0061;	
    // (㜡) CJK UNIFIED IDEOGRAPH-3721	[FB80 B721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3721, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_407)
{
    // 3721 0041;	
    // (㜡) CJK UNIFIED IDEOGRAPH-3721	[FB80 B721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3721, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_408)
{
    // 3721 0062;	
    // (㜡) CJK UNIFIED IDEOGRAPH-3721	[FB80 B721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3721, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_409)
{
    // 3722 0021;	
    // (㜢) CJK UNIFIED IDEOGRAPH-3722	[FB80 B722 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3722, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB722, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_410)
{
    // 3722 003F;	
    // (㜢) CJK UNIFIED IDEOGRAPH-3722	[FB80 B722 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3722, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB722, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_411)
{
    // 3722 0061;	
    // (㜢) CJK UNIFIED IDEOGRAPH-3722	[FB80 B722 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3722, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_412)
{
    // 3722 0041;	
    // (㜢) CJK UNIFIED IDEOGRAPH-3722	[FB80 B722 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3722, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_413)
{
    // 3722 0062;	
    // (㜢) CJK UNIFIED IDEOGRAPH-3722	[FB80 B722 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3722, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB722, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_414)
{
    // 3723 0021;	
    // (㜣) CJK UNIFIED IDEOGRAPH-3723	[FB80 B723 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3723, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB723, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_415)
{
    // 3723 003F;	
    // (㜣) CJK UNIFIED IDEOGRAPH-3723	[FB80 B723 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3723, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB723, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_416)
{
    // 3723 0061;	
    // (㜣) CJK UNIFIED IDEOGRAPH-3723	[FB80 B723 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3723, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_417)
{
    // 3723 0041;	
    // (㜣) CJK UNIFIED IDEOGRAPH-3723	[FB80 B723 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3723, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_418)
{
    // 3723 0062;	
    // (㜣) CJK UNIFIED IDEOGRAPH-3723	[FB80 B723 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3723, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB723, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_419)
{
    // 3724 0021;	
    // (㜤) CJK UNIFIED IDEOGRAPH-3724	[FB80 B724 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3724, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB724, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_420)
{
    // 3724 003F;	
    // (㜤) CJK UNIFIED IDEOGRAPH-3724	[FB80 B724 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3724, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB724, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_421)
{
    // 3724 0061;	
    // (㜤) CJK UNIFIED IDEOGRAPH-3724	[FB80 B724 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3724, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_422)
{
    // 3724 0041;	
    // (㜤) CJK UNIFIED IDEOGRAPH-3724	[FB80 B724 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3724, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_423)
{
    // 3724 0062;	
    // (㜤) CJK UNIFIED IDEOGRAPH-3724	[FB80 B724 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3724, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB724, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_424)
{
    // 3725 0021;	
    // (㜥) CJK UNIFIED IDEOGRAPH-3725	[FB80 B725 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3725, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB725, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_425)
{
    // 3725 003F;	
    // (㜥) CJK UNIFIED IDEOGRAPH-3725	[FB80 B725 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3725, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB725, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_426)
{
    // 3725 0061;	
    // (㜥) CJK UNIFIED IDEOGRAPH-3725	[FB80 B725 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3725, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_427)
{
    // 3725 0041;	
    // (㜥) CJK UNIFIED IDEOGRAPH-3725	[FB80 B725 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3725, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_428)
{
    // 3725 0062;	
    // (㜥) CJK UNIFIED IDEOGRAPH-3725	[FB80 B725 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3725, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB725, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_429)
{
    // 3726 0021;	
    // (㜦) CJK UNIFIED IDEOGRAPH-3726	[FB80 B726 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3726, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB726, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_430)
{
    // 3726 003F;	
    // (㜦) CJK UNIFIED IDEOGRAPH-3726	[FB80 B726 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3726, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB726, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_431)
{
    // 3726 0061;	
    // (㜦) CJK UNIFIED IDEOGRAPH-3726	[FB80 B726 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3726, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_432)
{
    // 3726 0041;	
    // (㜦) CJK UNIFIED IDEOGRAPH-3726	[FB80 B726 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3726, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_433)
{
    // 3726 0062;	
    // (㜦) CJK UNIFIED IDEOGRAPH-3726	[FB80 B726 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3726, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB726, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_434)
{
    // 3727 0021;	
    // (㜧) CJK UNIFIED IDEOGRAPH-3727	[FB80 B727 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3727, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB727, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_435)
{
    // 3727 003F;	
    // (㜧) CJK UNIFIED IDEOGRAPH-3727	[FB80 B727 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3727, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB727, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_436)
{
    // 3727 0061;	
    // (㜧) CJK UNIFIED IDEOGRAPH-3727	[FB80 B727 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3727, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_437)
{
    // 3727 0041;	
    // (㜧) CJK UNIFIED IDEOGRAPH-3727	[FB80 B727 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3727, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_438)
{
    // 3727 0062;	
    // (㜧) CJK UNIFIED IDEOGRAPH-3727	[FB80 B727 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3727, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB727, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_439)
{
    // 3728 0021;	
    // (㜨) CJK UNIFIED IDEOGRAPH-3728	[FB80 B728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3728, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_440)
{
    // 3728 003F;	
    // (㜨) CJK UNIFIED IDEOGRAPH-3728	[FB80 B728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3728, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_441)
{
    // 3728 0061;	
    // (㜨) CJK UNIFIED IDEOGRAPH-3728	[FB80 B728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3728, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_442)
{
    // 3728 0041;	
    // (㜨) CJK UNIFIED IDEOGRAPH-3728	[FB80 B728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3728, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_443)
{
    // 3728 0062;	
    // (㜨) CJK UNIFIED IDEOGRAPH-3728	[FB80 B728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3728, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_444)
{
    // 3729 0021;	
    // (㜩) CJK UNIFIED IDEOGRAPH-3729	[FB80 B729 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3729, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB729, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_445)
{
    // 3729 003F;	
    // (㜩) CJK UNIFIED IDEOGRAPH-3729	[FB80 B729 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3729, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB729, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_446)
{
    // 3729 0061;	
    // (㜩) CJK UNIFIED IDEOGRAPH-3729	[FB80 B729 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3729, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_447)
{
    // 3729 0041;	
    // (㜩) CJK UNIFIED IDEOGRAPH-3729	[FB80 B729 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3729, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_448)
{
    // 3729 0062;	
    // (㜩) CJK UNIFIED IDEOGRAPH-3729	[FB80 B729 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3729, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB729, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_449)
{
    // 372A 0021;	
    // (㜪) CJK UNIFIED IDEOGRAPH-372A	[FB80 B72A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_450)
{
    // 372A 003F;	
    // (㜪) CJK UNIFIED IDEOGRAPH-372A	[FB80 B72A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_451)
{
    // 372A 0061;	
    // (㜪) CJK UNIFIED IDEOGRAPH-372A	[FB80 B72A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_452)
{
    // 372A 0041;	
    // (㜪) CJK UNIFIED IDEOGRAPH-372A	[FB80 B72A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_453)
{
    // 372A 0062;	
    // (㜪) CJK UNIFIED IDEOGRAPH-372A	[FB80 B72A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_454)
{
    // 372B 0021;	
    // (㜫) CJK UNIFIED IDEOGRAPH-372B	[FB80 B72B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_455)
{
    // 372B 003F;	
    // (㜫) CJK UNIFIED IDEOGRAPH-372B	[FB80 B72B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_456)
{
    // 372B 0061;	
    // (㜫) CJK UNIFIED IDEOGRAPH-372B	[FB80 B72B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_457)
{
    // 372B 0041;	
    // (㜫) CJK UNIFIED IDEOGRAPH-372B	[FB80 B72B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_458)
{
    // 372B 0062;	
    // (㜫) CJK UNIFIED IDEOGRAPH-372B	[FB80 B72B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_459)
{
    // 372C 0021;	
    // (㜬) CJK UNIFIED IDEOGRAPH-372C	[FB80 B72C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_460)
{
    // 372C 003F;	
    // (㜬) CJK UNIFIED IDEOGRAPH-372C	[FB80 B72C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_461)
{
    // 372C 0061;	
    // (㜬) CJK UNIFIED IDEOGRAPH-372C	[FB80 B72C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_462)
{
    // 372C 0041;	
    // (㜬) CJK UNIFIED IDEOGRAPH-372C	[FB80 B72C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_463)
{
    // 372C 0062;	
    // (㜬) CJK UNIFIED IDEOGRAPH-372C	[FB80 B72C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_464)
{
    // 372D 0021;	
    // (㜭) CJK UNIFIED IDEOGRAPH-372D	[FB80 B72D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_465)
{
    // 372D 003F;	
    // (㜭) CJK UNIFIED IDEOGRAPH-372D	[FB80 B72D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_466)
{
    // 372D 0061;	
    // (㜭) CJK UNIFIED IDEOGRAPH-372D	[FB80 B72D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_467)
{
    // 372D 0041;	
    // (㜭) CJK UNIFIED IDEOGRAPH-372D	[FB80 B72D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_468)
{
    // 372D 0062;	
    // (㜭) CJK UNIFIED IDEOGRAPH-372D	[FB80 B72D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_469)
{
    // 372E 0021;	
    // (㜮) CJK UNIFIED IDEOGRAPH-372E	[FB80 B72E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_470)
{
    // 372E 003F;	
    // (㜮) CJK UNIFIED IDEOGRAPH-372E	[FB80 B72E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_471)
{
    // 372E 0061;	
    // (㜮) CJK UNIFIED IDEOGRAPH-372E	[FB80 B72E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_472)
{
    // 372E 0041;	
    // (㜮) CJK UNIFIED IDEOGRAPH-372E	[FB80 B72E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_473)
{
    // 372E 0062;	
    // (㜮) CJK UNIFIED IDEOGRAPH-372E	[FB80 B72E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_474)
{
    // 372F 0021;	
    // (㜯) CJK UNIFIED IDEOGRAPH-372F	[FB80 B72F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB72F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_475)
{
    // 372F 003F;	
    // (㜯) CJK UNIFIED IDEOGRAPH-372F	[FB80 B72F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB72F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_476)
{
    // 372F 0061;	
    // (㜯) CJK UNIFIED IDEOGRAPH-372F	[FB80 B72F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB72F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_477)
{
    // 372F 0041;	
    // (㜯) CJK UNIFIED IDEOGRAPH-372F	[FB80 B72F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x372F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB72F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_478)
{
    // 372F 0062;	
    // (㜯) CJK UNIFIED IDEOGRAPH-372F	[FB80 B72F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x372F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB72F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_479)
{
    // 3730 0021;	
    // (㜰) CJK UNIFIED IDEOGRAPH-3730	[FB80 B730 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3730, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_480)
{
    // 3730 003F;	
    // (㜰) CJK UNIFIED IDEOGRAPH-3730	[FB80 B730 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3730, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_481)
{
    // 3730 0061;	
    // (㜰) CJK UNIFIED IDEOGRAPH-3730	[FB80 B730 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3730, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_482)
{
    // 3730 0041;	
    // (㜰) CJK UNIFIED IDEOGRAPH-3730	[FB80 B730 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3730, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_483)
{
    // 3730 0062;	
    // (㜰) CJK UNIFIED IDEOGRAPH-3730	[FB80 B730 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3730, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_484)
{
    // 3731 0021;	
    // (㜱) CJK UNIFIED IDEOGRAPH-3731	[FB80 B731 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3731, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_485)
{
    // 3731 003F;	
    // (㜱) CJK UNIFIED IDEOGRAPH-3731	[FB80 B731 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3731, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_486)
{
    // 3731 0061;	
    // (㜱) CJK UNIFIED IDEOGRAPH-3731	[FB80 B731 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3731, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_487)
{
    // 3731 0041;	
    // (㜱) CJK UNIFIED IDEOGRAPH-3731	[FB80 B731 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3731, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_488)
{
    // 3731 0062;	
    // (㜱) CJK UNIFIED IDEOGRAPH-3731	[FB80 B731 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3731, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_489)
{
    // 3732 0021;	
    // (㜲) CJK UNIFIED IDEOGRAPH-3732	[FB80 B732 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3732, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_490)
{
    // 3732 003F;	
    // (㜲) CJK UNIFIED IDEOGRAPH-3732	[FB80 B732 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3732, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_491)
{
    // 3732 0061;	
    // (㜲) CJK UNIFIED IDEOGRAPH-3732	[FB80 B732 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3732, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_492)
{
    // 3732 0041;	
    // (㜲) CJK UNIFIED IDEOGRAPH-3732	[FB80 B732 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3732, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_493)
{
    // 3732 0062;	
    // (㜲) CJK UNIFIED IDEOGRAPH-3732	[FB80 B732 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3732, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_494)
{
    // 3733 0021;	
    // (㜳) CJK UNIFIED IDEOGRAPH-3733	[FB80 B733 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3733, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_495)
{
    // 3733 003F;	
    // (㜳) CJK UNIFIED IDEOGRAPH-3733	[FB80 B733 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3733, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_496)
{
    // 3733 0061;	
    // (㜳) CJK UNIFIED IDEOGRAPH-3733	[FB80 B733 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3733, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_497)
{
    // 3733 0041;	
    // (㜳) CJK UNIFIED IDEOGRAPH-3733	[FB80 B733 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3733, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_498)
{
    // 3733 0062;	
    // (㜳) CJK UNIFIED IDEOGRAPH-3733	[FB80 B733 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3733, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_334_499)
{
    // 3734 0021;	
    // (㜴) CJK UNIFIED IDEOGRAPH-3734	[FB80 B734 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3734, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

