// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_140_000)
{
    // 04AF 0041;	
    // (ү) CYRILLIC SMALL LETTER STRAIGHT U	[2187 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04AF, 0x0041 };
    uint32_t const ces[9] = { 0x2187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_001)
{
    // 04AE 0061;	
    // (Ү) CYRILLIC CAPITAL LETTER STRAIGHT U	[2187 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04AE, 0x0061 };
    uint32_t const ces[9] = { 0x2187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_002)
{
    // 04AE 0041;	
    // (Ү) CYRILLIC CAPITAL LETTER STRAIGHT U	[2187 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04AE, 0x0041 };
    uint32_t const ces[9] = { 0x2187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_003)
{
    // 04AF 0062;	
    // (ү) CYRILLIC SMALL LETTER STRAIGHT U	[2187 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04AF, 0x0062 };
    uint32_t const ces[9] = { 0x2187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_004)
{
    // 04AE 0062;	
    // (Ү) CYRILLIC CAPITAL LETTER STRAIGHT U	[2187 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04AE, 0x0062 };
    uint32_t const ces[9] = { 0x2187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_005)
{
    // 04B1 0021;	
    // (ұ) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE	[218B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B1, 0x0021 };
    uint32_t const ces[9] = { 0x218B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_006)
{
    // 04B0 0021;	
    // (Ұ) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE	[218B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B0, 0x0021 };
    uint32_t const ces[9] = { 0x218B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_007)
{
    // 04B1 003F;	
    // (ұ) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE	[218B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B1, 0x003F };
    uint32_t const ces[9] = { 0x218B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_008)
{
    // 04B0 003F;	
    // (Ұ) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE	[218B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B0, 0x003F };
    uint32_t const ces[9] = { 0x218B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_009)
{
    // 04B1 0061;	
    // (ұ) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE	[218B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B1, 0x0061 };
    uint32_t const ces[9] = { 0x218B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_010)
{
    // 04B1 0041;	
    // (ұ) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE	[218B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04B1, 0x0041 };
    uint32_t const ces[9] = { 0x218B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_011)
{
    // 04B0 0061;	
    // (Ұ) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE	[218B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B0, 0x0061 };
    uint32_t const ces[9] = { 0x218B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_012)
{
    // 04B0 0041;	
    // (Ұ) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE	[218B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04B0, 0x0041 };
    uint32_t const ces[9] = { 0x218B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_013)
{
    // 04B1 0062;	
    // (ұ) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE	[218B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B1, 0x0062 };
    uint32_t const ces[9] = { 0x218B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_014)
{
    // 04B0 0062;	
    // (Ұ) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE	[218B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B0, 0x0062 };
    uint32_t const ces[9] = { 0x218B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_015)
{
    // 0334 2DF9;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF9 };
    uint32_t const ces[8] = { 0x218F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_016)
{
    // 2DF9 0334;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF9, 0x0334 };
    uint32_t const ces[8] = { 0x218F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_017)
{
    // A64B 0021;	
    // (ꙋ) CYRILLIC SMALL LETTER MONOGRAPH UK	[218F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64B, 0x0021 };
    uint32_t const ces[9] = { 0x218F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_018)
{
    // 1C88 0021;	
    // (ᲈ) CYRILLIC SMALL LETTER UNBLENDED UK	[218F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C88, 0x0021 };
    uint32_t const ces[9] = { 0x218F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_019)
{
    // 2DF9 0021;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF9, 0x0021 };
    uint32_t const ces[9] = { 0x218F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_020)
{
    // A64A 0021;	
    // (Ꙋ) CYRILLIC CAPITAL LETTER MONOGRAPH UK	[218F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64A, 0x0021 };
    uint32_t const ces[9] = { 0x218F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_021)
{
    // A64B 003F;	
    // (ꙋ) CYRILLIC SMALL LETTER MONOGRAPH UK	[218F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64B, 0x003F };
    uint32_t const ces[9] = { 0x218F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_022)
{
    // 1C88 003F;	
    // (ᲈ) CYRILLIC SMALL LETTER UNBLENDED UK	[218F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C88, 0x003F };
    uint32_t const ces[9] = { 0x218F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_023)
{
    // 2DF9 003F;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF9, 0x003F };
    uint32_t const ces[9] = { 0x218F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_024)
{
    // A64A 003F;	
    // (Ꙋ) CYRILLIC CAPITAL LETTER MONOGRAPH UK	[218F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64A, 0x003F };
    uint32_t const ces[9] = { 0x218F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_025)
{
    // A64B 0061;	
    // (ꙋ) CYRILLIC SMALL LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64B, 0x0061 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_026)
{
    // A64B 0041;	
    // (ꙋ) CYRILLIC SMALL LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA64B, 0x0041 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_027)
{
    // 1C88 0061;	
    // (ᲈ) CYRILLIC SMALL LETTER UNBLENDED UK	[218F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C88, 0x0061 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_028)
{
    // 2DF9 0061;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF9, 0x0061 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_029)
{
    // 1C88 0041;	
    // (ᲈ) CYRILLIC SMALL LETTER UNBLENDED UK	[218F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1C88, 0x0041 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_030)
{
    // 2DF9 0041;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF9, 0x0041 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_031)
{
    // A64A 0061;	
    // (Ꙋ) CYRILLIC CAPITAL LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64A, 0x0061 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_032)
{
    // A64A 0041;	
    // (Ꙋ) CYRILLIC CAPITAL LETTER MONOGRAPH UK	[218F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA64A, 0x0041 };
    uint32_t const ces[9] = { 0x218F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_033)
{
    // A64B 0062;	
    // (ꙋ) CYRILLIC SMALL LETTER MONOGRAPH UK	[218F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64B, 0x0062 };
    uint32_t const ces[9] = { 0x218F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_034)
{
    // 1C88 0062;	
    // (ᲈ) CYRILLIC SMALL LETTER UNBLENDED UK	[218F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C88, 0x0062 };
    uint32_t const ces[9] = { 0x218F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_035)
{
    // 2DF9 0062;	
    // (ⷹ) COMBINING CYRILLIC LETTER MONOGRAPH UK	[218F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF9, 0x0062 };
    uint32_t const ces[9] = { 0x218F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_036)
{
    // A64A 0062;	
    // (Ꙋ) CYRILLIC CAPITAL LETTER MONOGRAPH UK	[218F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64A, 0x0062 };
    uint32_t const ces[9] = { 0x218F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_037)
{
    // 0479 0021;	
    // (ѹ) CYRILLIC SMALL LETTER UK	[2190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0479, 0x0021 };
    uint32_t const ces[9] = { 0x2190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_038)
{
    // 0478 0021;	
    // (Ѹ) CYRILLIC CAPITAL LETTER UK	[2190 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0478, 0x0021 };
    uint32_t const ces[9] = { 0x2190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_039)
{
    // 0479 003F;	
    // (ѹ) CYRILLIC SMALL LETTER UK	[2190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0479, 0x003F };
    uint32_t const ces[9] = { 0x2190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_040)
{
    // 0478 003F;	
    // (Ѹ) CYRILLIC CAPITAL LETTER UK	[2190 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0478, 0x003F };
    uint32_t const ces[9] = { 0x2190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_041)
{
    // 0479 0061;	
    // (ѹ) CYRILLIC SMALL LETTER UK	[2190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0479, 0x0061 };
    uint32_t const ces[9] = { 0x2190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_042)
{
    // 0479 0041;	
    // (ѹ) CYRILLIC SMALL LETTER UK	[2190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0479, 0x0041 };
    uint32_t const ces[9] = { 0x2190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_043)
{
    // 0478 0061;	
    // (Ѹ) CYRILLIC CAPITAL LETTER UK	[2190 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0478, 0x0061 };
    uint32_t const ces[9] = { 0x2190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_044)
{
    // 0478 0041;	
    // (Ѹ) CYRILLIC CAPITAL LETTER UK	[2190 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0478, 0x0041 };
    uint32_t const ces[9] = { 0x2190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_045)
{
    // 0479 0062;	
    // (ѹ) CYRILLIC SMALL LETTER UK	[2190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0479, 0x0062 };
    uint32_t const ces[9] = { 0x2190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_046)
{
    // 0478 0062;	
    // (Ѹ) CYRILLIC CAPITAL LETTER UK	[2190 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0478, 0x0062 };
    uint32_t const ces[9] = { 0x2190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_047)
{
    // 0334 A69E;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA69E };
    uint32_t const ces[8] = { 0x2194, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_048)
{
    // A69E 0334;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA69E, 0x0334 };
    uint32_t const ces[8] = { 0x2194, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_049)
{
    // 0444 0021;	
    // (ф) CYRILLIC SMALL LETTER EF	[2194 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0444, 0x0021 };
    uint32_t const ces[9] = { 0x2194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_050)
{
    // A69E 0021;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69E, 0x0021 };
    uint32_t const ces[9] = { 0x2194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_051)
{
    // 0424 0021;	
    // (Ф) CYRILLIC CAPITAL LETTER EF	[2194 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0424, 0x0021 };
    uint32_t const ces[9] = { 0x2194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_052)
{
    // 0444 003F;	
    // (ф) CYRILLIC SMALL LETTER EF	[2194 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0444, 0x003F };
    uint32_t const ces[9] = { 0x2194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_053)
{
    // A69E 003F;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69E, 0x003F };
    uint32_t const ces[9] = { 0x2194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_054)
{
    // 0424 003F;	
    // (Ф) CYRILLIC CAPITAL LETTER EF	[2194 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0424, 0x003F };
    uint32_t const ces[9] = { 0x2194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_055)
{
    // 0444 0061;	
    // (ф) CYRILLIC SMALL LETTER EF	[2194 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0444, 0x0061 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_056)
{
    // 0444 0041;	
    // (ф) CYRILLIC SMALL LETTER EF	[2194 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0444, 0x0041 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_057)
{
    // A69E 0061;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69E, 0x0061 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_058)
{
    // A69E 0041;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA69E, 0x0041 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_059)
{
    // 0424 0061;	
    // (Ф) CYRILLIC CAPITAL LETTER EF	[2194 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0424, 0x0061 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_060)
{
    // 0424 0041;	
    // (Ф) CYRILLIC CAPITAL LETTER EF	[2194 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0424, 0x0041 };
    uint32_t const ces[9] = { 0x2194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_061)
{
    // 0444 0062;	
    // (ф) CYRILLIC SMALL LETTER EF	[2194 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0444, 0x0062 };
    uint32_t const ces[9] = { 0x2194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_062)
{
    // A69E 0062;	
    // (ꚞ) COMBINING CYRILLIC LETTER EF	[2194 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69E, 0x0062 };
    uint32_t const ces[9] = { 0x2194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_063)
{
    // 0424 0062;	
    // (Ф) CYRILLIC CAPITAL LETTER EF	[2194 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0424, 0x0062 };
    uint32_t const ces[9] = { 0x2194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_064)
{
    // 0334 2DEF;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DEF };
    uint32_t const ces[8] = { 0x2198, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_065)
{
    // 2DEF 0334;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DEF, 0x0334 };
    uint32_t const ces[8] = { 0x2198, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_066)
{
    // 0445 0021;	
    // (х) CYRILLIC SMALL LETTER HA	[2198 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0445, 0x0021 };
    uint32_t const ces[9] = { 0x2198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_067)
{
    // 2DEF 0021;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DEF, 0x0021 };
    uint32_t const ces[9] = { 0x2198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_068)
{
    // 0425 0021;	
    // (Х) CYRILLIC CAPITAL LETTER HA	[2198 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0425, 0x0021 };
    uint32_t const ces[9] = { 0x2198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_069)
{
    // 0445 003F;	
    // (х) CYRILLIC SMALL LETTER HA	[2198 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0445, 0x003F };
    uint32_t const ces[9] = { 0x2198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_070)
{
    // 2DEF 003F;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DEF, 0x003F };
    uint32_t const ces[9] = { 0x2198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_071)
{
    // 0425 003F;	
    // (Х) CYRILLIC CAPITAL LETTER HA	[2198 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0425, 0x003F };
    uint32_t const ces[9] = { 0x2198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_072)
{
    // 0445 0061;	
    // (х) CYRILLIC SMALL LETTER HA	[2198 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0445, 0x0061 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_073)
{
    // 0445 0041;	
    // (х) CYRILLIC SMALL LETTER HA	[2198 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0445, 0x0041 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_074)
{
    // 2DEF 0061;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DEF, 0x0061 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_075)
{
    // 2DEF 0041;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DEF, 0x0041 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_076)
{
    // 0425 0061;	
    // (Х) CYRILLIC CAPITAL LETTER HA	[2198 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0425, 0x0061 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_077)
{
    // 0425 0041;	
    // (Х) CYRILLIC CAPITAL LETTER HA	[2198 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0425, 0x0041 };
    uint32_t const ces[9] = { 0x2198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_078)
{
    // 0445 0062;	
    // (х) CYRILLIC SMALL LETTER HA	[2198 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0445, 0x0062 };
    uint32_t const ces[9] = { 0x2198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_079)
{
    // 2DEF 0062;	
    // (ⷯ) COMBINING CYRILLIC LETTER HA	[2198 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DEF, 0x0062 };
    uint32_t const ces[9] = { 0x2198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_080)
{
    // 0425 0062;	
    // (Х) CYRILLIC CAPITAL LETTER HA	[2198 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0425, 0x0062 };
    uint32_t const ces[9] = { 0x2198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_081)
{
    // 04FD 0021;	
    // (ӽ) CYRILLIC SMALL LETTER HA WITH HOOK	[219C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FD, 0x0021 };
    uint32_t const ces[9] = { 0x219C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_082)
{
    // 04FC 0021;	
    // (Ӽ) CYRILLIC CAPITAL LETTER HA WITH HOOK	[219C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FC, 0x0021 };
    uint32_t const ces[9] = { 0x219C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_083)
{
    // 04FD 003F;	
    // (ӽ) CYRILLIC SMALL LETTER HA WITH HOOK	[219C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FD, 0x003F };
    uint32_t const ces[9] = { 0x219C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_084)
{
    // 04FC 003F;	
    // (Ӽ) CYRILLIC CAPITAL LETTER HA WITH HOOK	[219C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FC, 0x003F };
    uint32_t const ces[9] = { 0x219C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_085)
{
    // 04FD 0061;	
    // (ӽ) CYRILLIC SMALL LETTER HA WITH HOOK	[219C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FD, 0x0061 };
    uint32_t const ces[9] = { 0x219C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_086)
{
    // 04FD 0041;	
    // (ӽ) CYRILLIC SMALL LETTER HA WITH HOOK	[219C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04FD, 0x0041 };
    uint32_t const ces[9] = { 0x219C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_087)
{
    // 04FC 0061;	
    // (Ӽ) CYRILLIC CAPITAL LETTER HA WITH HOOK	[219C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FC, 0x0061 };
    uint32_t const ces[9] = { 0x219C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_088)
{
    // 04FC 0041;	
    // (Ӽ) CYRILLIC CAPITAL LETTER HA WITH HOOK	[219C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04FC, 0x0041 };
    uint32_t const ces[9] = { 0x219C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_089)
{
    // 04FD 0062;	
    // (ӽ) CYRILLIC SMALL LETTER HA WITH HOOK	[219C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FD, 0x0062 };
    uint32_t const ces[9] = { 0x219C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_090)
{
    // 04FC 0062;	
    // (Ӽ) CYRILLIC CAPITAL LETTER HA WITH HOOK	[219C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FC, 0x0062 };
    uint32_t const ces[9] = { 0x219C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_091)
{
    // 04FF 0021;	
    // (ӿ) CYRILLIC SMALL LETTER HA WITH STROKE	[21A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FF, 0x0021 };
    uint32_t const ces[9] = { 0x21A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_092)
{
    // 04FE 0021;	
    // (Ӿ) CYRILLIC CAPITAL LETTER HA WITH STROKE	[21A0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FE, 0x0021 };
    uint32_t const ces[9] = { 0x21A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_093)
{
    // 04FF 003F;	
    // (ӿ) CYRILLIC SMALL LETTER HA WITH STROKE	[21A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FF, 0x003F };
    uint32_t const ces[9] = { 0x21A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_094)
{
    // 04FE 003F;	
    // (Ӿ) CYRILLIC CAPITAL LETTER HA WITH STROKE	[21A0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FE, 0x003F };
    uint32_t const ces[9] = { 0x21A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_095)
{
    // 04FF 0061;	
    // (ӿ) CYRILLIC SMALL LETTER HA WITH STROKE	[21A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FF, 0x0061 };
    uint32_t const ces[9] = { 0x21A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_096)
{
    // 04FF 0041;	
    // (ӿ) CYRILLIC SMALL LETTER HA WITH STROKE	[21A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04FF, 0x0041 };
    uint32_t const ces[9] = { 0x21A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_097)
{
    // 04FE 0061;	
    // (Ӿ) CYRILLIC CAPITAL LETTER HA WITH STROKE	[21A0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FE, 0x0061 };
    uint32_t const ces[9] = { 0x21A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_098)
{
    // 04FE 0041;	
    // (Ӿ) CYRILLIC CAPITAL LETTER HA WITH STROKE	[21A0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04FE, 0x0041 };
    uint32_t const ces[9] = { 0x21A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_099)
{
    // 04FF 0062;	
    // (ӿ) CYRILLIC SMALL LETTER HA WITH STROKE	[21A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04FF, 0x0062 };
    uint32_t const ces[9] = { 0x21A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_100)
{
    // 04FE 0062;	
    // (Ӿ) CYRILLIC CAPITAL LETTER HA WITH STROKE	[21A0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04FE, 0x0062 };
    uint32_t const ces[9] = { 0x21A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_101)
{
    // 04B3 0021;	
    // (ҳ) CYRILLIC SMALL LETTER HA WITH DESCENDER	[21A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B3, 0x0021 };
    uint32_t const ces[9] = { 0x21A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_102)
{
    // 04B2 0021;	
    // (Ҳ) CYRILLIC CAPITAL LETTER HA WITH DESCENDER	[21A4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B2, 0x0021 };
    uint32_t const ces[9] = { 0x21A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_103)
{
    // 04B3 003F;	
    // (ҳ) CYRILLIC SMALL LETTER HA WITH DESCENDER	[21A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B3, 0x003F };
    uint32_t const ces[9] = { 0x21A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_104)
{
    // 04B2 003F;	
    // (Ҳ) CYRILLIC CAPITAL LETTER HA WITH DESCENDER	[21A4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B2, 0x003F };
    uint32_t const ces[9] = { 0x21A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_105)
{
    // 04B3 0061;	
    // (ҳ) CYRILLIC SMALL LETTER HA WITH DESCENDER	[21A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B3, 0x0061 };
    uint32_t const ces[9] = { 0x21A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_106)
{
    // 04B3 0041;	
    // (ҳ) CYRILLIC SMALL LETTER HA WITH DESCENDER	[21A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04B3, 0x0041 };
    uint32_t const ces[9] = { 0x21A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_107)
{
    // 04B2 0061;	
    // (Ҳ) CYRILLIC CAPITAL LETTER HA WITH DESCENDER	[21A4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B2, 0x0061 };
    uint32_t const ces[9] = { 0x21A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_108)
{
    // 04B2 0041;	
    // (Ҳ) CYRILLIC CAPITAL LETTER HA WITH DESCENDER	[21A4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04B2, 0x0041 };
    uint32_t const ces[9] = { 0x21A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_109)
{
    // 04B3 0062;	
    // (ҳ) CYRILLIC SMALL LETTER HA WITH DESCENDER	[21A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B3, 0x0062 };
    uint32_t const ces[9] = { 0x21A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_110)
{
    // 04B2 0062;	
    // (Ҳ) CYRILLIC CAPITAL LETTER HA WITH DESCENDER	[21A4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B2, 0x0062 };
    uint32_t const ces[9] = { 0x21A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_111)
{
    // 04BB 0021;	
    // (һ) CYRILLIC SMALL LETTER SHHA	[21A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BB, 0x0021 };
    uint32_t const ces[9] = { 0x21A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_112)
{
    // 04BA 0021;	
    // (Һ) CYRILLIC CAPITAL LETTER SHHA	[21A8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BA, 0x0021 };
    uint32_t const ces[9] = { 0x21A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_113)
{
    // 04BB 003F;	
    // (һ) CYRILLIC SMALL LETTER SHHA	[21A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BB, 0x003F };
    uint32_t const ces[9] = { 0x21A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_114)
{
    // 04BA 003F;	
    // (Һ) CYRILLIC CAPITAL LETTER SHHA	[21A8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BA, 0x003F };
    uint32_t const ces[9] = { 0x21A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_115)
{
    // 04BB 0061;	
    // (һ) CYRILLIC SMALL LETTER SHHA	[21A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BB, 0x0061 };
    uint32_t const ces[9] = { 0x21A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_116)
{
    // 04BB 0041;	
    // (һ) CYRILLIC SMALL LETTER SHHA	[21A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04BB, 0x0041 };
    uint32_t const ces[9] = { 0x21A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_117)
{
    // 04BA 0061;	
    // (Һ) CYRILLIC CAPITAL LETTER SHHA	[21A8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BA, 0x0061 };
    uint32_t const ces[9] = { 0x21A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_118)
{
    // 04BA 0041;	
    // (Һ) CYRILLIC CAPITAL LETTER SHHA	[21A8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04BA, 0x0041 };
    uint32_t const ces[9] = { 0x21A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_119)
{
    // 04BB 0062;	
    // (һ) CYRILLIC SMALL LETTER SHHA	[21A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BB, 0x0062 };
    uint32_t const ces[9] = { 0x21A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_120)
{
    // 04BA 0062;	
    // (Һ) CYRILLIC CAPITAL LETTER SHHA	[21A8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BA, 0x0062 };
    uint32_t const ces[9] = { 0x21A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_121)
{
    // 0527 0021;	
    // (ԧ) CYRILLIC SMALL LETTER SHHA WITH DESCENDER	[21AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0527, 0x0021 };
    uint32_t const ces[9] = { 0x21AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_122)
{
    // 0526 0021;	
    // (Ԧ) CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER	[21AC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0526, 0x0021 };
    uint32_t const ces[9] = { 0x21AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_123)
{
    // 0527 003F;	
    // (ԧ) CYRILLIC SMALL LETTER SHHA WITH DESCENDER	[21AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0527, 0x003F };
    uint32_t const ces[9] = { 0x21AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_124)
{
    // 0526 003F;	
    // (Ԧ) CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER	[21AC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0526, 0x003F };
    uint32_t const ces[9] = { 0x21AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_125)
{
    // 0527 0061;	
    // (ԧ) CYRILLIC SMALL LETTER SHHA WITH DESCENDER	[21AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0527, 0x0061 };
    uint32_t const ces[9] = { 0x21AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_126)
{
    // 0527 0041;	
    // (ԧ) CYRILLIC SMALL LETTER SHHA WITH DESCENDER	[21AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0527, 0x0041 };
    uint32_t const ces[9] = { 0x21AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_127)
{
    // 0526 0061;	
    // (Ԧ) CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER	[21AC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0526, 0x0061 };
    uint32_t const ces[9] = { 0x21AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_128)
{
    // 0526 0041;	
    // (Ԧ) CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER	[21AC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0526, 0x0041 };
    uint32_t const ces[9] = { 0x21AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_129)
{
    // 0527 0062;	
    // (ԧ) CYRILLIC SMALL LETTER SHHA WITH DESCENDER	[21AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0527, 0x0062 };
    uint32_t const ces[9] = { 0x21AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_130)
{
    // 0526 0062;	
    // (Ԧ) CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER	[21AC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0526, 0x0062 };
    uint32_t const ces[9] = { 0x21AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_131)
{
    // A695 0021;	
    // (ꚕ) CYRILLIC SMALL LETTER HWE	[21AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA695, 0x0021 };
    uint32_t const ces[9] = { 0x21AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_132)
{
    // A694 0021;	
    // (Ꚕ) CYRILLIC CAPITAL LETTER HWE	[21AD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA694, 0x0021 };
    uint32_t const ces[9] = { 0x21AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_133)
{
    // A695 003F;	
    // (ꚕ) CYRILLIC SMALL LETTER HWE	[21AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA695, 0x003F };
    uint32_t const ces[9] = { 0x21AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_134)
{
    // A694 003F;	
    // (Ꚕ) CYRILLIC CAPITAL LETTER HWE	[21AD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA694, 0x003F };
    uint32_t const ces[9] = { 0x21AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_135)
{
    // A695 0061;	
    // (ꚕ) CYRILLIC SMALL LETTER HWE	[21AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA695, 0x0061 };
    uint32_t const ces[9] = { 0x21AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_136)
{
    // A695 0041;	
    // (ꚕ) CYRILLIC SMALL LETTER HWE	[21AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA695, 0x0041 };
    uint32_t const ces[9] = { 0x21AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_137)
{
    // A694 0061;	
    // (Ꚕ) CYRILLIC CAPITAL LETTER HWE	[21AD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA694, 0x0061 };
    uint32_t const ces[9] = { 0x21AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_138)
{
    // A694 0041;	
    // (Ꚕ) CYRILLIC CAPITAL LETTER HWE	[21AD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA694, 0x0041 };
    uint32_t const ces[9] = { 0x21AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_139)
{
    // A695 0062;	
    // (ꚕ) CYRILLIC SMALL LETTER HWE	[21AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA695, 0x0062 };
    uint32_t const ces[9] = { 0x21AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_140)
{
    // A694 0062;	
    // (Ꚕ) CYRILLIC CAPITAL LETTER HWE	[21AD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA694, 0x0062 };
    uint32_t const ces[9] = { 0x21AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_141)
{
    // 0334 A67B;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA67B };
    uint32_t const ces[8] = { 0x21AE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_142)
{
    // A67B 0334;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA67B, 0x0334 };
    uint32_t const ces[8] = { 0x21AE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_143)
{
    // 0461 0021;	
    // (ѡ) CYRILLIC SMALL LETTER OMEGA	[21AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0461, 0x0021 };
    uint32_t const ces[9] = { 0x21AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_144)
{
    // A67B 0021;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67B, 0x0021 };
    uint32_t const ces[9] = { 0x21AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_145)
{
    // 0460 0021;	
    // (Ѡ) CYRILLIC CAPITAL LETTER OMEGA	[21AE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0460, 0x0021 };
    uint32_t const ces[9] = { 0x21AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_146)
{
    // 0461 003F;	
    // (ѡ) CYRILLIC SMALL LETTER OMEGA	[21AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0461, 0x003F };
    uint32_t const ces[9] = { 0x21AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_147)
{
    // A67B 003F;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67B, 0x003F };
    uint32_t const ces[9] = { 0x21AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_148)
{
    // 0460 003F;	
    // (Ѡ) CYRILLIC CAPITAL LETTER OMEGA	[21AE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0460, 0x003F };
    uint32_t const ces[9] = { 0x21AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_149)
{
    // 0461 0061;	
    // (ѡ) CYRILLIC SMALL LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0461, 0x0061 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_150)
{
    // 0461 0041;	
    // (ѡ) CYRILLIC SMALL LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0461, 0x0041 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_151)
{
    // A67B 0061;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67B, 0x0061 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_152)
{
    // A67B 0041;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA67B, 0x0041 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_153)
{
    // 0460 0061;	
    // (Ѡ) CYRILLIC CAPITAL LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0460, 0x0061 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_154)
{
    // 0460 0041;	
    // (Ѡ) CYRILLIC CAPITAL LETTER OMEGA	[21AE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0460, 0x0041 };
    uint32_t const ces[9] = { 0x21AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_155)
{
    // 0461 0062;	
    // (ѡ) CYRILLIC SMALL LETTER OMEGA	[21AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0461, 0x0062 };
    uint32_t const ces[9] = { 0x21AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_156)
{
    // A67B 0062;	
    // (ꙻ) COMBINING CYRILLIC LETTER OMEGA	[21AE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67B, 0x0062 };
    uint32_t const ces[9] = { 0x21AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_157)
{
    // 0460 0062;	
    // (Ѡ) CYRILLIC CAPITAL LETTER OMEGA	[21AE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0460, 0x0062 };
    uint32_t const ces[9] = { 0x21AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_158)
{
    // 047F 0021;	
    // (ѿ) CYRILLIC SMALL LETTER OT	[21B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047F, 0x0021 };
    uint32_t const ces[9] = { 0x21B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_159)
{
    // 047E 0021;	
    // (Ѿ) CYRILLIC CAPITAL LETTER OT	[21B2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047E, 0x0021 };
    uint32_t const ces[9] = { 0x21B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_160)
{
    // 047F 003F;	
    // (ѿ) CYRILLIC SMALL LETTER OT	[21B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047F, 0x003F };
    uint32_t const ces[9] = { 0x21B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_161)
{
    // 047E 003F;	
    // (Ѿ) CYRILLIC CAPITAL LETTER OT	[21B2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047E, 0x003F };
    uint32_t const ces[9] = { 0x21B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_162)
{
    // 047F 0061;	
    // (ѿ) CYRILLIC SMALL LETTER OT	[21B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047F, 0x0061 };
    uint32_t const ces[9] = { 0x21B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_163)
{
    // 047F 0041;	
    // (ѿ) CYRILLIC SMALL LETTER OT	[21B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x047F, 0x0041 };
    uint32_t const ces[9] = { 0x21B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_164)
{
    // 047E 0061;	
    // (Ѿ) CYRILLIC CAPITAL LETTER OT	[21B2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047E, 0x0061 };
    uint32_t const ces[9] = { 0x21B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_165)
{
    // 047E 0041;	
    // (Ѿ) CYRILLIC CAPITAL LETTER OT	[21B2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x047E, 0x0041 };
    uint32_t const ces[9] = { 0x21B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_166)
{
    // 047F 0062;	
    // (ѿ) CYRILLIC SMALL LETTER OT	[21B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047F, 0x0062 };
    uint32_t const ces[9] = { 0x21B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_167)
{
    // 047E 0062;	
    // (Ѿ) CYRILLIC CAPITAL LETTER OT	[21B2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047E, 0x0062 };
    uint32_t const ces[9] = { 0x21B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_168)
{
    // A64D 0021;	
    // (ꙍ) CYRILLIC SMALL LETTER BROAD OMEGA	[21B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64D, 0x0021 };
    uint32_t const ces[9] = { 0x21B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_169)
{
    // A64C 0021;	
    // (Ꙍ) CYRILLIC CAPITAL LETTER BROAD OMEGA	[21B6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64C, 0x0021 };
    uint32_t const ces[9] = { 0x21B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_170)
{
    // A64D 003F;	
    // (ꙍ) CYRILLIC SMALL LETTER BROAD OMEGA	[21B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64D, 0x003F };
    uint32_t const ces[9] = { 0x21B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_171)
{
    // A64C 003F;	
    // (Ꙍ) CYRILLIC CAPITAL LETTER BROAD OMEGA	[21B6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64C, 0x003F };
    uint32_t const ces[9] = { 0x21B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_172)
{
    // A64D 0061;	
    // (ꙍ) CYRILLIC SMALL LETTER BROAD OMEGA	[21B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64D, 0x0061 };
    uint32_t const ces[9] = { 0x21B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_173)
{
    // A64D 0041;	
    // (ꙍ) CYRILLIC SMALL LETTER BROAD OMEGA	[21B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA64D, 0x0041 };
    uint32_t const ces[9] = { 0x21B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_174)
{
    // A64C 0061;	
    // (Ꙍ) CYRILLIC CAPITAL LETTER BROAD OMEGA	[21B6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64C, 0x0061 };
    uint32_t const ces[9] = { 0x21B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_175)
{
    // A64C 0041;	
    // (Ꙍ) CYRILLIC CAPITAL LETTER BROAD OMEGA	[21B6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA64C, 0x0041 };
    uint32_t const ces[9] = { 0x21B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_176)
{
    // A64D 0062;	
    // (ꙍ) CYRILLIC SMALL LETTER BROAD OMEGA	[21B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64D, 0x0062 };
    uint32_t const ces[9] = { 0x21B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_177)
{
    // A64C 0062;	
    // (Ꙍ) CYRILLIC CAPITAL LETTER BROAD OMEGA	[21B6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64C, 0x0062 };
    uint32_t const ces[9] = { 0x21B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_178)
{
    // 047D 0021;	
    // (ѽ) CYRILLIC SMALL LETTER OMEGA WITH TITLO	[21B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047D, 0x0021 };
    uint32_t const ces[9] = { 0x21B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_179)
{
    // 047C 0021;	
    // (Ѽ) CYRILLIC CAPITAL LETTER OMEGA WITH TITLO	[21B7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047C, 0x0021 };
    uint32_t const ces[9] = { 0x21B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_180)
{
    // 047D 003F;	
    // (ѽ) CYRILLIC SMALL LETTER OMEGA WITH TITLO	[21B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047D, 0x003F };
    uint32_t const ces[9] = { 0x21B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_181)
{
    // 047C 003F;	
    // (Ѽ) CYRILLIC CAPITAL LETTER OMEGA WITH TITLO	[21B7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047C, 0x003F };
    uint32_t const ces[9] = { 0x21B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_182)
{
    // 047D 0061;	
    // (ѽ) CYRILLIC SMALL LETTER OMEGA WITH TITLO	[21B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047D, 0x0061 };
    uint32_t const ces[9] = { 0x21B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_183)
{
    // 047D 0041;	
    // (ѽ) CYRILLIC SMALL LETTER OMEGA WITH TITLO	[21B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x047D, 0x0041 };
    uint32_t const ces[9] = { 0x21B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_184)
{
    // 047C 0061;	
    // (Ѽ) CYRILLIC CAPITAL LETTER OMEGA WITH TITLO	[21B7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047C, 0x0061 };
    uint32_t const ces[9] = { 0x21B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_185)
{
    // 047C 0041;	
    // (Ѽ) CYRILLIC CAPITAL LETTER OMEGA WITH TITLO	[21B7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x047C, 0x0041 };
    uint32_t const ces[9] = { 0x21B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_186)
{
    // 047D 0062;	
    // (ѽ) CYRILLIC SMALL LETTER OMEGA WITH TITLO	[21B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047D, 0x0062 };
    uint32_t const ces[9] = { 0x21B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_187)
{
    // 047C 0062;	
    // (Ѽ) CYRILLIC CAPITAL LETTER OMEGA WITH TITLO	[21B7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047C, 0x0062 };
    uint32_t const ces[9] = { 0x21B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_188)
{
    // 047B 0021;	
    // (ѻ) CYRILLIC SMALL LETTER ROUND OMEGA	[21BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047B, 0x0021 };
    uint32_t const ces[9] = { 0x21BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_189)
{
    // 047A 0021;	
    // (Ѻ) CYRILLIC CAPITAL LETTER ROUND OMEGA	[21BB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047A, 0x0021 };
    uint32_t const ces[9] = { 0x21BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_190)
{
    // 047B 003F;	
    // (ѻ) CYRILLIC SMALL LETTER ROUND OMEGA	[21BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047B, 0x003F };
    uint32_t const ces[9] = { 0x21BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_191)
{
    // 047A 003F;	
    // (Ѻ) CYRILLIC CAPITAL LETTER ROUND OMEGA	[21BB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047A, 0x003F };
    uint32_t const ces[9] = { 0x21BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_192)
{
    // 047B 0061;	
    // (ѻ) CYRILLIC SMALL LETTER ROUND OMEGA	[21BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047B, 0x0061 };
    uint32_t const ces[9] = { 0x21BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_193)
{
    // 047B 0041;	
    // (ѻ) CYRILLIC SMALL LETTER ROUND OMEGA	[21BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x047B, 0x0041 };
    uint32_t const ces[9] = { 0x21BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_194)
{
    // 047A 0061;	
    // (Ѻ) CYRILLIC CAPITAL LETTER ROUND OMEGA	[21BB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047A, 0x0061 };
    uint32_t const ces[9] = { 0x21BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_195)
{
    // 047A 0041;	
    // (Ѻ) CYRILLIC CAPITAL LETTER ROUND OMEGA	[21BB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x047A, 0x0041 };
    uint32_t const ces[9] = { 0x21BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_196)
{
    // 047B 0062;	
    // (ѻ) CYRILLIC SMALL LETTER ROUND OMEGA	[21BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x047B, 0x0062 };
    uint32_t const ces[9] = { 0x21BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_197)
{
    // 047A 0062;	
    // (Ѻ) CYRILLIC CAPITAL LETTER ROUND OMEGA	[21BB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x047A, 0x0062 };
    uint32_t const ces[9] = { 0x21BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_198)
{
    // 0334 2DF0;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF0 };
    uint32_t const ces[8] = { 0x21BF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_199)
{
    // 2DF0 0334;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF0, 0x0334 };
    uint32_t const ces[8] = { 0x21BF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_200)
{
    // 0446 0021;	
    // (ц) CYRILLIC SMALL LETTER TSE	[21BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0446, 0x0021 };
    uint32_t const ces[9] = { 0x21BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_201)
{
    // 2DF0 0021;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF0, 0x0021 };
    uint32_t const ces[9] = { 0x21BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_202)
{
    // 0426 0021;	
    // (Ц) CYRILLIC CAPITAL LETTER TSE	[21BF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0426, 0x0021 };
    uint32_t const ces[9] = { 0x21BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_203)
{
    // 0446 003F;	
    // (ц) CYRILLIC SMALL LETTER TSE	[21BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0446, 0x003F };
    uint32_t const ces[9] = { 0x21BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_204)
{
    // 2DF0 003F;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF0, 0x003F };
    uint32_t const ces[9] = { 0x21BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_205)
{
    // 0426 003F;	
    // (Ц) CYRILLIC CAPITAL LETTER TSE	[21BF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0426, 0x003F };
    uint32_t const ces[9] = { 0x21BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_206)
{
    // 0446 0061;	
    // (ц) CYRILLIC SMALL LETTER TSE	[21BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0446, 0x0061 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_207)
{
    // 0446 0041;	
    // (ц) CYRILLIC SMALL LETTER TSE	[21BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0446, 0x0041 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_208)
{
    // 2DF0 0061;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF0, 0x0061 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_209)
{
    // 2DF0 0041;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF0, 0x0041 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_210)
{
    // 0426 0061;	
    // (Ц) CYRILLIC CAPITAL LETTER TSE	[21BF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0426, 0x0061 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_211)
{
    // 0426 0041;	
    // (Ц) CYRILLIC CAPITAL LETTER TSE	[21BF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0426, 0x0041 };
    uint32_t const ces[9] = { 0x21BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_212)
{
    // 0446 0062;	
    // (ц) CYRILLIC SMALL LETTER TSE	[21BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0446, 0x0062 };
    uint32_t const ces[9] = { 0x21BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_213)
{
    // 2DF0 0062;	
    // (ⷰ) COMBINING CYRILLIC LETTER TSE	[21BF 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF0, 0x0062 };
    uint32_t const ces[9] = { 0x21BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_214)
{
    // 0426 0062;	
    // (Ц) CYRILLIC CAPITAL LETTER TSE	[21BF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0426, 0x0062 };
    uint32_t const ces[9] = { 0x21BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_215)
{
    // A661 0021;	
    // (ꙡ) CYRILLIC SMALL LETTER REVERSED TSE	[21C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA661, 0x0021 };
    uint32_t const ces[9] = { 0x21C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_216)
{
    // A660 0021;	
    // (Ꙡ) CYRILLIC CAPITAL LETTER REVERSED TSE	[21C3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA660, 0x0021 };
    uint32_t const ces[9] = { 0x21C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_217)
{
    // A661 003F;	
    // (ꙡ) CYRILLIC SMALL LETTER REVERSED TSE	[21C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA661, 0x003F };
    uint32_t const ces[9] = { 0x21C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_218)
{
    // A660 003F;	
    // (Ꙡ) CYRILLIC CAPITAL LETTER REVERSED TSE	[21C3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA660, 0x003F };
    uint32_t const ces[9] = { 0x21C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_219)
{
    // A661 0061;	
    // (ꙡ) CYRILLIC SMALL LETTER REVERSED TSE	[21C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA661, 0x0061 };
    uint32_t const ces[9] = { 0x21C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_220)
{
    // A661 0041;	
    // (ꙡ) CYRILLIC SMALL LETTER REVERSED TSE	[21C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA661, 0x0041 };
    uint32_t const ces[9] = { 0x21C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_221)
{
    // A660 0061;	
    // (Ꙡ) CYRILLIC CAPITAL LETTER REVERSED TSE	[21C3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA660, 0x0061 };
    uint32_t const ces[9] = { 0x21C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_222)
{
    // A660 0041;	
    // (Ꙡ) CYRILLIC CAPITAL LETTER REVERSED TSE	[21C3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA660, 0x0041 };
    uint32_t const ces[9] = { 0x21C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_223)
{
    // A661 0062;	
    // (ꙡ) CYRILLIC SMALL LETTER REVERSED TSE	[21C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA661, 0x0062 };
    uint32_t const ces[9] = { 0x21C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_224)
{
    // A660 0062;	
    // (Ꙡ) CYRILLIC CAPITAL LETTER REVERSED TSE	[21C3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA660, 0x0062 };
    uint32_t const ces[9] = { 0x21C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_225)
{
    // A68F 0021;	
    // (ꚏ) CYRILLIC SMALL LETTER TSWE	[21C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA68F, 0x0021 };
    uint32_t const ces[9] = { 0x21C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_226)
{
    // A68E 0021;	
    // (Ꚏ) CYRILLIC CAPITAL LETTER TSWE	[21C4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA68E, 0x0021 };
    uint32_t const ces[9] = { 0x21C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_227)
{
    // A68F 003F;	
    // (ꚏ) CYRILLIC SMALL LETTER TSWE	[21C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA68F, 0x003F };
    uint32_t const ces[9] = { 0x21C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_228)
{
    // A68E 003F;	
    // (Ꚏ) CYRILLIC CAPITAL LETTER TSWE	[21C4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA68E, 0x003F };
    uint32_t const ces[9] = { 0x21C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_229)
{
    // A68F 0061;	
    // (ꚏ) CYRILLIC SMALL LETTER TSWE	[21C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA68F, 0x0061 };
    uint32_t const ces[9] = { 0x21C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_230)
{
    // A68F 0041;	
    // (ꚏ) CYRILLIC SMALL LETTER TSWE	[21C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA68F, 0x0041 };
    uint32_t const ces[9] = { 0x21C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_231)
{
    // A68E 0061;	
    // (Ꚏ) CYRILLIC CAPITAL LETTER TSWE	[21C4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA68E, 0x0061 };
    uint32_t const ces[9] = { 0x21C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_232)
{
    // A68E 0041;	
    // (Ꚏ) CYRILLIC CAPITAL LETTER TSWE	[21C4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA68E, 0x0041 };
    uint32_t const ces[9] = { 0x21C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_233)
{
    // A68F 0062;	
    // (ꚏ) CYRILLIC SMALL LETTER TSWE	[21C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA68F, 0x0062 };
    uint32_t const ces[9] = { 0x21C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_234)
{
    // A68E 0062;	
    // (Ꚏ) CYRILLIC CAPITAL LETTER TSWE	[21C4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA68E, 0x0062 };
    uint32_t const ces[9] = { 0x21C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_235)
{
    // 04B5 0021;	
    // (ҵ) CYRILLIC SMALL LIGATURE TE TSE	[21C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B5, 0x0021 };
    uint32_t const ces[9] = { 0x21C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_236)
{
    // 04B4 0021;	
    // (Ҵ) CYRILLIC CAPITAL LIGATURE TE TSE	[21C5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B4, 0x0021 };
    uint32_t const ces[9] = { 0x21C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_237)
{
    // 04B5 003F;	
    // (ҵ) CYRILLIC SMALL LIGATURE TE TSE	[21C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B5, 0x003F };
    uint32_t const ces[9] = { 0x21C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_238)
{
    // 04B4 003F;	
    // (Ҵ) CYRILLIC CAPITAL LIGATURE TE TSE	[21C5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B4, 0x003F };
    uint32_t const ces[9] = { 0x21C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_239)
{
    // 04B5 0061;	
    // (ҵ) CYRILLIC SMALL LIGATURE TE TSE	[21C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B5, 0x0061 };
    uint32_t const ces[9] = { 0x21C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_240)
{
    // 04B5 0041;	
    // (ҵ) CYRILLIC SMALL LIGATURE TE TSE	[21C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04B5, 0x0041 };
    uint32_t const ces[9] = { 0x21C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_241)
{
    // 04B4 0061;	
    // (Ҵ) CYRILLIC CAPITAL LIGATURE TE TSE	[21C5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B4, 0x0061 };
    uint32_t const ces[9] = { 0x21C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_242)
{
    // 04B4 0041;	
    // (Ҵ) CYRILLIC CAPITAL LIGATURE TE TSE	[21C5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04B4, 0x0041 };
    uint32_t const ces[9] = { 0x21C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_243)
{
    // 04B5 0062;	
    // (ҵ) CYRILLIC SMALL LIGATURE TE TSE	[21C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B5, 0x0062 };
    uint32_t const ces[9] = { 0x21C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_244)
{
    // 04B4 0062;	
    // (Ҵ) CYRILLIC CAPITAL LIGATURE TE TSE	[21C5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B4, 0x0062 };
    uint32_t const ces[9] = { 0x21C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_245)
{
    // A691 0021;	
    // (ꚑ) CYRILLIC SMALL LETTER TSSE	[21C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA691, 0x0021 };
    uint32_t const ces[9] = { 0x21C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_246)
{
    // A690 0021;	
    // (Ꚑ) CYRILLIC CAPITAL LETTER TSSE	[21C9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA690, 0x0021 };
    uint32_t const ces[9] = { 0x21C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_247)
{
    // A691 003F;	
    // (ꚑ) CYRILLIC SMALL LETTER TSSE	[21C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA691, 0x003F };
    uint32_t const ces[9] = { 0x21C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_248)
{
    // A690 003F;	
    // (Ꚑ) CYRILLIC CAPITAL LETTER TSSE	[21C9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA690, 0x003F };
    uint32_t const ces[9] = { 0x21C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_249)
{
    // A691 0061;	
    // (ꚑ) CYRILLIC SMALL LETTER TSSE	[21C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA691, 0x0061 };
    uint32_t const ces[9] = { 0x21C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_250)
{
    // A691 0041;	
    // (ꚑ) CYRILLIC SMALL LETTER TSSE	[21C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA691, 0x0041 };
    uint32_t const ces[9] = { 0x21C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_251)
{
    // A690 0061;	
    // (Ꚑ) CYRILLIC CAPITAL LETTER TSSE	[21C9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA690, 0x0061 };
    uint32_t const ces[9] = { 0x21C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_252)
{
    // A690 0041;	
    // (Ꚑ) CYRILLIC CAPITAL LETTER TSSE	[21C9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA690, 0x0041 };
    uint32_t const ces[9] = { 0x21C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_253)
{
    // A691 0062;	
    // (ꚑ) CYRILLIC SMALL LETTER TSSE	[21C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA691, 0x0062 };
    uint32_t const ces[9] = { 0x21C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_254)
{
    // A690 0062;	
    // (Ꚑ) CYRILLIC CAPITAL LETTER TSSE	[21C9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA690, 0x0062 };
    uint32_t const ces[9] = { 0x21C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_255)
{
    // 0447 0308 0334;	
    // (ӵ) CYRILLIC SMALL LETTER CHE, COMBINING DIAERESIS	[21CA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0447, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_256)
{
    // 0447 0334 0308;	
    // (ч̴) CYRILLIC SMALL LETTER CHE, COMBINING TILDE OVERLAY	[21CA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0447, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_257)
{
    // 04F5 0334;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F5, 0x0334 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_258)
{
    // 0427 0308 0334;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE, COMBINING DIAERESIS	[21CA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0427, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_259)
{
    // 0427 0334 0308;	
    // (Ч̴) CYRILLIC CAPITAL LETTER CHE, COMBINING TILDE OVERLAY	[21CA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0427, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_260)
{
    // 04F4 0334;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F4, 0x0334 };
    uint32_t const ces[10] = { 0x21CA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_261)
{
    // 0334 2DF1;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF1 };
    uint32_t const ces[8] = { 0x21CA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_262)
{
    // 2DF1 0334;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF1, 0x0334 };
    uint32_t const ces[8] = { 0x21CA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_263)
{
    // 0447 0021;	
    // (ч) CYRILLIC SMALL LETTER CHE	[21CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0447, 0x0021 };
    uint32_t const ces[9] = { 0x21CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_264)
{
    // 2DF1 0021;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF1, 0x0021 };
    uint32_t const ces[9] = { 0x21CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_265)
{
    // 0427 0021;	
    // (Ч) CYRILLIC CAPITAL LETTER CHE	[21CA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0427, 0x0021 };
    uint32_t const ces[9] = { 0x21CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_266)
{
    // 04F5 0021;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F5, 0x0021 };
    uint32_t const ces[11] = { 0x21CA, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_267)
{
    // 04F4 0021;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F4, 0x0021 };
    uint32_t const ces[11] = { 0x21CA, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_268)
{
    // 0447 003F;	
    // (ч) CYRILLIC SMALL LETTER CHE	[21CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0447, 0x003F };
    uint32_t const ces[9] = { 0x21CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_269)
{
    // 2DF1 003F;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF1, 0x003F };
    uint32_t const ces[9] = { 0x21CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_270)
{
    // 0427 003F;	
    // (Ч) CYRILLIC CAPITAL LETTER CHE	[21CA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0427, 0x003F };
    uint32_t const ces[9] = { 0x21CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_271)
{
    // 04F5 003F;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F5, 0x003F };
    uint32_t const ces[11] = { 0x21CA, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_272)
{
    // 04F4 003F;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F4, 0x003F };
    uint32_t const ces[11] = { 0x21CA, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_273)
{
    // 0447 0061;	
    // (ч) CYRILLIC SMALL LETTER CHE	[21CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0447, 0x0061 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_274)
{
    // 0447 0041;	
    // (ч) CYRILLIC SMALL LETTER CHE	[21CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0447, 0x0041 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_275)
{
    // 2DF1 0061;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF1, 0x0061 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_276)
{
    // 2DF1 0041;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF1, 0x0041 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_277)
{
    // 0427 0061;	
    // (Ч) CYRILLIC CAPITAL LETTER CHE	[21CA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0427, 0x0061 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_278)
{
    // 0427 0041;	
    // (Ч) CYRILLIC CAPITAL LETTER CHE	[21CA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0427, 0x0041 };
    uint32_t const ces[9] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_279)
{
    // 04F5 0061;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F5, 0x0061 };
    uint32_t const ces[11] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_280)
{
    // 04F5 0041;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04F5, 0x0041 };
    uint32_t const ces[11] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_281)
{
    // 04F4 0061;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F4, 0x0061 };
    uint32_t const ces[11] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_282)
{
    // 04F4 0041;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04F4, 0x0041 };
    uint32_t const ces[11] = { 0x21CA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_283)
{
    // 0447 0062;	
    // (ч) CYRILLIC SMALL LETTER CHE	[21CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0447, 0x0062 };
    uint32_t const ces[9] = { 0x21CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_284)
{
    // 2DF1 0062;	
    // (ⷱ) COMBINING CYRILLIC LETTER CHE	[21CA 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF1, 0x0062 };
    uint32_t const ces[9] = { 0x21CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_285)
{
    // 0427 0062;	
    // (Ч) CYRILLIC CAPITAL LETTER CHE	[21CA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0427, 0x0062 };
    uint32_t const ces[9] = { 0x21CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_286)
{
    // 04F5 0062;	
    // (ӵ) CYRILLIC SMALL LETTER CHE WITH DIAERESIS	[21CA 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F5, 0x0062 };
    uint32_t const ces[11] = { 0x21CA, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_287)
{
    // 04F4 0062;	
    // (Ӵ) CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS	[21CA 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F4, 0x0062 };
    uint32_t const ces[11] = { 0x21CA, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_288)
{
    // 052D 0021;	
    // (ԭ) CYRILLIC SMALL LETTER DCHE	[21CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052D, 0x0021 };
    uint32_t const ces[9] = { 0x21CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_289)
{
    // 052C 0021;	
    // (Ԭ) CYRILLIC CAPITAL LETTER DCHE	[21CE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052C, 0x0021 };
    uint32_t const ces[9] = { 0x21CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_290)
{
    // 052D 003F;	
    // (ԭ) CYRILLIC SMALL LETTER DCHE	[21CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052D, 0x003F };
    uint32_t const ces[9] = { 0x21CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_291)
{
    // 052C 003F;	
    // (Ԭ) CYRILLIC CAPITAL LETTER DCHE	[21CE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052C, 0x003F };
    uint32_t const ces[9] = { 0x21CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_292)
{
    // 052D 0061;	
    // (ԭ) CYRILLIC SMALL LETTER DCHE	[21CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052D, 0x0061 };
    uint32_t const ces[9] = { 0x21CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_293)
{
    // 052D 0041;	
    // (ԭ) CYRILLIC SMALL LETTER DCHE	[21CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x052D, 0x0041 };
    uint32_t const ces[9] = { 0x21CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_294)
{
    // 052C 0061;	
    // (Ԭ) CYRILLIC CAPITAL LETTER DCHE	[21CE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052C, 0x0061 };
    uint32_t const ces[9] = { 0x21CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_295)
{
    // 052C 0041;	
    // (Ԭ) CYRILLIC CAPITAL LETTER DCHE	[21CE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x052C, 0x0041 };
    uint32_t const ces[9] = { 0x21CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_296)
{
    // 052D 0062;	
    // (ԭ) CYRILLIC SMALL LETTER DCHE	[21CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x052D, 0x0062 };
    uint32_t const ces[9] = { 0x21CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_297)
{
    // 052C 0062;	
    // (Ԭ) CYRILLIC CAPITAL LETTER DCHE	[21CE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x052C, 0x0062 };
    uint32_t const ces[9] = { 0x21CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_298)
{
    // A693 0021;	
    // (ꚓ) CYRILLIC SMALL LETTER TCHE	[21CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA693, 0x0021 };
    uint32_t const ces[9] = { 0x21CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_299)
{
    // A692 0021;	
    // (Ꚓ) CYRILLIC CAPITAL LETTER TCHE	[21CF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA692, 0x0021 };
    uint32_t const ces[9] = { 0x21CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_300)
{
    // A693 003F;	
    // (ꚓ) CYRILLIC SMALL LETTER TCHE	[21CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA693, 0x003F };
    uint32_t const ces[9] = { 0x21CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_301)
{
    // A692 003F;	
    // (Ꚓ) CYRILLIC CAPITAL LETTER TCHE	[21CF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA692, 0x003F };
    uint32_t const ces[9] = { 0x21CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_302)
{
    // A693 0061;	
    // (ꚓ) CYRILLIC SMALL LETTER TCHE	[21CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA693, 0x0061 };
    uint32_t const ces[9] = { 0x21CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_303)
{
    // A693 0041;	
    // (ꚓ) CYRILLIC SMALL LETTER TCHE	[21CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA693, 0x0041 };
    uint32_t const ces[9] = { 0x21CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_304)
{
    // A692 0061;	
    // (Ꚓ) CYRILLIC CAPITAL LETTER TCHE	[21CF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA692, 0x0061 };
    uint32_t const ces[9] = { 0x21CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_305)
{
    // A692 0041;	
    // (Ꚓ) CYRILLIC CAPITAL LETTER TCHE	[21CF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA692, 0x0041 };
    uint32_t const ces[9] = { 0x21CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_306)
{
    // A693 0062;	
    // (ꚓ) CYRILLIC SMALL LETTER TCHE	[21CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA693, 0x0062 };
    uint32_t const ces[9] = { 0x21CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_307)
{
    // A692 0062;	
    // (Ꚓ) CYRILLIC CAPITAL LETTER TCHE	[21CF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA692, 0x0062 };
    uint32_t const ces[9] = { 0x21CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_308)
{
    // 04B7 0021;	
    // (ҷ) CYRILLIC SMALL LETTER CHE WITH DESCENDER	[21D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B7, 0x0021 };
    uint32_t const ces[9] = { 0x21D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_309)
{
    // 04B6 0021;	
    // (Ҷ) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER	[21D0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B6, 0x0021 };
    uint32_t const ces[9] = { 0x21D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_310)
{
    // 04B7 003F;	
    // (ҷ) CYRILLIC SMALL LETTER CHE WITH DESCENDER	[21D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B7, 0x003F };
    uint32_t const ces[9] = { 0x21D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_311)
{
    // 04B6 003F;	
    // (Ҷ) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER	[21D0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B6, 0x003F };
    uint32_t const ces[9] = { 0x21D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_312)
{
    // 04B7 0061;	
    // (ҷ) CYRILLIC SMALL LETTER CHE WITH DESCENDER	[21D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B7, 0x0061 };
    uint32_t const ces[9] = { 0x21D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_313)
{
    // 04B7 0041;	
    // (ҷ) CYRILLIC SMALL LETTER CHE WITH DESCENDER	[21D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04B7, 0x0041 };
    uint32_t const ces[9] = { 0x21D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_314)
{
    // 04B6 0061;	
    // (Ҷ) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER	[21D0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B6, 0x0061 };
    uint32_t const ces[9] = { 0x21D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_315)
{
    // 04B6 0041;	
    // (Ҷ) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER	[21D0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04B6, 0x0041 };
    uint32_t const ces[9] = { 0x21D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_316)
{
    // 04B7 0062;	
    // (ҷ) CYRILLIC SMALL LETTER CHE WITH DESCENDER	[21D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B7, 0x0062 };
    uint32_t const ces[9] = { 0x21D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_317)
{
    // 04B6 0062;	
    // (Ҷ) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER	[21D0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B6, 0x0062 };
    uint32_t const ces[9] = { 0x21D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_318)
{
    // 04CC 0021;	
    // (ӌ) CYRILLIC SMALL LETTER KHAKASSIAN CHE	[21D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CC, 0x0021 };
    uint32_t const ces[9] = { 0x21D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_319)
{
    // 04CB 0021;	
    // (Ӌ) CYRILLIC CAPITAL LETTER KHAKASSIAN CHE	[21D4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CB, 0x0021 };
    uint32_t const ces[9] = { 0x21D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_320)
{
    // 04CC 003F;	
    // (ӌ) CYRILLIC SMALL LETTER KHAKASSIAN CHE	[21D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CC, 0x003F };
    uint32_t const ces[9] = { 0x21D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_321)
{
    // 04CB 003F;	
    // (Ӌ) CYRILLIC CAPITAL LETTER KHAKASSIAN CHE	[21D4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CB, 0x003F };
    uint32_t const ces[9] = { 0x21D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_322)
{
    // 04CC 0061;	
    // (ӌ) CYRILLIC SMALL LETTER KHAKASSIAN CHE	[21D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CC, 0x0061 };
    uint32_t const ces[9] = { 0x21D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_323)
{
    // 04CC 0041;	
    // (ӌ) CYRILLIC SMALL LETTER KHAKASSIAN CHE	[21D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04CC, 0x0041 };
    uint32_t const ces[9] = { 0x21D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_324)
{
    // 04CB 0061;	
    // (Ӌ) CYRILLIC CAPITAL LETTER KHAKASSIAN CHE	[21D4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CB, 0x0061 };
    uint32_t const ces[9] = { 0x21D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_325)
{
    // 04CB 0041;	
    // (Ӌ) CYRILLIC CAPITAL LETTER KHAKASSIAN CHE	[21D4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04CB, 0x0041 };
    uint32_t const ces[9] = { 0x21D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_326)
{
    // 04CC 0062;	
    // (ӌ) CYRILLIC SMALL LETTER KHAKASSIAN CHE	[21D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CC, 0x0062 };
    uint32_t const ces[9] = { 0x21D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_327)
{
    // 04CB 0062;	
    // (Ӌ) CYRILLIC CAPITAL LETTER KHAKASSIAN CHE	[21D4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04CB, 0x0062 };
    uint32_t const ces[9] = { 0x21D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_328)
{
    // 04B9 0021;	
    // (ҹ) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE	[21D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B9, 0x0021 };
    uint32_t const ces[9] = { 0x21D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_329)
{
    // 04B8 0021;	
    // (Ҹ) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE	[21D8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B8, 0x0021 };
    uint32_t const ces[9] = { 0x21D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_330)
{
    // 04B9 003F;	
    // (ҹ) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE	[21D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B9, 0x003F };
    uint32_t const ces[9] = { 0x21D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_331)
{
    // 04B8 003F;	
    // (Ҹ) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE	[21D8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B8, 0x003F };
    uint32_t const ces[9] = { 0x21D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_332)
{
    // 04B9 0061;	
    // (ҹ) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE	[21D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B9, 0x0061 };
    uint32_t const ces[9] = { 0x21D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_333)
{
    // 04B9 0041;	
    // (ҹ) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE	[21D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04B9, 0x0041 };
    uint32_t const ces[9] = { 0x21D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_334)
{
    // 04B8 0061;	
    // (Ҹ) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE	[21D8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B8, 0x0061 };
    uint32_t const ces[9] = { 0x21D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_335)
{
    // 04B8 0041;	
    // (Ҹ) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE	[21D8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04B8, 0x0041 };
    uint32_t const ces[9] = { 0x21D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_336)
{
    // 04B9 0062;	
    // (ҹ) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE	[21D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04B9, 0x0062 };
    uint32_t const ces[9] = { 0x21D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_337)
{
    // 04B8 0062;	
    // (Ҹ) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE	[21D8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04B8, 0x0062 };
    uint32_t const ces[9] = { 0x21D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_338)
{
    // A687 0021;	
    // (ꚇ) CYRILLIC SMALL LETTER CCHE	[21DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA687, 0x0021 };
    uint32_t const ces[9] = { 0x21DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_339)
{
    // A686 0021;	
    // (Ꚇ) CYRILLIC CAPITAL LETTER CCHE	[21DC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA686, 0x0021 };
    uint32_t const ces[9] = { 0x21DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_340)
{
    // A687 003F;	
    // (ꚇ) CYRILLIC SMALL LETTER CCHE	[21DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA687, 0x003F };
    uint32_t const ces[9] = { 0x21DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_341)
{
    // A686 003F;	
    // (Ꚇ) CYRILLIC CAPITAL LETTER CCHE	[21DC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA686, 0x003F };
    uint32_t const ces[9] = { 0x21DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_342)
{
    // A687 0061;	
    // (ꚇ) CYRILLIC SMALL LETTER CCHE	[21DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA687, 0x0061 };
    uint32_t const ces[9] = { 0x21DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_343)
{
    // A687 0041;	
    // (ꚇ) CYRILLIC SMALL LETTER CCHE	[21DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA687, 0x0041 };
    uint32_t const ces[9] = { 0x21DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_344)
{
    // A686 0061;	
    // (Ꚇ) CYRILLIC CAPITAL LETTER CCHE	[21DC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA686, 0x0061 };
    uint32_t const ces[9] = { 0x21DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_345)
{
    // A686 0041;	
    // (Ꚇ) CYRILLIC CAPITAL LETTER CCHE	[21DC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA686, 0x0041 };
    uint32_t const ces[9] = { 0x21DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_346)
{
    // A687 0062;	
    // (ꚇ) CYRILLIC SMALL LETTER CCHE	[21DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA687, 0x0062 };
    uint32_t const ces[9] = { 0x21DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_347)
{
    // A686 0062;	
    // (Ꚇ) CYRILLIC CAPITAL LETTER CCHE	[21DC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA686, 0x0062 };
    uint32_t const ces[9] = { 0x21DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_348)
{
    // 04BD 0021;	
    // (ҽ) CYRILLIC SMALL LETTER ABKHASIAN CHE	[21DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BD, 0x0021 };
    uint32_t const ces[9] = { 0x21DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_349)
{
    // 04BC 0021;	
    // (Ҽ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE	[21DD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BC, 0x0021 };
    uint32_t const ces[9] = { 0x21DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_350)
{
    // 04BD 003F;	
    // (ҽ) CYRILLIC SMALL LETTER ABKHASIAN CHE	[21DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BD, 0x003F };
    uint32_t const ces[9] = { 0x21DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_351)
{
    // 04BC 003F;	
    // (Ҽ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE	[21DD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BC, 0x003F };
    uint32_t const ces[9] = { 0x21DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_352)
{
    // 04BD 0061;	
    // (ҽ) CYRILLIC SMALL LETTER ABKHASIAN CHE	[21DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BD, 0x0061 };
    uint32_t const ces[9] = { 0x21DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_353)
{
    // 04BD 0041;	
    // (ҽ) CYRILLIC SMALL LETTER ABKHASIAN CHE	[21DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04BD, 0x0041 };
    uint32_t const ces[9] = { 0x21DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_354)
{
    // 04BC 0061;	
    // (Ҽ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE	[21DD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BC, 0x0061 };
    uint32_t const ces[9] = { 0x21DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_355)
{
    // 04BC 0041;	
    // (Ҽ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE	[21DD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04BC, 0x0041 };
    uint32_t const ces[9] = { 0x21DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_356)
{
    // 04BD 0062;	
    // (ҽ) CYRILLIC SMALL LETTER ABKHASIAN CHE	[21DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BD, 0x0062 };
    uint32_t const ces[9] = { 0x21DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_357)
{
    // 04BC 0062;	
    // (Ҽ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE	[21DD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BC, 0x0062 };
    uint32_t const ces[9] = { 0x21DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_358)
{
    // 04BF 0021;	
    // (ҿ) CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BF, 0x0021 };
    uint32_t const ces[9] = { 0x21E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_359)
{
    // 04BE 0021;	
    // (Ҿ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BE, 0x0021 };
    uint32_t const ces[9] = { 0x21E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_360)
{
    // 04BF 003F;	
    // (ҿ) CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BF, 0x003F };
    uint32_t const ces[9] = { 0x21E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_361)
{
    // 04BE 003F;	
    // (Ҿ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BE, 0x003F };
    uint32_t const ces[9] = { 0x21E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_362)
{
    // 04BF 0061;	
    // (ҿ) CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BF, 0x0061 };
    uint32_t const ces[9] = { 0x21E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_363)
{
    // 04BF 0041;	
    // (ҿ) CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04BF, 0x0041 };
    uint32_t const ces[9] = { 0x21E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_364)
{
    // 04BE 0061;	
    // (Ҿ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BE, 0x0061 };
    uint32_t const ces[9] = { 0x21E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_365)
{
    // 04BE 0041;	
    // (Ҿ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04BE, 0x0041 };
    uint32_t const ces[9] = { 0x21E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_366)
{
    // 04BF 0062;	
    // (ҿ) CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04BF, 0x0062 };
    uint32_t const ces[9] = { 0x21E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_367)
{
    // 04BE 0062;	
    // (Ҿ) CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER	[21E1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04BE, 0x0062 };
    uint32_t const ces[9] = { 0x21E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_368)
{
    // 045F 0021;	
    // (џ) CYRILLIC SMALL LETTER DZHE	[21E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x045F, 0x0021 };
    uint32_t const ces[9] = { 0x21E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_369)
{
    // 040F 0021;	
    // (Џ) CYRILLIC CAPITAL LETTER DZHE	[21E5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x040F, 0x0021 };
    uint32_t const ces[9] = { 0x21E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_370)
{
    // 045F 003F;	
    // (џ) CYRILLIC SMALL LETTER DZHE	[21E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x045F, 0x003F };
    uint32_t const ces[9] = { 0x21E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_371)
{
    // 040F 003F;	
    // (Џ) CYRILLIC CAPITAL LETTER DZHE	[21E5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x040F, 0x003F };
    uint32_t const ces[9] = { 0x21E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_372)
{
    // 045F 0061;	
    // (џ) CYRILLIC SMALL LETTER DZHE	[21E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x045F, 0x0061 };
    uint32_t const ces[9] = { 0x21E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_373)
{
    // 045F 0041;	
    // (џ) CYRILLIC SMALL LETTER DZHE	[21E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x045F, 0x0041 };
    uint32_t const ces[9] = { 0x21E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_374)
{
    // 040F 0061;	
    // (Џ) CYRILLIC CAPITAL LETTER DZHE	[21E5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x040F, 0x0061 };
    uint32_t const ces[9] = { 0x21E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_375)
{
    // 040F 0041;	
    // (Џ) CYRILLIC CAPITAL LETTER DZHE	[21E5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x040F, 0x0041 };
    uint32_t const ces[9] = { 0x21E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_376)
{
    // 045F 0062;	
    // (џ) CYRILLIC SMALL LETTER DZHE	[21E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x045F, 0x0062 };
    uint32_t const ces[9] = { 0x21E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_377)
{
    // 040F 0062;	
    // (Џ) CYRILLIC CAPITAL LETTER DZHE	[21E5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x040F, 0x0062 };
    uint32_t const ces[9] = { 0x21E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_378)
{
    // 0334 2DF2;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF2 };
    uint32_t const ces[8] = { 0x21E9, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_379)
{
    // 2DF2 0334;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF2, 0x0334 };
    uint32_t const ces[8] = { 0x21E9, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_380)
{
    // 0448 0021;	
    // (ш) CYRILLIC SMALL LETTER SHA	[21E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0448, 0x0021 };
    uint32_t const ces[9] = { 0x21E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_381)
{
    // 2DF2 0021;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF2, 0x0021 };
    uint32_t const ces[9] = { 0x21E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_382)
{
    // 0428 0021;	
    // (Ш) CYRILLIC CAPITAL LETTER SHA	[21E9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0428, 0x0021 };
    uint32_t const ces[9] = { 0x21E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_383)
{
    // 0448 003F;	
    // (ш) CYRILLIC SMALL LETTER SHA	[21E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0448, 0x003F };
    uint32_t const ces[9] = { 0x21E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_384)
{
    // 2DF2 003F;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF2, 0x003F };
    uint32_t const ces[9] = { 0x21E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_385)
{
    // 0428 003F;	
    // (Ш) CYRILLIC CAPITAL LETTER SHA	[21E9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0428, 0x003F };
    uint32_t const ces[9] = { 0x21E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_386)
{
    // 0448 0061;	
    // (ш) CYRILLIC SMALL LETTER SHA	[21E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0448, 0x0061 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_387)
{
    // 0448 0041;	
    // (ш) CYRILLIC SMALL LETTER SHA	[21E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0448, 0x0041 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_388)
{
    // 2DF2 0061;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF2, 0x0061 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_389)
{
    // 2DF2 0041;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF2, 0x0041 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_390)
{
    // 0428 0061;	
    // (Ш) CYRILLIC CAPITAL LETTER SHA	[21E9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0428, 0x0061 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_391)
{
    // 0428 0041;	
    // (Ш) CYRILLIC CAPITAL LETTER SHA	[21E9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0428, 0x0041 };
    uint32_t const ces[9] = { 0x21E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_392)
{
    // 0448 0062;	
    // (ш) CYRILLIC SMALL LETTER SHA	[21E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0448, 0x0062 };
    uint32_t const ces[9] = { 0x21E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_393)
{
    // 2DF2 0062;	
    // (ⷲ) COMBINING CYRILLIC LETTER SHA	[21E9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF2, 0x0062 };
    uint32_t const ces[9] = { 0x21E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_394)
{
    // 0428 0062;	
    // (Ш) CYRILLIC CAPITAL LETTER SHA	[21E9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0428, 0x0062 };
    uint32_t const ces[9] = { 0x21E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_395)
{
    // A697 0021;	
    // (ꚗ) CYRILLIC SMALL LETTER SHWE	[21ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA697, 0x0021 };
    uint32_t const ces[9] = { 0x21ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_396)
{
    // A696 0021;	
    // (Ꚗ) CYRILLIC CAPITAL LETTER SHWE	[21ED 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA696, 0x0021 };
    uint32_t const ces[9] = { 0x21ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_397)
{
    // A697 003F;	
    // (ꚗ) CYRILLIC SMALL LETTER SHWE	[21ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA697, 0x003F };
    uint32_t const ces[9] = { 0x21ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_398)
{
    // A696 003F;	
    // (Ꚗ) CYRILLIC CAPITAL LETTER SHWE	[21ED 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA696, 0x003F };
    uint32_t const ces[9] = { 0x21ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_399)
{
    // A697 0061;	
    // (ꚗ) CYRILLIC SMALL LETTER SHWE	[21ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA697, 0x0061 };
    uint32_t const ces[9] = { 0x21ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_400)
{
    // A697 0041;	
    // (ꚗ) CYRILLIC SMALL LETTER SHWE	[21ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA697, 0x0041 };
    uint32_t const ces[9] = { 0x21ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_401)
{
    // A696 0061;	
    // (Ꚗ) CYRILLIC CAPITAL LETTER SHWE	[21ED 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA696, 0x0061 };
    uint32_t const ces[9] = { 0x21ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_402)
{
    // A696 0041;	
    // (Ꚗ) CYRILLIC CAPITAL LETTER SHWE	[21ED 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA696, 0x0041 };
    uint32_t const ces[9] = { 0x21ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_403)
{
    // A697 0062;	
    // (ꚗ) CYRILLIC SMALL LETTER SHWE	[21ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA697, 0x0062 };
    uint32_t const ces[9] = { 0x21ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_404)
{
    // A696 0062;	
    // (Ꚗ) CYRILLIC CAPITAL LETTER SHWE	[21ED 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA696, 0x0062 };
    uint32_t const ces[9] = { 0x21ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_405)
{
    // 0334 2DF3;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF3 };
    uint32_t const ces[8] = { 0x21EE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_406)
{
    // 2DF3 0334;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF3, 0x0334 };
    uint32_t const ces[8] = { 0x21EE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_407)
{
    // 0449 0021;	
    // (щ) CYRILLIC SMALL LETTER SHCHA	[21EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0449, 0x0021 };
    uint32_t const ces[9] = { 0x21EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_408)
{
    // 2DF3 0021;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF3, 0x0021 };
    uint32_t const ces[9] = { 0x21EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_409)
{
    // 0429 0021;	
    // (Щ) CYRILLIC CAPITAL LETTER SHCHA	[21EE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0429, 0x0021 };
    uint32_t const ces[9] = { 0x21EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_410)
{
    // 0449 003F;	
    // (щ) CYRILLIC SMALL LETTER SHCHA	[21EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0449, 0x003F };
    uint32_t const ces[9] = { 0x21EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_411)
{
    // 2DF3 003F;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF3, 0x003F };
    uint32_t const ces[9] = { 0x21EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_412)
{
    // 0429 003F;	
    // (Щ) CYRILLIC CAPITAL LETTER SHCHA	[21EE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0429, 0x003F };
    uint32_t const ces[9] = { 0x21EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_413)
{
    // 0449 0061;	
    // (щ) CYRILLIC SMALL LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0449, 0x0061 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_414)
{
    // 0449 0041;	
    // (щ) CYRILLIC SMALL LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0449, 0x0041 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_415)
{
    // 2DF3 0061;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF3, 0x0061 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_416)
{
    // 2DF3 0041;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF3, 0x0041 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_417)
{
    // 0429 0061;	
    // (Щ) CYRILLIC CAPITAL LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0429, 0x0061 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_418)
{
    // 0429 0041;	
    // (Щ) CYRILLIC CAPITAL LETTER SHCHA	[21EE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0429, 0x0041 };
    uint32_t const ces[9] = { 0x21EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_419)
{
    // 0449 0062;	
    // (щ) CYRILLIC SMALL LETTER SHCHA	[21EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0449, 0x0062 };
    uint32_t const ces[9] = { 0x21EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_420)
{
    // 2DF3 0062;	
    // (ⷳ) COMBINING CYRILLIC LETTER SHCHA	[21EE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF3, 0x0062 };
    uint32_t const ces[9] = { 0x21EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_421)
{
    // 0429 0062;	
    // (Щ) CYRILLIC CAPITAL LETTER SHCHA	[21EE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0429, 0x0062 };
    uint32_t const ces[9] = { 0x21EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_422)
{
    // A64F 0021;	
    // (ꙏ) CYRILLIC SMALL LETTER NEUTRAL YER	[21F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64F, 0x0021 };
    uint32_t const ces[9] = { 0x21F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_423)
{
    // A64E 0021;	
    // (Ꙏ) CYRILLIC CAPITAL LETTER NEUTRAL YER	[21F2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64E, 0x0021 };
    uint32_t const ces[9] = { 0x21F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_424)
{
    // A64F 003F;	
    // (ꙏ) CYRILLIC SMALL LETTER NEUTRAL YER	[21F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64F, 0x003F };
    uint32_t const ces[9] = { 0x21F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_425)
{
    // A64E 003F;	
    // (Ꙏ) CYRILLIC CAPITAL LETTER NEUTRAL YER	[21F2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64E, 0x003F };
    uint32_t const ces[9] = { 0x21F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_426)
{
    // A64F 0061;	
    // (ꙏ) CYRILLIC SMALL LETTER NEUTRAL YER	[21F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64F, 0x0061 };
    uint32_t const ces[9] = { 0x21F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_427)
{
    // A64F 0041;	
    // (ꙏ) CYRILLIC SMALL LETTER NEUTRAL YER	[21F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA64F, 0x0041 };
    uint32_t const ces[9] = { 0x21F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_428)
{
    // A64E 0061;	
    // (Ꙏ) CYRILLIC CAPITAL LETTER NEUTRAL YER	[21F2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64E, 0x0061 };
    uint32_t const ces[9] = { 0x21F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_429)
{
    // A64E 0041;	
    // (Ꙏ) CYRILLIC CAPITAL LETTER NEUTRAL YER	[21F2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA64E, 0x0041 };
    uint32_t const ces[9] = { 0x21F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_430)
{
    // A64F 0062;	
    // (ꙏ) CYRILLIC SMALL LETTER NEUTRAL YER	[21F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA64F, 0x0062 };
    uint32_t const ces[9] = { 0x21F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_431)
{
    // A64E 0062;	
    // (Ꙏ) CYRILLIC CAPITAL LETTER NEUTRAL YER	[21F2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA64E, 0x0062 };
    uint32_t const ces[9] = { 0x21F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_432)
{
    // 2E2F 0021;	
    // (ⸯ) VERTICAL TILDE	[21F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2F, 0x0021 };
    uint32_t const ces[9] = { 0x21F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_433)
{
    // 2E2F 003F;	
    // (ⸯ) VERTICAL TILDE	[21F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2F, 0x003F };
    uint32_t const ces[9] = { 0x21F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_434)
{
    // 2E2F 0061;	
    // (ⸯ) VERTICAL TILDE	[21F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2F, 0x0061 };
    uint32_t const ces[9] = { 0x21F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_435)
{
    // 2E2F 0041;	
    // (ⸯ) VERTICAL TILDE	[21F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E2F, 0x0041 };
    uint32_t const ces[9] = { 0x21F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_436)
{
    // 2E2F 0062;	
    // (ⸯ) VERTICAL TILDE	[21F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2F, 0x0062 };
    uint32_t const ces[9] = { 0x21F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_437)
{
    // A67F 0021;	
    // (ꙿ) CYRILLIC PAYEROK	[21F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67F, 0x0021 };
    uint32_t const ces[9] = { 0x21F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_438)
{
    // A67F 003F;	
    // (ꙿ) CYRILLIC PAYEROK	[21F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67F, 0x003F };
    uint32_t const ces[9] = { 0x21F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_439)
{
    // A67F 0061;	
    // (ꙿ) CYRILLIC PAYEROK	[21F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67F, 0x0061 };
    uint32_t const ces[9] = { 0x21F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_440)
{
    // A67F 0041;	
    // (ꙿ) CYRILLIC PAYEROK	[21F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA67F, 0x0041 };
    uint32_t const ces[9] = { 0x21F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_441)
{
    // A67F 0062;	
    // (ꙿ) CYRILLIC PAYEROK	[21F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67F, 0x0062 };
    uint32_t const ces[9] = { 0x21F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_442)
{
    // 0334 A678;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA678 };
    uint32_t const ces[8] = { 0x21F5, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_443)
{
    // A678 0334;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA678, 0x0334 };
    uint32_t const ces[8] = { 0x21F5, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_444)
{
    // 044A 0021;	
    // (ъ) CYRILLIC SMALL LETTER HARD SIGN	[21F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044A, 0x0021 };
    uint32_t const ces[9] = { 0x21F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_445)
{
    // 1C86 0021;	
    // (ᲆ) CYRILLIC SMALL LETTER TALL HARD SIGN	[21F5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C86, 0x0021 };
    uint32_t const ces[9] = { 0x21F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_446)
{
    // A678 0021;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA678, 0x0021 };
    uint32_t const ces[9] = { 0x21F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_447)
{
    // 042A 0021;	
    // (Ъ) CYRILLIC CAPITAL LETTER HARD SIGN	[21F5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042A, 0x0021 };
    uint32_t const ces[9] = { 0x21F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_448)
{
    // A69C 0021;	
    // (ꚜ) MODIFIER LETTER CYRILLIC HARD SIGN	[21F5 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69C, 0x0021 };
    uint32_t const ces[9] = { 0x21F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_449)
{
    // 044A 003F;	
    // (ъ) CYRILLIC SMALL LETTER HARD SIGN	[21F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044A, 0x003F };
    uint32_t const ces[9] = { 0x21F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_450)
{
    // 1C86 003F;	
    // (ᲆ) CYRILLIC SMALL LETTER TALL HARD SIGN	[21F5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C86, 0x003F };
    uint32_t const ces[9] = { 0x21F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_451)
{
    // A678 003F;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA678, 0x003F };
    uint32_t const ces[9] = { 0x21F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_452)
{
    // 042A 003F;	
    // (Ъ) CYRILLIC CAPITAL LETTER HARD SIGN	[21F5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042A, 0x003F };
    uint32_t const ces[9] = { 0x21F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_453)
{
    // A69C 003F;	
    // (ꚜ) MODIFIER LETTER CYRILLIC HARD SIGN	[21F5 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69C, 0x003F };
    uint32_t const ces[9] = { 0x21F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_454)
{
    // 044A 0061;	
    // (ъ) CYRILLIC SMALL LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044A, 0x0061 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_455)
{
    // 044A 0041;	
    // (ъ) CYRILLIC SMALL LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044A, 0x0041 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_456)
{
    // 1C86 0061;	
    // (ᲆ) CYRILLIC SMALL LETTER TALL HARD SIGN	[21F5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C86, 0x0061 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_457)
{
    // A678 0061;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA678, 0x0061 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_458)
{
    // 1C86 0041;	
    // (ᲆ) CYRILLIC SMALL LETTER TALL HARD SIGN	[21F5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1C86, 0x0041 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_459)
{
    // A678 0041;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA678, 0x0041 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_460)
{
    // 042A 0061;	
    // (Ъ) CYRILLIC CAPITAL LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042A, 0x0061 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_461)
{
    // 042A 0041;	
    // (Ъ) CYRILLIC CAPITAL LETTER HARD SIGN	[21F5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042A, 0x0041 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_462)
{
    // A69C 0061;	
    // (ꚜ) MODIFIER LETTER CYRILLIC HARD SIGN	[21F5 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69C, 0x0061 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_463)
{
    // A69C 0041;	
    // (ꚜ) MODIFIER LETTER CYRILLIC HARD SIGN	[21F5 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0xA69C, 0x0041 };
    uint32_t const ces[9] = { 0x21F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_464)
{
    // 044A 0062;	
    // (ъ) CYRILLIC SMALL LETTER HARD SIGN	[21F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044A, 0x0062 };
    uint32_t const ces[9] = { 0x21F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_465)
{
    // 1C86 0062;	
    // (ᲆ) CYRILLIC SMALL LETTER TALL HARD SIGN	[21F5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C86, 0x0062 };
    uint32_t const ces[9] = { 0x21F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_466)
{
    // A678 0062;	
    // (ꙸ) COMBINING CYRILLIC LETTER HARD SIGN	[21F5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA678, 0x0062 };
    uint32_t const ces[9] = { 0x21F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_467)
{
    // 042A 0062;	
    // (Ъ) CYRILLIC CAPITAL LETTER HARD SIGN	[21F5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042A, 0x0062 };
    uint32_t const ces[9] = { 0x21F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_468)
{
    // A69C 0062;	
    // (ꚜ) MODIFIER LETTER CYRILLIC HARD SIGN	[21F5 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69C, 0x0062 };
    uint32_t const ces[9] = { 0x21F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_469)
{
    // A651 0021;	
    // (ꙑ) CYRILLIC SMALL LETTER YERU WITH BACK YER	[21F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA651, 0x0021 };
    uint32_t const ces[9] = { 0x21F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_470)
{
    // A650 0021;	
    // (Ꙑ) CYRILLIC CAPITAL LETTER YERU WITH BACK YER	[21F9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA650, 0x0021 };
    uint32_t const ces[9] = { 0x21F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_471)
{
    // A651 003F;	
    // (ꙑ) CYRILLIC SMALL LETTER YERU WITH BACK YER	[21F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA651, 0x003F };
    uint32_t const ces[9] = { 0x21F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_472)
{
    // A650 003F;	
    // (Ꙑ) CYRILLIC CAPITAL LETTER YERU WITH BACK YER	[21F9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA650, 0x003F };
    uint32_t const ces[9] = { 0x21F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_473)
{
    // A651 0061;	
    // (ꙑ) CYRILLIC SMALL LETTER YERU WITH BACK YER	[21F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA651, 0x0061 };
    uint32_t const ces[9] = { 0x21F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_474)
{
    // A651 0041;	
    // (ꙑ) CYRILLIC SMALL LETTER YERU WITH BACK YER	[21F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA651, 0x0041 };
    uint32_t const ces[9] = { 0x21F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_475)
{
    // A650 0061;	
    // (Ꙑ) CYRILLIC CAPITAL LETTER YERU WITH BACK YER	[21F9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA650, 0x0061 };
    uint32_t const ces[9] = { 0x21F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_476)
{
    // A650 0041;	
    // (Ꙑ) CYRILLIC CAPITAL LETTER YERU WITH BACK YER	[21F9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA650, 0x0041 };
    uint32_t const ces[9] = { 0x21F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_477)
{
    // A651 0062;	
    // (ꙑ) CYRILLIC SMALL LETTER YERU WITH BACK YER	[21F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA651, 0x0062 };
    uint32_t const ces[9] = { 0x21F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_478)
{
    // A650 0062;	
    // (Ꙑ) CYRILLIC CAPITAL LETTER YERU WITH BACK YER	[21F9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA650, 0x0062 };
    uint32_t const ces[9] = { 0x21F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_479)
{
    // 044B 0308 0334;	
    // (ӹ) CYRILLIC SMALL LETTER YERU, COMBINING DIAERESIS	[21FA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x044B, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_480)
{
    // 044B 0334 0308;	
    // (ы̴) CYRILLIC SMALL LETTER YERU, COMBINING TILDE OVERLAY	[21FA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x044B, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_481)
{
    // 04F9 0334;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F9, 0x0334 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_482)
{
    // 042B 0308 0334;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU, COMBINING DIAERESIS	[21FA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x042B, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_483)
{
    // 042B 0334 0308;	
    // (Ы̴) CYRILLIC CAPITAL LETTER YERU, COMBINING TILDE OVERLAY	[21FA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x042B, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_484)
{
    // 04F8 0334;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F8, 0x0334 };
    uint32_t const ces[10] = { 0x21FA, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_485)
{
    // 0334 A679;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA679 };
    uint32_t const ces[8] = { 0x21FA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_486)
{
    // A679 0334;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA679, 0x0334 };
    uint32_t const ces[8] = { 0x21FA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_487)
{
    // 044B 0021;	
    // (ы) CYRILLIC SMALL LETTER YERU	[21FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044B, 0x0021 };
    uint32_t const ces[9] = { 0x21FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_488)
{
    // A679 0021;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA679, 0x0021 };
    uint32_t const ces[9] = { 0x21FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_489)
{
    // 042B 0021;	
    // (Ы) CYRILLIC CAPITAL LETTER YERU	[21FA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042B, 0x0021 };
    uint32_t const ces[9] = { 0x21FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_490)
{
    // 04F9 0021;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F9, 0x0021 };
    uint32_t const ces[11] = { 0x21FA, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_491)
{
    // 04F8 0021;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F8, 0x0021 };
    uint32_t const ces[11] = { 0x21FA, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_492)
{
    // 044B 003F;	
    // (ы) CYRILLIC SMALL LETTER YERU	[21FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044B, 0x003F };
    uint32_t const ces[9] = { 0x21FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_493)
{
    // A679 003F;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA679, 0x003F };
    uint32_t const ces[9] = { 0x21FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_494)
{
    // 042B 003F;	
    // (Ы) CYRILLIC CAPITAL LETTER YERU	[21FA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042B, 0x003F };
    uint32_t const ces[9] = { 0x21FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_495)
{
    // 04F9 003F;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F9, 0x003F };
    uint32_t const ces[11] = { 0x21FA, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_496)
{
    // 04F8 003F;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F8, 0x003F };
    uint32_t const ces[11] = { 0x21FA, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_497)
{
    // 044B 0061;	
    // (ы) CYRILLIC SMALL LETTER YERU	[21FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044B, 0x0061 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_498)
{
    // 044B 0041;	
    // (ы) CYRILLIC SMALL LETTER YERU	[21FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044B, 0x0041 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_140_499)
{
    // A679 0061;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA679, 0x0061 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

