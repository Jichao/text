// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_196_000)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA83, 0x0061 };

    // AAB9 0001 AA83 0061;	
    // (ꪹ'\u0001'ꪃ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA83 0061;	
    // (ꪹ'\u0001'ꪃ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_001)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA83, 0x0061 };

    // AAB9 0591 AA83 0061;	
    // (ꪹ֑ꪃ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA83 0061;	
    // (ꪹ֑ꪃ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_002)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA83, 0x0061 };

    // AAB9 1D165 AA83 0061;	
    // (ꪹ𝅥ꪃ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA83 0061;	
    // (ꪹ𝅥ꪃ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2EC9 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_003)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA84, 0x0061 };

    // AAB9 0001 AA84 0061;	
    // (ꪹ'\u0001'ꪄ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA84 0061;	
    // (ꪹ'\u0001'ꪄ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_004)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA84, 0x0061 };

    // AAB9 0591 AA84 0061;	
    // (ꪹ֑ꪄ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA84 0061;	
    // (ꪹ֑ꪄ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_005)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA84, 0x0061 };

    // AAB9 1D165 AA84 0061;	
    // (ꪹ𝅥ꪄ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA84 0061;	
    // (ꪹ𝅥ꪄ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2EC9 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_006)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA85, 0x0061 };

    // AAB9 0001 AA85 0061;	
    // (ꪹ'\u0001'ꪅ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA85 0061;	
    // (ꪹ'\u0001'ꪅ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_007)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA85, 0x0061 };

    // AAB9 0591 AA85 0061;	
    // (ꪹ֑ꪅ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA85 0061;	
    // (ꪹ֑ꪅ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_008)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA85, 0x0061 };

    // AAB9 1D165 AA85 0061;	
    // (ꪹ𝅥ꪅ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA85 0061;	
    // (ꪹ𝅥ꪅ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2EC9 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_009)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA86, 0x0061 };

    // AAB9 0001 AA86 0061;	
    // (ꪹ'\u0001'ꪆ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA86 0061;	
    // (ꪹ'\u0001'ꪆ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_010)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA86, 0x0061 };

    // AAB9 0591 AA86 0061;	
    // (ꪹ֑ꪆ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA86 0061;	
    // (ꪹ֑ꪆ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_011)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA86, 0x0061 };

    // AAB9 1D165 AA86 0061;	
    // (ꪹ𝅥ꪆ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA86 0061;	
    // (ꪹ𝅥ꪆ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2EC9 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_012)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA87, 0x0061 };

    // AAB9 0001 AA87 0061;	
    // (ꪹ'\u0001'ꪇ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA87 0061;	
    // (ꪹ'\u0001'ꪇ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_013)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA87, 0x0061 };

    // AAB9 0591 AA87 0061;	
    // (ꪹ֑ꪇ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA87 0061;	
    // (ꪹ֑ꪇ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_014)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA87, 0x0061 };

    // AAB9 1D165 AA87 0061;	
    // (ꪹ𝅥ꪇ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA87 0061;	
    // (ꪹ𝅥ꪇ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2EC9 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_015)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA88, 0x0061 };

    // AAB9 0001 AA88 0061;	
    // (ꪹ'\u0001'ꪈ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA88 0061;	
    // (ꪹ'\u0001'ꪈ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_016)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA88, 0x0061 };

    // AAB9 0591 AA88 0061;	
    // (ꪹ֑ꪈ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA88 0061;	
    // (ꪹ֑ꪈ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_017)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA88, 0x0061 };

    // AAB9 1D165 AA88 0061;	
    // (ꪹ𝅥ꪈ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA88 0061;	
    // (ꪹ𝅥ꪈ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2EC9 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_018)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA89, 0x0061 };

    // AAB9 0001 AA89 0061;	
    // (ꪹ'\u0001'ꪉ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA89 0061;	
    // (ꪹ'\u0001'ꪉ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_019)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA89, 0x0061 };

    // AAB9 0591 AA89 0061;	
    // (ꪹ֑ꪉ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA89 0061;	
    // (ꪹ֑ꪉ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_020)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA89, 0x0061 };

    // AAB9 1D165 AA89 0061;	
    // (ꪹ𝅥ꪉ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA89 0061;	
    // (ꪹ𝅥ꪉ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2EC9 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_021)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8A, 0x0061 };

    // AAB9 0001 AA8A 0061;	
    // (ꪹ'\u0001'ꪊ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8A 0061;	
    // (ꪹ'\u0001'ꪊ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_022)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8A, 0x0061 };

    // AAB9 0591 AA8A 0061;	
    // (ꪹ֑ꪊ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8A 0061;	
    // (ꪹ֑ꪊ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_023)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8A, 0x0061 };

    // AAB9 1D165 AA8A 0061;	
    // (ꪹ𝅥ꪊ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8A 0061;	
    // (ꪹ𝅥ꪊ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2EC9 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_024)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8B, 0x0061 };

    // AAB9 0001 AA8B 0061;	
    // (ꪹ'\u0001'ꪋ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8B 0061;	
    // (ꪹ'\u0001'ꪋ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_025)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8B, 0x0061 };

    // AAB9 0591 AA8B 0061;	
    // (ꪹ֑ꪋ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8B 0061;	
    // (ꪹ֑ꪋ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_026)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8B, 0x0061 };

    // AAB9 1D165 AA8B 0061;	
    // (ꪹ𝅥ꪋ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8B 0061;	
    // (ꪹ𝅥ꪋ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2EC9 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_027)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8C, 0x0061 };

    // AAB9 0001 AA8C 0061;	
    // (ꪹ'\u0001'ꪌ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8C 0061;	
    // (ꪹ'\u0001'ꪌ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_028)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8C, 0x0061 };

    // AAB9 0591 AA8C 0061;	
    // (ꪹ֑ꪌ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8C 0061;	
    // (ꪹ֑ꪌ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_029)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8C, 0x0061 };

    // AAB9 1D165 AA8C 0061;	
    // (ꪹ𝅥ꪌ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8C 0061;	
    // (ꪹ𝅥ꪌ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2EC9 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_030)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8D, 0x0061 };

    // AAB9 0001 AA8D 0061;	
    // (ꪹ'\u0001'ꪍ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8D 0061;	
    // (ꪹ'\u0001'ꪍ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_031)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8D, 0x0061 };

    // AAB9 0591 AA8D 0061;	
    // (ꪹ֑ꪍ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8D 0061;	
    // (ꪹ֑ꪍ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_032)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8D, 0x0061 };

    // AAB9 1D165 AA8D 0061;	
    // (ꪹ𝅥ꪍ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8D 0061;	
    // (ꪹ𝅥ꪍ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2EC9 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_033)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8E, 0x0061 };

    // AAB9 0001 AA8E 0061;	
    // (ꪹ'\u0001'ꪎ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8E 0061;	
    // (ꪹ'\u0001'ꪎ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_034)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8E, 0x0061 };

    // AAB9 0591 AA8E 0061;	
    // (ꪹ֑ꪎ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8E 0061;	
    // (ꪹ֑ꪎ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_035)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8E, 0x0061 };

    // AAB9 1D165 AA8E 0061;	
    // (ꪹ𝅥ꪎ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8E 0061;	
    // (ꪹ𝅥ꪎ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2EC9 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_036)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA8F, 0x0061 };

    // AAB9 0001 AA8F 0061;	
    // (ꪹ'\u0001'ꪏ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA8F 0061;	
    // (ꪹ'\u0001'ꪏ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_037)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA8F, 0x0061 };

    // AAB9 0591 AA8F 0061;	
    // (ꪹ֑ꪏ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA8F 0061;	
    // (ꪹ֑ꪏ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_038)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA8F, 0x0061 };

    // AAB9 1D165 AA8F 0061;	
    // (ꪹ𝅥ꪏ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA8F 0061;	
    // (ꪹ𝅥ꪏ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2EC9 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_039)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA90, 0x0061 };

    // AAB9 0001 AA90 0061;	
    // (ꪹ'\u0001'ꪐ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA90 0061;	
    // (ꪹ'\u0001'ꪐ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_040)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA90, 0x0061 };

    // AAB9 0591 AA90 0061;	
    // (ꪹ֑ꪐ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA90 0061;	
    // (ꪹ֑ꪐ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_041)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA90, 0x0061 };

    // AAB9 1D165 AA90 0061;	
    // (ꪹ𝅥ꪐ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA90 0061;	
    // (ꪹ𝅥ꪐ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2EC9 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_042)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA91, 0x0061 };

    // AAB9 0001 AA91 0061;	
    // (ꪹ'\u0001'ꪑ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA91 0061;	
    // (ꪹ'\u0001'ꪑ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_043)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA91, 0x0061 };

    // AAB9 0591 AA91 0061;	
    // (ꪹ֑ꪑ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA91 0061;	
    // (ꪹ֑ꪑ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_044)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA91, 0x0061 };

    // AAB9 1D165 AA91 0061;	
    // (ꪹ𝅥ꪑ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA91 0061;	
    // (ꪹ𝅥ꪑ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2EC9 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_045)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA92, 0x0061 };

    // AAB9 0001 AA92 0061;	
    // (ꪹ'\u0001'ꪒ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA92 0061;	
    // (ꪹ'\u0001'ꪒ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_046)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA92, 0x0061 };

    // AAB9 0591 AA92 0061;	
    // (ꪹ֑ꪒ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA92 0061;	
    // (ꪹ֑ꪒ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_047)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA92, 0x0061 };

    // AAB9 1D165 AA92 0061;	
    // (ꪹ𝅥ꪒ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA92 0061;	
    // (ꪹ𝅥ꪒ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2EC9 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_048)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA93, 0x0061 };

    // AAB9 0001 AA93 0061;	
    // (ꪹ'\u0001'ꪓ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA93 0061;	
    // (ꪹ'\u0001'ꪓ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_049)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA93, 0x0061 };

    // AAB9 0591 AA93 0061;	
    // (ꪹ֑ꪓ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA93 0061;	
    // (ꪹ֑ꪓ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_050)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA93, 0x0061 };

    // AAB9 1D165 AA93 0061;	
    // (ꪹ𝅥ꪓ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA93 0061;	
    // (ꪹ𝅥ꪓ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2EC9 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_051)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA94, 0x0061 };

    // AAB9 0001 AA94 0061;	
    // (ꪹ'\u0001'ꪔ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA94 0061;	
    // (ꪹ'\u0001'ꪔ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_052)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA94, 0x0061 };

    // AAB9 0591 AA94 0061;	
    // (ꪹ֑ꪔ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA94 0061;	
    // (ꪹ֑ꪔ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_053)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA94, 0x0061 };

    // AAB9 1D165 AA94 0061;	
    // (ꪹ𝅥ꪔ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA94 0061;	
    // (ꪹ𝅥ꪔ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2EC9 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_054)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA95, 0x0061 };

    // AAB9 0001 AA95 0061;	
    // (ꪹ'\u0001'ꪕ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA95 0061;	
    // (ꪹ'\u0001'ꪕ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_055)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA95, 0x0061 };

    // AAB9 0591 AA95 0061;	
    // (ꪹ֑ꪕ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA95 0061;	
    // (ꪹ֑ꪕ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_056)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA95, 0x0061 };

    // AAB9 1D165 AA95 0061;	
    // (ꪹ𝅥ꪕ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA95 0061;	
    // (ꪹ𝅥ꪕ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2EC9 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_057)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA96, 0x0061 };

    // AAB9 0001 AA96 0061;	
    // (ꪹ'\u0001'ꪖ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA96 0061;	
    // (ꪹ'\u0001'ꪖ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_058)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA96, 0x0061 };

    // AAB9 0591 AA96 0061;	
    // (ꪹ֑ꪖ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA96 0061;	
    // (ꪹ֑ꪖ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_059)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA96, 0x0061 };

    // AAB9 1D165 AA96 0061;	
    // (ꪹ𝅥ꪖ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA96 0061;	
    // (ꪹ𝅥ꪖ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2EC9 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_060)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA97, 0x0061 };

    // AAB9 0001 AA97 0061;	
    // (ꪹ'\u0001'ꪗ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA97 0061;	
    // (ꪹ'\u0001'ꪗ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_061)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA97, 0x0061 };

    // AAB9 0591 AA97 0061;	
    // (ꪹ֑ꪗ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA97 0061;	
    // (ꪹ֑ꪗ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_062)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA97, 0x0061 };

    // AAB9 1D165 AA97 0061;	
    // (ꪹ𝅥ꪗ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA97 0061;	
    // (ꪹ𝅥ꪗ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2EC9 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_063)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA98, 0x0061 };

    // AAB9 0001 AA98 0061;	
    // (ꪹ'\u0001'ꪘ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA98 0061;	
    // (ꪹ'\u0001'ꪘ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_064)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA98, 0x0061 };

    // AAB9 0591 AA98 0061;	
    // (ꪹ֑ꪘ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA98 0061;	
    // (ꪹ֑ꪘ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_065)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA98, 0x0061 };

    // AAB9 1D165 AA98 0061;	
    // (ꪹ𝅥ꪘ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA98 0061;	
    // (ꪹ𝅥ꪘ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2EC9 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_066)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA99, 0x0061 };

    // AAB9 0001 AA99 0061;	
    // (ꪹ'\u0001'ꪙ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA99 0061;	
    // (ꪹ'\u0001'ꪙ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_067)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA99, 0x0061 };

    // AAB9 0591 AA99 0061;	
    // (ꪹ֑ꪙ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA99 0061;	
    // (ꪹ֑ꪙ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_068)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA99, 0x0061 };

    // AAB9 1D165 AA99 0061;	
    // (ꪹ𝅥ꪙ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA99 0061;	
    // (ꪹ𝅥ꪙ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2EC9 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_069)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9A, 0x0061 };

    // AAB9 0001 AA9A 0061;	
    // (ꪹ'\u0001'ꪚ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9A 0061;	
    // (ꪹ'\u0001'ꪚ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_070)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9A, 0x0061 };

    // AAB9 0591 AA9A 0061;	
    // (ꪹ֑ꪚ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9A 0061;	
    // (ꪹ֑ꪚ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_071)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9A, 0x0061 };

    // AAB9 1D165 AA9A 0061;	
    // (ꪹ𝅥ꪚ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9A 0061;	
    // (ꪹ𝅥ꪚ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2EC9 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_072)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9B, 0x0061 };

    // AAB9 0001 AA9B 0061;	
    // (ꪹ'\u0001'ꪛ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9B 0061;	
    // (ꪹ'\u0001'ꪛ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_073)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9B, 0x0061 };

    // AAB9 0591 AA9B 0061;	
    // (ꪹ֑ꪛ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9B 0061;	
    // (ꪹ֑ꪛ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_074)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9B, 0x0061 };

    // AAB9 1D165 AA9B 0061;	
    // (ꪹ𝅥ꪛ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9B 0061;	
    // (ꪹ𝅥ꪛ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2EC9 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_075)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9C, 0x0061 };

    // AAB9 0001 AA9C 0061;	
    // (ꪹ'\u0001'ꪜ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9C 0061;	
    // (ꪹ'\u0001'ꪜ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_076)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9C, 0x0061 };

    // AAB9 0591 AA9C 0061;	
    // (ꪹ֑ꪜ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9C 0061;	
    // (ꪹ֑ꪜ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_077)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9C, 0x0061 };

    // AAB9 1D165 AA9C 0061;	
    // (ꪹ𝅥ꪜ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9C 0061;	
    // (ꪹ𝅥ꪜ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2EC9 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_078)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9D, 0x0061 };

    // AAB9 0001 AA9D 0061;	
    // (ꪹ'\u0001'ꪝ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9D 0061;	
    // (ꪹ'\u0001'ꪝ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_079)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9D, 0x0061 };

    // AAB9 0591 AA9D 0061;	
    // (ꪹ֑ꪝ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9D 0061;	
    // (ꪹ֑ꪝ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_080)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9D, 0x0061 };

    // AAB9 1D165 AA9D 0061;	
    // (ꪹ𝅥ꪝ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9D 0061;	
    // (ꪹ𝅥ꪝ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2EC9 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_081)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9E, 0x0061 };

    // AAB9 0001 AA9E 0061;	
    // (ꪹ'\u0001'ꪞ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9E 0061;	
    // (ꪹ'\u0001'ꪞ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_082)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9E, 0x0061 };

    // AAB9 0591 AA9E 0061;	
    // (ꪹ֑ꪞ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9E 0061;	
    // (ꪹ֑ꪞ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_083)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9E, 0x0061 };

    // AAB9 1D165 AA9E 0061;	
    // (ꪹ𝅥ꪞ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9E 0061;	
    // (ꪹ𝅥ꪞ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2EC9 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_084)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAA9F, 0x0061 };

    // AAB9 0001 AA9F 0061;	
    // (ꪹ'\u0001'ꪟ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AA9F 0061;	
    // (ꪹ'\u0001'ꪟ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_085)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAA9F, 0x0061 };

    // AAB9 0591 AA9F 0061;	
    // (ꪹ֑ꪟ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AA9F 0061;	
    // (ꪹ֑ꪟ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_086)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAA9F, 0x0061 };

    // AAB9 1D165 AA9F 0061;	
    // (ꪹ𝅥ꪟ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AA9F 0061;	
    // (ꪹ𝅥ꪟ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2EC9 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_087)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA0, 0x0061 };

    // AAB9 0001 AAA0 0061;	
    // (ꪹ'\u0001'ꪠ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA0 0061;	
    // (ꪹ'\u0001'ꪠ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_088)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA0, 0x0061 };

    // AAB9 0591 AAA0 0061;	
    // (ꪹ֑ꪠ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA0 0061;	
    // (ꪹ֑ꪠ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_089)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA0, 0x0061 };

    // AAB9 1D165 AAA0 0061;	
    // (ꪹ𝅥ꪠ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA0 0061;	
    // (ꪹ𝅥ꪠ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2EC9 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_090)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA1, 0x0061 };

    // AAB9 0001 AAA1 0061;	
    // (ꪹ'\u0001'ꪡ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA1 0061;	
    // (ꪹ'\u0001'ꪡ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_091)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA1, 0x0061 };

    // AAB9 0591 AAA1 0061;	
    // (ꪹ֑ꪡ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA1 0061;	
    // (ꪹ֑ꪡ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_092)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA1, 0x0061 };

    // AAB9 1D165 AAA1 0061;	
    // (ꪹ𝅥ꪡ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA1 0061;	
    // (ꪹ𝅥ꪡ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2EC9 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_093)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA2, 0x0061 };

    // AAB9 0001 AAA2 0061;	
    // (ꪹ'\u0001'ꪢ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA2 0061;	
    // (ꪹ'\u0001'ꪢ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_094)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA2, 0x0061 };

    // AAB9 0591 AAA2 0061;	
    // (ꪹ֑ꪢ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA2 0061;	
    // (ꪹ֑ꪢ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_095)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA2, 0x0061 };

    // AAB9 1D165 AAA2 0061;	
    // (ꪹ𝅥ꪢ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA2 0061;	
    // (ꪹ𝅥ꪢ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2EC9 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_096)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA3, 0x0061 };

    // AAB9 0001 AAA3 0061;	
    // (ꪹ'\u0001'ꪣ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA3 0061;	
    // (ꪹ'\u0001'ꪣ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_097)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA3, 0x0061 };

    // AAB9 0591 AAA3 0061;	
    // (ꪹ֑ꪣ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA3 0061;	
    // (ꪹ֑ꪣ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_098)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA3, 0x0061 };

    // AAB9 1D165 AAA3 0061;	
    // (ꪹ𝅥ꪣ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA3 0061;	
    // (ꪹ𝅥ꪣ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2EC9 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_099)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA4, 0x0061 };

    // AAB9 0001 AAA4 0061;	
    // (ꪹ'\u0001'ꪤ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA4 0061;	
    // (ꪹ'\u0001'ꪤ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_100)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA4, 0x0061 };

    // AAB9 0591 AAA4 0061;	
    // (ꪹ֑ꪤ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA4 0061;	
    // (ꪹ֑ꪤ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_101)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA4, 0x0061 };

    // AAB9 1D165 AAA4 0061;	
    // (ꪹ𝅥ꪤ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA4 0061;	
    // (ꪹ𝅥ꪤ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2EC9 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_102)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA5, 0x0061 };

    // AAB9 0001 AAA5 0061;	
    // (ꪹ'\u0001'ꪥ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA5 0061;	
    // (ꪹ'\u0001'ꪥ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_103)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA5, 0x0061 };

    // AAB9 0591 AAA5 0061;	
    // (ꪹ֑ꪥ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA5 0061;	
    // (ꪹ֑ꪥ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_104)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA5, 0x0061 };

    // AAB9 1D165 AAA5 0061;	
    // (ꪹ𝅥ꪥ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA5 0061;	
    // (ꪹ𝅥ꪥ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2EC9 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_105)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA6, 0x0061 };

    // AAB9 0001 AAA6 0061;	
    // (ꪹ'\u0001'ꪦ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA6 0061;	
    // (ꪹ'\u0001'ꪦ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_106)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA6, 0x0061 };

    // AAB9 0591 AAA6 0061;	
    // (ꪹ֑ꪦ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA6 0061;	
    // (ꪹ֑ꪦ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_107)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA6, 0x0061 };

    // AAB9 1D165 AAA6 0061;	
    // (ꪹ𝅥ꪦ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA6 0061;	
    // (ꪹ𝅥ꪦ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2EC9 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_108)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA7, 0x0061 };

    // AAB9 0001 AAA7 0061;	
    // (ꪹ'\u0001'ꪧ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA7 0061;	
    // (ꪹ'\u0001'ꪧ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_109)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA7, 0x0061 };

    // AAB9 0591 AAA7 0061;	
    // (ꪹ֑ꪧ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA7 0061;	
    // (ꪹ֑ꪧ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_110)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA7, 0x0061 };

    // AAB9 1D165 AAA7 0061;	
    // (ꪹ𝅥ꪧ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA7 0061;	
    // (ꪹ𝅥ꪧ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2EC9 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_111)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA8, 0x0061 };

    // AAB9 0001 AAA8 0061;	
    // (ꪹ'\u0001'ꪨ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA8 0061;	
    // (ꪹ'\u0001'ꪨ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_112)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA8, 0x0061 };

    // AAB9 0591 AAA8 0061;	
    // (ꪹ֑ꪨ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA8 0061;	
    // (ꪹ֑ꪨ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_113)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA8, 0x0061 };

    // AAB9 1D165 AAA8 0061;	
    // (ꪹ𝅥ꪨ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA8 0061;	
    // (ꪹ𝅥ꪨ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2EC9 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_114)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAA9, 0x0061 };

    // AAB9 0001 AAA9 0061;	
    // (ꪹ'\u0001'ꪩ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAA9 0061;	
    // (ꪹ'\u0001'ꪩ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_115)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAA9, 0x0061 };

    // AAB9 0591 AAA9 0061;	
    // (ꪹ֑ꪩ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAA9 0061;	
    // (ꪹ֑ꪩ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_116)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAA9, 0x0061 };

    // AAB9 1D165 AAA9 0061;	
    // (ꪹ𝅥ꪩ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAA9 0061;	
    // (ꪹ𝅥ꪩ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2EC9 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_117)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAA, 0x0061 };

    // AAB9 0001 AAAA 0061;	
    // (ꪹ'\u0001'ꪪ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAA 0061;	
    // (ꪹ'\u0001'ꪪ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_118)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAA, 0x0061 };

    // AAB9 0591 AAAA 0061;	
    // (ꪹ֑ꪪ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAA 0061;	
    // (ꪹ֑ꪪ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_119)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAA, 0x0061 };

    // AAB9 1D165 AAAA 0061;	
    // (ꪹ𝅥ꪪ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAA 0061;	
    // (ꪹ𝅥ꪪ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2EC9 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_120)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAB, 0x0061 };

    // AAB9 0001 AAAB 0061;	
    // (ꪹ'\u0001'ꪫ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAB 0061;	
    // (ꪹ'\u0001'ꪫ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_121)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAB, 0x0061 };

    // AAB9 0591 AAAB 0061;	
    // (ꪹ֑ꪫ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAB 0061;	
    // (ꪹ֑ꪫ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_122)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAB, 0x0061 };

    // AAB9 1D165 AAAB 0061;	
    // (ꪹ𝅥ꪫ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAB 0061;	
    // (ꪹ𝅥ꪫ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2EC9 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_123)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAC, 0x0061 };

    // AAB9 0001 AAAC 0061;	
    // (ꪹ'\u0001'ꪬ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAC 0061;	
    // (ꪹ'\u0001'ꪬ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_124)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAC, 0x0061 };

    // AAB9 0591 AAAC 0061;	
    // (ꪹ֑ꪬ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAC 0061;	
    // (ꪹ֑ꪬ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_125)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAC, 0x0061 };

    // AAB9 1D165 AAAC 0061;	
    // (ꪹ𝅥ꪬ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAC 0061;	
    // (ꪹ𝅥ꪬ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2EC9 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_126)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAD, 0x0061 };

    // AAB9 0001 AAAD 0061;	
    // (ꪹ'\u0001'ꪭ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAD 0061;	
    // (ꪹ'\u0001'ꪭ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_127)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAD, 0x0061 };

    // AAB9 0591 AAAD 0061;	
    // (ꪹ֑ꪭ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAD 0061;	
    // (ꪹ֑ꪭ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_128)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAD, 0x0061 };

    // AAB9 1D165 AAAD 0061;	
    // (ꪹ𝅥ꪭ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAD 0061;	
    // (ꪹ𝅥ꪭ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2EC9 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_129)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAE, 0x0061 };

    // AAB9 0001 AAAE 0061;	
    // (ꪹ'\u0001'ꪮ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAE 0061;	
    // (ꪹ'\u0001'ꪮ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_130)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAE, 0x0061 };

    // AAB9 0591 AAAE 0061;	
    // (ꪹ֑ꪮ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAE 0061;	
    // (ꪹ֑ꪮ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_131)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAE, 0x0061 };

    // AAB9 1D165 AAAE 0061;	
    // (ꪹ𝅥ꪮ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAE 0061;	
    // (ꪹ𝅥ꪮ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2EC9 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_132)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0001, 0xAAAF, 0x0061 };

    // AAB9 0001 AAAF 0061;	
    // (ꪹ'\u0001'ꪯ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0001 AAAF 0061;	
    // (ꪹ'\u0001'ꪯ) TAI VIET VOWEL UEA, <START OF HEADING>, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_133)
{
    uint32_t const cps[4] = { 0xAAB9, 0x0591, 0xAAAF, 0x0061 };

    // AAB9 0591 AAAF 0061;	
    // (ꪹ֑ꪯ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 0591 AAAF 0061;	
    // (ꪹ֑ꪯ) TAI VIET VOWEL UEA, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_134)
{
    uint32_t const cps[4] = { 0xAAB9, 0x1D165, 0xAAAF, 0x0061 };

    // AAB9 1D165 AAAF 0061;	
    // (ꪹ𝅥ꪯ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAB9 1D165 AAAF 0061;	
    // (ꪹ𝅥ꪯ) TAI VIET VOWEL UEA, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2EC9 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2EC9, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_135)
{
    uint32_t const cps[2] = { 0xAABA, 0x0021 };

    // AABA 0021;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABA 0021;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_136)
{
    uint32_t const cps[2] = { 0xAABA, 0x003F };

    // AABA 003F;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABA 003F;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_137)
{
    uint32_t const cps[2] = { 0xAABA, 0x0061 };

    // AABA 0061;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABA 0061;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_138)
{
    uint32_t const cps[2] = { 0xAABA, 0x0041 };

    // AABA 0041;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABA 0041;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_139)
{
    uint32_t const cps[2] = { 0xAABA, 0x0062 };

    // AABA 0062;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABA 0062;	
    // (ꪺ) TAI VIET VOWEL UA	[2ECA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_140)
{
    uint32_t const cps[2] = { 0xAABB, 0x0021 };

    // AABB 0021;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0021;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_141)
{
    uint32_t const cps[2] = { 0xAABB, 0x003F };

    // AABB 003F;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 003F;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_142)
{
    uint32_t const cps[2] = { 0xAABB, 0x0061 };

    // AABB 0061;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0061;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_143)
{
    uint32_t const cps[2] = { 0xAABB, 0x0041 };

    // AABB 0041;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0041;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_144)
{
    uint32_t const cps[2] = { 0xAABB, 0x0062 };

    // AABB 0062;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0062;	
    // (ꪻ) TAI VIET VOWEL AUE	[2ECB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_145)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA80, 0x0061 };

    // AABB 0001 AA80 0061;	
    // (ꪻ'\u0001'ꪀ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA80 0061;	
    // (ꪻ'\u0001'ꪀ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_146)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA80, 0x0061 };

    // AABB 0591 AA80 0061;	
    // (ꪻ֑ꪀ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA80 0061;	
    // (ꪻ֑ꪀ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_147)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA80, 0x0061 };

    // AABB 1D165 AA80 0061;	
    // (ꪻ𝅥ꪀ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA80 0061;	
    // (ꪻ𝅥ꪀ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2ECB 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_148)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA81, 0x0061 };

    // AABB 0001 AA81 0061;	
    // (ꪻ'\u0001'ꪁ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA81 0061;	
    // (ꪻ'\u0001'ꪁ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_149)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA81, 0x0061 };

    // AABB 0591 AA81 0061;	
    // (ꪻ֑ꪁ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA81 0061;	
    // (ꪻ֑ꪁ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_150)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA81, 0x0061 };

    // AABB 1D165 AA81 0061;	
    // (ꪻ𝅥ꪁ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA81 0061;	
    // (ꪻ𝅥ꪁ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2ECB 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_151)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA82, 0x0061 };

    // AABB 0001 AA82 0061;	
    // (ꪻ'\u0001'ꪂ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA82 0061;	
    // (ꪻ'\u0001'ꪂ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_152)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA82, 0x0061 };

    // AABB 0591 AA82 0061;	
    // (ꪻ֑ꪂ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA82 0061;	
    // (ꪻ֑ꪂ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_153)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA82, 0x0061 };

    // AABB 1D165 AA82 0061;	
    // (ꪻ𝅥ꪂ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA82 0061;	
    // (ꪻ𝅥ꪂ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2ECB 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_154)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA83, 0x0061 };

    // AABB 0001 AA83 0061;	
    // (ꪻ'\u0001'ꪃ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA83 0061;	
    // (ꪻ'\u0001'ꪃ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_155)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA83, 0x0061 };

    // AABB 0591 AA83 0061;	
    // (ꪻ֑ꪃ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA83 0061;	
    // (ꪻ֑ꪃ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_156)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA83, 0x0061 };

    // AABB 1D165 AA83 0061;	
    // (ꪻ𝅥ꪃ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA83 0061;	
    // (ꪻ𝅥ꪃ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2ECB 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_157)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA84, 0x0061 };

    // AABB 0001 AA84 0061;	
    // (ꪻ'\u0001'ꪄ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA84 0061;	
    // (ꪻ'\u0001'ꪄ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_158)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA84, 0x0061 };

    // AABB 0591 AA84 0061;	
    // (ꪻ֑ꪄ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA84 0061;	
    // (ꪻ֑ꪄ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_159)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA84, 0x0061 };

    // AABB 1D165 AA84 0061;	
    // (ꪻ𝅥ꪄ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA84 0061;	
    // (ꪻ𝅥ꪄ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2ECB 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_160)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA85, 0x0061 };

    // AABB 0001 AA85 0061;	
    // (ꪻ'\u0001'ꪅ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA85 0061;	
    // (ꪻ'\u0001'ꪅ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_161)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA85, 0x0061 };

    // AABB 0591 AA85 0061;	
    // (ꪻ֑ꪅ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA85 0061;	
    // (ꪻ֑ꪅ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_162)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA85, 0x0061 };

    // AABB 1D165 AA85 0061;	
    // (ꪻ𝅥ꪅ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA85 0061;	
    // (ꪻ𝅥ꪅ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2ECB 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_163)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA86, 0x0061 };

    // AABB 0001 AA86 0061;	
    // (ꪻ'\u0001'ꪆ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA86 0061;	
    // (ꪻ'\u0001'ꪆ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_164)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA86, 0x0061 };

    // AABB 0591 AA86 0061;	
    // (ꪻ֑ꪆ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA86 0061;	
    // (ꪻ֑ꪆ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_165)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA86, 0x0061 };

    // AABB 1D165 AA86 0061;	
    // (ꪻ𝅥ꪆ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA86 0061;	
    // (ꪻ𝅥ꪆ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2ECB 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_166)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA87, 0x0061 };

    // AABB 0001 AA87 0061;	
    // (ꪻ'\u0001'ꪇ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA87 0061;	
    // (ꪻ'\u0001'ꪇ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_167)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA87, 0x0061 };

    // AABB 0591 AA87 0061;	
    // (ꪻ֑ꪇ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA87 0061;	
    // (ꪻ֑ꪇ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_168)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA87, 0x0061 };

    // AABB 1D165 AA87 0061;	
    // (ꪻ𝅥ꪇ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA87 0061;	
    // (ꪻ𝅥ꪇ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2ECB 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_169)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA88, 0x0061 };

    // AABB 0001 AA88 0061;	
    // (ꪻ'\u0001'ꪈ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA88 0061;	
    // (ꪻ'\u0001'ꪈ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_170)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA88, 0x0061 };

    // AABB 0591 AA88 0061;	
    // (ꪻ֑ꪈ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA88 0061;	
    // (ꪻ֑ꪈ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_171)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA88, 0x0061 };

    // AABB 1D165 AA88 0061;	
    // (ꪻ𝅥ꪈ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA88 0061;	
    // (ꪻ𝅥ꪈ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2ECB 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_172)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA89, 0x0061 };

    // AABB 0001 AA89 0061;	
    // (ꪻ'\u0001'ꪉ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA89 0061;	
    // (ꪻ'\u0001'ꪉ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_173)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA89, 0x0061 };

    // AABB 0591 AA89 0061;	
    // (ꪻ֑ꪉ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA89 0061;	
    // (ꪻ֑ꪉ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_174)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA89, 0x0061 };

    // AABB 1D165 AA89 0061;	
    // (ꪻ𝅥ꪉ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA89 0061;	
    // (ꪻ𝅥ꪉ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2ECB 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_175)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8A, 0x0061 };

    // AABB 0001 AA8A 0061;	
    // (ꪻ'\u0001'ꪊ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8A 0061;	
    // (ꪻ'\u0001'ꪊ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_176)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8A, 0x0061 };

    // AABB 0591 AA8A 0061;	
    // (ꪻ֑ꪊ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8A 0061;	
    // (ꪻ֑ꪊ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_177)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8A, 0x0061 };

    // AABB 1D165 AA8A 0061;	
    // (ꪻ𝅥ꪊ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8A 0061;	
    // (ꪻ𝅥ꪊ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2ECB 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_178)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8B, 0x0061 };

    // AABB 0001 AA8B 0061;	
    // (ꪻ'\u0001'ꪋ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8B 0061;	
    // (ꪻ'\u0001'ꪋ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_179)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8B, 0x0061 };

    // AABB 0591 AA8B 0061;	
    // (ꪻ֑ꪋ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8B 0061;	
    // (ꪻ֑ꪋ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_180)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8B, 0x0061 };

    // AABB 1D165 AA8B 0061;	
    // (ꪻ𝅥ꪋ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8B 0061;	
    // (ꪻ𝅥ꪋ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2ECB 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_181)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8C, 0x0061 };

    // AABB 0001 AA8C 0061;	
    // (ꪻ'\u0001'ꪌ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8C 0061;	
    // (ꪻ'\u0001'ꪌ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_182)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8C, 0x0061 };

    // AABB 0591 AA8C 0061;	
    // (ꪻ֑ꪌ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8C 0061;	
    // (ꪻ֑ꪌ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_183)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8C, 0x0061 };

    // AABB 1D165 AA8C 0061;	
    // (ꪻ𝅥ꪌ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8C 0061;	
    // (ꪻ𝅥ꪌ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2ECB 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_184)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8D, 0x0061 };

    // AABB 0001 AA8D 0061;	
    // (ꪻ'\u0001'ꪍ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8D 0061;	
    // (ꪻ'\u0001'ꪍ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_185)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8D, 0x0061 };

    // AABB 0591 AA8D 0061;	
    // (ꪻ֑ꪍ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8D 0061;	
    // (ꪻ֑ꪍ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_186)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8D, 0x0061 };

    // AABB 1D165 AA8D 0061;	
    // (ꪻ𝅥ꪍ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8D 0061;	
    // (ꪻ𝅥ꪍ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2ECB 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_187)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8E, 0x0061 };

    // AABB 0001 AA8E 0061;	
    // (ꪻ'\u0001'ꪎ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8E 0061;	
    // (ꪻ'\u0001'ꪎ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_188)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8E, 0x0061 };

    // AABB 0591 AA8E 0061;	
    // (ꪻ֑ꪎ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8E 0061;	
    // (ꪻ֑ꪎ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_189)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8E, 0x0061 };

    // AABB 1D165 AA8E 0061;	
    // (ꪻ𝅥ꪎ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8E 0061;	
    // (ꪻ𝅥ꪎ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2ECB 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_190)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA8F, 0x0061 };

    // AABB 0001 AA8F 0061;	
    // (ꪻ'\u0001'ꪏ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA8F 0061;	
    // (ꪻ'\u0001'ꪏ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_191)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA8F, 0x0061 };

    // AABB 0591 AA8F 0061;	
    // (ꪻ֑ꪏ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA8F 0061;	
    // (ꪻ֑ꪏ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_192)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA8F, 0x0061 };

    // AABB 1D165 AA8F 0061;	
    // (ꪻ𝅥ꪏ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA8F 0061;	
    // (ꪻ𝅥ꪏ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2ECB 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_193)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA90, 0x0061 };

    // AABB 0001 AA90 0061;	
    // (ꪻ'\u0001'ꪐ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA90 0061;	
    // (ꪻ'\u0001'ꪐ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_194)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA90, 0x0061 };

    // AABB 0591 AA90 0061;	
    // (ꪻ֑ꪐ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA90 0061;	
    // (ꪻ֑ꪐ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_195)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA90, 0x0061 };

    // AABB 1D165 AA90 0061;	
    // (ꪻ𝅥ꪐ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA90 0061;	
    // (ꪻ𝅥ꪐ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2ECB 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_196)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA91, 0x0061 };

    // AABB 0001 AA91 0061;	
    // (ꪻ'\u0001'ꪑ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA91 0061;	
    // (ꪻ'\u0001'ꪑ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_197)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA91, 0x0061 };

    // AABB 0591 AA91 0061;	
    // (ꪻ֑ꪑ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA91 0061;	
    // (ꪻ֑ꪑ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_198)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA91, 0x0061 };

    // AABB 1D165 AA91 0061;	
    // (ꪻ𝅥ꪑ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA91 0061;	
    // (ꪻ𝅥ꪑ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2ECB 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_199)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA92, 0x0061 };

    // AABB 0001 AA92 0061;	
    // (ꪻ'\u0001'ꪒ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA92 0061;	
    // (ꪻ'\u0001'ꪒ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_200)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA92, 0x0061 };

    // AABB 0591 AA92 0061;	
    // (ꪻ֑ꪒ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA92 0061;	
    // (ꪻ֑ꪒ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_201)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA92, 0x0061 };

    // AABB 1D165 AA92 0061;	
    // (ꪻ𝅥ꪒ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA92 0061;	
    // (ꪻ𝅥ꪒ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2ECB 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_202)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA93, 0x0061 };

    // AABB 0001 AA93 0061;	
    // (ꪻ'\u0001'ꪓ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA93 0061;	
    // (ꪻ'\u0001'ꪓ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_203)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA93, 0x0061 };

    // AABB 0591 AA93 0061;	
    // (ꪻ֑ꪓ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA93 0061;	
    // (ꪻ֑ꪓ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_204)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA93, 0x0061 };

    // AABB 1D165 AA93 0061;	
    // (ꪻ𝅥ꪓ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA93 0061;	
    // (ꪻ𝅥ꪓ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2ECB 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_205)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA94, 0x0061 };

    // AABB 0001 AA94 0061;	
    // (ꪻ'\u0001'ꪔ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA94 0061;	
    // (ꪻ'\u0001'ꪔ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_206)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA94, 0x0061 };

    // AABB 0591 AA94 0061;	
    // (ꪻ֑ꪔ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA94 0061;	
    // (ꪻ֑ꪔ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_207)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA94, 0x0061 };

    // AABB 1D165 AA94 0061;	
    // (ꪻ𝅥ꪔ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA94 0061;	
    // (ꪻ𝅥ꪔ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2ECB 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_208)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA95, 0x0061 };

    // AABB 0001 AA95 0061;	
    // (ꪻ'\u0001'ꪕ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA95 0061;	
    // (ꪻ'\u0001'ꪕ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_209)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA95, 0x0061 };

    // AABB 0591 AA95 0061;	
    // (ꪻ֑ꪕ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA95 0061;	
    // (ꪻ֑ꪕ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_210)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA95, 0x0061 };

    // AABB 1D165 AA95 0061;	
    // (ꪻ𝅥ꪕ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA95 0061;	
    // (ꪻ𝅥ꪕ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2ECB 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_211)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA96, 0x0061 };

    // AABB 0001 AA96 0061;	
    // (ꪻ'\u0001'ꪖ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA96 0061;	
    // (ꪻ'\u0001'ꪖ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_212)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA96, 0x0061 };

    // AABB 0591 AA96 0061;	
    // (ꪻ֑ꪖ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA96 0061;	
    // (ꪻ֑ꪖ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_213)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA96, 0x0061 };

    // AABB 1D165 AA96 0061;	
    // (ꪻ𝅥ꪖ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA96 0061;	
    // (ꪻ𝅥ꪖ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2ECB 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_214)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA97, 0x0061 };

    // AABB 0001 AA97 0061;	
    // (ꪻ'\u0001'ꪗ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA97 0061;	
    // (ꪻ'\u0001'ꪗ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_215)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA97, 0x0061 };

    // AABB 0591 AA97 0061;	
    // (ꪻ֑ꪗ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA97 0061;	
    // (ꪻ֑ꪗ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_216)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA97, 0x0061 };

    // AABB 1D165 AA97 0061;	
    // (ꪻ𝅥ꪗ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA97 0061;	
    // (ꪻ𝅥ꪗ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2ECB 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_217)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA98, 0x0061 };

    // AABB 0001 AA98 0061;	
    // (ꪻ'\u0001'ꪘ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA98 0061;	
    // (ꪻ'\u0001'ꪘ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_218)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA98, 0x0061 };

    // AABB 0591 AA98 0061;	
    // (ꪻ֑ꪘ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA98 0061;	
    // (ꪻ֑ꪘ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_219)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA98, 0x0061 };

    // AABB 1D165 AA98 0061;	
    // (ꪻ𝅥ꪘ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA98 0061;	
    // (ꪻ𝅥ꪘ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2ECB 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_220)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA99, 0x0061 };

    // AABB 0001 AA99 0061;	
    // (ꪻ'\u0001'ꪙ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA99 0061;	
    // (ꪻ'\u0001'ꪙ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_221)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA99, 0x0061 };

    // AABB 0591 AA99 0061;	
    // (ꪻ֑ꪙ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA99 0061;	
    // (ꪻ֑ꪙ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_222)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA99, 0x0061 };

    // AABB 1D165 AA99 0061;	
    // (ꪻ𝅥ꪙ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA99 0061;	
    // (ꪻ𝅥ꪙ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2ECB 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_223)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9A, 0x0061 };

    // AABB 0001 AA9A 0061;	
    // (ꪻ'\u0001'ꪚ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9A 0061;	
    // (ꪻ'\u0001'ꪚ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_224)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9A, 0x0061 };

    // AABB 0591 AA9A 0061;	
    // (ꪻ֑ꪚ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9A 0061;	
    // (ꪻ֑ꪚ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_225)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9A, 0x0061 };

    // AABB 1D165 AA9A 0061;	
    // (ꪻ𝅥ꪚ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9A 0061;	
    // (ꪻ𝅥ꪚ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2ECB 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_226)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9B, 0x0061 };

    // AABB 0001 AA9B 0061;	
    // (ꪻ'\u0001'ꪛ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9B 0061;	
    // (ꪻ'\u0001'ꪛ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_227)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9B, 0x0061 };

    // AABB 0591 AA9B 0061;	
    // (ꪻ֑ꪛ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9B 0061;	
    // (ꪻ֑ꪛ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_228)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9B, 0x0061 };

    // AABB 1D165 AA9B 0061;	
    // (ꪻ𝅥ꪛ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9B 0061;	
    // (ꪻ𝅥ꪛ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2ECB 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_229)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9C, 0x0061 };

    // AABB 0001 AA9C 0061;	
    // (ꪻ'\u0001'ꪜ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9C 0061;	
    // (ꪻ'\u0001'ꪜ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_230)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9C, 0x0061 };

    // AABB 0591 AA9C 0061;	
    // (ꪻ֑ꪜ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9C 0061;	
    // (ꪻ֑ꪜ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_231)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9C, 0x0061 };

    // AABB 1D165 AA9C 0061;	
    // (ꪻ𝅥ꪜ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9C 0061;	
    // (ꪻ𝅥ꪜ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2ECB 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_232)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9D, 0x0061 };

    // AABB 0001 AA9D 0061;	
    // (ꪻ'\u0001'ꪝ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9D 0061;	
    // (ꪻ'\u0001'ꪝ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_233)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9D, 0x0061 };

    // AABB 0591 AA9D 0061;	
    // (ꪻ֑ꪝ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9D 0061;	
    // (ꪻ֑ꪝ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_234)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9D, 0x0061 };

    // AABB 1D165 AA9D 0061;	
    // (ꪻ𝅥ꪝ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9D 0061;	
    // (ꪻ𝅥ꪝ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2ECB 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_235)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9E, 0x0061 };

    // AABB 0001 AA9E 0061;	
    // (ꪻ'\u0001'ꪞ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9E 0061;	
    // (ꪻ'\u0001'ꪞ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_236)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9E, 0x0061 };

    // AABB 0591 AA9E 0061;	
    // (ꪻ֑ꪞ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9E 0061;	
    // (ꪻ֑ꪞ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_237)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9E, 0x0061 };

    // AABB 1D165 AA9E 0061;	
    // (ꪻ𝅥ꪞ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9E 0061;	
    // (ꪻ𝅥ꪞ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2ECB 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_238)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAA9F, 0x0061 };

    // AABB 0001 AA9F 0061;	
    // (ꪻ'\u0001'ꪟ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AA9F 0061;	
    // (ꪻ'\u0001'ꪟ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_239)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAA9F, 0x0061 };

    // AABB 0591 AA9F 0061;	
    // (ꪻ֑ꪟ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AA9F 0061;	
    // (ꪻ֑ꪟ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_240)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAA9F, 0x0061 };

    // AABB 1D165 AA9F 0061;	
    // (ꪻ𝅥ꪟ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AA9F 0061;	
    // (ꪻ𝅥ꪟ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2ECB 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_241)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA0, 0x0061 };

    // AABB 0001 AAA0 0061;	
    // (ꪻ'\u0001'ꪠ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA0 0061;	
    // (ꪻ'\u0001'ꪠ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_242)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA0, 0x0061 };

    // AABB 0591 AAA0 0061;	
    // (ꪻ֑ꪠ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA0 0061;	
    // (ꪻ֑ꪠ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_243)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA0, 0x0061 };

    // AABB 1D165 AAA0 0061;	
    // (ꪻ𝅥ꪠ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA0 0061;	
    // (ꪻ𝅥ꪠ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2ECB 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_244)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA1, 0x0061 };

    // AABB 0001 AAA1 0061;	
    // (ꪻ'\u0001'ꪡ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA1 0061;	
    // (ꪻ'\u0001'ꪡ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_245)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA1, 0x0061 };

    // AABB 0591 AAA1 0061;	
    // (ꪻ֑ꪡ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA1 0061;	
    // (ꪻ֑ꪡ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_246)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA1, 0x0061 };

    // AABB 1D165 AAA1 0061;	
    // (ꪻ𝅥ꪡ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA1 0061;	
    // (ꪻ𝅥ꪡ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2ECB 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_247)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA2, 0x0061 };

    // AABB 0001 AAA2 0061;	
    // (ꪻ'\u0001'ꪢ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA2 0061;	
    // (ꪻ'\u0001'ꪢ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_248)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA2, 0x0061 };

    // AABB 0591 AAA2 0061;	
    // (ꪻ֑ꪢ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA2 0061;	
    // (ꪻ֑ꪢ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_249)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA2, 0x0061 };

    // AABB 1D165 AAA2 0061;	
    // (ꪻ𝅥ꪢ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA2 0061;	
    // (ꪻ𝅥ꪢ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2ECB 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_250)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA3, 0x0061 };

    // AABB 0001 AAA3 0061;	
    // (ꪻ'\u0001'ꪣ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA3 0061;	
    // (ꪻ'\u0001'ꪣ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_251)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA3, 0x0061 };

    // AABB 0591 AAA3 0061;	
    // (ꪻ֑ꪣ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA3 0061;	
    // (ꪻ֑ꪣ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_252)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA3, 0x0061 };

    // AABB 1D165 AAA3 0061;	
    // (ꪻ𝅥ꪣ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA3 0061;	
    // (ꪻ𝅥ꪣ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2ECB 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_253)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA4, 0x0061 };

    // AABB 0001 AAA4 0061;	
    // (ꪻ'\u0001'ꪤ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA4 0061;	
    // (ꪻ'\u0001'ꪤ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_254)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA4, 0x0061 };

    // AABB 0591 AAA4 0061;	
    // (ꪻ֑ꪤ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA4 0061;	
    // (ꪻ֑ꪤ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_255)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA4, 0x0061 };

    // AABB 1D165 AAA4 0061;	
    // (ꪻ𝅥ꪤ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA4 0061;	
    // (ꪻ𝅥ꪤ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2ECB 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_256)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA5, 0x0061 };

    // AABB 0001 AAA5 0061;	
    // (ꪻ'\u0001'ꪥ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA5 0061;	
    // (ꪻ'\u0001'ꪥ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_257)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA5, 0x0061 };

    // AABB 0591 AAA5 0061;	
    // (ꪻ֑ꪥ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA5 0061;	
    // (ꪻ֑ꪥ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_258)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA5, 0x0061 };

    // AABB 1D165 AAA5 0061;	
    // (ꪻ𝅥ꪥ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA5 0061;	
    // (ꪻ𝅥ꪥ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2ECB 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_259)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA6, 0x0061 };

    // AABB 0001 AAA6 0061;	
    // (ꪻ'\u0001'ꪦ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA6 0061;	
    // (ꪻ'\u0001'ꪦ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_260)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA6, 0x0061 };

    // AABB 0591 AAA6 0061;	
    // (ꪻ֑ꪦ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA6 0061;	
    // (ꪻ֑ꪦ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_261)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA6, 0x0061 };

    // AABB 1D165 AAA6 0061;	
    // (ꪻ𝅥ꪦ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA6 0061;	
    // (ꪻ𝅥ꪦ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2ECB 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_262)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA7, 0x0061 };

    // AABB 0001 AAA7 0061;	
    // (ꪻ'\u0001'ꪧ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA7 0061;	
    // (ꪻ'\u0001'ꪧ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_263)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA7, 0x0061 };

    // AABB 0591 AAA7 0061;	
    // (ꪻ֑ꪧ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA7 0061;	
    // (ꪻ֑ꪧ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_264)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA7, 0x0061 };

    // AABB 1D165 AAA7 0061;	
    // (ꪻ𝅥ꪧ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA7 0061;	
    // (ꪻ𝅥ꪧ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2ECB 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_265)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA8, 0x0061 };

    // AABB 0001 AAA8 0061;	
    // (ꪻ'\u0001'ꪨ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA8 0061;	
    // (ꪻ'\u0001'ꪨ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_266)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA8, 0x0061 };

    // AABB 0591 AAA8 0061;	
    // (ꪻ֑ꪨ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA8 0061;	
    // (ꪻ֑ꪨ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_267)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA8, 0x0061 };

    // AABB 1D165 AAA8 0061;	
    // (ꪻ𝅥ꪨ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA8 0061;	
    // (ꪻ𝅥ꪨ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2ECB 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_268)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAA9, 0x0061 };

    // AABB 0001 AAA9 0061;	
    // (ꪻ'\u0001'ꪩ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAA9 0061;	
    // (ꪻ'\u0001'ꪩ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_269)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAA9, 0x0061 };

    // AABB 0591 AAA9 0061;	
    // (ꪻ֑ꪩ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAA9 0061;	
    // (ꪻ֑ꪩ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_270)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAA9, 0x0061 };

    // AABB 1D165 AAA9 0061;	
    // (ꪻ𝅥ꪩ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAA9 0061;	
    // (ꪻ𝅥ꪩ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2ECB 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_271)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAA, 0x0061 };

    // AABB 0001 AAAA 0061;	
    // (ꪻ'\u0001'ꪪ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAA 0061;	
    // (ꪻ'\u0001'ꪪ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_272)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAA, 0x0061 };

    // AABB 0591 AAAA 0061;	
    // (ꪻ֑ꪪ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAA 0061;	
    // (ꪻ֑ꪪ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_273)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAA, 0x0061 };

    // AABB 1D165 AAAA 0061;	
    // (ꪻ𝅥ꪪ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAA 0061;	
    // (ꪻ𝅥ꪪ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2ECB 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_274)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAB, 0x0061 };

    // AABB 0001 AAAB 0061;	
    // (ꪻ'\u0001'ꪫ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAB 0061;	
    // (ꪻ'\u0001'ꪫ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_275)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAB, 0x0061 };

    // AABB 0591 AAAB 0061;	
    // (ꪻ֑ꪫ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAB 0061;	
    // (ꪻ֑ꪫ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_276)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAB, 0x0061 };

    // AABB 1D165 AAAB 0061;	
    // (ꪻ𝅥ꪫ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAB 0061;	
    // (ꪻ𝅥ꪫ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2ECB 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_277)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAC, 0x0061 };

    // AABB 0001 AAAC 0061;	
    // (ꪻ'\u0001'ꪬ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAC 0061;	
    // (ꪻ'\u0001'ꪬ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_278)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAC, 0x0061 };

    // AABB 0591 AAAC 0061;	
    // (ꪻ֑ꪬ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAC 0061;	
    // (ꪻ֑ꪬ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_279)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAC, 0x0061 };

    // AABB 1D165 AAAC 0061;	
    // (ꪻ𝅥ꪬ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAC 0061;	
    // (ꪻ𝅥ꪬ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2ECB 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_280)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAD, 0x0061 };

    // AABB 0001 AAAD 0061;	
    // (ꪻ'\u0001'ꪭ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAD 0061;	
    // (ꪻ'\u0001'ꪭ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_281)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAD, 0x0061 };

    // AABB 0591 AAAD 0061;	
    // (ꪻ֑ꪭ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAD 0061;	
    // (ꪻ֑ꪭ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_282)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAD, 0x0061 };

    // AABB 1D165 AAAD 0061;	
    // (ꪻ𝅥ꪭ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAD 0061;	
    // (ꪻ𝅥ꪭ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2ECB 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_283)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAE, 0x0061 };

    // AABB 0001 AAAE 0061;	
    // (ꪻ'\u0001'ꪮ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAE 0061;	
    // (ꪻ'\u0001'ꪮ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_284)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAE, 0x0061 };

    // AABB 0591 AAAE 0061;	
    // (ꪻ֑ꪮ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAE 0061;	
    // (ꪻ֑ꪮ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_285)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAE, 0x0061 };

    // AABB 1D165 AAAE 0061;	
    // (ꪻ𝅥ꪮ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAE 0061;	
    // (ꪻ𝅥ꪮ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2ECB 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_286)
{
    uint32_t const cps[4] = { 0xAABB, 0x0001, 0xAAAF, 0x0061 };

    // AABB 0001 AAAF 0061;	
    // (ꪻ'\u0001'ꪯ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0001 AAAF 0061;	
    // (ꪻ'\u0001'ꪯ) TAI VIET VOWEL AUE, <START OF HEADING>, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_287)
{
    uint32_t const cps[4] = { 0xAABB, 0x0591, 0xAAAF, 0x0061 };

    // AABB 0591 AAAF 0061;	
    // (ꪻ֑ꪯ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 0591 AAAF 0061;	
    // (ꪻ֑ꪯ) TAI VIET VOWEL AUE, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_288)
{
    uint32_t const cps[4] = { 0xAABB, 0x1D165, 0xAAAF, 0x0061 };

    // AABB 1D165 AAAF 0061;	
    // (ꪻ𝅥ꪯ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABB 1D165 AAAF 0061;	
    // (ꪻ𝅥ꪯ) TAI VIET VOWEL AUE, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2ECB 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECB, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_289)
{
    uint32_t const cps[2] = { 0xAABC, 0x0021 };

    // AABC 0021;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0021;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_290)
{
    uint32_t const cps[2] = { 0xAABC, 0x003F };

    // AABC 003F;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 003F;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_291)
{
    uint32_t const cps[2] = { 0xAABC, 0x0061 };

    // AABC 0061;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0061;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_292)
{
    uint32_t const cps[2] = { 0xAABC, 0x0041 };

    // AABC 0041;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0041;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_293)
{
    uint32_t const cps[2] = { 0xAABC, 0x0062 };

    // AABC 0062;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0062;	
    // (ꪼ) TAI VIET VOWEL AY	[2ECC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_294)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA80, 0x0061 };

    // AABC 0001 AA80 0061;	
    // (ꪼ'\u0001'ꪀ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA80 0061;	
    // (ꪼ'\u0001'ꪀ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_295)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA80, 0x0061 };

    // AABC 0591 AA80 0061;	
    // (ꪼ֑ꪀ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA80 0061;	
    // (ꪼ֑ꪀ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_296)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA80, 0x0061 };

    // AABC 1D165 AA80 0061;	
    // (ꪼ𝅥ꪀ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA80 0061;	
    // (ꪼ𝅥ꪀ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KO	[2ECC 2E90 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_297)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA81, 0x0061 };

    // AABC 0001 AA81 0061;	
    // (ꪼ'\u0001'ꪁ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA81 0061;	
    // (ꪼ'\u0001'ꪁ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_298)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA81, 0x0061 };

    // AABC 0591 AA81 0061;	
    // (ꪼ֑ꪁ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA81 0061;	
    // (ꪼ֑ꪁ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_299)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA81, 0x0061 };

    // AABC 1D165 AA81 0061;	
    // (ꪼ𝅥ꪁ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA81 0061;	
    // (ꪼ𝅥ꪁ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KO	[2ECC 2E91 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_300)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA82, 0x0061 };

    // AABC 0001 AA82 0061;	
    // (ꪼ'\u0001'ꪂ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA82 0061;	
    // (ꪼ'\u0001'ꪂ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_301)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA82, 0x0061 };

    // AABC 0591 AA82 0061;	
    // (ꪼ֑ꪂ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA82 0061;	
    // (ꪼ֑ꪂ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_302)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA82, 0x0061 };

    // AABC 1D165 AA82 0061;	
    // (ꪼ𝅥ꪂ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA82 0061;	
    // (ꪼ𝅥ꪂ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHO	[2ECC 2E92 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_303)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA83, 0x0061 };

    // AABC 0001 AA83 0061;	
    // (ꪼ'\u0001'ꪃ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA83 0061;	
    // (ꪼ'\u0001'ꪃ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_304)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA83, 0x0061 };

    // AABC 0591 AA83 0061;	
    // (ꪼ֑ꪃ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA83 0061;	
    // (ꪼ֑ꪃ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_305)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA83, 0x0061 };

    // AABC 1D165 AA83 0061;	
    // (ꪼ𝅥ꪃ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA83 0061;	
    // (ꪼ𝅥ꪃ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHO	[2ECC 2E93 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_306)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA84, 0x0061 };

    // AABC 0001 AA84 0061;	
    // (ꪼ'\u0001'ꪄ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA84 0061;	
    // (ꪼ'\u0001'ꪄ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_307)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA84, 0x0061 };

    // AABC 0591 AA84 0061;	
    // (ꪼ֑ꪄ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA84 0061;	
    // (ꪼ֑ꪄ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_308)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA84, 0x0061 };

    // AABC 1D165 AA84 0061;	
    // (ꪼ𝅥ꪄ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA84 0061;	
    // (ꪼ𝅥ꪄ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW KHHO	[2ECC 2E94 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_309)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA85, 0x0061 };

    // AABC 0001 AA85 0061;	
    // (ꪼ'\u0001'ꪅ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA85 0061;	
    // (ꪼ'\u0001'ꪅ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_310)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA85, 0x0061 };

    // AABC 0591 AA85 0061;	
    // (ꪼ֑ꪅ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA85 0061;	
    // (ꪼ֑ꪅ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_311)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA85, 0x0061 };

    // AABC 1D165 AA85 0061;	
    // (ꪼ𝅥ꪅ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA85 0061;	
    // (ꪼ𝅥ꪅ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH KHHO	[2ECC 2E95 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_312)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA86, 0x0061 };

    // AABC 0001 AA86 0061;	
    // (ꪼ'\u0001'ꪆ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA86 0061;	
    // (ꪼ'\u0001'ꪆ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_313)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA86, 0x0061 };

    // AABC 0591 AA86 0061;	
    // (ꪼ֑ꪆ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA86 0061;	
    // (ꪼ֑ꪆ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_314)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA86, 0x0061 };

    // AABC 1D165 AA86 0061;	
    // (ꪼ𝅥ꪆ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA86 0061;	
    // (ꪼ𝅥ꪆ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW GO	[2ECC 2E96 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_315)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA87, 0x0061 };

    // AABC 0001 AA87 0061;	
    // (ꪼ'\u0001'ꪇ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA87 0061;	
    // (ꪼ'\u0001'ꪇ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_316)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA87, 0x0061 };

    // AABC 0591 AA87 0061;	
    // (ꪼ֑ꪇ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA87 0061;	
    // (ꪼ֑ꪇ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_317)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA87, 0x0061 };

    // AABC 1D165 AA87 0061;	
    // (ꪼ𝅥ꪇ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA87 0061;	
    // (ꪼ𝅥ꪇ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH GO	[2ECC 2E97 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_318)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA88, 0x0061 };

    // AABC 0001 AA88 0061;	
    // (ꪼ'\u0001'ꪈ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA88 0061;	
    // (ꪼ'\u0001'ꪈ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_319)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA88, 0x0061 };

    // AABC 0591 AA88 0061;	
    // (ꪼ֑ꪈ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA88 0061;	
    // (ꪼ֑ꪈ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_320)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA88, 0x0061 };

    // AABC 1D165 AA88 0061;	
    // (ꪼ𝅥ꪈ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA88 0061;	
    // (ꪼ𝅥ꪈ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NGO	[2ECC 2E98 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_321)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA89, 0x0061 };

    // AABC 0001 AA89 0061;	
    // (ꪼ'\u0001'ꪉ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA89 0061;	
    // (ꪼ'\u0001'ꪉ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_322)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA89, 0x0061 };

    // AABC 0591 AA89 0061;	
    // (ꪼ֑ꪉ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA89 0061;	
    // (ꪼ֑ꪉ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_323)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA89, 0x0061 };

    // AABC 1D165 AA89 0061;	
    // (ꪼ𝅥ꪉ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA89 0061;	
    // (ꪼ𝅥ꪉ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NGO	[2ECC 2E99 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_324)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8A, 0x0061 };

    // AABC 0001 AA8A 0061;	
    // (ꪼ'\u0001'ꪊ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8A 0061;	
    // (ꪼ'\u0001'ꪊ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_325)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8A, 0x0061 };

    // AABC 0591 AA8A 0061;	
    // (ꪼ֑ꪊ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8A 0061;	
    // (ꪼ֑ꪊ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_326)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8A, 0x0061 };

    // AABC 1D165 AA8A 0061;	
    // (ꪼ𝅥ꪊ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8A 0061;	
    // (ꪼ𝅥ꪊ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CO	[2ECC 2E9A 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_327)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8B, 0x0061 };

    // AABC 0001 AA8B 0061;	
    // (ꪼ'\u0001'ꪋ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8B 0061;	
    // (ꪼ'\u0001'ꪋ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_328)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8B, 0x0061 };

    // AABC 0591 AA8B 0061;	
    // (ꪼ֑ꪋ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8B 0061;	
    // (ꪼ֑ꪋ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_329)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8B, 0x0061 };

    // AABC 1D165 AA8B 0061;	
    // (ꪼ𝅥ꪋ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8B 0061;	
    // (ꪼ𝅥ꪋ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CO	[2ECC 2E9B 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_330)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8C, 0x0061 };

    // AABC 0001 AA8C 0061;	
    // (ꪼ'\u0001'ꪌ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8C 0061;	
    // (ꪼ'\u0001'ꪌ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_331)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8C, 0x0061 };

    // AABC 0591 AA8C 0061;	
    // (ꪼ֑ꪌ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8C 0061;	
    // (ꪼ֑ꪌ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_332)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8C, 0x0061 };

    // AABC 1D165 AA8C 0061;	
    // (ꪼ𝅥ꪌ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8C 0061;	
    // (ꪼ𝅥ꪌ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW CHO	[2ECC 2E9C 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_333)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8D, 0x0061 };

    // AABC 0001 AA8D 0061;	
    // (ꪼ'\u0001'ꪍ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8D 0061;	
    // (ꪼ'\u0001'ꪍ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_334)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8D, 0x0061 };

    // AABC 0591 AA8D 0061;	
    // (ꪼ֑ꪍ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8D 0061;	
    // (ꪼ֑ꪍ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_335)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8D, 0x0061 };

    // AABC 1D165 AA8D 0061;	
    // (ꪼ𝅥ꪍ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8D 0061;	
    // (ꪼ𝅥ꪍ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH CHO	[2ECC 2E9D 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_336)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8E, 0x0061 };

    // AABC 0001 AA8E 0061;	
    // (ꪼ'\u0001'ꪎ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8E 0061;	
    // (ꪼ'\u0001'ꪎ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_337)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8E, 0x0061 };

    // AABC 0591 AA8E 0061;	
    // (ꪼ֑ꪎ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8E 0061;	
    // (ꪼ֑ꪎ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_338)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8E, 0x0061 };

    // AABC 1D165 AA8E 0061;	
    // (ꪼ𝅥ꪎ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8E 0061;	
    // (ꪼ𝅥ꪎ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW SO	[2ECC 2E9E 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_339)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA8F, 0x0061 };

    // AABC 0001 AA8F 0061;	
    // (ꪼ'\u0001'ꪏ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA8F 0061;	
    // (ꪼ'\u0001'ꪏ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_340)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA8F, 0x0061 };

    // AABC 0591 AA8F 0061;	
    // (ꪼ֑ꪏ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA8F 0061;	
    // (ꪼ֑ꪏ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_341)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA8F, 0x0061 };

    // AABC 1D165 AA8F 0061;	
    // (ꪼ𝅥ꪏ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA8F 0061;	
    // (ꪼ𝅥ꪏ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH SO	[2ECC 2E9F 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_342)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA90, 0x0061 };

    // AABC 0001 AA90 0061;	
    // (ꪼ'\u0001'ꪐ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA90 0061;	
    // (ꪼ'\u0001'ꪐ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_343)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA90, 0x0061 };

    // AABC 0591 AA90 0061;	
    // (ꪼ֑ꪐ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA90 0061;	
    // (ꪼ֑ꪐ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_344)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA90, 0x0061 };

    // AABC 1D165 AA90 0061;	
    // (ꪼ𝅥ꪐ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA90 0061;	
    // (ꪼ𝅥ꪐ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NYO	[2ECC 2EA0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_345)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA91, 0x0061 };

    // AABC 0001 AA91 0061;	
    // (ꪼ'\u0001'ꪑ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA91 0061;	
    // (ꪼ'\u0001'ꪑ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_346)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA91, 0x0061 };

    // AABC 0591 AA91 0061;	
    // (ꪼ֑ꪑ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA91 0061;	
    // (ꪼ֑ꪑ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_347)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA91, 0x0061 };

    // AABC 1D165 AA91 0061;	
    // (ꪼ𝅥ꪑ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA91 0061;	
    // (ꪼ𝅥ꪑ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NYO	[2ECC 2EA1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_348)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA92, 0x0061 };

    // AABC 0001 AA92 0061;	
    // (ꪼ'\u0001'ꪒ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA92 0061;	
    // (ꪼ'\u0001'ꪒ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_349)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA92, 0x0061 };

    // AABC 0591 AA92 0061;	
    // (ꪼ֑ꪒ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA92 0061;	
    // (ꪼ֑ꪒ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_350)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA92, 0x0061 };

    // AABC 1D165 AA92 0061;	
    // (ꪼ𝅥ꪒ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA92 0061;	
    // (ꪼ𝅥ꪒ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW DO	[2ECC 2EA2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_351)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA93, 0x0061 };

    // AABC 0001 AA93 0061;	
    // (ꪼ'\u0001'ꪓ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA93 0061;	
    // (ꪼ'\u0001'ꪓ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_352)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA93, 0x0061 };

    // AABC 0591 AA93 0061;	
    // (ꪼ֑ꪓ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA93 0061;	
    // (ꪼ֑ꪓ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_353)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA93, 0x0061 };

    // AABC 1D165 AA93 0061;	
    // (ꪼ𝅥ꪓ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA93 0061;	
    // (ꪼ𝅥ꪓ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH DO	[2ECC 2EA3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_354)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA94, 0x0061 };

    // AABC 0001 AA94 0061;	
    // (ꪼ'\u0001'ꪔ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA94 0061;	
    // (ꪼ'\u0001'ꪔ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_355)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA94, 0x0061 };

    // AABC 0591 AA94 0061;	
    // (ꪼ֑ꪔ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA94 0061;	
    // (ꪼ֑ꪔ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_356)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA94, 0x0061 };

    // AABC 1D165 AA94 0061;	
    // (ꪼ𝅥ꪔ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA94 0061;	
    // (ꪼ𝅥ꪔ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW TO	[2ECC 2EA4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_357)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA95, 0x0061 };

    // AABC 0001 AA95 0061;	
    // (ꪼ'\u0001'ꪕ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA95 0061;	
    // (ꪼ'\u0001'ꪕ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_358)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA95, 0x0061 };

    // AABC 0591 AA95 0061;	
    // (ꪼ֑ꪕ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA95 0061;	
    // (ꪼ֑ꪕ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_359)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA95, 0x0061 };

    // AABC 1D165 AA95 0061;	
    // (ꪼ𝅥ꪕ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA95 0061;	
    // (ꪼ𝅥ꪕ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH TO	[2ECC 2EA5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_360)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA96, 0x0061 };

    // AABC 0001 AA96 0061;	
    // (ꪼ'\u0001'ꪖ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA96 0061;	
    // (ꪼ'\u0001'ꪖ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_361)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA96, 0x0061 };

    // AABC 0591 AA96 0061;	
    // (ꪼ֑ꪖ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA96 0061;	
    // (ꪼ֑ꪖ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_362)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA96, 0x0061 };

    // AABC 1D165 AA96 0061;	
    // (ꪼ𝅥ꪖ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA96 0061;	
    // (ꪼ𝅥ꪖ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW THO	[2ECC 2EA6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_363)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA97, 0x0061 };

    // AABC 0001 AA97 0061;	
    // (ꪼ'\u0001'ꪗ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA97 0061;	
    // (ꪼ'\u0001'ꪗ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_364)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA97, 0x0061 };

    // AABC 0591 AA97 0061;	
    // (ꪼ֑ꪗ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA97 0061;	
    // (ꪼ֑ꪗ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_365)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA97, 0x0061 };

    // AABC 1D165 AA97 0061;	
    // (ꪼ𝅥ꪗ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA97 0061;	
    // (ꪼ𝅥ꪗ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH THO	[2ECC 2EA7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_366)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA98, 0x0061 };

    // AABC 0001 AA98 0061;	
    // (ꪼ'\u0001'ꪘ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA98 0061;	
    // (ꪼ'\u0001'ꪘ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_367)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA98, 0x0061 };

    // AABC 0591 AA98 0061;	
    // (ꪼ֑ꪘ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA98 0061;	
    // (ꪼ֑ꪘ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_368)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA98, 0x0061 };

    // AABC 1D165 AA98 0061;	
    // (ꪼ𝅥ꪘ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA98 0061;	
    // (ꪼ𝅥ꪘ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW NO	[2ECC 2EA8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_369)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA99, 0x0061 };

    // AABC 0001 AA99 0061;	
    // (ꪼ'\u0001'ꪙ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA99 0061;	
    // (ꪼ'\u0001'ꪙ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_370)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA99, 0x0061 };

    // AABC 0591 AA99 0061;	
    // (ꪼ֑ꪙ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA99 0061;	
    // (ꪼ֑ꪙ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_371)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA99, 0x0061 };

    // AABC 1D165 AA99 0061;	
    // (ꪼ𝅥ꪙ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA99 0061;	
    // (ꪼ𝅥ꪙ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH NO	[2ECC 2EA9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_372)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9A, 0x0061 };

    // AABC 0001 AA9A 0061;	
    // (ꪼ'\u0001'ꪚ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9A 0061;	
    // (ꪼ'\u0001'ꪚ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_373)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9A, 0x0061 };

    // AABC 0591 AA9A 0061;	
    // (ꪼ֑ꪚ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9A 0061;	
    // (ꪼ֑ꪚ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_374)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9A, 0x0061 };

    // AABC 1D165 AA9A 0061;	
    // (ꪼ𝅥ꪚ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9A 0061;	
    // (ꪼ𝅥ꪚ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW BO	[2ECC 2EAA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_375)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9B, 0x0061 };

    // AABC 0001 AA9B 0061;	
    // (ꪼ'\u0001'ꪛ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9B 0061;	
    // (ꪼ'\u0001'ꪛ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_376)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9B, 0x0061 };

    // AABC 0591 AA9B 0061;	
    // (ꪼ֑ꪛ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9B 0061;	
    // (ꪼ֑ꪛ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_377)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9B, 0x0061 };

    // AABC 1D165 AA9B 0061;	
    // (ꪼ𝅥ꪛ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9B 0061;	
    // (ꪼ𝅥ꪛ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH BO	[2ECC 2EAB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_378)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9C, 0x0061 };

    // AABC 0001 AA9C 0061;	
    // (ꪼ'\u0001'ꪜ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9C 0061;	
    // (ꪼ'\u0001'ꪜ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_379)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9C, 0x0061 };

    // AABC 0591 AA9C 0061;	
    // (ꪼ֑ꪜ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9C 0061;	
    // (ꪼ֑ꪜ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_380)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9C, 0x0061 };

    // AABC 1D165 AA9C 0061;	
    // (ꪼ𝅥ꪜ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9C 0061;	
    // (ꪼ𝅥ꪜ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PO	[2ECC 2EAC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_381)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9D, 0x0061 };

    // AABC 0001 AA9D 0061;	
    // (ꪼ'\u0001'ꪝ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9D 0061;	
    // (ꪼ'\u0001'ꪝ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_382)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9D, 0x0061 };

    // AABC 0591 AA9D 0061;	
    // (ꪼ֑ꪝ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9D 0061;	
    // (ꪼ֑ꪝ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_383)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9D, 0x0061 };

    // AABC 1D165 AA9D 0061;	
    // (ꪼ𝅥ꪝ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9D 0061;	
    // (ꪼ𝅥ꪝ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PO	[2ECC 2EAD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_384)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9E, 0x0061 };

    // AABC 0001 AA9E 0061;	
    // (ꪼ'\u0001'ꪞ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9E 0061;	
    // (ꪼ'\u0001'ꪞ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_385)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9E, 0x0061 };

    // AABC 0591 AA9E 0061;	
    // (ꪼ֑ꪞ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9E 0061;	
    // (ꪼ֑ꪞ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_386)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9E, 0x0061 };

    // AABC 1D165 AA9E 0061;	
    // (ꪼ𝅥ꪞ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9E 0061;	
    // (ꪼ𝅥ꪞ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW PHO	[2ECC 2EAE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_387)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAA9F, 0x0061 };

    // AABC 0001 AA9F 0061;	
    // (ꪼ'\u0001'ꪟ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AA9F 0061;	
    // (ꪼ'\u0001'ꪟ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_388)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAA9F, 0x0061 };

    // AABC 0591 AA9F 0061;	
    // (ꪼ֑ꪟ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AA9F 0061;	
    // (ꪼ֑ꪟ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_389)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAA9F, 0x0061 };

    // AABC 1D165 AA9F 0061;	
    // (ꪼ𝅥ꪟ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AA9F 0061;	
    // (ꪼ𝅥ꪟ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH PHO	[2ECC 2EAF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_390)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA0, 0x0061 };

    // AABC 0001 AAA0 0061;	
    // (ꪼ'\u0001'ꪠ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA0 0061;	
    // (ꪼ'\u0001'ꪠ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_391)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA0, 0x0061 };

    // AABC 0591 AAA0 0061;	
    // (ꪼ֑ꪠ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA0 0061;	
    // (ꪼ֑ꪠ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_392)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA0, 0x0061 };

    // AABC 1D165 AAA0 0061;	
    // (ꪼ𝅥ꪠ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA0 0061;	
    // (ꪼ𝅥ꪠ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW FO	[2ECC 2EB0 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_393)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA1, 0x0061 };

    // AABC 0001 AAA1 0061;	
    // (ꪼ'\u0001'ꪡ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA1 0061;	
    // (ꪼ'\u0001'ꪡ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_394)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA1, 0x0061 };

    // AABC 0591 AAA1 0061;	
    // (ꪼ֑ꪡ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA1 0061;	
    // (ꪼ֑ꪡ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_395)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA1, 0x0061 };

    // AABC 1D165 AAA1 0061;	
    // (ꪼ𝅥ꪡ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA1 0061;	
    // (ꪼ𝅥ꪡ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH FO	[2ECC 2EB1 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_396)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA2, 0x0061 };

    // AABC 0001 AAA2 0061;	
    // (ꪼ'\u0001'ꪢ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA2 0061;	
    // (ꪼ'\u0001'ꪢ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_397)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA2, 0x0061 };

    // AABC 0591 AAA2 0061;	
    // (ꪼ֑ꪢ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA2 0061;	
    // (ꪼ֑ꪢ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_398)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA2, 0x0061 };

    // AABC 1D165 AAA2 0061;	
    // (ꪼ𝅥ꪢ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA2 0061;	
    // (ꪼ𝅥ꪢ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW MO	[2ECC 2EB2 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_399)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA3, 0x0061 };

    // AABC 0001 AAA3 0061;	
    // (ꪼ'\u0001'ꪣ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA3 0061;	
    // (ꪼ'\u0001'ꪣ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_400)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA3, 0x0061 };

    // AABC 0591 AAA3 0061;	
    // (ꪼ֑ꪣ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA3 0061;	
    // (ꪼ֑ꪣ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_401)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA3, 0x0061 };

    // AABC 1D165 AAA3 0061;	
    // (ꪼ𝅥ꪣ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA3 0061;	
    // (ꪼ𝅥ꪣ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH MO	[2ECC 2EB3 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_402)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA4, 0x0061 };

    // AABC 0001 AAA4 0061;	
    // (ꪼ'\u0001'ꪤ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA4 0061;	
    // (ꪼ'\u0001'ꪤ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_403)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA4, 0x0061 };

    // AABC 0591 AAA4 0061;	
    // (ꪼ֑ꪤ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA4 0061;	
    // (ꪼ֑ꪤ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_404)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA4, 0x0061 };

    // AABC 1D165 AAA4 0061;	
    // (ꪼ𝅥ꪤ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA4 0061;	
    // (ꪼ𝅥ꪤ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW YO	[2ECC 2EB4 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_405)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA5, 0x0061 };

    // AABC 0001 AAA5 0061;	
    // (ꪼ'\u0001'ꪥ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA5 0061;	
    // (ꪼ'\u0001'ꪥ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_406)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA5, 0x0061 };

    // AABC 0591 AAA5 0061;	
    // (ꪼ֑ꪥ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA5 0061;	
    // (ꪼ֑ꪥ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_407)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA5, 0x0061 };

    // AABC 1D165 AAA5 0061;	
    // (ꪼ𝅥ꪥ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA5 0061;	
    // (ꪼ𝅥ꪥ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH YO	[2ECC 2EB5 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_408)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA6, 0x0061 };

    // AABC 0001 AAA6 0061;	
    // (ꪼ'\u0001'ꪦ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA6 0061;	
    // (ꪼ'\u0001'ꪦ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_409)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA6, 0x0061 };

    // AABC 0591 AAA6 0061;	
    // (ꪼ֑ꪦ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA6 0061;	
    // (ꪼ֑ꪦ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_410)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA6, 0x0061 };

    // AABC 1D165 AAA6 0061;	
    // (ꪼ𝅥ꪦ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA6 0061;	
    // (ꪼ𝅥ꪦ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW RO	[2ECC 2EB6 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_411)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA7, 0x0061 };

    // AABC 0001 AAA7 0061;	
    // (ꪼ'\u0001'ꪧ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA7 0061;	
    // (ꪼ'\u0001'ꪧ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_412)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA7, 0x0061 };

    // AABC 0591 AAA7 0061;	
    // (ꪼ֑ꪧ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA7 0061;	
    // (ꪼ֑ꪧ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_413)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA7, 0x0061 };

    // AABC 1D165 AAA7 0061;	
    // (ꪼ𝅥ꪧ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA7 0061;	
    // (ꪼ𝅥ꪧ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH RO	[2ECC 2EB7 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_414)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA8, 0x0061 };

    // AABC 0001 AAA8 0061;	
    // (ꪼ'\u0001'ꪨ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA8 0061;	
    // (ꪼ'\u0001'ꪨ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_415)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA8, 0x0061 };

    // AABC 0591 AAA8 0061;	
    // (ꪼ֑ꪨ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA8 0061;	
    // (ꪼ֑ꪨ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_416)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA8, 0x0061 };

    // AABC 1D165 AAA8 0061;	
    // (ꪼ𝅥ꪨ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA8 0061;	
    // (ꪼ𝅥ꪨ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW LO	[2ECC 2EB8 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_417)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAA9, 0x0061 };

    // AABC 0001 AAA9 0061;	
    // (ꪼ'\u0001'ꪩ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAA9 0061;	
    // (ꪼ'\u0001'ꪩ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_418)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAA9, 0x0061 };

    // AABC 0591 AAA9 0061;	
    // (ꪼ֑ꪩ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAA9 0061;	
    // (ꪼ֑ꪩ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_419)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAA9, 0x0061 };

    // AABC 1D165 AAA9 0061;	
    // (ꪼ𝅥ꪩ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAA9 0061;	
    // (ꪼ𝅥ꪩ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH LO	[2ECC 2EB9 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_420)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAA, 0x0061 };

    // AABC 0001 AAAA 0061;	
    // (ꪼ'\u0001'ꪪ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAA 0061;	
    // (ꪼ'\u0001'ꪪ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_421)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAA, 0x0061 };

    // AABC 0591 AAAA 0061;	
    // (ꪼ֑ꪪ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAA 0061;	
    // (ꪼ֑ꪪ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_422)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAA, 0x0061 };

    // AABC 1D165 AAAA 0061;	
    // (ꪼ𝅥ꪪ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAA 0061;	
    // (ꪼ𝅥ꪪ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW VO	[2ECC 2EBA 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_423)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAB, 0x0061 };

    // AABC 0001 AAAB 0061;	
    // (ꪼ'\u0001'ꪫ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAB 0061;	
    // (ꪼ'\u0001'ꪫ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_424)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAB, 0x0061 };

    // AABC 0591 AAAB 0061;	
    // (ꪼ֑ꪫ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAB 0061;	
    // (ꪼ֑ꪫ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_425)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAB, 0x0061 };

    // AABC 1D165 AAAB 0061;	
    // (ꪼ𝅥ꪫ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAB 0061;	
    // (ꪼ𝅥ꪫ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH VO	[2ECC 2EBB 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_426)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAC, 0x0061 };

    // AABC 0001 AAAC 0061;	
    // (ꪼ'\u0001'ꪬ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAC 0061;	
    // (ꪼ'\u0001'ꪬ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_427)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAC, 0x0061 };

    // AABC 0591 AAAC 0061;	
    // (ꪼ֑ꪬ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAC 0061;	
    // (ꪼ֑ꪬ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_428)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAC, 0x0061 };

    // AABC 1D165 AAAC 0061;	
    // (ꪼ𝅥ꪬ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAC 0061;	
    // (ꪼ𝅥ꪬ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW HO	[2ECC 2EBC 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_429)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAD, 0x0061 };

    // AABC 0001 AAAD 0061;	
    // (ꪼ'\u0001'ꪭ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAD 0061;	
    // (ꪼ'\u0001'ꪭ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_430)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAD, 0x0061 };

    // AABC 0591 AAAD 0061;	
    // (ꪼ֑ꪭ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAD 0061;	
    // (ꪼ֑ꪭ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_431)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAD, 0x0061 };

    // AABC 1D165 AAAD 0061;	
    // (ꪼ𝅥ꪭ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAD 0061;	
    // (ꪼ𝅥ꪭ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH HO	[2ECC 2EBD 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_432)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAE, 0x0061 };

    // AABC 0001 AAAE 0061;	
    // (ꪼ'\u0001'ꪮ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAE 0061;	
    // (ꪼ'\u0001'ꪮ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_433)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAE, 0x0061 };

    // AABC 0591 AAAE 0061;	
    // (ꪼ֑ꪮ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAE 0061;	
    // (ꪼ֑ꪮ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_434)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAE, 0x0061 };

    // AABC 1D165 AAAE 0061;	
    // (ꪼ𝅥ꪮ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAE 0061;	
    // (ꪼ𝅥ꪮ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER LOW O	[2ECC 2EBE 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_435)
{
    uint32_t const cps[4] = { 0xAABC, 0x0001, 0xAAAF, 0x0061 };

    // AABC 0001 AAAF 0061;	
    // (ꪼ'\u0001'ꪯ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0001 AAAF 0061;	
    // (ꪼ'\u0001'ꪯ) TAI VIET VOWEL AY, <START OF HEADING>, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_436)
{
    uint32_t const cps[4] = { 0xAABC, 0x0591, 0xAAAF, 0x0061 };

    // AABC 0591 AAAF 0061;	
    // (ꪼ֑ꪯ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 0591 AAAF 0061;	
    // (ꪼ֑ꪯ) TAI VIET VOWEL AY, HEBREW ACCENT ETNAHTA, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_437)
{
    uint32_t const cps[4] = { 0xAABC, 0x1D165, 0xAAAF, 0x0061 };

    // AABC 1D165 AAAF 0061;	
    // (ꪼ𝅥ꪯ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABC 1D165 AAAF 0061;	
    // (ꪼ𝅥ꪯ) TAI VIET VOWEL AY, MUSICAL SYMBOL COMBINING STEM, TAI VIET LETTER HIGH O	[2ECC 2EBF 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ECC, 0x2EBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_438)
{
    uint32_t const cps[2] = { 0xAABD, 0x0021 };

    // AABD 0021;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABD 0021;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_439)
{
    uint32_t const cps[2] = { 0xAABD, 0x003F };

    // AABD 003F;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABD 003F;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_440)
{
    uint32_t const cps[2] = { 0xAABD, 0x0061 };

    // AABD 0061;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABD 0061;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_441)
{
    uint32_t const cps[2] = { 0xAABD, 0x0041 };

    // AABD 0041;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABD 0041;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_442)
{
    uint32_t const cps[2] = { 0xAABD, 0x0062 };

    // AABD 0062;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABD 0062;	
    // (ꪽ) TAI VIET VOWEL AN	[2ECD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_443)
{
    uint32_t const cps[2] = { 0x0334, 0xAABE };

    // 0334 AABE;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 004A 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[7] = { 0x2ECE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0334 AABE;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 004A 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[10] = { 0x2ECE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_444)
{
    uint32_t const cps[2] = { 0xAABE, 0x0334 };

    // AABE 0334;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 004A 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[7] = { 0x2ECE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 0334;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 004A 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[10] = { 0x2ECE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_445)
{
    uint32_t const cps[2] = { 0xAABE, 0x0021 };

    // AABE 0021;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 0021;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_446)
{
    uint32_t const cps[2] = { 0xAABE, 0x003F };

    // AABE 003F;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 003F;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_447)
{
    uint32_t const cps[2] = { 0xAABE, 0x0061 };

    // AABE 0061;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 0061;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_448)
{
    uint32_t const cps[2] = { 0xAABE, 0x0041 };

    // AABE 0041;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 0041;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_449)
{
    uint32_t const cps[2] = { 0xAABE, 0x0062 };

    // AABE 0062;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AABE 0062;	
    // (ꪾ) TAI VIET VOWEL AM	[2ECE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_450)
{
    uint32_t const cps[2] = { 0xAAC0, 0x0021 };

    // AAC0 0021;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC0 0021;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ECF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_451)
{
    uint32_t const cps[2] = { 0xAAC0, 0x003F };

    // AAC0 003F;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC0 003F;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ECF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_452)
{
    uint32_t const cps[2] = { 0xAAC0, 0x0061 };

    // AAC0 0061;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC0 0061;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_453)
{
    uint32_t const cps[2] = { 0xAAC0, 0x0041 };

    // AAC0 0041;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC0 0041;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_454)
{
    uint32_t const cps[2] = { 0xAAC0, 0x0062 };

    // AAC0 0062;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC0 0062;	
    // (ꫀ) TAI VIET TONE MAI NUENG	[2ECF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ECF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_455)
{
    uint32_t const cps[2] = { 0xAAC2, 0x0021 };

    // AAC2 0021;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC2 0021;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_456)
{
    uint32_t const cps[2] = { 0xAAC2, 0x003F };

    // AAC2 003F;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC2 003F;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_457)
{
    uint32_t const cps[2] = { 0xAAC2, 0x0061 };

    // AAC2 0061;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC2 0061;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_458)
{
    uint32_t const cps[2] = { 0xAAC2, 0x0041 };

    // AAC2 0041;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC2 0041;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_459)
{
    uint32_t const cps[2] = { 0xAAC2, 0x0062 };

    // AAC2 0062;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AAC2 0062;	
    // (ꫂ) TAI VIET TONE MAI SONG	[2ED0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_460)
{
    uint32_t const cps[2] = { 0xAADB, 0x0021 };

    // AADB 0021;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADB 0021;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_461)
{
    uint32_t const cps[2] = { 0xAADB, 0x003F };

    // AADB 003F;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADB 003F;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_462)
{
    uint32_t const cps[2] = { 0xAADB, 0x0061 };

    // AADB 0061;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADB 0061;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_463)
{
    uint32_t const cps[2] = { 0xAADB, 0x0041 };

    // AADB 0041;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADB 0041;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_464)
{
    uint32_t const cps[2] = { 0xAADB, 0x0062 };

    // AADB 0062;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADB 0062;	
    // (ꫛ) TAI VIET SYMBOL KON	[2ED1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_465)
{
    uint32_t const cps[2] = { 0xAADC, 0x0021 };

    // AADC 0021;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADC 0021;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_466)
{
    uint32_t const cps[2] = { 0xAADC, 0x003F };

    // AADC 003F;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADC 003F;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_467)
{
    uint32_t const cps[2] = { 0xAADC, 0x0061 };

    // AADC 0061;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADC 0061;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_468)
{
    uint32_t const cps[2] = { 0xAADC, 0x0041 };

    // AADC 0041;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADC 0041;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_469)
{
    uint32_t const cps[2] = { 0xAADC, 0x0062 };

    // AADC 0062;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AADC 0062;	
    // (ꫜ) TAI VIET SYMBOL NUENG	[2ED2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_470)
{
    uint32_t const cps[2] = { 0x0F40, 0x0021 };

    // 0F40 0021;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F40 0021;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_471)
{
    uint32_t const cps[2] = { 0x0F40, 0x003F };

    // 0F40 003F;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F40 003F;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_472)
{
    uint32_t const cps[2] = { 0x0F40, 0x0061 };

    // 0F40 0061;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F40 0061;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_473)
{
    uint32_t const cps[2] = { 0x0F40, 0x0041 };

    // 0F40 0041;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F40 0041;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_474)
{
    uint32_t const cps[2] = { 0x0F40, 0x0062 };

    // 0F40 0062;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F40 0062;	
    // (ཀ) TIBETAN LETTER KA	[2ED3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_475)
{
    uint32_t const cps[2] = { 0x0F69, 0x0021 };

    // 0F69 0021;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED3, 0x2F14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F69 0021;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2ED3, 0x2F14, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_476)
{
    uint32_t const cps[2] = { 0x0F69, 0x003F };

    // 0F69 003F;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED3, 0x2F14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F69 003F;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2ED3, 0x2F14, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_477)
{
    uint32_t const cps[2] = { 0x0F69, 0x0061 };

    // 0F69 0061;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED3, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F69 0061;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED3, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_478)
{
    uint32_t const cps[2] = { 0x0F69, 0x0041 };

    // 0F69 0041;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED3, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F69 0041;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED3, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_479)
{
    uint32_t const cps[2] = { 0x0F69, 0x0062 };

    // 0F69 0062;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED3, 0x2F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F69 0062;	
    // (ཀྵ) TIBETAN LETTER KSSA	[2ED3 2F14 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED3, 0x2F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_480)
{
    uint32_t const cps[2] = { 0x0F90, 0x0021 };

    // 0F90 0021;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F90 0021;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_481)
{
    uint32_t const cps[2] = { 0x0F90, 0x003F };

    // 0F90 003F;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F90 003F;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_482)
{
    uint32_t const cps[2] = { 0x0F90, 0x0061 };

    // 0F90 0061;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F90 0061;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_483)
{
    uint32_t const cps[2] = { 0x0F90, 0x0041 };

    // 0F90 0041;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F90 0041;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_484)
{
    uint32_t const cps[2] = { 0x0F90, 0x0062 };

    // 0F90 0062;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F90 0062;	
    // (ྐ) TIBETAN SUBJOINED LETTER KA	[2ED4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_485)
{
    uint32_t const cps[2] = { 0x0FB9, 0x0021 };

    // 0FB9 0021;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 0261 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED4, 0x2F14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FB9 0021;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 | 0020 0020 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x2ED4, 0x2F14, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_486)
{
    uint32_t const cps[2] = { 0x0FB9, 0x003F };

    // 0FB9 003F;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 0267 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED4, 0x2F14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FB9 003F;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 | 0020 0020 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x2ED4, 0x2F14, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_487)
{
    uint32_t const cps[2] = { 0x0FB9, 0x0061 };

    // 0FB9 0061;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CAD | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED4, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FB9 0061;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CAD | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED4, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_488)
{
    uint32_t const cps[2] = { 0x0FB9, 0x0041 };

    // 0FB9 0041;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CAD | 0020 0020 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED4, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FB9 0041;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CAD | 0020 0020 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED4, 0x2F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_489)
{
    uint32_t const cps[2] = { 0x0FB9, 0x0062 };

    // 0FB9 0062;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x2ED4, 0x2F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FB9 0062;	
    // (ྐྵ) TIBETAN SUBJOINED LETTER KSSA	[2ED4 2F14 1CC6 | 0020 0020 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x2ED4, 0x2F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_490)
{
    uint32_t const cps[2] = { 0x0F6B, 0x0021 };

    // 0F6B 0021;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F6B 0021;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_491)
{
    uint32_t const cps[2] = { 0x0F6B, 0x003F };

    // 0F6B 003F;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F6B 003F;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_492)
{
    uint32_t const cps[2] = { 0x0F6B, 0x0061 };

    // 0F6B 0061;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F6B 0061;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_493)
{
    uint32_t const cps[2] = { 0x0F6B, 0x0041 };

    // 0F6B 0041;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F6B 0041;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_494)
{
    uint32_t const cps[2] = { 0x0F6B, 0x0062 };

    // 0F6B 0062;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F6B 0062;	
    // (ཫ) TIBETAN LETTER KKA	[2ED5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_495)
{
    uint32_t const cps[2] = { 0x0F41, 0x0021 };

    // 0F41 0021;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F41 0021;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x2ED6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_496)
{
    uint32_t const cps[2] = { 0x0F41, 0x003F };

    // 0F41 003F;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F41 003F;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x2ED6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_497)
{
    uint32_t const cps[2] = { 0x0F41, 0x0061 };

    // 0F41 0061;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F41 0061;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_498)
{
    uint32_t const cps[2] = { 0x0F41, 0x0041 };

    // 0F41 0041;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F41 0041;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_196_499)
{
    uint32_t const cps[2] = { 0x0F41, 0x0062 };

    // 0F41 0062;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x2ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F41 0062;	
    // (ཁ) TIBETAN LETTER KHA	[2ED6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x2ED6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

