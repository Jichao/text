// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_072_000)
{
    // 2C3F  ; [.225A.0020.0002] 
    // GLAGOLITIC SMALL LETTER MYSLITE

    uint32_t const cps[1] = { 0x2c3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_001)
{
    // 2C40  ; [.225B.0020.0002] 
    // GLAGOLITIC SMALL LETTER NASHI

    uint32_t const cps[1] = { 0x2c40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_002)
{
    // 2C41  ; [.225C.0020.0002] 
    // GLAGOLITIC SMALL LETTER ONU

    uint32_t const cps[1] = { 0x2c41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_003)
{
    // 2C42  ; [.225D.0020.0002] 
    // GLAGOLITIC SMALL LETTER POKOJI

    uint32_t const cps[1] = { 0x2c42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_004)
{
    // 2C43  ; [.225E.0020.0002] 
    // GLAGOLITIC SMALL LETTER RITSI

    uint32_t const cps[1] = { 0x2c43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_005)
{
    // 2C44  ; [.225F.0020.0002] 
    // GLAGOLITIC SMALL LETTER SLOVO

    uint32_t const cps[1] = { 0x2c44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_006)
{
    // 2C45  ; [.2260.0020.0002] 
    // GLAGOLITIC SMALL LETTER TVRIDO

    uint32_t const cps[1] = { 0x2c45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2260), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_007)
{
    // 2C46  ; [.2261.0020.0002] 
    // GLAGOLITIC SMALL LETTER UKU

    uint32_t const cps[1] = { 0x2c46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2261), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_008)
{
    // 2C47  ; [.2262.0020.0002] 
    // GLAGOLITIC SMALL LETTER FRITU

    uint32_t const cps[1] = { 0x2c47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2262), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_009)
{
    // 2C48  ; [.2263.0020.0002] 
    // GLAGOLITIC SMALL LETTER HERU

    uint32_t const cps[1] = { 0x2c48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2263), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_010)
{
    // 2C49  ; [.2264.0020.0002] 
    // GLAGOLITIC SMALL LETTER OTU

    uint32_t const cps[1] = { 0x2c49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2264), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_011)
{
    // 2C4A  ; [.2265.0020.0002] 
    // GLAGOLITIC SMALL LETTER PE

    uint32_t const cps[1] = { 0x2c4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2265), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_012)
{
    // 2C4B  ; [.2266.0020.0002] 
    // GLAGOLITIC SMALL LETTER SHTA

    uint32_t const cps[1] = { 0x2c4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2266), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_013)
{
    // 2C4C  ; [.2267.0020.0002] 
    // GLAGOLITIC SMALL LETTER TSI

    uint32_t const cps[1] = { 0x2c4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2267), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_014)
{
    // 2C4D  ; [.2268.0020.0002] 
    // GLAGOLITIC SMALL LETTER CHRIVI

    uint32_t const cps[1] = { 0x2c4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2268), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_015)
{
    // 2C4E  ; [.2269.0020.0002] 
    // GLAGOLITIC SMALL LETTER SHA

    uint32_t const cps[1] = { 0x2c4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2269), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_016)
{
    // 2C4F  ; [.226A.0020.0002] 
    // GLAGOLITIC SMALL LETTER YERU

    uint32_t const cps[1] = { 0x2c4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_017)
{
    // 2C50  ; [.226B.0020.0002] 
    // GLAGOLITIC SMALL LETTER YERI

    uint32_t const cps[1] = { 0x2c50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_018)
{
    // 2C51  ; [.226C.0020.0002] 
    // GLAGOLITIC SMALL LETTER YATI

    uint32_t const cps[1] = { 0x2c51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_019)
{
    // 2C52  ; [.226D.0020.0002] 
    // GLAGOLITIC SMALL LETTER SPIDERY HA

    uint32_t const cps[1] = { 0x2c52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_020)
{
    // 2C53  ; [.226E.0020.0002] 
    // GLAGOLITIC SMALL LETTER YU

    uint32_t const cps[1] = { 0x2c53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_021)
{
    // 2C54  ; [.226F.0020.0002] 
    // GLAGOLITIC SMALL LETTER SMALL YUS

    uint32_t const cps[1] = { 0x2c54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_022)
{
    // 2C55  ; [.2270.0020.0002] 
    // GLAGOLITIC SMALL LETTER SMALL YUS WITH TAIL

    uint32_t const cps[1] = { 0x2c55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2270), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_023)
{
    // 2C56  ; [.2271.0020.0002] 
    // GLAGOLITIC SMALL LETTER YO

    uint32_t const cps[1] = { 0x2c56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2271), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_024)
{
    // 2C57  ; [.2272.0020.0002] 
    // GLAGOLITIC SMALL LETTER IOTATED SMALL YUS

    uint32_t const cps[1] = { 0x2c57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2272), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_025)
{
    // 2C58  ; [.2273.0020.0002] 
    // GLAGOLITIC SMALL LETTER BIG YUS

    uint32_t const cps[1] = { 0x2c58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2273), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_026)
{
    // 2C59  ; [.2274.0020.0002] 
    // GLAGOLITIC SMALL LETTER IOTATED BIG YUS

    uint32_t const cps[1] = { 0x2c59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2274), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_027)
{
    // 2C5A  ; [.2275.0020.0002] 
    // GLAGOLITIC SMALL LETTER FITA

    uint32_t const cps[1] = { 0x2c5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2275), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_028)
{
    // 2C5B  ; [.2276.0020.0002] 
    // GLAGOLITIC SMALL LETTER IZHITSA

    uint32_t const cps[1] = { 0x2c5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2276), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_029)
{
    // 2C5C  ; [.2277.0020.0002] 
    // GLAGOLITIC SMALL LETTER SHTAPIC

    uint32_t const cps[1] = { 0x2c5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2277), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_030)
{
    // 2C5D  ; [.2278.0020.0002] 
    // GLAGOLITIC SMALL LETTER TROKUTASTI A

    uint32_t const cps[1] = { 0x2c5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2278), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_031)
{
    // 2C5E  ; [.2279.0020.0002] 
    // GLAGOLITIC SMALL LETTER LATINATE MYSLITE

    uint32_t const cps[1] = { 0x2c5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2279), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_032)
{
    // 2C60  ; [.1DEC.0020.0008] 
    // LATIN CAPITAL LETTER L WITH DOUBLE BAR

    uint32_t const cps[1] = { 0x2c60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dec), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_033)
{
    // 2C61  ; [.1DEC.0020.0002] 
    // LATIN SMALL LETTER L WITH DOUBLE BAR

    uint32_t const cps[1] = { 0x2c61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dec), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_034)
{
    // 2C62  ; [.1DED.0020.0008] 
    // LATIN CAPITAL LETTER L WITH MIDDLE TILDE

    uint32_t const cps[1] = { 0x2c62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ded), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_035)
{
    // 2C63  ; [.1E77.0020.0008] 
    // LATIN CAPITAL LETTER P WITH STROKE

    uint32_t const cps[1] = { 0x2c63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e77), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_036)
{
    // 2C64  ; [.1EBD.0020.0008] 
    // LATIN CAPITAL LETTER R WITH TAIL

    uint32_t const cps[1] = { 0x2c64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ebd), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_037)
{
    // 2C65  ; [.1CB2.0020.0002] 
    // LATIN SMALL LETTER A WITH STROKE

    uint32_t const cps[1] = { 0x2c65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_038)
{
    // 2C66  ; [.1F04.0020.0002] 
    // LATIN SMALL LETTER T WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0x2c66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f04), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_039)
{
    // 2C67  ; [.1D8F.0020.0008] 
    // LATIN CAPITAL LETTER H WITH DESCENDER

    uint32_t const cps[1] = { 0x2c67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d8f), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_040)
{
    // 2C68  ; [.1D8F.0020.0002] 
    // LATIN SMALL LETTER H WITH DESCENDER

    uint32_t const cps[1] = { 0x2c68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_041)
{
    // 2C69  ; [.1DD5.0020.0008] 
    // LATIN CAPITAL LETTER K WITH DESCENDER

    uint32_t const cps[1] = { 0x2c69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd5), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_042)
{
    // 2C6A  ; [.1DD5.0020.0002] 
    // LATIN SMALL LETTER K WITH DESCENDER

    uint32_t const cps[1] = { 0x2c6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_043)
{
    // 2C6B  ; [.1FA2.0020.0008] 
    // LATIN CAPITAL LETTER Z WITH DESCENDER

    uint32_t const cps[1] = { 0x2c6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa2), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_044)
{
    // 2C6C  ; [.1FA2.0020.0002] 
    // LATIN SMALL LETTER Z WITH DESCENDER

    uint32_t const cps[1] = { 0x2c6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_045)
{
    // 2C6D  ; [.1CBB.0020.0008] 
    // LATIN CAPITAL LETTER ALPHA

    uint32_t const cps[1] = { 0x2c6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cbb), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_046)
{
    // 2C6E  ; [.1E17.0020.0008] 
    // LATIN CAPITAL LETTER M WITH HOOK

    uint32_t const cps[1] = { 0x2c6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e17), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_047)
{
    // 2C6F  ; [.1CB7.0020.0008] 
    // LATIN CAPITAL LETTER TURNED A

    uint32_t const cps[1] = { 0x2c6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cb7), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_048)
{
    // 2C70  ; [.1CC1.0020.0008] 
    // LATIN CAPITAL LETTER TURNED ALPHA

    uint32_t const cps[1] = { 0x2c70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc1), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_049)
{
    // 2C71  ; [.1F54.0020.0002] 
    // LATIN SMALL LETTER V WITH RIGHT HOOK

    uint32_t const cps[1] = { 0x2c71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f54), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_050)
{
    // 2C72  ; [.1F60.0020.0008] 
    // LATIN CAPITAL LETTER W WITH HOOK

    uint32_t const cps[1] = { 0x2c72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f60), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_051)
{
    // 2C73  ; [.1F60.0020.0002] 
    // LATIN SMALL LETTER W WITH HOOK

    uint32_t const cps[1] = { 0x2c73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f60), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_052)
{
    // 2C74  ; [.1F55.0020.0002] 
    // LATIN SMALL LETTER V WITH CURL

    uint32_t const cps[1] = { 0x2c74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f55), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_053)
{
    // 2C75  ; [.1D90.0020.0008] 
    // LATIN CAPITAL LETTER HALF H

    uint32_t const cps[1] = { 0x2c75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d90), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_054)
{
    // 2C76  ; [.1D90.0020.0002] 
    // LATIN SMALL LETTER HALF H

    uint32_t const cps[1] = { 0x2c76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d90), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_055)
{
    // 2C77  ; [.1E86.0020.0002] 
    // LATIN SMALL LETTER TAILLESS PHI

    uint32_t const cps[1] = { 0x2c77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e86), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_056)
{
    // 2C78  ; [.1D1D.0020.0002] 
    // LATIN SMALL LETTER E WITH NOTCH

    uint32_t const cps[1] = { 0x2c78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_057)
{
    // 2C79  ; [.1EB8.0020.0002] 
    // LATIN SMALL LETTER TURNED R WITH TAIL

    uint32_t const cps[1] = { 0x2c79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1eb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_058)
{
    // 2C7A  ; [.1E62.0020.0002] 
    // LATIN SMALL LETTER O WITH LOW RING INSIDE

    uint32_t const cps[1] = { 0x2c7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_059)
{
    // 2C7B  ; [.1D22.0020.0002] 
    // LATIN LETTER SMALL CAPITAL TURNED E

    uint32_t const cps[1] = { 0x2c7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d22), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_060)
{
    // 2C7C  ; [.1DB2.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER J

    uint32_t const cps[1] = { 0x2c7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x15)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_061)
{
    // 2C7D  ; [.1F49.0020.001D] 
    // MODIFIER LETTER CAPITAL V

    uint32_t const cps[1] = { 0x2c7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_062)
{
    // 2C7E  ; [.1EE2.0020.0008] 
    // LATIN CAPITAL LETTER S WITH SWASH TAIL

    uint32_t const cps[1] = { 0x2c7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ee2), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_063)
{
    // 2C7F  ; [.1F9E.0020.0008] 
    // LATIN CAPITAL LETTER Z WITH SWASH TAIL

    uint32_t const cps[1] = { 0x2c7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f9e), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_064)
{
    // 2C80  ; [.204C.0020.0008] 
    // COPTIC CAPITAL LETTER ALFA

    uint32_t const cps[1] = { 0x2c80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204c), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_065)
{
    // 2C81  ; [.204C.0020.0002] 
    // COPTIC SMALL LETTER ALFA

    uint32_t const cps[1] = { 0x2c81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_066)
{
    // 2C82  ; [.204D.0020.0008] 
    // COPTIC CAPITAL LETTER VIDA

    uint32_t const cps[1] = { 0x2c82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204d), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_067)
{
    // 2C83  ; [.204D.0020.0002] 
    // COPTIC SMALL LETTER VIDA

    uint32_t const cps[1] = { 0x2c83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_068)
{
    // 2C84  ; [.204E.0020.0008] 
    // COPTIC CAPITAL LETTER GAMMA

    uint32_t const cps[1] = { 0x2c84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204e), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_069)
{
    // 2C85  ; [.204E.0020.0002] 
    // COPTIC SMALL LETTER GAMMA

    uint32_t const cps[1] = { 0x2c85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_070)
{
    // 2C86  ; [.204F.0020.0008] 
    // COPTIC CAPITAL LETTER DALDA

    uint32_t const cps[1] = { 0x2c86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204f), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_071)
{
    // 2C87  ; [.204F.0020.0002] 
    // COPTIC SMALL LETTER DALDA

    uint32_t const cps[1] = { 0x2c87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_072)
{
    // 2C88  ; [.2050.0020.0008] 
    // COPTIC CAPITAL LETTER EIE

    uint32_t const cps[1] = { 0x2c88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2050), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_073)
{
    // 2C89  ; [.2050.0020.0002] 
    // COPTIC SMALL LETTER EIE

    uint32_t const cps[1] = { 0x2c89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2050), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_074)
{
    // 2C8A  ; [.2052.0020.0008] 
    // COPTIC CAPITAL LETTER SOU

    uint32_t const cps[1] = { 0x2c8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2052), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_075)
{
    // 2C8B  ; [.2052.0020.0002] 
    // COPTIC SMALL LETTER SOU

    uint32_t const cps[1] = { 0x2c8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2052), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_076)
{
    // 2C8C  ; [.2053.0020.0008] 
    // COPTIC CAPITAL LETTER ZATA

    uint32_t const cps[1] = { 0x2c8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2053), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_077)
{
    // 2C8D  ; [.2053.0020.0002] 
    // COPTIC SMALL LETTER ZATA

    uint32_t const cps[1] = { 0x2c8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2053), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_078)
{
    // 2C8E  ; [.2054.0020.0008] 
    // COPTIC CAPITAL LETTER HATE

    uint32_t const cps[1] = { 0x2c8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2054), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_079)
{
    // 2C8F  ; [.2054.0020.0002] 
    // COPTIC SMALL LETTER HATE

    uint32_t const cps[1] = { 0x2c8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2054), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_080)
{
    // 2C90  ; [.2055.0020.0008] 
    // COPTIC CAPITAL LETTER THETHE

    uint32_t const cps[1] = { 0x2c90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2055), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_081)
{
    // 2C91  ; [.2055.0020.0002] 
    // COPTIC SMALL LETTER THETHE

    uint32_t const cps[1] = { 0x2c91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2055), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_082)
{
    // 2C92  ; [.2056.0020.0008] 
    // COPTIC CAPITAL LETTER IAUDA

    uint32_t const cps[1] = { 0x2c92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2056), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_083)
{
    // 2C93  ; [.2056.0020.0002] 
    // COPTIC SMALL LETTER IAUDA

    uint32_t const cps[1] = { 0x2c93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2056), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_084)
{
    // 2C94  ; [.2057.0020.0008] 
    // COPTIC CAPITAL LETTER KAPA

    uint32_t const cps[1] = { 0x2c94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2057), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_085)
{
    // 2C95  ; [.2057.0020.0002] 
    // COPTIC SMALL LETTER KAPA

    uint32_t const cps[1] = { 0x2c95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2057), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_086)
{
    // 2C96  ; [.2059.0020.0008] 
    // COPTIC CAPITAL LETTER LAULA

    uint32_t const cps[1] = { 0x2c96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2059), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_087)
{
    // 2C97  ; [.2059.0020.0002] 
    // COPTIC SMALL LETTER LAULA

    uint32_t const cps[1] = { 0x2c97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2059), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_088)
{
    // 2C98  ; [.205A.0020.0008] 
    // COPTIC CAPITAL LETTER MI

    uint32_t const cps[1] = { 0x2c98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205a), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_089)
{
    // 2C99  ; [.205A.0020.0002] 
    // COPTIC SMALL LETTER MI

    uint32_t const cps[1] = { 0x2c99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_090)
{
    // 2C9A  ; [.205B.0020.0008] 
    // COPTIC CAPITAL LETTER NI

    uint32_t const cps[1] = { 0x2c9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205b), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_091)
{
    // 2C9B  ; [.205B.0020.0002] 
    // COPTIC SMALL LETTER NI

    uint32_t const cps[1] = { 0x2c9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_092)
{
    // 2C9C  ; [.205E.0020.0008] 
    // COPTIC CAPITAL LETTER KSI

    uint32_t const cps[1] = { 0x2c9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205e), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_093)
{
    // 2C9D  ; [.205E.0020.0002] 
    // COPTIC SMALL LETTER KSI

    uint32_t const cps[1] = { 0x2c9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_094)
{
    // 2C9E  ; [.205F.0020.0008] 
    // COPTIC CAPITAL LETTER O

    uint32_t const cps[1] = { 0x2c9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205f), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_095)
{
    // 2C9F  ; [.205F.0020.0002] 
    // COPTIC SMALL LETTER O

    uint32_t const cps[1] = { 0x2c9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_096)
{
    // 2CA0  ; [.2060.0020.0008] 
    // COPTIC CAPITAL LETTER PI

    uint32_t const cps[1] = { 0x2ca0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2060), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_097)
{
    // 2CA1  ; [.2060.0020.0002] 
    // COPTIC SMALL LETTER PI

    uint32_t const cps[1] = { 0x2ca1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2060), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_098)
{
    // 2CA2  ; [.2061.0020.0008] 
    // COPTIC CAPITAL LETTER RO

    uint32_t const cps[1] = { 0x2ca2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2061), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_099)
{
    // 2CA3  ; [.2061.0020.0002] 
    // COPTIC SMALL LETTER RO

    uint32_t const cps[1] = { 0x2ca3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2061), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_100)
{
    // 2CA4  ; [.2062.0020.0008] 
    // COPTIC CAPITAL LETTER SIMA

    uint32_t const cps[1] = { 0x2ca4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2062), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_101)
{
    // 2CA5  ; [.2062.0020.0002] 
    // COPTIC SMALL LETTER SIMA

    uint32_t const cps[1] = { 0x2ca5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2062), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_102)
{
    // 2CA6  ; [.2063.0020.0008] 
    // COPTIC CAPITAL LETTER TAU

    uint32_t const cps[1] = { 0x2ca6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2063), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_103)
{
    // 2CA7  ; [.2063.0020.0002] 
    // COPTIC SMALL LETTER TAU

    uint32_t const cps[1] = { 0x2ca7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2063), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_104)
{
    // 2CA8  ; [.2064.0020.0008] 
    // COPTIC CAPITAL LETTER UA

    uint32_t const cps[1] = { 0x2ca8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2064), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_105)
{
    // 2CA9  ; [.2064.0020.0002] 
    // COPTIC SMALL LETTER UA

    uint32_t const cps[1] = { 0x2ca9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2064), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_106)
{
    // 2CAA  ; [.2065.0020.0008] 
    // COPTIC CAPITAL LETTER FI

    uint32_t const cps[1] = { 0x2caa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2065), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_107)
{
    // 2CAB  ; [.2065.0020.0002] 
    // COPTIC SMALL LETTER FI

    uint32_t const cps[1] = { 0x2cab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2065), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_108)
{
    // 2CAC  ; [.2066.0020.0008] 
    // COPTIC CAPITAL LETTER KHI

    uint32_t const cps[1] = { 0x2cac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2066), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_109)
{
    // 2CAD  ; [.2066.0020.0002] 
    // COPTIC SMALL LETTER KHI

    uint32_t const cps[1] = { 0x2cad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2066), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_110)
{
    // 2CAE  ; [.2067.0020.0008] 
    // COPTIC CAPITAL LETTER PSI

    uint32_t const cps[1] = { 0x2cae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2067), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_111)
{
    // 2CAF  ; [.2067.0020.0002] 
    // COPTIC SMALL LETTER PSI

    uint32_t const cps[1] = { 0x2caf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2067), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_112)
{
    // 2CB0  ; [.2068.0020.0008] 
    // COPTIC CAPITAL LETTER OOU

    uint32_t const cps[1] = { 0x2cb0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2068), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_113)
{
    // 2CB1  ; [.2068.0020.0002] 
    // COPTIC SMALL LETTER OOU

    uint32_t const cps[1] = { 0x2cb1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2068), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_114)
{
    // 2CB2  ; [.2083.0020.0008] 
    // COPTIC CAPITAL LETTER DIALECT-P ALEF

    uint32_t const cps[1] = { 0x2cb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2083), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_115)
{
    // 2CB3  ; [.2083.0020.0002] 
    // COPTIC SMALL LETTER DIALECT-P ALEF

    uint32_t const cps[1] = { 0x2cb3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2083), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_116)
{
    // 2CB4  ; [.2084.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC AIN

    uint32_t const cps[1] = { 0x2cb4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2084), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_117)
{
    // 2CB5  ; [.2084.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC AIN

    uint32_t const cps[1] = { 0x2cb5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2084), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_118)
{
    // 2CB6  ; [.2051.0020.0008] 
    // COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE

    uint32_t const cps[1] = { 0x2cb6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2051), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_119)
{
    // 2CB7  ; [.2051.0020.0002] 
    // COPTIC SMALL LETTER CRYPTOGRAMMIC EIE

    uint32_t const cps[1] = { 0x2cb7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2051), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_120)
{
    // 2CB8  ; [.2058.0020.0008] 
    // COPTIC CAPITAL LETTER DIALECT-P KAPA

    uint32_t const cps[1] = { 0x2cb8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2058), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_121)
{
    // 2CB9  ; [.2058.0020.0002] 
    // COPTIC SMALL LETTER DIALECT-P KAPA

    uint32_t const cps[1] = { 0x2cb9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2058), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_122)
{
    // 2CBA  ; [.205C.0020.0008] 
    // COPTIC CAPITAL LETTER DIALECT-P NI

    uint32_t const cps[1] = { 0x2cba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205c), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_123)
{
    // 2CBB  ; [.205C.0020.0002] 
    // COPTIC SMALL LETTER DIALECT-P NI

    uint32_t const cps[1] = { 0x2cbb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_124)
{
    // 2CBC  ; [.205D.0020.0008] 
    // COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI

    uint32_t const cps[1] = { 0x2cbc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205d), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_125)
{
    // 2CBD  ; [.205D.0020.0002] 
    // COPTIC SMALL LETTER CRYPTOGRAMMIC NI

    uint32_t const cps[1] = { 0x2cbd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x205d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_126)
{
    // 2CBE  ; [.2069.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC OOU

    uint32_t const cps[1] = { 0x2cbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2069), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_127)
{
    // 2CBF  ; [.2069.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC OOU

    uint32_t const cps[1] = { 0x2cbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2069), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_128)
{
    // 2CC0  ; [.206A.0020.0008] 
    // COPTIC CAPITAL LETTER SAMPI

    uint32_t const cps[1] = { 0x2cc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206a), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_129)
{
    // 2CC1  ; [.206A.0020.0002] 
    // COPTIC SMALL LETTER SAMPI

    uint32_t const cps[1] = { 0x2cc1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_130)
{
    // 2CC2  ; [.206D.0020.0008] 
    // COPTIC CAPITAL LETTER CROSSED SHEI

    uint32_t const cps[1] = { 0x2cc2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206d), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_131)
{
    // 2CC3  ; [.206D.0020.0002] 
    // COPTIC SMALL LETTER CROSSED SHEI

    uint32_t const cps[1] = { 0x2cc3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_132)
{
    // 2CC4  ; [.206E.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC SHEI

    uint32_t const cps[1] = { 0x2cc4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206e), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_133)
{
    // 2CC5  ; [.206E.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC SHEI

    uint32_t const cps[1] = { 0x2cc5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_134)
{
    // 2CC6  ; [.206F.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC ESH

    uint32_t const cps[1] = { 0x2cc6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206f), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_135)
{
    // 2CC7  ; [.206F.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC ESH

    uint32_t const cps[1] = { 0x2cc7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_136)
{
    // 2CC8  ; [.2073.0020.0008] 
    // COPTIC CAPITAL LETTER AKHMIMIC KHEI

    uint32_t const cps[1] = { 0x2cc8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2073), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_137)
{
    // 2CC9  ; [.2073.0020.0002] 
    // COPTIC SMALL LETTER AKHMIMIC KHEI

    uint32_t const cps[1] = { 0x2cc9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2073), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_138)
{
    // 2CCA  ; [.2075.0020.0008] 
    // COPTIC CAPITAL LETTER DIALECT-P HORI

    uint32_t const cps[1] = { 0x2cca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2075), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_139)
{
    // 2CCB  ; [.2075.0020.0002] 
    // COPTIC SMALL LETTER DIALECT-P HORI

    uint32_t const cps[1] = { 0x2ccb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2075), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_140)
{
    // 2CCC  ; [.2076.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC HORI

    uint32_t const cps[1] = { 0x2ccc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2076), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_141)
{
    // 2CCD  ; [.2076.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC HORI

    uint32_t const cps[1] = { 0x2ccd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2076), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_142)
{
    // 2CCE  ; [.2077.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC HA

    uint32_t const cps[1] = { 0x2cce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2077), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_143)
{
    // 2CCF  ; [.2077.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC HA

    uint32_t const cps[1] = { 0x2ccf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2077), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_144)
{
    // 2CD0  ; [.2078.0020.0008] 
    // COPTIC CAPITAL LETTER L-SHAPED HA

    uint32_t const cps[1] = { 0x2cd0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2078), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_145)
{
    // 2CD1  ; [.2078.0020.0002] 
    // COPTIC SMALL LETTER L-SHAPED HA

    uint32_t const cps[1] = { 0x2cd1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2078), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_146)
{
    // 2CD2  ; [.2079.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC HEI

    uint32_t const cps[1] = { 0x2cd2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2079), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_147)
{
    // 2CD3  ; [.2079.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC HEI

    uint32_t const cps[1] = { 0x2cd3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2079), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_148)
{
    // 2CD4  ; [.207A.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC HAT

    uint32_t const cps[1] = { 0x2cd4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207a), uint8_t(0x0), uint8_t(0x8)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_072_149)
{
    // 2CD5  ; [.207A.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC HAT

    uint32_t const cps[1] = { 0x2cd5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

