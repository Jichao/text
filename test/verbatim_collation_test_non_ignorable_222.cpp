// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_222_000)
{
    // 157D 0041;	
    // (ᕽ) CANADIAN SYLLABICS HK	[368B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157D, 0x0041 };
    uint32_t const ces[9] = { 0x368B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_001)
{
    // 157D 0062;	
    // (ᕽ) CANADIAN SYLLABICS HK	[368B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157D, 0x0062 };
    uint32_t const ces[9] = { 0x368B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_002)
{
    // 166F 0021;	
    // (ᙯ) CANADIAN SYLLABICS QAI	[368C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166F, 0x0021 };
    uint32_t const ces[9] = { 0x368C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_003)
{
    // 166F 003F;	
    // (ᙯ) CANADIAN SYLLABICS QAI	[368C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166F, 0x003F };
    uint32_t const ces[9] = { 0x368C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_004)
{
    // 166F 0061;	
    // (ᙯ) CANADIAN SYLLABICS QAI	[368C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166F, 0x0061 };
    uint32_t const ces[9] = { 0x368C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_005)
{
    // 166F 0041;	
    // (ᙯ) CANADIAN SYLLABICS QAI	[368C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x166F, 0x0041 };
    uint32_t const ces[9] = { 0x368C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_006)
{
    // 166F 0062;	
    // (ᙯ) CANADIAN SYLLABICS QAI	[368C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166F, 0x0062 };
    uint32_t const ces[9] = { 0x368C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_007)
{
    // 157E 0021;	
    // (ᕾ) CANADIAN SYLLABICS QAAI	[368D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157E, 0x0021 };
    uint32_t const ces[9] = { 0x368D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_008)
{
    // 157E 003F;	
    // (ᕾ) CANADIAN SYLLABICS QAAI	[368D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157E, 0x003F };
    uint32_t const ces[9] = { 0x368D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_009)
{
    // 157E 0061;	
    // (ᕾ) CANADIAN SYLLABICS QAAI	[368D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157E, 0x0061 };
    uint32_t const ces[9] = { 0x368D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_010)
{
    // 157E 0041;	
    // (ᕾ) CANADIAN SYLLABICS QAAI	[368D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157E, 0x0041 };
    uint32_t const ces[9] = { 0x368D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_011)
{
    // 157E 0062;	
    // (ᕾ) CANADIAN SYLLABICS QAAI	[368D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157E, 0x0062 };
    uint32_t const ces[9] = { 0x368D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_012)
{
    // 157F 0021;	
    // (ᕿ) CANADIAN SYLLABICS QI	[368E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157F, 0x0021 };
    uint32_t const ces[9] = { 0x368E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_013)
{
    // 157F 003F;	
    // (ᕿ) CANADIAN SYLLABICS QI	[368E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157F, 0x003F };
    uint32_t const ces[9] = { 0x368E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_014)
{
    // 157F 0061;	
    // (ᕿ) CANADIAN SYLLABICS QI	[368E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157F, 0x0061 };
    uint32_t const ces[9] = { 0x368E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_015)
{
    // 157F 0041;	
    // (ᕿ) CANADIAN SYLLABICS QI	[368E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157F, 0x0041 };
    uint32_t const ces[9] = { 0x368E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_016)
{
    // 157F 0062;	
    // (ᕿ) CANADIAN SYLLABICS QI	[368E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157F, 0x0062 };
    uint32_t const ces[9] = { 0x368E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_017)
{
    // 1580 0021;	
    // (ᖀ) CANADIAN SYLLABICS QII	[368F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1580, 0x0021 };
    uint32_t const ces[9] = { 0x368F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_018)
{
    // 1580 003F;	
    // (ᖀ) CANADIAN SYLLABICS QII	[368F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1580, 0x003F };
    uint32_t const ces[9] = { 0x368F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_019)
{
    // 1580 0061;	
    // (ᖀ) CANADIAN SYLLABICS QII	[368F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1580, 0x0061 };
    uint32_t const ces[9] = { 0x368F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_020)
{
    // 1580 0041;	
    // (ᖀ) CANADIAN SYLLABICS QII	[368F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1580, 0x0041 };
    uint32_t const ces[9] = { 0x368F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_021)
{
    // 1580 0062;	
    // (ᖀ) CANADIAN SYLLABICS QII	[368F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1580, 0x0062 };
    uint32_t const ces[9] = { 0x368F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_022)
{
    // 1581 0021;	
    // (ᖁ) CANADIAN SYLLABICS QO	[3690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1581, 0x0021 };
    uint32_t const ces[9] = { 0x3690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_023)
{
    // 1581 003F;	
    // (ᖁ) CANADIAN SYLLABICS QO	[3690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1581, 0x003F };
    uint32_t const ces[9] = { 0x3690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_024)
{
    // 1581 0061;	
    // (ᖁ) CANADIAN SYLLABICS QO	[3690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1581, 0x0061 };
    uint32_t const ces[9] = { 0x3690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_025)
{
    // 1581 0041;	
    // (ᖁ) CANADIAN SYLLABICS QO	[3690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1581, 0x0041 };
    uint32_t const ces[9] = { 0x3690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_026)
{
    // 1581 0062;	
    // (ᖁ) CANADIAN SYLLABICS QO	[3690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1581, 0x0062 };
    uint32_t const ces[9] = { 0x3690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_027)
{
    // 1582 0021;	
    // (ᖂ) CANADIAN SYLLABICS QOO	[3691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1582, 0x0021 };
    uint32_t const ces[9] = { 0x3691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_028)
{
    // 1582 003F;	
    // (ᖂ) CANADIAN SYLLABICS QOO	[3691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1582, 0x003F };
    uint32_t const ces[9] = { 0x3691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_029)
{
    // 1582 0061;	
    // (ᖂ) CANADIAN SYLLABICS QOO	[3691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1582, 0x0061 };
    uint32_t const ces[9] = { 0x3691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_030)
{
    // 1582 0041;	
    // (ᖂ) CANADIAN SYLLABICS QOO	[3691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1582, 0x0041 };
    uint32_t const ces[9] = { 0x3691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_031)
{
    // 1582 0062;	
    // (ᖂ) CANADIAN SYLLABICS QOO	[3691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1582, 0x0062 };
    uint32_t const ces[9] = { 0x3691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_032)
{
    // 1583 0021;	
    // (ᖃ) CANADIAN SYLLABICS QA	[3692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1583, 0x0021 };
    uint32_t const ces[9] = { 0x3692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_033)
{
    // 1583 003F;	
    // (ᖃ) CANADIAN SYLLABICS QA	[3692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1583, 0x003F };
    uint32_t const ces[9] = { 0x3692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_034)
{
    // 1583 0061;	
    // (ᖃ) CANADIAN SYLLABICS QA	[3692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1583, 0x0061 };
    uint32_t const ces[9] = { 0x3692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_035)
{
    // 1583 0041;	
    // (ᖃ) CANADIAN SYLLABICS QA	[3692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1583, 0x0041 };
    uint32_t const ces[9] = { 0x3692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_036)
{
    // 1583 0062;	
    // (ᖃ) CANADIAN SYLLABICS QA	[3692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1583, 0x0062 };
    uint32_t const ces[9] = { 0x3692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_037)
{
    // 1584 0021;	
    // (ᖄ) CANADIAN SYLLABICS QAA	[3693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1584, 0x0021 };
    uint32_t const ces[9] = { 0x3693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_038)
{
    // 1584 003F;	
    // (ᖄ) CANADIAN SYLLABICS QAA	[3693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1584, 0x003F };
    uint32_t const ces[9] = { 0x3693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_039)
{
    // 1584 0061;	
    // (ᖄ) CANADIAN SYLLABICS QAA	[3693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1584, 0x0061 };
    uint32_t const ces[9] = { 0x3693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_040)
{
    // 1584 0041;	
    // (ᖄ) CANADIAN SYLLABICS QAA	[3693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1584, 0x0041 };
    uint32_t const ces[9] = { 0x3693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_041)
{
    // 1584 0062;	
    // (ᖄ) CANADIAN SYLLABICS QAA	[3693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1584, 0x0062 };
    uint32_t const ces[9] = { 0x3693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_042)
{
    // 1585 0021;	
    // (ᖅ) CANADIAN SYLLABICS Q	[3694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1585, 0x0021 };
    uint32_t const ces[9] = { 0x3694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_043)
{
    // 1585 003F;	
    // (ᖅ) CANADIAN SYLLABICS Q	[3694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1585, 0x003F };
    uint32_t const ces[9] = { 0x3694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_044)
{
    // 1585 0061;	
    // (ᖅ) CANADIAN SYLLABICS Q	[3694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1585, 0x0061 };
    uint32_t const ces[9] = { 0x3694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_045)
{
    // 1585 0041;	
    // (ᖅ) CANADIAN SYLLABICS Q	[3694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1585, 0x0041 };
    uint32_t const ces[9] = { 0x3694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_046)
{
    // 1585 0062;	
    // (ᖅ) CANADIAN SYLLABICS Q	[3694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1585, 0x0062 };
    uint32_t const ces[9] = { 0x3694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_047)
{
    // 1586 0021;	
    // (ᖆ) CANADIAN SYLLABICS TLHE	[3695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1586, 0x0021 };
    uint32_t const ces[9] = { 0x3695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_048)
{
    // 1586 003F;	
    // (ᖆ) CANADIAN SYLLABICS TLHE	[3695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1586, 0x003F };
    uint32_t const ces[9] = { 0x3695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_049)
{
    // 1586 0061;	
    // (ᖆ) CANADIAN SYLLABICS TLHE	[3695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1586, 0x0061 };
    uint32_t const ces[9] = { 0x3695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_050)
{
    // 1586 0041;	
    // (ᖆ) CANADIAN SYLLABICS TLHE	[3695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1586, 0x0041 };
    uint32_t const ces[9] = { 0x3695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_051)
{
    // 1586 0062;	
    // (ᖆ) CANADIAN SYLLABICS TLHE	[3695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1586, 0x0062 };
    uint32_t const ces[9] = { 0x3695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_052)
{
    // 1587 0021;	
    // (ᖇ) CANADIAN SYLLABICS TLHI	[3696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1587, 0x0021 };
    uint32_t const ces[9] = { 0x3696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_053)
{
    // 1587 003F;	
    // (ᖇ) CANADIAN SYLLABICS TLHI	[3696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1587, 0x003F };
    uint32_t const ces[9] = { 0x3696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_054)
{
    // 1587 0061;	
    // (ᖇ) CANADIAN SYLLABICS TLHI	[3696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1587, 0x0061 };
    uint32_t const ces[9] = { 0x3696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_055)
{
    // 1587 0041;	
    // (ᖇ) CANADIAN SYLLABICS TLHI	[3696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1587, 0x0041 };
    uint32_t const ces[9] = { 0x3696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_056)
{
    // 1587 0062;	
    // (ᖇ) CANADIAN SYLLABICS TLHI	[3696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1587, 0x0062 };
    uint32_t const ces[9] = { 0x3696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_057)
{
    // 1588 0021;	
    // (ᖈ) CANADIAN SYLLABICS TLHO	[3697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1588, 0x0021 };
    uint32_t const ces[9] = { 0x3697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_058)
{
    // 1588 003F;	
    // (ᖈ) CANADIAN SYLLABICS TLHO	[3697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1588, 0x003F };
    uint32_t const ces[9] = { 0x3697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_059)
{
    // 1588 0061;	
    // (ᖈ) CANADIAN SYLLABICS TLHO	[3697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1588, 0x0061 };
    uint32_t const ces[9] = { 0x3697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_060)
{
    // 1588 0041;	
    // (ᖈ) CANADIAN SYLLABICS TLHO	[3697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1588, 0x0041 };
    uint32_t const ces[9] = { 0x3697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_061)
{
    // 1588 0062;	
    // (ᖈ) CANADIAN SYLLABICS TLHO	[3697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1588, 0x0062 };
    uint32_t const ces[9] = { 0x3697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_062)
{
    // 1589 0021;	
    // (ᖉ) CANADIAN SYLLABICS TLHA	[3698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1589, 0x0021 };
    uint32_t const ces[9] = { 0x3698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_063)
{
    // 1589 003F;	
    // (ᖉ) CANADIAN SYLLABICS TLHA	[3698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1589, 0x003F };
    uint32_t const ces[9] = { 0x3698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_064)
{
    // 1589 0061;	
    // (ᖉ) CANADIAN SYLLABICS TLHA	[3698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1589, 0x0061 };
    uint32_t const ces[9] = { 0x3698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_065)
{
    // 1589 0041;	
    // (ᖉ) CANADIAN SYLLABICS TLHA	[3698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1589, 0x0041 };
    uint32_t const ces[9] = { 0x3698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_066)
{
    // 1589 0062;	
    // (ᖉ) CANADIAN SYLLABICS TLHA	[3698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1589, 0x0062 };
    uint32_t const ces[9] = { 0x3698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_067)
{
    // 158A 0021;	
    // (ᖊ) CANADIAN SYLLABICS WEST-CREE RE	[3699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158A, 0x0021 };
    uint32_t const ces[9] = { 0x3699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_068)
{
    // 158A 003F;	
    // (ᖊ) CANADIAN SYLLABICS WEST-CREE RE	[3699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158A, 0x003F };
    uint32_t const ces[9] = { 0x3699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_069)
{
    // 158A 0061;	
    // (ᖊ) CANADIAN SYLLABICS WEST-CREE RE	[3699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158A, 0x0061 };
    uint32_t const ces[9] = { 0x3699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_070)
{
    // 158A 0041;	
    // (ᖊ) CANADIAN SYLLABICS WEST-CREE RE	[3699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158A, 0x0041 };
    uint32_t const ces[9] = { 0x3699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_071)
{
    // 158A 0062;	
    // (ᖊ) CANADIAN SYLLABICS WEST-CREE RE	[3699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158A, 0x0062 };
    uint32_t const ces[9] = { 0x3699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_072)
{
    // 158B 0021;	
    // (ᖋ) CANADIAN SYLLABICS WEST-CREE RI	[369A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158B, 0x0021 };
    uint32_t const ces[9] = { 0x369A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_073)
{
    // 158B 003F;	
    // (ᖋ) CANADIAN SYLLABICS WEST-CREE RI	[369A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158B, 0x003F };
    uint32_t const ces[9] = { 0x369A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_074)
{
    // 158B 0061;	
    // (ᖋ) CANADIAN SYLLABICS WEST-CREE RI	[369A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158B, 0x0061 };
    uint32_t const ces[9] = { 0x369A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_075)
{
    // 158B 0041;	
    // (ᖋ) CANADIAN SYLLABICS WEST-CREE RI	[369A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158B, 0x0041 };
    uint32_t const ces[9] = { 0x369A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_076)
{
    // 158B 0062;	
    // (ᖋ) CANADIAN SYLLABICS WEST-CREE RI	[369A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158B, 0x0062 };
    uint32_t const ces[9] = { 0x369A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_077)
{
    // 158C 0021;	
    // (ᖌ) CANADIAN SYLLABICS WEST-CREE RO	[369B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158C, 0x0021 };
    uint32_t const ces[9] = { 0x369B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_078)
{
    // 158C 003F;	
    // (ᖌ) CANADIAN SYLLABICS WEST-CREE RO	[369B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158C, 0x003F };
    uint32_t const ces[9] = { 0x369B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_079)
{
    // 158C 0061;	
    // (ᖌ) CANADIAN SYLLABICS WEST-CREE RO	[369B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158C, 0x0061 };
    uint32_t const ces[9] = { 0x369B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_080)
{
    // 158C 0041;	
    // (ᖌ) CANADIAN SYLLABICS WEST-CREE RO	[369B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158C, 0x0041 };
    uint32_t const ces[9] = { 0x369B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_081)
{
    // 158C 0062;	
    // (ᖌ) CANADIAN SYLLABICS WEST-CREE RO	[369B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158C, 0x0062 };
    uint32_t const ces[9] = { 0x369B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_082)
{
    // 158D 0021;	
    // (ᖍ) CANADIAN SYLLABICS WEST-CREE RA	[369C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158D, 0x0021 };
    uint32_t const ces[9] = { 0x369C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_083)
{
    // 158D 003F;	
    // (ᖍ) CANADIAN SYLLABICS WEST-CREE RA	[369C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158D, 0x003F };
    uint32_t const ces[9] = { 0x369C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_084)
{
    // 158D 0061;	
    // (ᖍ) CANADIAN SYLLABICS WEST-CREE RA	[369C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158D, 0x0061 };
    uint32_t const ces[9] = { 0x369C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_085)
{
    // 158D 0041;	
    // (ᖍ) CANADIAN SYLLABICS WEST-CREE RA	[369C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158D, 0x0041 };
    uint32_t const ces[9] = { 0x369C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_086)
{
    // 158D 0062;	
    // (ᖍ) CANADIAN SYLLABICS WEST-CREE RA	[369C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158D, 0x0062 };
    uint32_t const ces[9] = { 0x369C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_087)
{
    // 1670 0021;	
    // (ᙰ) CANADIAN SYLLABICS NGAI	[369D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1670, 0x0021 };
    uint32_t const ces[9] = { 0x369D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_088)
{
    // 1670 003F;	
    // (ᙰ) CANADIAN SYLLABICS NGAI	[369D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1670, 0x003F };
    uint32_t const ces[9] = { 0x369D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_089)
{
    // 1670 0061;	
    // (ᙰ) CANADIAN SYLLABICS NGAI	[369D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1670, 0x0061 };
    uint32_t const ces[9] = { 0x369D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_090)
{
    // 1670 0041;	
    // (ᙰ) CANADIAN SYLLABICS NGAI	[369D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1670, 0x0041 };
    uint32_t const ces[9] = { 0x369D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_091)
{
    // 1670 0062;	
    // (ᙰ) CANADIAN SYLLABICS NGAI	[369D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1670, 0x0062 };
    uint32_t const ces[9] = { 0x369D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_092)
{
    // 158E 0021;	
    // (ᖎ) CANADIAN SYLLABICS NGAAI	[369E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158E, 0x0021 };
    uint32_t const ces[9] = { 0x369E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_093)
{
    // 158E 003F;	
    // (ᖎ) CANADIAN SYLLABICS NGAAI	[369E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158E, 0x003F };
    uint32_t const ces[9] = { 0x369E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_094)
{
    // 158E 0061;	
    // (ᖎ) CANADIAN SYLLABICS NGAAI	[369E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158E, 0x0061 };
    uint32_t const ces[9] = { 0x369E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_095)
{
    // 158E 0041;	
    // (ᖎ) CANADIAN SYLLABICS NGAAI	[369E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158E, 0x0041 };
    uint32_t const ces[9] = { 0x369E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_096)
{
    // 158E 0062;	
    // (ᖎ) CANADIAN SYLLABICS NGAAI	[369E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158E, 0x0062 };
    uint32_t const ces[9] = { 0x369E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_097)
{
    // 158F 0021;	
    // (ᖏ) CANADIAN SYLLABICS NGI	[369F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158F, 0x0021 };
    uint32_t const ces[9] = { 0x369F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_098)
{
    // 158F 003F;	
    // (ᖏ) CANADIAN SYLLABICS NGI	[369F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158F, 0x003F };
    uint32_t const ces[9] = { 0x369F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_099)
{
    // 158F 0061;	
    // (ᖏ) CANADIAN SYLLABICS NGI	[369F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158F, 0x0061 };
    uint32_t const ces[9] = { 0x369F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_100)
{
    // 158F 0041;	
    // (ᖏ) CANADIAN SYLLABICS NGI	[369F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x158F, 0x0041 };
    uint32_t const ces[9] = { 0x369F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_101)
{
    // 158F 0062;	
    // (ᖏ) CANADIAN SYLLABICS NGI	[369F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x158F, 0x0062 };
    uint32_t const ces[9] = { 0x369F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_102)
{
    // 1590 0021;	
    // (ᖐ) CANADIAN SYLLABICS NGII	[36A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1590, 0x0021 };
    uint32_t const ces[9] = { 0x36A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_103)
{
    // 1590 003F;	
    // (ᖐ) CANADIAN SYLLABICS NGII	[36A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1590, 0x003F };
    uint32_t const ces[9] = { 0x36A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_104)
{
    // 1590 0061;	
    // (ᖐ) CANADIAN SYLLABICS NGII	[36A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1590, 0x0061 };
    uint32_t const ces[9] = { 0x36A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_105)
{
    // 1590 0041;	
    // (ᖐ) CANADIAN SYLLABICS NGII	[36A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1590, 0x0041 };
    uint32_t const ces[9] = { 0x36A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_106)
{
    // 1590 0062;	
    // (ᖐ) CANADIAN SYLLABICS NGII	[36A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1590, 0x0062 };
    uint32_t const ces[9] = { 0x36A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_107)
{
    // 1591 0021;	
    // (ᖑ) CANADIAN SYLLABICS NGO	[36A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1591, 0x0021 };
    uint32_t const ces[9] = { 0x36A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_108)
{
    // 1591 003F;	
    // (ᖑ) CANADIAN SYLLABICS NGO	[36A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1591, 0x003F };
    uint32_t const ces[9] = { 0x36A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_109)
{
    // 1591 0061;	
    // (ᖑ) CANADIAN SYLLABICS NGO	[36A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1591, 0x0061 };
    uint32_t const ces[9] = { 0x36A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_110)
{
    // 1591 0041;	
    // (ᖑ) CANADIAN SYLLABICS NGO	[36A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1591, 0x0041 };
    uint32_t const ces[9] = { 0x36A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_111)
{
    // 1591 0062;	
    // (ᖑ) CANADIAN SYLLABICS NGO	[36A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1591, 0x0062 };
    uint32_t const ces[9] = { 0x36A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_112)
{
    // 1592 0021;	
    // (ᖒ) CANADIAN SYLLABICS NGOO	[36A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1592, 0x0021 };
    uint32_t const ces[9] = { 0x36A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_113)
{
    // 1592 003F;	
    // (ᖒ) CANADIAN SYLLABICS NGOO	[36A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1592, 0x003F };
    uint32_t const ces[9] = { 0x36A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_114)
{
    // 1592 0061;	
    // (ᖒ) CANADIAN SYLLABICS NGOO	[36A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1592, 0x0061 };
    uint32_t const ces[9] = { 0x36A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_115)
{
    // 1592 0041;	
    // (ᖒ) CANADIAN SYLLABICS NGOO	[36A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1592, 0x0041 };
    uint32_t const ces[9] = { 0x36A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_116)
{
    // 1592 0062;	
    // (ᖒ) CANADIAN SYLLABICS NGOO	[36A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1592, 0x0062 };
    uint32_t const ces[9] = { 0x36A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_117)
{
    // 1593 0021;	
    // (ᖓ) CANADIAN SYLLABICS NGA	[36A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1593, 0x0021 };
    uint32_t const ces[9] = { 0x36A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_118)
{
    // 1593 003F;	
    // (ᖓ) CANADIAN SYLLABICS NGA	[36A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1593, 0x003F };
    uint32_t const ces[9] = { 0x36A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_119)
{
    // 1593 0061;	
    // (ᖓ) CANADIAN SYLLABICS NGA	[36A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1593, 0x0061 };
    uint32_t const ces[9] = { 0x36A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_120)
{
    // 1593 0041;	
    // (ᖓ) CANADIAN SYLLABICS NGA	[36A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1593, 0x0041 };
    uint32_t const ces[9] = { 0x36A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_121)
{
    // 1593 0062;	
    // (ᖓ) CANADIAN SYLLABICS NGA	[36A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1593, 0x0062 };
    uint32_t const ces[9] = { 0x36A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_122)
{
    // 1594 0021;	
    // (ᖔ) CANADIAN SYLLABICS NGAA	[36A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1594, 0x0021 };
    uint32_t const ces[9] = { 0x36A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_123)
{
    // 1594 003F;	
    // (ᖔ) CANADIAN SYLLABICS NGAA	[36A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1594, 0x003F };
    uint32_t const ces[9] = { 0x36A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_124)
{
    // 1594 0061;	
    // (ᖔ) CANADIAN SYLLABICS NGAA	[36A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1594, 0x0061 };
    uint32_t const ces[9] = { 0x36A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_125)
{
    // 1594 0041;	
    // (ᖔ) CANADIAN SYLLABICS NGAA	[36A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1594, 0x0041 };
    uint32_t const ces[9] = { 0x36A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_126)
{
    // 1594 0062;	
    // (ᖔ) CANADIAN SYLLABICS NGAA	[36A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1594, 0x0062 };
    uint32_t const ces[9] = { 0x36A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_127)
{
    // 1595 0021;	
    // (ᖕ) CANADIAN SYLLABICS NG	[36A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1595, 0x0021 };
    uint32_t const ces[9] = { 0x36A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_128)
{
    // 1595 003F;	
    // (ᖕ) CANADIAN SYLLABICS NG	[36A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1595, 0x003F };
    uint32_t const ces[9] = { 0x36A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_129)
{
    // 1595 0061;	
    // (ᖕ) CANADIAN SYLLABICS NG	[36A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1595, 0x0061 };
    uint32_t const ces[9] = { 0x36A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_130)
{
    // 1595 0041;	
    // (ᖕ) CANADIAN SYLLABICS NG	[36A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1595, 0x0041 };
    uint32_t const ces[9] = { 0x36A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_131)
{
    // 1595 0062;	
    // (ᖕ) CANADIAN SYLLABICS NG	[36A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1595, 0x0062 };
    uint32_t const ces[9] = { 0x36A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_132)
{
    // 1671 0021;	
    // (ᙱ) CANADIAN SYLLABICS NNGI	[36A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1671, 0x0021 };
    uint32_t const ces[9] = { 0x36A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_133)
{
    // 1671 003F;	
    // (ᙱ) CANADIAN SYLLABICS NNGI	[36A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1671, 0x003F };
    uint32_t const ces[9] = { 0x36A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_134)
{
    // 1671 0061;	
    // (ᙱ) CANADIAN SYLLABICS NNGI	[36A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1671, 0x0061 };
    uint32_t const ces[9] = { 0x36A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_135)
{
    // 1671 0041;	
    // (ᙱ) CANADIAN SYLLABICS NNGI	[36A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1671, 0x0041 };
    uint32_t const ces[9] = { 0x36A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_136)
{
    // 1671 0062;	
    // (ᙱ) CANADIAN SYLLABICS NNGI	[36A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1671, 0x0062 };
    uint32_t const ces[9] = { 0x36A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_137)
{
    // 1672 0021;	
    // (ᙲ) CANADIAN SYLLABICS NNGII	[36A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1672, 0x0021 };
    uint32_t const ces[9] = { 0x36A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_138)
{
    // 1672 003F;	
    // (ᙲ) CANADIAN SYLLABICS NNGII	[36A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1672, 0x003F };
    uint32_t const ces[9] = { 0x36A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_139)
{
    // 1672 0061;	
    // (ᙲ) CANADIAN SYLLABICS NNGII	[36A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1672, 0x0061 };
    uint32_t const ces[9] = { 0x36A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_140)
{
    // 1672 0041;	
    // (ᙲ) CANADIAN SYLLABICS NNGII	[36A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1672, 0x0041 };
    uint32_t const ces[9] = { 0x36A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_141)
{
    // 1672 0062;	
    // (ᙲ) CANADIAN SYLLABICS NNGII	[36A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1672, 0x0062 };
    uint32_t const ces[9] = { 0x36A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_142)
{
    // 1673 0021;	
    // (ᙳ) CANADIAN SYLLABICS NNGO	[36A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1673, 0x0021 };
    uint32_t const ces[9] = { 0x36A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_143)
{
    // 1673 003F;	
    // (ᙳ) CANADIAN SYLLABICS NNGO	[36A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1673, 0x003F };
    uint32_t const ces[9] = { 0x36A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_144)
{
    // 1673 0061;	
    // (ᙳ) CANADIAN SYLLABICS NNGO	[36A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1673, 0x0061 };
    uint32_t const ces[9] = { 0x36A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_145)
{
    // 1673 0041;	
    // (ᙳ) CANADIAN SYLLABICS NNGO	[36A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1673, 0x0041 };
    uint32_t const ces[9] = { 0x36A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_146)
{
    // 1673 0062;	
    // (ᙳ) CANADIAN SYLLABICS NNGO	[36A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1673, 0x0062 };
    uint32_t const ces[9] = { 0x36A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_147)
{
    // 1674 0021;	
    // (ᙴ) CANADIAN SYLLABICS NNGOO	[36A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1674, 0x0021 };
    uint32_t const ces[9] = { 0x36A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_148)
{
    // 1674 003F;	
    // (ᙴ) CANADIAN SYLLABICS NNGOO	[36A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1674, 0x003F };
    uint32_t const ces[9] = { 0x36A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_149)
{
    // 1674 0061;	
    // (ᙴ) CANADIAN SYLLABICS NNGOO	[36A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1674, 0x0061 };
    uint32_t const ces[9] = { 0x36A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_150)
{
    // 1674 0041;	
    // (ᙴ) CANADIAN SYLLABICS NNGOO	[36A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1674, 0x0041 };
    uint32_t const ces[9] = { 0x36A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_151)
{
    // 1674 0062;	
    // (ᙴ) CANADIAN SYLLABICS NNGOO	[36A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1674, 0x0062 };
    uint32_t const ces[9] = { 0x36A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_152)
{
    // 1675 0021;	
    // (ᙵ) CANADIAN SYLLABICS NNGA	[36AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1675, 0x0021 };
    uint32_t const ces[9] = { 0x36AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_153)
{
    // 1675 003F;	
    // (ᙵ) CANADIAN SYLLABICS NNGA	[36AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1675, 0x003F };
    uint32_t const ces[9] = { 0x36AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_154)
{
    // 1675 0061;	
    // (ᙵ) CANADIAN SYLLABICS NNGA	[36AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1675, 0x0061 };
    uint32_t const ces[9] = { 0x36AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_155)
{
    // 1675 0041;	
    // (ᙵ) CANADIAN SYLLABICS NNGA	[36AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1675, 0x0041 };
    uint32_t const ces[9] = { 0x36AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_156)
{
    // 1675 0062;	
    // (ᙵ) CANADIAN SYLLABICS NNGA	[36AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1675, 0x0062 };
    uint32_t const ces[9] = { 0x36AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_157)
{
    // 1676 0021;	
    // (ᙶ) CANADIAN SYLLABICS NNGAA	[36AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1676, 0x0021 };
    uint32_t const ces[9] = { 0x36AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_158)
{
    // 1676 003F;	
    // (ᙶ) CANADIAN SYLLABICS NNGAA	[36AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1676, 0x003F };
    uint32_t const ces[9] = { 0x36AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_159)
{
    // 1676 0061;	
    // (ᙶ) CANADIAN SYLLABICS NNGAA	[36AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1676, 0x0061 };
    uint32_t const ces[9] = { 0x36AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_160)
{
    // 1676 0041;	
    // (ᙶ) CANADIAN SYLLABICS NNGAA	[36AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1676, 0x0041 };
    uint32_t const ces[9] = { 0x36AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_161)
{
    // 1676 0062;	
    // (ᙶ) CANADIAN SYLLABICS NNGAA	[36AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1676, 0x0062 };
    uint32_t const ces[9] = { 0x36AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_162)
{
    // 1596 0021;	
    // (ᖖ) CANADIAN SYLLABICS NNG	[36AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1596, 0x0021 };
    uint32_t const ces[9] = { 0x36AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_163)
{
    // 1596 003F;	
    // (ᖖ) CANADIAN SYLLABICS NNG	[36AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1596, 0x003F };
    uint32_t const ces[9] = { 0x36AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_164)
{
    // 1596 0061;	
    // (ᖖ) CANADIAN SYLLABICS NNG	[36AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1596, 0x0061 };
    uint32_t const ces[9] = { 0x36AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_165)
{
    // 1596 0041;	
    // (ᖖ) CANADIAN SYLLABICS NNG	[36AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1596, 0x0041 };
    uint32_t const ces[9] = { 0x36AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_166)
{
    // 1596 0062;	
    // (ᖖ) CANADIAN SYLLABICS NNG	[36AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1596, 0x0062 };
    uint32_t const ces[9] = { 0x36AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_167)
{
    // 1597 0021;	
    // (ᖗ) CANADIAN SYLLABICS SAYISI SHE	[36AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1597, 0x0021 };
    uint32_t const ces[9] = { 0x36AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_168)
{
    // 1597 003F;	
    // (ᖗ) CANADIAN SYLLABICS SAYISI SHE	[36AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1597, 0x003F };
    uint32_t const ces[9] = { 0x36AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_169)
{
    // 1597 0061;	
    // (ᖗ) CANADIAN SYLLABICS SAYISI SHE	[36AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1597, 0x0061 };
    uint32_t const ces[9] = { 0x36AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_170)
{
    // 1597 0041;	
    // (ᖗ) CANADIAN SYLLABICS SAYISI SHE	[36AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1597, 0x0041 };
    uint32_t const ces[9] = { 0x36AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_171)
{
    // 1597 0062;	
    // (ᖗ) CANADIAN SYLLABICS SAYISI SHE	[36AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1597, 0x0062 };
    uint32_t const ces[9] = { 0x36AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_172)
{
    // 1598 0021;	
    // (ᖘ) CANADIAN SYLLABICS SAYISI SHI	[36AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1598, 0x0021 };
    uint32_t const ces[9] = { 0x36AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_173)
{
    // 1598 003F;	
    // (ᖘ) CANADIAN SYLLABICS SAYISI SHI	[36AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1598, 0x003F };
    uint32_t const ces[9] = { 0x36AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_174)
{
    // 1598 0061;	
    // (ᖘ) CANADIAN SYLLABICS SAYISI SHI	[36AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1598, 0x0061 };
    uint32_t const ces[9] = { 0x36AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_175)
{
    // 1598 0041;	
    // (ᖘ) CANADIAN SYLLABICS SAYISI SHI	[36AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1598, 0x0041 };
    uint32_t const ces[9] = { 0x36AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_176)
{
    // 1598 0062;	
    // (ᖘ) CANADIAN SYLLABICS SAYISI SHI	[36AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1598, 0x0062 };
    uint32_t const ces[9] = { 0x36AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_177)
{
    // 1599 0021;	
    // (ᖙ) CANADIAN SYLLABICS SAYISI SHO	[36AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1599, 0x0021 };
    uint32_t const ces[9] = { 0x36AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_178)
{
    // 1599 003F;	
    // (ᖙ) CANADIAN SYLLABICS SAYISI SHO	[36AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1599, 0x003F };
    uint32_t const ces[9] = { 0x36AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_179)
{
    // 1599 0061;	
    // (ᖙ) CANADIAN SYLLABICS SAYISI SHO	[36AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1599, 0x0061 };
    uint32_t const ces[9] = { 0x36AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_180)
{
    // 1599 0041;	
    // (ᖙ) CANADIAN SYLLABICS SAYISI SHO	[36AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1599, 0x0041 };
    uint32_t const ces[9] = { 0x36AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_181)
{
    // 1599 0062;	
    // (ᖙ) CANADIAN SYLLABICS SAYISI SHO	[36AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1599, 0x0062 };
    uint32_t const ces[9] = { 0x36AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_182)
{
    // 159A 0021;	
    // (ᖚ) CANADIAN SYLLABICS SAYISI SHA	[36B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159A, 0x0021 };
    uint32_t const ces[9] = { 0x36B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_183)
{
    // 159A 003F;	
    // (ᖚ) CANADIAN SYLLABICS SAYISI SHA	[36B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159A, 0x003F };
    uint32_t const ces[9] = { 0x36B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_184)
{
    // 159A 0061;	
    // (ᖚ) CANADIAN SYLLABICS SAYISI SHA	[36B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159A, 0x0061 };
    uint32_t const ces[9] = { 0x36B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_185)
{
    // 159A 0041;	
    // (ᖚ) CANADIAN SYLLABICS SAYISI SHA	[36B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159A, 0x0041 };
    uint32_t const ces[9] = { 0x36B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_186)
{
    // 159A 0062;	
    // (ᖚ) CANADIAN SYLLABICS SAYISI SHA	[36B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159A, 0x0062 };
    uint32_t const ces[9] = { 0x36B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_187)
{
    // 159B 0021;	
    // (ᖛ) CANADIAN SYLLABICS WOODS-CREE THE	[36B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159B, 0x0021 };
    uint32_t const ces[9] = { 0x36B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_188)
{
    // 159B 003F;	
    // (ᖛ) CANADIAN SYLLABICS WOODS-CREE THE	[36B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159B, 0x003F };
    uint32_t const ces[9] = { 0x36B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_189)
{
    // 159B 0061;	
    // (ᖛ) CANADIAN SYLLABICS WOODS-CREE THE	[36B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159B, 0x0061 };
    uint32_t const ces[9] = { 0x36B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_190)
{
    // 159B 0041;	
    // (ᖛ) CANADIAN SYLLABICS WOODS-CREE THE	[36B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159B, 0x0041 };
    uint32_t const ces[9] = { 0x36B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_191)
{
    // 159B 0062;	
    // (ᖛ) CANADIAN SYLLABICS WOODS-CREE THE	[36B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159B, 0x0062 };
    uint32_t const ces[9] = { 0x36B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_192)
{
    // 159C 0021;	
    // (ᖜ) CANADIAN SYLLABICS WOODS-CREE THI	[36B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159C, 0x0021 };
    uint32_t const ces[9] = { 0x36B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_193)
{
    // 159C 003F;	
    // (ᖜ) CANADIAN SYLLABICS WOODS-CREE THI	[36B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159C, 0x003F };
    uint32_t const ces[9] = { 0x36B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_194)
{
    // 159C 0061;	
    // (ᖜ) CANADIAN SYLLABICS WOODS-CREE THI	[36B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159C, 0x0061 };
    uint32_t const ces[9] = { 0x36B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_195)
{
    // 159C 0041;	
    // (ᖜ) CANADIAN SYLLABICS WOODS-CREE THI	[36B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159C, 0x0041 };
    uint32_t const ces[9] = { 0x36B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_196)
{
    // 159C 0062;	
    // (ᖜ) CANADIAN SYLLABICS WOODS-CREE THI	[36B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159C, 0x0062 };
    uint32_t const ces[9] = { 0x36B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_197)
{
    // 159D 0021;	
    // (ᖝ) CANADIAN SYLLABICS WOODS-CREE THO	[36B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159D, 0x0021 };
    uint32_t const ces[9] = { 0x36B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_198)
{
    // 159D 003F;	
    // (ᖝ) CANADIAN SYLLABICS WOODS-CREE THO	[36B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159D, 0x003F };
    uint32_t const ces[9] = { 0x36B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_199)
{
    // 159D 0061;	
    // (ᖝ) CANADIAN SYLLABICS WOODS-CREE THO	[36B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159D, 0x0061 };
    uint32_t const ces[9] = { 0x36B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_200)
{
    // 159D 0041;	
    // (ᖝ) CANADIAN SYLLABICS WOODS-CREE THO	[36B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159D, 0x0041 };
    uint32_t const ces[9] = { 0x36B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_201)
{
    // 159D 0062;	
    // (ᖝ) CANADIAN SYLLABICS WOODS-CREE THO	[36B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159D, 0x0062 };
    uint32_t const ces[9] = { 0x36B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_202)
{
    // 159E 0021;	
    // (ᖞ) CANADIAN SYLLABICS WOODS-CREE THA	[36B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159E, 0x0021 };
    uint32_t const ces[9] = { 0x36B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_203)
{
    // 159E 003F;	
    // (ᖞ) CANADIAN SYLLABICS WOODS-CREE THA	[36B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159E, 0x003F };
    uint32_t const ces[9] = { 0x36B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_204)
{
    // 159E 0061;	
    // (ᖞ) CANADIAN SYLLABICS WOODS-CREE THA	[36B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159E, 0x0061 };
    uint32_t const ces[9] = { 0x36B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_205)
{
    // 159E 0041;	
    // (ᖞ) CANADIAN SYLLABICS WOODS-CREE THA	[36B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159E, 0x0041 };
    uint32_t const ces[9] = { 0x36B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_206)
{
    // 159E 0062;	
    // (ᖞ) CANADIAN SYLLABICS WOODS-CREE THA	[36B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159E, 0x0062 };
    uint32_t const ces[9] = { 0x36B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_207)
{
    // 159F 0021;	
    // (ᖟ) CANADIAN SYLLABICS WOODS-CREE TH	[36B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159F, 0x0021 };
    uint32_t const ces[9] = { 0x36B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_208)
{
    // 159F 003F;	
    // (ᖟ) CANADIAN SYLLABICS WOODS-CREE TH	[36B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159F, 0x003F };
    uint32_t const ces[9] = { 0x36B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_209)
{
    // 159F 0061;	
    // (ᖟ) CANADIAN SYLLABICS WOODS-CREE TH	[36B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159F, 0x0061 };
    uint32_t const ces[9] = { 0x36B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_210)
{
    // 159F 0041;	
    // (ᖟ) CANADIAN SYLLABICS WOODS-CREE TH	[36B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x159F, 0x0041 };
    uint32_t const ces[9] = { 0x36B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_211)
{
    // 159F 0062;	
    // (ᖟ) CANADIAN SYLLABICS WOODS-CREE TH	[36B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x159F, 0x0062 };
    uint32_t const ces[9] = { 0x36B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_212)
{
    // 15A0 0021;	
    // (ᖠ) CANADIAN SYLLABICS LHI	[36B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A0, 0x0021 };
    uint32_t const ces[9] = { 0x36B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_213)
{
    // 15A0 003F;	
    // (ᖠ) CANADIAN SYLLABICS LHI	[36B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A0, 0x003F };
    uint32_t const ces[9] = { 0x36B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_214)
{
    // 15A0 0061;	
    // (ᖠ) CANADIAN SYLLABICS LHI	[36B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A0, 0x0061 };
    uint32_t const ces[9] = { 0x36B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_215)
{
    // 15A0 0041;	
    // (ᖠ) CANADIAN SYLLABICS LHI	[36B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A0, 0x0041 };
    uint32_t const ces[9] = { 0x36B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_216)
{
    // 15A0 0062;	
    // (ᖠ) CANADIAN SYLLABICS LHI	[36B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A0, 0x0062 };
    uint32_t const ces[9] = { 0x36B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_217)
{
    // 15A1 0021;	
    // (ᖡ) CANADIAN SYLLABICS LHII	[36B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A1, 0x0021 };
    uint32_t const ces[9] = { 0x36B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_218)
{
    // 15A1 003F;	
    // (ᖡ) CANADIAN SYLLABICS LHII	[36B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A1, 0x003F };
    uint32_t const ces[9] = { 0x36B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_219)
{
    // 15A1 0061;	
    // (ᖡ) CANADIAN SYLLABICS LHII	[36B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A1, 0x0061 };
    uint32_t const ces[9] = { 0x36B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_220)
{
    // 15A1 0041;	
    // (ᖡ) CANADIAN SYLLABICS LHII	[36B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A1, 0x0041 };
    uint32_t const ces[9] = { 0x36B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_221)
{
    // 15A1 0062;	
    // (ᖡ) CANADIAN SYLLABICS LHII	[36B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A1, 0x0062 };
    uint32_t const ces[9] = { 0x36B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_222)
{
    // 15A2 0021;	
    // (ᖢ) CANADIAN SYLLABICS LHO	[36B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A2, 0x0021 };
    uint32_t const ces[9] = { 0x36B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_223)
{
    // 15A2 003F;	
    // (ᖢ) CANADIAN SYLLABICS LHO	[36B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A2, 0x003F };
    uint32_t const ces[9] = { 0x36B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_224)
{
    // 15A2 0061;	
    // (ᖢ) CANADIAN SYLLABICS LHO	[36B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A2, 0x0061 };
    uint32_t const ces[9] = { 0x36B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_225)
{
    // 15A2 0041;	
    // (ᖢ) CANADIAN SYLLABICS LHO	[36B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A2, 0x0041 };
    uint32_t const ces[9] = { 0x36B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_226)
{
    // 15A2 0062;	
    // (ᖢ) CANADIAN SYLLABICS LHO	[36B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A2, 0x0062 };
    uint32_t const ces[9] = { 0x36B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_227)
{
    // 15A3 0021;	
    // (ᖣ) CANADIAN SYLLABICS LHOO	[36B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A3, 0x0021 };
    uint32_t const ces[9] = { 0x36B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_228)
{
    // 15A3 003F;	
    // (ᖣ) CANADIAN SYLLABICS LHOO	[36B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A3, 0x003F };
    uint32_t const ces[9] = { 0x36B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_229)
{
    // 15A3 0061;	
    // (ᖣ) CANADIAN SYLLABICS LHOO	[36B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A3, 0x0061 };
    uint32_t const ces[9] = { 0x36B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_230)
{
    // 15A3 0041;	
    // (ᖣ) CANADIAN SYLLABICS LHOO	[36B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A3, 0x0041 };
    uint32_t const ces[9] = { 0x36B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_231)
{
    // 15A3 0062;	
    // (ᖣ) CANADIAN SYLLABICS LHOO	[36B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A3, 0x0062 };
    uint32_t const ces[9] = { 0x36B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_232)
{
    // 15A4 0021;	
    // (ᖤ) CANADIAN SYLLABICS LHA	[36BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A4, 0x0021 };
    uint32_t const ces[9] = { 0x36BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_233)
{
    // 15A4 003F;	
    // (ᖤ) CANADIAN SYLLABICS LHA	[36BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A4, 0x003F };
    uint32_t const ces[9] = { 0x36BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_234)
{
    // 15A4 0061;	
    // (ᖤ) CANADIAN SYLLABICS LHA	[36BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A4, 0x0061 };
    uint32_t const ces[9] = { 0x36BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_235)
{
    // 15A4 0041;	
    // (ᖤ) CANADIAN SYLLABICS LHA	[36BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A4, 0x0041 };
    uint32_t const ces[9] = { 0x36BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_236)
{
    // 15A4 0062;	
    // (ᖤ) CANADIAN SYLLABICS LHA	[36BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A4, 0x0062 };
    uint32_t const ces[9] = { 0x36BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_237)
{
    // 15A5 0021;	
    // (ᖥ) CANADIAN SYLLABICS LHAA	[36BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A5, 0x0021 };
    uint32_t const ces[9] = { 0x36BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_238)
{
    // 15A5 003F;	
    // (ᖥ) CANADIAN SYLLABICS LHAA	[36BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A5, 0x003F };
    uint32_t const ces[9] = { 0x36BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_239)
{
    // 15A5 0061;	
    // (ᖥ) CANADIAN SYLLABICS LHAA	[36BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A5, 0x0061 };
    uint32_t const ces[9] = { 0x36BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_240)
{
    // 15A5 0041;	
    // (ᖥ) CANADIAN SYLLABICS LHAA	[36BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A5, 0x0041 };
    uint32_t const ces[9] = { 0x36BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_241)
{
    // 15A5 0062;	
    // (ᖥ) CANADIAN SYLLABICS LHAA	[36BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A5, 0x0062 };
    uint32_t const ces[9] = { 0x36BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_242)
{
    // 15A6 0021;	
    // (ᖦ) CANADIAN SYLLABICS LH	[36BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A6, 0x0021 };
    uint32_t const ces[9] = { 0x36BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_243)
{
    // 15A6 003F;	
    // (ᖦ) CANADIAN SYLLABICS LH	[36BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A6, 0x003F };
    uint32_t const ces[9] = { 0x36BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_244)
{
    // 15A6 0061;	
    // (ᖦ) CANADIAN SYLLABICS LH	[36BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A6, 0x0061 };
    uint32_t const ces[9] = { 0x36BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_245)
{
    // 15A6 0041;	
    // (ᖦ) CANADIAN SYLLABICS LH	[36BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A6, 0x0041 };
    uint32_t const ces[9] = { 0x36BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_246)
{
    // 15A6 0062;	
    // (ᖦ) CANADIAN SYLLABICS LH	[36BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A6, 0x0062 };
    uint32_t const ces[9] = { 0x36BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_247)
{
    // 157C 0021;	
    // (ᕼ) CANADIAN SYLLABICS NUNAVUT H	[36BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157C, 0x0021 };
    uint32_t const ces[9] = { 0x36BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_248)
{
    // 157C 003F;	
    // (ᕼ) CANADIAN SYLLABICS NUNAVUT H	[36BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157C, 0x003F };
    uint32_t const ces[9] = { 0x36BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_249)
{
    // 157C 0061;	
    // (ᕼ) CANADIAN SYLLABICS NUNAVUT H	[36BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157C, 0x0061 };
    uint32_t const ces[9] = { 0x36BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_250)
{
    // 157C 0041;	
    // (ᕼ) CANADIAN SYLLABICS NUNAVUT H	[36BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x157C, 0x0041 };
    uint32_t const ces[9] = { 0x36BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_251)
{
    // 157C 0062;	
    // (ᕼ) CANADIAN SYLLABICS NUNAVUT H	[36BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x157C, 0x0062 };
    uint32_t const ces[9] = { 0x36BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_252)
{
    // 15A7 0021;	
    // (ᖧ) CANADIAN SYLLABICS TH-CREE THE	[36BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A7, 0x0021 };
    uint32_t const ces[9] = { 0x36BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_253)
{
    // 15A7 003F;	
    // (ᖧ) CANADIAN SYLLABICS TH-CREE THE	[36BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A7, 0x003F };
    uint32_t const ces[9] = { 0x36BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_254)
{
    // 15A7 0061;	
    // (ᖧ) CANADIAN SYLLABICS TH-CREE THE	[36BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A7, 0x0061 };
    uint32_t const ces[9] = { 0x36BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_255)
{
    // 15A7 0041;	
    // (ᖧ) CANADIAN SYLLABICS TH-CREE THE	[36BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A7, 0x0041 };
    uint32_t const ces[9] = { 0x36BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_256)
{
    // 15A7 0062;	
    // (ᖧ) CANADIAN SYLLABICS TH-CREE THE	[36BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A7, 0x0062 };
    uint32_t const ces[9] = { 0x36BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_257)
{
    // 15A8 0021;	
    // (ᖨ) CANADIAN SYLLABICS TH-CREE THI	[36BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A8, 0x0021 };
    uint32_t const ces[9] = { 0x36BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_258)
{
    // 15A8 003F;	
    // (ᖨ) CANADIAN SYLLABICS TH-CREE THI	[36BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A8, 0x003F };
    uint32_t const ces[9] = { 0x36BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_259)
{
    // 15A8 0061;	
    // (ᖨ) CANADIAN SYLLABICS TH-CREE THI	[36BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A8, 0x0061 };
    uint32_t const ces[9] = { 0x36BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_260)
{
    // 15A8 0041;	
    // (ᖨ) CANADIAN SYLLABICS TH-CREE THI	[36BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A8, 0x0041 };
    uint32_t const ces[9] = { 0x36BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_261)
{
    // 15A8 0062;	
    // (ᖨ) CANADIAN SYLLABICS TH-CREE THI	[36BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A8, 0x0062 };
    uint32_t const ces[9] = { 0x36BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_262)
{
    // 15A9 0021;	
    // (ᖩ) CANADIAN SYLLABICS TH-CREE THII	[36C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A9, 0x0021 };
    uint32_t const ces[9] = { 0x36C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_263)
{
    // 15A9 003F;	
    // (ᖩ) CANADIAN SYLLABICS TH-CREE THII	[36C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A9, 0x003F };
    uint32_t const ces[9] = { 0x36C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_264)
{
    // 15A9 0061;	
    // (ᖩ) CANADIAN SYLLABICS TH-CREE THII	[36C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A9, 0x0061 };
    uint32_t const ces[9] = { 0x36C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_265)
{
    // 15A9 0041;	
    // (ᖩ) CANADIAN SYLLABICS TH-CREE THII	[36C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15A9, 0x0041 };
    uint32_t const ces[9] = { 0x36C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_266)
{
    // 15A9 0062;	
    // (ᖩ) CANADIAN SYLLABICS TH-CREE THII	[36C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15A9, 0x0062 };
    uint32_t const ces[9] = { 0x36C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_267)
{
    // 15AA 0021;	
    // (ᖪ) CANADIAN SYLLABICS TH-CREE THO	[36C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AA, 0x0021 };
    uint32_t const ces[9] = { 0x36C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_268)
{
    // 15AA 003F;	
    // (ᖪ) CANADIAN SYLLABICS TH-CREE THO	[36C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AA, 0x003F };
    uint32_t const ces[9] = { 0x36C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_269)
{
    // 15AA 0061;	
    // (ᖪ) CANADIAN SYLLABICS TH-CREE THO	[36C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AA, 0x0061 };
    uint32_t const ces[9] = { 0x36C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_270)
{
    // 15AA 0041;	
    // (ᖪ) CANADIAN SYLLABICS TH-CREE THO	[36C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AA, 0x0041 };
    uint32_t const ces[9] = { 0x36C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_271)
{
    // 15AA 0062;	
    // (ᖪ) CANADIAN SYLLABICS TH-CREE THO	[36C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AA, 0x0062 };
    uint32_t const ces[9] = { 0x36C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_272)
{
    // 15AB 0021;	
    // (ᖫ) CANADIAN SYLLABICS TH-CREE THOO	[36C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AB, 0x0021 };
    uint32_t const ces[9] = { 0x36C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_273)
{
    // 15AB 003F;	
    // (ᖫ) CANADIAN SYLLABICS TH-CREE THOO	[36C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AB, 0x003F };
    uint32_t const ces[9] = { 0x36C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_274)
{
    // 15AB 0061;	
    // (ᖫ) CANADIAN SYLLABICS TH-CREE THOO	[36C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AB, 0x0061 };
    uint32_t const ces[9] = { 0x36C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_275)
{
    // 15AB 0041;	
    // (ᖫ) CANADIAN SYLLABICS TH-CREE THOO	[36C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AB, 0x0041 };
    uint32_t const ces[9] = { 0x36C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_276)
{
    // 15AB 0062;	
    // (ᖫ) CANADIAN SYLLABICS TH-CREE THOO	[36C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AB, 0x0062 };
    uint32_t const ces[9] = { 0x36C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_277)
{
    // 15AC 0021;	
    // (ᖬ) CANADIAN SYLLABICS TH-CREE THA	[36C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AC, 0x0021 };
    uint32_t const ces[9] = { 0x36C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_278)
{
    // 15AC 003F;	
    // (ᖬ) CANADIAN SYLLABICS TH-CREE THA	[36C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AC, 0x003F };
    uint32_t const ces[9] = { 0x36C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_279)
{
    // 15AC 0061;	
    // (ᖬ) CANADIAN SYLLABICS TH-CREE THA	[36C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AC, 0x0061 };
    uint32_t const ces[9] = { 0x36C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_280)
{
    // 15AC 0041;	
    // (ᖬ) CANADIAN SYLLABICS TH-CREE THA	[36C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AC, 0x0041 };
    uint32_t const ces[9] = { 0x36C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_281)
{
    // 15AC 0062;	
    // (ᖬ) CANADIAN SYLLABICS TH-CREE THA	[36C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AC, 0x0062 };
    uint32_t const ces[9] = { 0x36C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_282)
{
    // 15AD 0021;	
    // (ᖭ) CANADIAN SYLLABICS TH-CREE THAA	[36C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AD, 0x0021 };
    uint32_t const ces[9] = { 0x36C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_283)
{
    // 15AD 003F;	
    // (ᖭ) CANADIAN SYLLABICS TH-CREE THAA	[36C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AD, 0x003F };
    uint32_t const ces[9] = { 0x36C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_284)
{
    // 15AD 0061;	
    // (ᖭ) CANADIAN SYLLABICS TH-CREE THAA	[36C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AD, 0x0061 };
    uint32_t const ces[9] = { 0x36C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_285)
{
    // 15AD 0041;	
    // (ᖭ) CANADIAN SYLLABICS TH-CREE THAA	[36C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AD, 0x0041 };
    uint32_t const ces[9] = { 0x36C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_286)
{
    // 15AD 0062;	
    // (ᖭ) CANADIAN SYLLABICS TH-CREE THAA	[36C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AD, 0x0062 };
    uint32_t const ces[9] = { 0x36C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_287)
{
    // 15AE 0021;	
    // (ᖮ) CANADIAN SYLLABICS TH-CREE TH	[36C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AE, 0x0021 };
    uint32_t const ces[9] = { 0x36C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_288)
{
    // 15AE 003F;	
    // (ᖮ) CANADIAN SYLLABICS TH-CREE TH	[36C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AE, 0x003F };
    uint32_t const ces[9] = { 0x36C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_289)
{
    // 15AE 0061;	
    // (ᖮ) CANADIAN SYLLABICS TH-CREE TH	[36C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AE, 0x0061 };
    uint32_t const ces[9] = { 0x36C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_290)
{
    // 15AE 0041;	
    // (ᖮ) CANADIAN SYLLABICS TH-CREE TH	[36C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AE, 0x0041 };
    uint32_t const ces[9] = { 0x36C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_291)
{
    // 15AE 0062;	
    // (ᖮ) CANADIAN SYLLABICS TH-CREE TH	[36C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AE, 0x0062 };
    uint32_t const ces[9] = { 0x36C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_292)
{
    // 15AF 0021;	
    // (ᖯ) CANADIAN SYLLABICS AIVILIK B	[36C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AF, 0x0021 };
    uint32_t const ces[9] = { 0x36C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_293)
{
    // 15AF 003F;	
    // (ᖯ) CANADIAN SYLLABICS AIVILIK B	[36C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AF, 0x003F };
    uint32_t const ces[9] = { 0x36C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_294)
{
    // 15AF 0061;	
    // (ᖯ) CANADIAN SYLLABICS AIVILIK B	[36C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AF, 0x0061 };
    uint32_t const ces[9] = { 0x36C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_295)
{
    // 15AF 0041;	
    // (ᖯ) CANADIAN SYLLABICS AIVILIK B	[36C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15AF, 0x0041 };
    uint32_t const ces[9] = { 0x36C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_296)
{
    // 15AF 0062;	
    // (ᖯ) CANADIAN SYLLABICS AIVILIK B	[36C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15AF, 0x0062 };
    uint32_t const ces[9] = { 0x36C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_297)
{
    // 15B0 0021;	
    // (ᖰ) CANADIAN SYLLABICS BLACKFOOT E	[36C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B0, 0x0021 };
    uint32_t const ces[9] = { 0x36C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_298)
{
    // 15B0 003F;	
    // (ᖰ) CANADIAN SYLLABICS BLACKFOOT E	[36C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B0, 0x003F };
    uint32_t const ces[9] = { 0x36C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_299)
{
    // 15B0 0061;	
    // (ᖰ) CANADIAN SYLLABICS BLACKFOOT E	[36C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B0, 0x0061 };
    uint32_t const ces[9] = { 0x36C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_300)
{
    // 15B0 0041;	
    // (ᖰ) CANADIAN SYLLABICS BLACKFOOT E	[36C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B0, 0x0041 };
    uint32_t const ces[9] = { 0x36C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_301)
{
    // 15B0 0062;	
    // (ᖰ) CANADIAN SYLLABICS BLACKFOOT E	[36C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B0, 0x0062 };
    uint32_t const ces[9] = { 0x36C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_302)
{
    // 15B1 0021;	
    // (ᖱ) CANADIAN SYLLABICS BLACKFOOT I	[36C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B1, 0x0021 };
    uint32_t const ces[9] = { 0x36C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_303)
{
    // 15B1 003F;	
    // (ᖱ) CANADIAN SYLLABICS BLACKFOOT I	[36C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B1, 0x003F };
    uint32_t const ces[9] = { 0x36C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_304)
{
    // 15B1 0061;	
    // (ᖱ) CANADIAN SYLLABICS BLACKFOOT I	[36C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B1, 0x0061 };
    uint32_t const ces[9] = { 0x36C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_305)
{
    // 15B1 0041;	
    // (ᖱ) CANADIAN SYLLABICS BLACKFOOT I	[36C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B1, 0x0041 };
    uint32_t const ces[9] = { 0x36C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_306)
{
    // 15B1 0062;	
    // (ᖱ) CANADIAN SYLLABICS BLACKFOOT I	[36C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B1, 0x0062 };
    uint32_t const ces[9] = { 0x36C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_307)
{
    // 15B2 0021;	
    // (ᖲ) CANADIAN SYLLABICS BLACKFOOT O	[36C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B2, 0x0021 };
    uint32_t const ces[9] = { 0x36C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_308)
{
    // 15B2 003F;	
    // (ᖲ) CANADIAN SYLLABICS BLACKFOOT O	[36C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B2, 0x003F };
    uint32_t const ces[9] = { 0x36C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_309)
{
    // 15B2 0061;	
    // (ᖲ) CANADIAN SYLLABICS BLACKFOOT O	[36C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B2, 0x0061 };
    uint32_t const ces[9] = { 0x36C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_310)
{
    // 15B2 0041;	
    // (ᖲ) CANADIAN SYLLABICS BLACKFOOT O	[36C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B2, 0x0041 };
    uint32_t const ces[9] = { 0x36C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_311)
{
    // 15B2 0062;	
    // (ᖲ) CANADIAN SYLLABICS BLACKFOOT O	[36C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B2, 0x0062 };
    uint32_t const ces[9] = { 0x36C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_312)
{
    // 15B3 0021;	
    // (ᖳ) CANADIAN SYLLABICS BLACKFOOT A	[36CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B3, 0x0021 };
    uint32_t const ces[9] = { 0x36CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_313)
{
    // 15B3 003F;	
    // (ᖳ) CANADIAN SYLLABICS BLACKFOOT A	[36CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B3, 0x003F };
    uint32_t const ces[9] = { 0x36CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_314)
{
    // 15B3 0061;	
    // (ᖳ) CANADIAN SYLLABICS BLACKFOOT A	[36CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B3, 0x0061 };
    uint32_t const ces[9] = { 0x36CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_315)
{
    // 15B3 0041;	
    // (ᖳ) CANADIAN SYLLABICS BLACKFOOT A	[36CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B3, 0x0041 };
    uint32_t const ces[9] = { 0x36CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_316)
{
    // 15B3 0062;	
    // (ᖳ) CANADIAN SYLLABICS BLACKFOOT A	[36CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B3, 0x0062 };
    uint32_t const ces[9] = { 0x36CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_317)
{
    // 15B4 0021;	
    // (ᖴ) CANADIAN SYLLABICS BLACKFOOT WE	[36CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B4, 0x0021 };
    uint32_t const ces[9] = { 0x36CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_318)
{
    // 15B4 003F;	
    // (ᖴ) CANADIAN SYLLABICS BLACKFOOT WE	[36CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B4, 0x003F };
    uint32_t const ces[9] = { 0x36CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_319)
{
    // 15B4 0061;	
    // (ᖴ) CANADIAN SYLLABICS BLACKFOOT WE	[36CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B4, 0x0061 };
    uint32_t const ces[9] = { 0x36CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_320)
{
    // 15B4 0041;	
    // (ᖴ) CANADIAN SYLLABICS BLACKFOOT WE	[36CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B4, 0x0041 };
    uint32_t const ces[9] = { 0x36CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_321)
{
    // 15B4 0062;	
    // (ᖴ) CANADIAN SYLLABICS BLACKFOOT WE	[36CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B4, 0x0062 };
    uint32_t const ces[9] = { 0x36CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_322)
{
    // 15B5 0021;	
    // (ᖵ) CANADIAN SYLLABICS BLACKFOOT WI	[36CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B5, 0x0021 };
    uint32_t const ces[9] = { 0x36CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_323)
{
    // 15B5 003F;	
    // (ᖵ) CANADIAN SYLLABICS BLACKFOOT WI	[36CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B5, 0x003F };
    uint32_t const ces[9] = { 0x36CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_324)
{
    // 15B5 0061;	
    // (ᖵ) CANADIAN SYLLABICS BLACKFOOT WI	[36CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B5, 0x0061 };
    uint32_t const ces[9] = { 0x36CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_325)
{
    // 15B5 0041;	
    // (ᖵ) CANADIAN SYLLABICS BLACKFOOT WI	[36CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B5, 0x0041 };
    uint32_t const ces[9] = { 0x36CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_326)
{
    // 15B5 0062;	
    // (ᖵ) CANADIAN SYLLABICS BLACKFOOT WI	[36CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B5, 0x0062 };
    uint32_t const ces[9] = { 0x36CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_327)
{
    // 15B6 0021;	
    // (ᖶ) CANADIAN SYLLABICS BLACKFOOT WO	[36CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B6, 0x0021 };
    uint32_t const ces[9] = { 0x36CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_328)
{
    // 15B6 003F;	
    // (ᖶ) CANADIAN SYLLABICS BLACKFOOT WO	[36CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B6, 0x003F };
    uint32_t const ces[9] = { 0x36CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_329)
{
    // 15B6 0061;	
    // (ᖶ) CANADIAN SYLLABICS BLACKFOOT WO	[36CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B6, 0x0061 };
    uint32_t const ces[9] = { 0x36CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_330)
{
    // 15B6 0041;	
    // (ᖶ) CANADIAN SYLLABICS BLACKFOOT WO	[36CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B6, 0x0041 };
    uint32_t const ces[9] = { 0x36CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_331)
{
    // 15B6 0062;	
    // (ᖶ) CANADIAN SYLLABICS BLACKFOOT WO	[36CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B6, 0x0062 };
    uint32_t const ces[9] = { 0x36CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_332)
{
    // 15B7 0021;	
    // (ᖷ) CANADIAN SYLLABICS BLACKFOOT WA	[36CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B7, 0x0021 };
    uint32_t const ces[9] = { 0x36CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_333)
{
    // 15B7 003F;	
    // (ᖷ) CANADIAN SYLLABICS BLACKFOOT WA	[36CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B7, 0x003F };
    uint32_t const ces[9] = { 0x36CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_334)
{
    // 15B7 0061;	
    // (ᖷ) CANADIAN SYLLABICS BLACKFOOT WA	[36CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B7, 0x0061 };
    uint32_t const ces[9] = { 0x36CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_335)
{
    // 15B7 0041;	
    // (ᖷ) CANADIAN SYLLABICS BLACKFOOT WA	[36CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B7, 0x0041 };
    uint32_t const ces[9] = { 0x36CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_336)
{
    // 15B7 0062;	
    // (ᖷ) CANADIAN SYLLABICS BLACKFOOT WA	[36CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B7, 0x0062 };
    uint32_t const ces[9] = { 0x36CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_337)
{
    // 15B8 0021;	
    // (ᖸ) CANADIAN SYLLABICS BLACKFOOT NE	[36CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B8, 0x0021 };
    uint32_t const ces[9] = { 0x36CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_338)
{
    // 15B8 003F;	
    // (ᖸ) CANADIAN SYLLABICS BLACKFOOT NE	[36CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B8, 0x003F };
    uint32_t const ces[9] = { 0x36CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_339)
{
    // 15B8 0061;	
    // (ᖸ) CANADIAN SYLLABICS BLACKFOOT NE	[36CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B8, 0x0061 };
    uint32_t const ces[9] = { 0x36CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_340)
{
    // 15B8 0041;	
    // (ᖸ) CANADIAN SYLLABICS BLACKFOOT NE	[36CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B8, 0x0041 };
    uint32_t const ces[9] = { 0x36CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_341)
{
    // 15B8 0062;	
    // (ᖸ) CANADIAN SYLLABICS BLACKFOOT NE	[36CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B8, 0x0062 };
    uint32_t const ces[9] = { 0x36CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_342)
{
    // 15B9 0021;	
    // (ᖹ) CANADIAN SYLLABICS BLACKFOOT NI	[36D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B9, 0x0021 };
    uint32_t const ces[9] = { 0x36D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_343)
{
    // 15B9 003F;	
    // (ᖹ) CANADIAN SYLLABICS BLACKFOOT NI	[36D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B9, 0x003F };
    uint32_t const ces[9] = { 0x36D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_344)
{
    // 15B9 0061;	
    // (ᖹ) CANADIAN SYLLABICS BLACKFOOT NI	[36D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B9, 0x0061 };
    uint32_t const ces[9] = { 0x36D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_345)
{
    // 15B9 0041;	
    // (ᖹ) CANADIAN SYLLABICS BLACKFOOT NI	[36D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15B9, 0x0041 };
    uint32_t const ces[9] = { 0x36D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_346)
{
    // 15B9 0062;	
    // (ᖹ) CANADIAN SYLLABICS BLACKFOOT NI	[36D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15B9, 0x0062 };
    uint32_t const ces[9] = { 0x36D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_347)
{
    // 15BA 0021;	
    // (ᖺ) CANADIAN SYLLABICS BLACKFOOT NO	[36D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BA, 0x0021 };
    uint32_t const ces[9] = { 0x36D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_348)
{
    // 15BA 003F;	
    // (ᖺ) CANADIAN SYLLABICS BLACKFOOT NO	[36D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BA, 0x003F };
    uint32_t const ces[9] = { 0x36D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_349)
{
    // 15BA 0061;	
    // (ᖺ) CANADIAN SYLLABICS BLACKFOOT NO	[36D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BA, 0x0061 };
    uint32_t const ces[9] = { 0x36D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_350)
{
    // 15BA 0041;	
    // (ᖺ) CANADIAN SYLLABICS BLACKFOOT NO	[36D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BA, 0x0041 };
    uint32_t const ces[9] = { 0x36D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_351)
{
    // 15BA 0062;	
    // (ᖺ) CANADIAN SYLLABICS BLACKFOOT NO	[36D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BA, 0x0062 };
    uint32_t const ces[9] = { 0x36D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_352)
{
    // 15BB 0021;	
    // (ᖻ) CANADIAN SYLLABICS BLACKFOOT NA	[36D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BB, 0x0021 };
    uint32_t const ces[9] = { 0x36D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_353)
{
    // 15BB 003F;	
    // (ᖻ) CANADIAN SYLLABICS BLACKFOOT NA	[36D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BB, 0x003F };
    uint32_t const ces[9] = { 0x36D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_354)
{
    // 15BB 0061;	
    // (ᖻ) CANADIAN SYLLABICS BLACKFOOT NA	[36D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BB, 0x0061 };
    uint32_t const ces[9] = { 0x36D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_355)
{
    // 15BB 0041;	
    // (ᖻ) CANADIAN SYLLABICS BLACKFOOT NA	[36D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BB, 0x0041 };
    uint32_t const ces[9] = { 0x36D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_356)
{
    // 15BB 0062;	
    // (ᖻ) CANADIAN SYLLABICS BLACKFOOT NA	[36D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BB, 0x0062 };
    uint32_t const ces[9] = { 0x36D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_357)
{
    // 15BC 0021;	
    // (ᖼ) CANADIAN SYLLABICS BLACKFOOT KE	[36D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BC, 0x0021 };
    uint32_t const ces[9] = { 0x36D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_358)
{
    // 15BC 003F;	
    // (ᖼ) CANADIAN SYLLABICS BLACKFOOT KE	[36D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BC, 0x003F };
    uint32_t const ces[9] = { 0x36D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_359)
{
    // 15BC 0061;	
    // (ᖼ) CANADIAN SYLLABICS BLACKFOOT KE	[36D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BC, 0x0061 };
    uint32_t const ces[9] = { 0x36D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_360)
{
    // 15BC 0041;	
    // (ᖼ) CANADIAN SYLLABICS BLACKFOOT KE	[36D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BC, 0x0041 };
    uint32_t const ces[9] = { 0x36D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_361)
{
    // 15BC 0062;	
    // (ᖼ) CANADIAN SYLLABICS BLACKFOOT KE	[36D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BC, 0x0062 };
    uint32_t const ces[9] = { 0x36D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_362)
{
    // 15BD 0021;	
    // (ᖽ) CANADIAN SYLLABICS BLACKFOOT KI	[36D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BD, 0x0021 };
    uint32_t const ces[9] = { 0x36D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_363)
{
    // 15BD 003F;	
    // (ᖽ) CANADIAN SYLLABICS BLACKFOOT KI	[36D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BD, 0x003F };
    uint32_t const ces[9] = { 0x36D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_364)
{
    // 15BD 0061;	
    // (ᖽ) CANADIAN SYLLABICS BLACKFOOT KI	[36D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BD, 0x0061 };
    uint32_t const ces[9] = { 0x36D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_365)
{
    // 15BD 0041;	
    // (ᖽ) CANADIAN SYLLABICS BLACKFOOT KI	[36D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BD, 0x0041 };
    uint32_t const ces[9] = { 0x36D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_366)
{
    // 15BD 0062;	
    // (ᖽ) CANADIAN SYLLABICS BLACKFOOT KI	[36D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BD, 0x0062 };
    uint32_t const ces[9] = { 0x36D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_367)
{
    // 15BE 0021;	
    // (ᖾ) CANADIAN SYLLABICS BLACKFOOT KO	[36D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BE, 0x0021 };
    uint32_t const ces[9] = { 0x36D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_368)
{
    // 15BE 003F;	
    // (ᖾ) CANADIAN SYLLABICS BLACKFOOT KO	[36D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BE, 0x003F };
    uint32_t const ces[9] = { 0x36D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_369)
{
    // 15BE 0061;	
    // (ᖾ) CANADIAN SYLLABICS BLACKFOOT KO	[36D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BE, 0x0061 };
    uint32_t const ces[9] = { 0x36D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_370)
{
    // 15BE 0041;	
    // (ᖾ) CANADIAN SYLLABICS BLACKFOOT KO	[36D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BE, 0x0041 };
    uint32_t const ces[9] = { 0x36D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_371)
{
    // 15BE 0062;	
    // (ᖾ) CANADIAN SYLLABICS BLACKFOOT KO	[36D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BE, 0x0062 };
    uint32_t const ces[9] = { 0x36D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_372)
{
    // 15BF 0021;	
    // (ᖿ) CANADIAN SYLLABICS BLACKFOOT KA	[36D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BF, 0x0021 };
    uint32_t const ces[9] = { 0x36D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_373)
{
    // 15BF 003F;	
    // (ᖿ) CANADIAN SYLLABICS BLACKFOOT KA	[36D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BF, 0x003F };
    uint32_t const ces[9] = { 0x36D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_374)
{
    // 15BF 0061;	
    // (ᖿ) CANADIAN SYLLABICS BLACKFOOT KA	[36D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BF, 0x0061 };
    uint32_t const ces[9] = { 0x36D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_375)
{
    // 15BF 0041;	
    // (ᖿ) CANADIAN SYLLABICS BLACKFOOT KA	[36D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15BF, 0x0041 };
    uint32_t const ces[9] = { 0x36D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_376)
{
    // 15BF 0062;	
    // (ᖿ) CANADIAN SYLLABICS BLACKFOOT KA	[36D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15BF, 0x0062 };
    uint32_t const ces[9] = { 0x36D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_377)
{
    // 15C0 0021;	
    // (ᗀ) CANADIAN SYLLABICS SAYISI HE	[36D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C0, 0x0021 };
    uint32_t const ces[9] = { 0x36D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_378)
{
    // 15C0 003F;	
    // (ᗀ) CANADIAN SYLLABICS SAYISI HE	[36D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C0, 0x003F };
    uint32_t const ces[9] = { 0x36D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_379)
{
    // 15C0 0061;	
    // (ᗀ) CANADIAN SYLLABICS SAYISI HE	[36D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C0, 0x0061 };
    uint32_t const ces[9] = { 0x36D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_380)
{
    // 15C0 0041;	
    // (ᗀ) CANADIAN SYLLABICS SAYISI HE	[36D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C0, 0x0041 };
    uint32_t const ces[9] = { 0x36D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_381)
{
    // 15C0 0062;	
    // (ᗀ) CANADIAN SYLLABICS SAYISI HE	[36D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C0, 0x0062 };
    uint32_t const ces[9] = { 0x36D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_382)
{
    // 15C1 0021;	
    // (ᗁ) CANADIAN SYLLABICS SAYISI HI	[36D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C1, 0x0021 };
    uint32_t const ces[9] = { 0x36D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_383)
{
    // 15C1 003F;	
    // (ᗁ) CANADIAN SYLLABICS SAYISI HI	[36D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C1, 0x003F };
    uint32_t const ces[9] = { 0x36D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_384)
{
    // 15C1 0061;	
    // (ᗁ) CANADIAN SYLLABICS SAYISI HI	[36D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C1, 0x0061 };
    uint32_t const ces[9] = { 0x36D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_385)
{
    // 15C1 0041;	
    // (ᗁ) CANADIAN SYLLABICS SAYISI HI	[36D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C1, 0x0041 };
    uint32_t const ces[9] = { 0x36D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_386)
{
    // 15C1 0062;	
    // (ᗁ) CANADIAN SYLLABICS SAYISI HI	[36D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C1, 0x0062 };
    uint32_t const ces[9] = { 0x36D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_387)
{
    // 15C2 0021;	
    // (ᗂ) CANADIAN SYLLABICS SAYISI HO	[36D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C2, 0x0021 };
    uint32_t const ces[9] = { 0x36D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_388)
{
    // 15C2 003F;	
    // (ᗂ) CANADIAN SYLLABICS SAYISI HO	[36D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C2, 0x003F };
    uint32_t const ces[9] = { 0x36D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_389)
{
    // 15C2 0061;	
    // (ᗂ) CANADIAN SYLLABICS SAYISI HO	[36D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C2, 0x0061 };
    uint32_t const ces[9] = { 0x36D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_390)
{
    // 15C2 0041;	
    // (ᗂ) CANADIAN SYLLABICS SAYISI HO	[36D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C2, 0x0041 };
    uint32_t const ces[9] = { 0x36D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_391)
{
    // 15C2 0062;	
    // (ᗂ) CANADIAN SYLLABICS SAYISI HO	[36D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C2, 0x0062 };
    uint32_t const ces[9] = { 0x36D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_392)
{
    // 15C3 0021;	
    // (ᗃ) CANADIAN SYLLABICS SAYISI HA	[36DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C3, 0x0021 };
    uint32_t const ces[9] = { 0x36DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_393)
{
    // 15C3 003F;	
    // (ᗃ) CANADIAN SYLLABICS SAYISI HA	[36DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C3, 0x003F };
    uint32_t const ces[9] = { 0x36DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_394)
{
    // 15C3 0061;	
    // (ᗃ) CANADIAN SYLLABICS SAYISI HA	[36DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C3, 0x0061 };
    uint32_t const ces[9] = { 0x36DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_395)
{
    // 15C3 0041;	
    // (ᗃ) CANADIAN SYLLABICS SAYISI HA	[36DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C3, 0x0041 };
    uint32_t const ces[9] = { 0x36DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_396)
{
    // 15C3 0062;	
    // (ᗃ) CANADIAN SYLLABICS SAYISI HA	[36DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C3, 0x0062 };
    uint32_t const ces[9] = { 0x36DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_397)
{
    // 15C4 0021;	
    // (ᗄ) CANADIAN SYLLABICS CARRIER GHU	[36DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C4, 0x0021 };
    uint32_t const ces[9] = { 0x36DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_398)
{
    // 15C4 003F;	
    // (ᗄ) CANADIAN SYLLABICS CARRIER GHU	[36DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C4, 0x003F };
    uint32_t const ces[9] = { 0x36DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_399)
{
    // 15C4 0061;	
    // (ᗄ) CANADIAN SYLLABICS CARRIER GHU	[36DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C4, 0x0061 };
    uint32_t const ces[9] = { 0x36DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_400)
{
    // 15C4 0041;	
    // (ᗄ) CANADIAN SYLLABICS CARRIER GHU	[36DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C4, 0x0041 };
    uint32_t const ces[9] = { 0x36DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_401)
{
    // 15C4 0062;	
    // (ᗄ) CANADIAN SYLLABICS CARRIER GHU	[36DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C4, 0x0062 };
    uint32_t const ces[9] = { 0x36DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_402)
{
    // 15C5 0021;	
    // (ᗅ) CANADIAN SYLLABICS CARRIER GHO	[36DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C5, 0x0021 };
    uint32_t const ces[9] = { 0x36DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_403)
{
    // 15C5 003F;	
    // (ᗅ) CANADIAN SYLLABICS CARRIER GHO	[36DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C5, 0x003F };
    uint32_t const ces[9] = { 0x36DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_404)
{
    // 15C5 0061;	
    // (ᗅ) CANADIAN SYLLABICS CARRIER GHO	[36DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C5, 0x0061 };
    uint32_t const ces[9] = { 0x36DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_405)
{
    // 15C5 0041;	
    // (ᗅ) CANADIAN SYLLABICS CARRIER GHO	[36DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C5, 0x0041 };
    uint32_t const ces[9] = { 0x36DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_406)
{
    // 15C5 0062;	
    // (ᗅ) CANADIAN SYLLABICS CARRIER GHO	[36DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C5, 0x0062 };
    uint32_t const ces[9] = { 0x36DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_407)
{
    // 15C6 0021;	
    // (ᗆ) CANADIAN SYLLABICS CARRIER GHE	[36DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C6, 0x0021 };
    uint32_t const ces[9] = { 0x36DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_408)
{
    // 15C6 003F;	
    // (ᗆ) CANADIAN SYLLABICS CARRIER GHE	[36DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C6, 0x003F };
    uint32_t const ces[9] = { 0x36DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_409)
{
    // 15C6 0061;	
    // (ᗆ) CANADIAN SYLLABICS CARRIER GHE	[36DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C6, 0x0061 };
    uint32_t const ces[9] = { 0x36DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_410)
{
    // 15C6 0041;	
    // (ᗆ) CANADIAN SYLLABICS CARRIER GHE	[36DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C6, 0x0041 };
    uint32_t const ces[9] = { 0x36DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_411)
{
    // 15C6 0062;	
    // (ᗆ) CANADIAN SYLLABICS CARRIER GHE	[36DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C6, 0x0062 };
    uint32_t const ces[9] = { 0x36DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_412)
{
    // 15C7 0021;	
    // (ᗇ) CANADIAN SYLLABICS CARRIER GHEE	[36DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C7, 0x0021 };
    uint32_t const ces[9] = { 0x36DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_413)
{
    // 15C7 003F;	
    // (ᗇ) CANADIAN SYLLABICS CARRIER GHEE	[36DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C7, 0x003F };
    uint32_t const ces[9] = { 0x36DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_414)
{
    // 15C7 0061;	
    // (ᗇ) CANADIAN SYLLABICS CARRIER GHEE	[36DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C7, 0x0061 };
    uint32_t const ces[9] = { 0x36DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_415)
{
    // 15C7 0041;	
    // (ᗇ) CANADIAN SYLLABICS CARRIER GHEE	[36DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C7, 0x0041 };
    uint32_t const ces[9] = { 0x36DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_416)
{
    // 15C7 0062;	
    // (ᗇ) CANADIAN SYLLABICS CARRIER GHEE	[36DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C7, 0x0062 };
    uint32_t const ces[9] = { 0x36DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_417)
{
    // 15C8 0021;	
    // (ᗈ) CANADIAN SYLLABICS CARRIER GHI	[36DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C8, 0x0021 };
    uint32_t const ces[9] = { 0x36DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_418)
{
    // 15C8 003F;	
    // (ᗈ) CANADIAN SYLLABICS CARRIER GHI	[36DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C8, 0x003F };
    uint32_t const ces[9] = { 0x36DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_419)
{
    // 15C8 0061;	
    // (ᗈ) CANADIAN SYLLABICS CARRIER GHI	[36DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C8, 0x0061 };
    uint32_t const ces[9] = { 0x36DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_420)
{
    // 15C8 0041;	
    // (ᗈ) CANADIAN SYLLABICS CARRIER GHI	[36DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C8, 0x0041 };
    uint32_t const ces[9] = { 0x36DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_421)
{
    // 15C8 0062;	
    // (ᗈ) CANADIAN SYLLABICS CARRIER GHI	[36DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C8, 0x0062 };
    uint32_t const ces[9] = { 0x36DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_422)
{
    // 15C9 0021;	
    // (ᗉ) CANADIAN SYLLABICS CARRIER GHA	[36E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C9, 0x0021 };
    uint32_t const ces[9] = { 0x36E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_423)
{
    // 15C9 003F;	
    // (ᗉ) CANADIAN SYLLABICS CARRIER GHA	[36E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C9, 0x003F };
    uint32_t const ces[9] = { 0x36E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_424)
{
    // 15C9 0061;	
    // (ᗉ) CANADIAN SYLLABICS CARRIER GHA	[36E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C9, 0x0061 };
    uint32_t const ces[9] = { 0x36E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_425)
{
    // 15C9 0041;	
    // (ᗉ) CANADIAN SYLLABICS CARRIER GHA	[36E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15C9, 0x0041 };
    uint32_t const ces[9] = { 0x36E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_426)
{
    // 15C9 0062;	
    // (ᗉ) CANADIAN SYLLABICS CARRIER GHA	[36E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15C9, 0x0062 };
    uint32_t const ces[9] = { 0x36E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_427)
{
    // 15CA 0021;	
    // (ᗊ) CANADIAN SYLLABICS CARRIER RU	[36E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CA, 0x0021 };
    uint32_t const ces[9] = { 0x36E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_428)
{
    // 15CA 003F;	
    // (ᗊ) CANADIAN SYLLABICS CARRIER RU	[36E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CA, 0x003F };
    uint32_t const ces[9] = { 0x36E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_429)
{
    // 15CA 0061;	
    // (ᗊ) CANADIAN SYLLABICS CARRIER RU	[36E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CA, 0x0061 };
    uint32_t const ces[9] = { 0x36E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_430)
{
    // 15CA 0041;	
    // (ᗊ) CANADIAN SYLLABICS CARRIER RU	[36E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CA, 0x0041 };
    uint32_t const ces[9] = { 0x36E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_431)
{
    // 15CA 0062;	
    // (ᗊ) CANADIAN SYLLABICS CARRIER RU	[36E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CA, 0x0062 };
    uint32_t const ces[9] = { 0x36E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_432)
{
    // 15CB 0021;	
    // (ᗋ) CANADIAN SYLLABICS CARRIER RO	[36E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CB, 0x0021 };
    uint32_t const ces[9] = { 0x36E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_433)
{
    // 15CB 003F;	
    // (ᗋ) CANADIAN SYLLABICS CARRIER RO	[36E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CB, 0x003F };
    uint32_t const ces[9] = { 0x36E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_434)
{
    // 15CB 0061;	
    // (ᗋ) CANADIAN SYLLABICS CARRIER RO	[36E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CB, 0x0061 };
    uint32_t const ces[9] = { 0x36E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_435)
{
    // 15CB 0041;	
    // (ᗋ) CANADIAN SYLLABICS CARRIER RO	[36E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CB, 0x0041 };
    uint32_t const ces[9] = { 0x36E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_436)
{
    // 15CB 0062;	
    // (ᗋ) CANADIAN SYLLABICS CARRIER RO	[36E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CB, 0x0062 };
    uint32_t const ces[9] = { 0x36E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_437)
{
    // 15CC 0021;	
    // (ᗌ) CANADIAN SYLLABICS CARRIER RE	[36E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CC, 0x0021 };
    uint32_t const ces[9] = { 0x36E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_438)
{
    // 15CC 003F;	
    // (ᗌ) CANADIAN SYLLABICS CARRIER RE	[36E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CC, 0x003F };
    uint32_t const ces[9] = { 0x36E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_439)
{
    // 15CC 0061;	
    // (ᗌ) CANADIAN SYLLABICS CARRIER RE	[36E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CC, 0x0061 };
    uint32_t const ces[9] = { 0x36E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_440)
{
    // 15CC 0041;	
    // (ᗌ) CANADIAN SYLLABICS CARRIER RE	[36E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CC, 0x0041 };
    uint32_t const ces[9] = { 0x36E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_441)
{
    // 15CC 0062;	
    // (ᗌ) CANADIAN SYLLABICS CARRIER RE	[36E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CC, 0x0062 };
    uint32_t const ces[9] = { 0x36E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_442)
{
    // 15CD 0021;	
    // (ᗍ) CANADIAN SYLLABICS CARRIER REE	[36E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CD, 0x0021 };
    uint32_t const ces[9] = { 0x36E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_443)
{
    // 15CD 003F;	
    // (ᗍ) CANADIAN SYLLABICS CARRIER REE	[36E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CD, 0x003F };
    uint32_t const ces[9] = { 0x36E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_444)
{
    // 15CD 0061;	
    // (ᗍ) CANADIAN SYLLABICS CARRIER REE	[36E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CD, 0x0061 };
    uint32_t const ces[9] = { 0x36E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_445)
{
    // 15CD 0041;	
    // (ᗍ) CANADIAN SYLLABICS CARRIER REE	[36E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CD, 0x0041 };
    uint32_t const ces[9] = { 0x36E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_446)
{
    // 15CD 0062;	
    // (ᗍ) CANADIAN SYLLABICS CARRIER REE	[36E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CD, 0x0062 };
    uint32_t const ces[9] = { 0x36E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_447)
{
    // 15CE 0021;	
    // (ᗎ) CANADIAN SYLLABICS CARRIER RI	[36E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CE, 0x0021 };
    uint32_t const ces[9] = { 0x36E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_448)
{
    // 15CE 003F;	
    // (ᗎ) CANADIAN SYLLABICS CARRIER RI	[36E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CE, 0x003F };
    uint32_t const ces[9] = { 0x36E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_449)
{
    // 15CE 0061;	
    // (ᗎ) CANADIAN SYLLABICS CARRIER RI	[36E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CE, 0x0061 };
    uint32_t const ces[9] = { 0x36E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_450)
{
    // 15CE 0041;	
    // (ᗎ) CANADIAN SYLLABICS CARRIER RI	[36E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CE, 0x0041 };
    uint32_t const ces[9] = { 0x36E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_451)
{
    // 15CE 0062;	
    // (ᗎ) CANADIAN SYLLABICS CARRIER RI	[36E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CE, 0x0062 };
    uint32_t const ces[9] = { 0x36E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_452)
{
    // 15CF 0021;	
    // (ᗏ) CANADIAN SYLLABICS CARRIER RA	[36E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CF, 0x0021 };
    uint32_t const ces[9] = { 0x36E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_453)
{
    // 15CF 003F;	
    // (ᗏ) CANADIAN SYLLABICS CARRIER RA	[36E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CF, 0x003F };
    uint32_t const ces[9] = { 0x36E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_454)
{
    // 15CF 0061;	
    // (ᗏ) CANADIAN SYLLABICS CARRIER RA	[36E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CF, 0x0061 };
    uint32_t const ces[9] = { 0x36E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_455)
{
    // 15CF 0041;	
    // (ᗏ) CANADIAN SYLLABICS CARRIER RA	[36E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15CF, 0x0041 };
    uint32_t const ces[9] = { 0x36E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_456)
{
    // 15CF 0062;	
    // (ᗏ) CANADIAN SYLLABICS CARRIER RA	[36E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15CF, 0x0062 };
    uint32_t const ces[9] = { 0x36E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_457)
{
    // 15D0 0021;	
    // (ᗐ) CANADIAN SYLLABICS CARRIER WU	[36E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D0, 0x0021 };
    uint32_t const ces[9] = { 0x36E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_458)
{
    // 15D0 003F;	
    // (ᗐ) CANADIAN SYLLABICS CARRIER WU	[36E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D0, 0x003F };
    uint32_t const ces[9] = { 0x36E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_459)
{
    // 15D0 0061;	
    // (ᗐ) CANADIAN SYLLABICS CARRIER WU	[36E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D0, 0x0061 };
    uint32_t const ces[9] = { 0x36E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_460)
{
    // 15D0 0041;	
    // (ᗐ) CANADIAN SYLLABICS CARRIER WU	[36E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D0, 0x0041 };
    uint32_t const ces[9] = { 0x36E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_461)
{
    // 15D0 0062;	
    // (ᗐ) CANADIAN SYLLABICS CARRIER WU	[36E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D0, 0x0062 };
    uint32_t const ces[9] = { 0x36E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_462)
{
    // 15D1 0021;	
    // (ᗑ) CANADIAN SYLLABICS CARRIER WO	[36E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D1, 0x0021 };
    uint32_t const ces[9] = { 0x36E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_463)
{
    // 15D1 003F;	
    // (ᗑ) CANADIAN SYLLABICS CARRIER WO	[36E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D1, 0x003F };
    uint32_t const ces[9] = { 0x36E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_464)
{
    // 15D1 0061;	
    // (ᗑ) CANADIAN SYLLABICS CARRIER WO	[36E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D1, 0x0061 };
    uint32_t const ces[9] = { 0x36E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_465)
{
    // 15D1 0041;	
    // (ᗑ) CANADIAN SYLLABICS CARRIER WO	[36E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D1, 0x0041 };
    uint32_t const ces[9] = { 0x36E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_466)
{
    // 15D1 0062;	
    // (ᗑ) CANADIAN SYLLABICS CARRIER WO	[36E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D1, 0x0062 };
    uint32_t const ces[9] = { 0x36E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_467)
{
    // 15D2 0021;	
    // (ᗒ) CANADIAN SYLLABICS CARRIER WE	[36E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D2, 0x0021 };
    uint32_t const ces[9] = { 0x36E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_468)
{
    // 15D2 003F;	
    // (ᗒ) CANADIAN SYLLABICS CARRIER WE	[36E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D2, 0x003F };
    uint32_t const ces[9] = { 0x36E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_469)
{
    // 15D2 0061;	
    // (ᗒ) CANADIAN SYLLABICS CARRIER WE	[36E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D2, 0x0061 };
    uint32_t const ces[9] = { 0x36E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_470)
{
    // 15D2 0041;	
    // (ᗒ) CANADIAN SYLLABICS CARRIER WE	[36E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D2, 0x0041 };
    uint32_t const ces[9] = { 0x36E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_471)
{
    // 15D2 0062;	
    // (ᗒ) CANADIAN SYLLABICS CARRIER WE	[36E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D2, 0x0062 };
    uint32_t const ces[9] = { 0x36E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_472)
{
    // 15D3 0021;	
    // (ᗓ) CANADIAN SYLLABICS CARRIER WEE	[36EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D3, 0x0021 };
    uint32_t const ces[9] = { 0x36EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_473)
{
    // 15D3 003F;	
    // (ᗓ) CANADIAN SYLLABICS CARRIER WEE	[36EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D3, 0x003F };
    uint32_t const ces[9] = { 0x36EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_474)
{
    // 15D3 0061;	
    // (ᗓ) CANADIAN SYLLABICS CARRIER WEE	[36EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D3, 0x0061 };
    uint32_t const ces[9] = { 0x36EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_475)
{
    // 15D3 0041;	
    // (ᗓ) CANADIAN SYLLABICS CARRIER WEE	[36EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D3, 0x0041 };
    uint32_t const ces[9] = { 0x36EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_476)
{
    // 15D3 0062;	
    // (ᗓ) CANADIAN SYLLABICS CARRIER WEE	[36EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D3, 0x0062 };
    uint32_t const ces[9] = { 0x36EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_477)
{
    // 15D4 0021;	
    // (ᗔ) CANADIAN SYLLABICS CARRIER WI	[36EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D4, 0x0021 };
    uint32_t const ces[9] = { 0x36EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_478)
{
    // 15D4 003F;	
    // (ᗔ) CANADIAN SYLLABICS CARRIER WI	[36EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D4, 0x003F };
    uint32_t const ces[9] = { 0x36EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_479)
{
    // 15D4 0061;	
    // (ᗔ) CANADIAN SYLLABICS CARRIER WI	[36EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D4, 0x0061 };
    uint32_t const ces[9] = { 0x36EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_480)
{
    // 15D4 0041;	
    // (ᗔ) CANADIAN SYLLABICS CARRIER WI	[36EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D4, 0x0041 };
    uint32_t const ces[9] = { 0x36EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_481)
{
    // 15D4 0062;	
    // (ᗔ) CANADIAN SYLLABICS CARRIER WI	[36EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D4, 0x0062 };
    uint32_t const ces[9] = { 0x36EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_482)
{
    // 15D5 0021;	
    // (ᗕ) CANADIAN SYLLABICS CARRIER WA	[36EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D5, 0x0021 };
    uint32_t const ces[9] = { 0x36EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_483)
{
    // 15D5 003F;	
    // (ᗕ) CANADIAN SYLLABICS CARRIER WA	[36EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D5, 0x003F };
    uint32_t const ces[9] = { 0x36EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_484)
{
    // 15D5 0061;	
    // (ᗕ) CANADIAN SYLLABICS CARRIER WA	[36EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D5, 0x0061 };
    uint32_t const ces[9] = { 0x36EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_485)
{
    // 15D5 0041;	
    // (ᗕ) CANADIAN SYLLABICS CARRIER WA	[36EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D5, 0x0041 };
    uint32_t const ces[9] = { 0x36EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_486)
{
    // 15D5 0062;	
    // (ᗕ) CANADIAN SYLLABICS CARRIER WA	[36EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D5, 0x0062 };
    uint32_t const ces[9] = { 0x36EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_487)
{
    // 15D6 0021;	
    // (ᗖ) CANADIAN SYLLABICS CARRIER HWU	[36ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D6, 0x0021 };
    uint32_t const ces[9] = { 0x36ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_488)
{
    // 15D6 003F;	
    // (ᗖ) CANADIAN SYLLABICS CARRIER HWU	[36ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D6, 0x003F };
    uint32_t const ces[9] = { 0x36ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_489)
{
    // 15D6 0061;	
    // (ᗖ) CANADIAN SYLLABICS CARRIER HWU	[36ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D6, 0x0061 };
    uint32_t const ces[9] = { 0x36ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_490)
{
    // 15D6 0041;	
    // (ᗖ) CANADIAN SYLLABICS CARRIER HWU	[36ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D6, 0x0041 };
    uint32_t const ces[9] = { 0x36ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_491)
{
    // 15D6 0062;	
    // (ᗖ) CANADIAN SYLLABICS CARRIER HWU	[36ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D6, 0x0062 };
    uint32_t const ces[9] = { 0x36ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_492)
{
    // 15D7 0021;	
    // (ᗗ) CANADIAN SYLLABICS CARRIER HWO	[36EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D7, 0x0021 };
    uint32_t const ces[9] = { 0x36EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_493)
{
    // 15D7 003F;	
    // (ᗗ) CANADIAN SYLLABICS CARRIER HWO	[36EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D7, 0x003F };
    uint32_t const ces[9] = { 0x36EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_494)
{
    // 15D7 0061;	
    // (ᗗ) CANADIAN SYLLABICS CARRIER HWO	[36EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D7, 0x0061 };
    uint32_t const ces[9] = { 0x36EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_495)
{
    // 15D7 0041;	
    // (ᗗ) CANADIAN SYLLABICS CARRIER HWO	[36EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x15D7, 0x0041 };
    uint32_t const ces[9] = { 0x36EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_496)
{
    // 15D7 0062;	
    // (ᗗ) CANADIAN SYLLABICS CARRIER HWO	[36EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D7, 0x0062 };
    uint32_t const ces[9] = { 0x36EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_497)
{
    // 15D8 0021;	
    // (ᗘ) CANADIAN SYLLABICS CARRIER HWE	[36EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D8, 0x0021 };
    uint32_t const ces[9] = { 0x36EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_498)
{
    // 15D8 003F;	
    // (ᗘ) CANADIAN SYLLABICS CARRIER HWE	[36EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D8, 0x003F };
    uint32_t const ces[9] = { 0x36EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_222_499)
{
    // 15D8 0061;	
    // (ᗘ) CANADIAN SYLLABICS CARRIER HWE	[36EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x15D8, 0x0061 };
    uint32_t const ces[9] = { 0x36EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

