// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_024_000)
{
    // 0EC3 0E8A ; [.2E67.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER SO TAM>

    uint32_t const cps[2] = { 0xec3, 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_001)
{
    // 0EC3 0E8D ; [.2E69.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER NYO>

    uint32_t const cps[2] = { 0xec3, 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_002)
{
    // 0EC3 0E94 ; [.2E6A.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER DO>

    uint32_t const cps[2] = { 0xec3, 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_003)
{
    // 0EC3 0E95 ; [.2E6B.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER TO>

    uint32_t const cps[2] = { 0xec3, 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_004)
{
    // 0EC3 0E96 ; [.2E6C.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER THO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_005)
{
    // 0EC3 0E97 ; [.2E6D.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER THO TAM>

    uint32_t const cps[2] = { 0xec3, 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_006)
{
    // 0EC3 0E99 ; [.2E6E.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER NO>

    uint32_t const cps[2] = { 0xec3, 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_007)
{
    // 0EC3 0E9A ; [.2E6F.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER BO>

    uint32_t const cps[2] = { 0xec3, 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_008)
{
    // 0EC3 0E9B ; [.2E70.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER PO>

    uint32_t const cps[2] = { 0xec3, 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_009)
{
    // 0EC3 0E9C ; [.2E71.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER PHO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_010)
{
    // 0EC3 0E9D ; [.2E72.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER FO TAM>

    uint32_t const cps[2] = { 0xec3, 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_011)
{
    // 0EC3 0E9E ; [.2E73.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER PHO TAM>

    uint32_t const cps[2] = { 0xec3, 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_012)
{
    // 0EC3 0E9F ; [.2E74.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER FO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_013)
{
    // 0EC3 0EA1 ; [.2E75.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER MO>

    uint32_t const cps[2] = { 0xec3, 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_014)
{
    // 0EC3 0EA2 ; [.2E76.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER YO>

    uint32_t const cps[2] = { 0xec3, 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_015)
{
    // 0EC3 0EA3 ; [.2E77.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER LO LING>

    uint32_t const cps[2] = { 0xec3, 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_016)
{
    // 0EC3 0EA5 ; [.2E78.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER LO LOOT>

    uint32_t const cps[2] = { 0xec3, 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_017)
{
    // 0EC3 0EA7 ; [.2E79.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER WO>

    uint32_t const cps[2] = { 0xec3, 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_018)
{
    // 0EC3 0EAA ; [.2E66.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER SO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_019)
{
    // 0EC3 0EAB ; [.2E7A.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER HO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_020)
{
    // 0EC3 0EAD ; [.2E7B.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER O>

    uint32_t const cps[2] = { 0xec3, 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_021)
{
    // 0EC3 0EAE ; [.2E7C.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER HO TAM>

    uint32_t const cps[2] = { 0xec3, 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_022)
{
    // 0EC3 0EDC ; [.2E7A.0020.0004][.2E6E.0020.0004][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO HO NO>

    uint32_t const cps[2] = { 0xec3, 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_024_023)
{
    // 0EC3 0EDD ; [.2E7A.0020.0004][.2E75.0020.0004][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO HO MO>

    uint32_t const cps[2] = { 0xec3, 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_024_024)
{
    // 0EC3 0EDE ; [.2E60.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER KHMU GO>

    uint32_t const cps[2] = { 0xec3, 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_025)
{
    // 0EC3 0EDF ; [.2E68.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER KHMU NYO>

    uint32_t const cps[2] = { 0xec3, 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_026)
{
    // 0EC4  ; [.2E8F.0020.0002] 
    // LAO VOWEL SIGN AI

    uint32_t const cps[1] = { 0xec4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_027)
{
    // 0EC4 0E81 ; [.2E61.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER KO>

    uint32_t const cps[2] = { 0xec4, 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_028)
{
    // 0EC4 0E82 ; [.2E62.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER KHO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_029)
{
    // 0EC4 0E84 ; [.2E63.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER KHO TAM>

    uint32_t const cps[2] = { 0xec4, 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_030)
{
    // 0EC4 0E87 ; [.2E64.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER NGO>

    uint32_t const cps[2] = { 0xec4, 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_031)
{
    // 0EC4 0E88 ; [.2E65.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER CO>

    uint32_t const cps[2] = { 0xec4, 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_032)
{
    // 0EC4 0E8A ; [.2E67.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER SO TAM>

    uint32_t const cps[2] = { 0xec4, 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_033)
{
    // 0EC4 0E8D ; [.2E69.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER NYO>

    uint32_t const cps[2] = { 0xec4, 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_034)
{
    // 0EC4 0E94 ; [.2E6A.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER DO>

    uint32_t const cps[2] = { 0xec4, 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_035)
{
    // 0EC4 0E95 ; [.2E6B.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER TO>

    uint32_t const cps[2] = { 0xec4, 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_036)
{
    // 0EC4 0E96 ; [.2E6C.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER THO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_037)
{
    // 0EC4 0E97 ; [.2E6D.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER THO TAM>

    uint32_t const cps[2] = { 0xec4, 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_038)
{
    // 0EC4 0E99 ; [.2E6E.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER NO>

    uint32_t const cps[2] = { 0xec4, 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_039)
{
    // 0EC4 0E9A ; [.2E6F.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER BO>

    uint32_t const cps[2] = { 0xec4, 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_040)
{
    // 0EC4 0E9B ; [.2E70.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER PO>

    uint32_t const cps[2] = { 0xec4, 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_041)
{
    // 0EC4 0E9C ; [.2E71.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER PHO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_042)
{
    // 0EC4 0E9D ; [.2E72.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER FO TAM>

    uint32_t const cps[2] = { 0xec4, 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_043)
{
    // 0EC4 0E9E ; [.2E73.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER PHO TAM>

    uint32_t const cps[2] = { 0xec4, 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_044)
{
    // 0EC4 0E9F ; [.2E74.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER FO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_045)
{
    // 0EC4 0EA1 ; [.2E75.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER MO>

    uint32_t const cps[2] = { 0xec4, 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_046)
{
    // 0EC4 0EA2 ; [.2E76.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER YO>

    uint32_t const cps[2] = { 0xec4, 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_047)
{
    // 0EC4 0EA3 ; [.2E77.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER LO LING>

    uint32_t const cps[2] = { 0xec4, 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_048)
{
    // 0EC4 0EA5 ; [.2E78.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER LO LOOT>

    uint32_t const cps[2] = { 0xec4, 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_049)
{
    // 0EC4 0EA7 ; [.2E79.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER WO>

    uint32_t const cps[2] = { 0xec4, 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_050)
{
    // 0EC4 0EAA ; [.2E66.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER SO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_051)
{
    // 0EC4 0EAB ; [.2E7A.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER HO SUNG>

    uint32_t const cps[2] = { 0xec4, 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_052)
{
    // 0EC4 0EAD ; [.2E7B.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER O>

    uint32_t const cps[2] = { 0xec4, 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_053)
{
    // 0EC4 0EAE ; [.2E7C.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER HO TAM>

    uint32_t const cps[2] = { 0xec4, 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_054)
{
    // 0EC4 0EDC ; [.2E7A.0020.0004][.2E6E.0020.0004][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO HO NO>

    uint32_t const cps[2] = { 0xec4, 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_024_055)
{
    // 0EC4 0EDD ; [.2E7A.0020.0004][.2E75.0020.0004][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO HO MO>

    uint32_t const cps[2] = { 0xec4, 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_024_056)
{
    // 0EC4 0EDE ; [.2E60.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER KHMU GO>

    uint32_t const cps[2] = { 0xec4, 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_057)
{
    // 0EC4 0EDF ; [.2E68.0020.0002][.2E8F.0020.0002] 
    // <LAO VOWEL SIGN AI, LAO LETTER KHMU NYO>

    uint32_t const cps[2] = { 0xec4, 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_058)
{
    // 0EC6  ; [.1C60.0020.0002] 
    // LAO KO LA

    uint32_t const cps[1] = { 0xec6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_059)
{
    // 0EC8  ; [.0000.00DA.0002] 
    // LAO TONE MAI EK

    uint32_t const cps[1] = { 0xec8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xba), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_060)
{
    // 0EC9  ; [.0000.00DB.0002] 
    // LAO TONE MAI THO

    uint32_t const cps[1] = { 0xec9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xbb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_061)
{
    // 0ECA  ; [.0000.00DC.0002] 
    // LAO TONE MAI TI

    uint32_t const cps[1] = { 0xeca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xbc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_062)
{
    // 0ECB  ; [.0000.00DD.0002] 
    // LAO TONE MAI CATAWA

    uint32_t const cps[1] = { 0xecb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xbd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_063)
{
    // 0ECC  ; [.0000.00DE.0002] 
    // LAO CANCELLATION MARK

    uint32_t const cps[1] = { 0xecc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xbe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_064)
{
    // 0ECD  ; [.0000.00DF.0002] 
    // LAO NIGGAHITA

    uint32_t const cps[1] = { 0xecd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xbf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_065)
{
    // 0ECD 0EB2 ; [.2E81.0020.0002] 
    // LAO VOWEL SIGN AM

    uint32_t const cps[2] = { 0xecd, 0xeb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_066)
{
    // 0ED0  ; [.1CA3.0020.0002] 
    // LAO DIGIT ZERO

    uint32_t const cps[1] = { 0xed0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_067)
{
    // 0ED1  ; [.1CA4.0020.0002] 
    // LAO DIGIT ONE

    uint32_t const cps[1] = { 0xed1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_068)
{
    // 0ED2  ; [.1CA5.0020.0002] 
    // LAO DIGIT TWO

    uint32_t const cps[1] = { 0xed2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_069)
{
    // 0ED3  ; [.1CA6.0020.0002] 
    // LAO DIGIT THREE

    uint32_t const cps[1] = { 0xed3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_070)
{
    // 0ED4  ; [.1CA7.0020.0002] 
    // LAO DIGIT FOUR

    uint32_t const cps[1] = { 0xed4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_071)
{
    // 0ED5  ; [.1CA8.0020.0002] 
    // LAO DIGIT FIVE

    uint32_t const cps[1] = { 0xed5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_072)
{
    // 0ED6  ; [.1CA9.0020.0002] 
    // LAO DIGIT SIX

    uint32_t const cps[1] = { 0xed6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_073)
{
    // 0ED7  ; [.1CAA.0020.0002] 
    // LAO DIGIT SEVEN

    uint32_t const cps[1] = { 0xed7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_074)
{
    // 0ED8  ; [.1CAB.0020.0002] 
    // LAO DIGIT EIGHT

    uint32_t const cps[1] = { 0xed8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_075)
{
    // 0ED9  ; [.1CAC.0020.0002] 
    // LAO DIGIT NINE

    uint32_t const cps[1] = { 0xed9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_076)
{
    // 0EDC  ; [.2E7A.0020.0004][.2E6E.0020.0004] 
    // LAO HO NO

    uint32_t const cps[1] = { 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_077)
{
    // 0EDD  ; [.2E7A.0020.0004][.2E75.0020.0004] 
    // LAO HO MO

    uint32_t const cps[1] = { 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_078)
{
    // 0EDE  ; [.2E60.0020.0002] 
    // LAO LETTER KHMU GO

    uint32_t const cps[1] = { 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_079)
{
    // 0EDF  ; [.2E68.0020.0002] 
    // LAO LETTER KHMU NYO

    uint32_t const cps[1] = { 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_080)
{
    // 0F00  ; [.2F19.0020.0004][.2F30.0020.0004][.0000.00C4.0004] 
    // TIBETAN SYLLABLE OM

    uint32_t const cps[1] = { 0xf00 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2f19), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2f30), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_024_081)
{
    // 0F01  ; [*053C.0020.0002] 
    // TIBETAN MARK GTER YIG MGO TRUNCATED A

    uint32_t const cps[1] = { 0xf01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_082)
{
    // 0F02  ; [*053D.0020.0002] 
    // TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA

    uint32_t const cps[1] = { 0xf02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_083)
{
    // 0F03  ; [*053E.0020.0002] 
    // TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA

    uint32_t const cps[1] = { 0xf03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_084)
{
    // 0F04  ; [*03F9.0020.0002] 
    // TIBETAN MARK INITIAL YIG MGO MDUN MA

    uint32_t const cps[1] = { 0xf04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_085)
{
    // 0F05  ; [*03FA.0020.0002] 
    // TIBETAN MARK CLOSING YIG MGO SGAB MA

    uint32_t const cps[1] = { 0xf05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_086)
{
    // 0F06  ; [*03FB.0020.0002] 
    // TIBETAN MARK CARET YIG MGO PHUR SHAD MA

    uint32_t const cps[1] = { 0xf06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_087)
{
    // 0F07  ; [*03FC.0020.0002] 
    // TIBETAN MARK YIG MGO TSHEG SHAD MA

    uint32_t const cps[1] = { 0xf07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_088)
{
    // 0F08  ; [*03FD.0020.0002] 
    // TIBETAN MARK SBRUL SHAD

    uint32_t const cps[1] = { 0xf08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_089)
{
    // 0F09  ; [*03FE.0020.0002] 
    // TIBETAN MARK BSKUR YIG MGO

    uint32_t const cps[1] = { 0xf09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_090)
{
    // 0F0A  ; [*03FF.0020.0002] 
    // TIBETAN MARK BKA- SHOG YIG MGO

    uint32_t const cps[1] = { 0xf0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_091)
{
    // 0F0B  ; [*0402.0020.0002] 
    // TIBETAN MARK INTERSYLLABIC TSHEG

    uint32_t const cps[1] = { 0xf0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x402), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_092)
{
    // 0F0C  ; [*0402.0020.001B] 
    // TIBETAN MARK DELIMITER TSHEG BSTAR

    uint32_t const cps[1] = { 0xf0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x402), uint8_t(0x0), uint8_t(0x1b)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_093)
{
    // 0F0D  ; [*0403.0020.0002] 
    // TIBETAN MARK SHAD

    uint32_t const cps[1] = { 0xf0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x403), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_094)
{
    // 0F0E  ; [*0404.0020.0002] 
    // TIBETAN MARK NYIS SHAD

    uint32_t const cps[1] = { 0xf0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x404), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_095)
{
    // 0F0F  ; [*0405.0020.0002] 
    // TIBETAN MARK TSHEG SHAD

    uint32_t const cps[1] = { 0xf0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x405), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_096)
{
    // 0F10  ; [*0406.0020.0002] 
    // TIBETAN MARK NYIS TSHEG SHAD

    uint32_t const cps[1] = { 0xf10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x406), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_097)
{
    // 0F11  ; [*0407.0020.0002] 
    // TIBETAN MARK RIN CHEN SPUNGS SHAD

    uint32_t const cps[1] = { 0xf11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x407), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_098)
{
    // 0F12  ; [*0408.0020.0002] 
    // TIBETAN MARK RGYA GRAM SHAD

    uint32_t const cps[1] = { 0xf12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x408), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_099)
{
    // 0F13  ; [*053F.0020.0002] 
    // TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN

    uint32_t const cps[1] = { 0xf13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_100)
{
    // 0F14  ; [*0259.0020.0002] 
    // TIBETAN MARK GTER TSHEG

    uint32_t const cps[1] = { 0xf14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x259), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_101)
{
    // 0F15  ; [*0540.0020.0002] 
    // TIBETAN LOGOTYPE SIGN CHAD RTAGS

    uint32_t const cps[1] = { 0xf15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x540), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_102)
{
    // 0F16  ; [*0541.0020.0002] 
    // TIBETAN LOGOTYPE SIGN LHAG RTAGS

    uint32_t const cps[1] = { 0xf16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x541), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_103)
{
    // 0F17  ; [*0542.0020.0002] 
    // TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS

    uint32_t const cps[1] = { 0xf17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x542), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_104)
{
    // 0F18  ; [.0000.0000.0000] 
    // TIBETAN ASTROLOGICAL SIGN -KHYUD PA

    uint32_t const cps[1] = { 0xf18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_105)
{
    // 0F19  ; [.0000.0000.0000] 
    // TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS

    uint32_t const cps[1] = { 0xf19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_106)
{
    // 0F1A  ; [*0543.0020.0002] 
    // TIBETAN SIGN RDEL DKAR GCIG

    uint32_t const cps[1] = { 0xf1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x543), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_107)
{
    // 0F1B  ; [*0544.0020.0002] 
    // TIBETAN SIGN RDEL DKAR GNYIS

    uint32_t const cps[1] = { 0xf1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x544), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_108)
{
    // 0F1C  ; [*0545.0020.0002] 
    // TIBETAN SIGN RDEL DKAR GSUM

    uint32_t const cps[1] = { 0xf1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x545), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_109)
{
    // 0F1D  ; [*0546.0020.0002] 
    // TIBETAN SIGN RDEL NAG GCIG

    uint32_t const cps[1] = { 0xf1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x546), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_110)
{
    // 0F1E  ; [*0547.0020.0002] 
    // TIBETAN SIGN RDEL NAG GNYIS

    uint32_t const cps[1] = { 0xf1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x547), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_111)
{
    // 0F1F  ; [*0548.0020.0002] 
    // TIBETAN SIGN RDEL DKAR RDEL NAG

    uint32_t const cps[1] = { 0xf1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x548), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_112)
{
    // 0F20  ; [.1CA3.0020.0002] 
    // TIBETAN DIGIT ZERO

    uint32_t const cps[1] = { 0xf20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_113)
{
    // 0F21  ; [.1CA4.0020.0002] 
    // TIBETAN DIGIT ONE

    uint32_t const cps[1] = { 0xf21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_114)
{
    // 0F22  ; [.1CA5.0020.0002] 
    // TIBETAN DIGIT TWO

    uint32_t const cps[1] = { 0xf22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_115)
{
    // 0F23  ; [.1CA6.0020.0002] 
    // TIBETAN DIGIT THREE

    uint32_t const cps[1] = { 0xf23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_116)
{
    // 0F24  ; [.1CA7.0020.0002] 
    // TIBETAN DIGIT FOUR

    uint32_t const cps[1] = { 0xf24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_117)
{
    // 0F25  ; [.1CA8.0020.0002] 
    // TIBETAN DIGIT FIVE

    uint32_t const cps[1] = { 0xf25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_118)
{
    // 0F26  ; [.1CA9.0020.0002] 
    // TIBETAN DIGIT SIX

    uint32_t const cps[1] = { 0xf26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_119)
{
    // 0F27  ; [.1CAA.0020.0002] 
    // TIBETAN DIGIT SEVEN

    uint32_t const cps[1] = { 0xf27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_120)
{
    // 0F28  ; [.1CAB.0020.0002] 
    // TIBETAN DIGIT EIGHT

    uint32_t const cps[1] = { 0xf28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_121)
{
    // 0F29  ; [.1CAC.0020.0002] 
    // TIBETAN DIGIT NINE

    uint32_t const cps[1] = { 0xf29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_122)
{
    // 0F2A  ; [.1CA4.0020.0004] 
    // TIBETAN DIGIT HALF ONE

    uint32_t const cps[1] = { 0xf2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_123)
{
    // 0F2B  ; [.1CA5.0020.0004] 
    // TIBETAN DIGIT HALF TWO

    uint32_t const cps[1] = { 0xf2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_124)
{
    // 0F2C  ; [.1CA6.0020.0004] 
    // TIBETAN DIGIT HALF THREE

    uint32_t const cps[1] = { 0xf2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_125)
{
    // 0F2D  ; [.1CA7.0020.0004] 
    // TIBETAN DIGIT HALF FOUR

    uint32_t const cps[1] = { 0xf2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_126)
{
    // 0F2E  ; [.1CA8.0020.0004] 
    // TIBETAN DIGIT HALF FIVE

    uint32_t const cps[1] = { 0xf2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_127)
{
    // 0F2F  ; [.1CA9.0020.0004] 
    // TIBETAN DIGIT HALF SIX

    uint32_t const cps[1] = { 0xf2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_128)
{
    // 0F30  ; [.1CAA.0020.0004] 
    // TIBETAN DIGIT HALF SEVEN

    uint32_t const cps[1] = { 0xf30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_129)
{
    // 0F31  ; [.1CAB.0020.0004] 
    // TIBETAN DIGIT HALF EIGHT

    uint32_t const cps[1] = { 0xf31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_130)
{
    // 0F32  ; [.1CAC.0020.0004] 
    // TIBETAN DIGIT HALF NINE

    uint32_t const cps[1] = { 0xf32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_131)
{
    // 0F33  ; [.1CA3.0020.0004] 
    // TIBETAN DIGIT HALF ZERO

    uint32_t const cps[1] = { 0xf33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_132)
{
    // 0F34  ; [*0549.0020.0002] 
    // TIBETAN MARK BSDUS RTAGS

    uint32_t const cps[1] = { 0xf34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x549), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_133)
{
    // 0F35  ; [.0000.0000.0000] 
    // TIBETAN MARK NGAS BZUNG NYI ZLA

    uint32_t const cps[1] = { 0xf35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_134)
{
    // 0F36  ; [*054A.0020.0002] 
    // TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN

    uint32_t const cps[1] = { 0xf36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_135)
{
    // 0F37  ; [.0000.0000.0000] 
    // TIBETAN MARK NGAS BZUNG SGOR RTAGS

    uint32_t const cps[1] = { 0xf37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_136)
{
    // 0F38  ; [*054B.0020.0002] 
    // TIBETAN MARK CHE MGO

    uint32_t const cps[1] = { 0xf38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_137)
{
    // 0F39  ; [.0000.00E2.0002] 
    // TIBETAN MARK TSA -PHRU

    uint32_t const cps[1] = { 0xf39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xc2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_138)
{
    // 0F3A  ; [*031E.0020.0002] 
    // TIBETAN MARK GUG RTAGS GYON

    uint32_t const cps[1] = { 0xf3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_139)
{
    // 0F3B  ; [*031F.0020.0002] 
    // TIBETAN MARK GUG RTAGS GYAS

    uint32_t const cps[1] = { 0xf3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_140)
{
    // 0F3C  ; [*0320.0020.0002] 
    // TIBETAN MARK ANG KHANG GYON

    uint32_t const cps[1] = { 0xf3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x320), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_141)
{
    // 0F3D  ; [*0321.0020.0002] 
    // TIBETAN MARK ANG KHANG GYAS

    uint32_t const cps[1] = { 0xf3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x321), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_142)
{
    // 0F3E  ; [.0000.0000.0000] 
    // TIBETAN SIGN YAR TSHES

    uint32_t const cps[1] = { 0xf3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_143)
{
    // 0F3F  ; [.0000.0000.0000] 
    // TIBETAN SIGN MAR TSHES

    uint32_t const cps[1] = { 0xf3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_144)
{
    // 0F40  ; [.2ED3.0020.0002] 
    // TIBETAN LETTER KA

    uint32_t const cps[1] = { 0xf40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_145)
{
    // 0F41  ; [.2ED6.0020.0002] 
    // TIBETAN LETTER KHA

    uint32_t const cps[1] = { 0xf41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_146)
{
    // 0F42  ; [.2ED8.0020.0002] 
    // TIBETAN LETTER GA

    uint32_t const cps[1] = { 0xf42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_147)
{
    // 0F43  ; [.2ED8.0020.0002][.2F18.0020.0002] 
    // TIBETAN LETTER GHA

    uint32_t const cps[1] = { 0xf43 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ed8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_024_148)
{
    // 0F44  ; [.2EDA.0020.0002] 
    // TIBETAN LETTER NGA

    uint32_t const cps[1] = { 0xf44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_024_149)
{
    // 0F45  ; [.2EDC.0020.0002] 
    // TIBETAN LETTER CA

    uint32_t const cps[1] = { 0xf45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2edc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

