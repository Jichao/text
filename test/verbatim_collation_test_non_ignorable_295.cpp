// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_295_000)
{
    // 124A9 003F;	
    // (𒒩) CUNEIFORM SIGN E2 TIMES KUR	[4FAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A9, 0x003F };
    uint32_t const ces[9] = { 0x4FAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_001)
{
    // 124A9 0061;	
    // (𒒩) CUNEIFORM SIGN E2 TIMES KUR	[4FAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A9, 0x0061 };
    uint32_t const ces[9] = { 0x4FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_002)
{
    // 124A9 0041;	
    // (𒒩) CUNEIFORM SIGN E2 TIMES KUR	[4FAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124A9, 0x0041 };
    uint32_t const ces[9] = { 0x4FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_003)
{
    // 124A9 0062;	
    // (𒒩) CUNEIFORM SIGN E2 TIMES KUR	[4FAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A9, 0x0062 };
    uint32_t const ces[9] = { 0x4FAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_004)
{
    // 124AA 0021;	
    // (𒒪) CUNEIFORM SIGN E2 TIMES PAP	[4FB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AA, 0x0021 };
    uint32_t const ces[9] = { 0x4FB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_005)
{
    // 124AA 003F;	
    // (𒒪) CUNEIFORM SIGN E2 TIMES PAP	[4FB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AA, 0x003F };
    uint32_t const ces[9] = { 0x4FB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_006)
{
    // 124AA 0061;	
    // (𒒪) CUNEIFORM SIGN E2 TIMES PAP	[4FB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AA, 0x0061 };
    uint32_t const ces[9] = { 0x4FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_007)
{
    // 124AA 0041;	
    // (𒒪) CUNEIFORM SIGN E2 TIMES PAP	[4FB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AA, 0x0041 };
    uint32_t const ces[9] = { 0x4FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_008)
{
    // 124AA 0062;	
    // (𒒪) CUNEIFORM SIGN E2 TIMES PAP	[4FB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AA, 0x0062 };
    uint32_t const ces[9] = { 0x4FB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_009)
{
    // 124AB 0021;	
    // (𒒫) CUNEIFORM SIGN ERIN2 X	[4FB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AB, 0x0021 };
    uint32_t const ces[9] = { 0x4FB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_010)
{
    // 124AB 003F;	
    // (𒒫) CUNEIFORM SIGN ERIN2 X	[4FB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AB, 0x003F };
    uint32_t const ces[9] = { 0x4FB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_011)
{
    // 124AB 0061;	
    // (𒒫) CUNEIFORM SIGN ERIN2 X	[4FB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AB, 0x0061 };
    uint32_t const ces[9] = { 0x4FB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_012)
{
    // 124AB 0041;	
    // (𒒫) CUNEIFORM SIGN ERIN2 X	[4FB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AB, 0x0041 };
    uint32_t const ces[9] = { 0x4FB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_013)
{
    // 124AB 0062;	
    // (𒒫) CUNEIFORM SIGN ERIN2 X	[4FB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AB, 0x0062 };
    uint32_t const ces[9] = { 0x4FB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_014)
{
    // 124AC 0021;	
    // (𒒬) CUNEIFORM SIGN ESH2 CROSSING ESH2	[4FB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AC, 0x0021 };
    uint32_t const ces[9] = { 0x4FB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_015)
{
    // 124AC 003F;	
    // (𒒬) CUNEIFORM SIGN ESH2 CROSSING ESH2	[4FB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AC, 0x003F };
    uint32_t const ces[9] = { 0x4FB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_016)
{
    // 124AC 0061;	
    // (𒒬) CUNEIFORM SIGN ESH2 CROSSING ESH2	[4FB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AC, 0x0061 };
    uint32_t const ces[9] = { 0x4FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_017)
{
    // 124AC 0041;	
    // (𒒬) CUNEIFORM SIGN ESH2 CROSSING ESH2	[4FB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AC, 0x0041 };
    uint32_t const ces[9] = { 0x4FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_018)
{
    // 124AC 0062;	
    // (𒒬) CUNEIFORM SIGN ESH2 CROSSING ESH2	[4FB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AC, 0x0062 };
    uint32_t const ces[9] = { 0x4FB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_019)
{
    // 124AD 0021;	
    // (𒒭) CUNEIFORM SIGN EZEN SHESHIG TIMES ASH	[4FB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AD, 0x0021 };
    uint32_t const ces[9] = { 0x4FB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_020)
{
    // 124AD 003F;	
    // (𒒭) CUNEIFORM SIGN EZEN SHESHIG TIMES ASH	[4FB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AD, 0x003F };
    uint32_t const ces[9] = { 0x4FB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_021)
{
    // 124AD 0061;	
    // (𒒭) CUNEIFORM SIGN EZEN SHESHIG TIMES ASH	[4FB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AD, 0x0061 };
    uint32_t const ces[9] = { 0x4FB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_022)
{
    // 124AD 0041;	
    // (𒒭) CUNEIFORM SIGN EZEN SHESHIG TIMES ASH	[4FB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AD, 0x0041 };
    uint32_t const ces[9] = { 0x4FB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_023)
{
    // 124AD 0062;	
    // (𒒭) CUNEIFORM SIGN EZEN SHESHIG TIMES ASH	[4FB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AD, 0x0062 };
    uint32_t const ces[9] = { 0x4FB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_024)
{
    // 124AE 0021;	
    // (𒒮) CUNEIFORM SIGN EZEN SHESHIG TIMES HI	[4FB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AE, 0x0021 };
    uint32_t const ces[9] = { 0x4FB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_025)
{
    // 124AE 003F;	
    // (𒒮) CUNEIFORM SIGN EZEN SHESHIG TIMES HI	[4FB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AE, 0x003F };
    uint32_t const ces[9] = { 0x4FB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_026)
{
    // 124AE 0061;	
    // (𒒮) CUNEIFORM SIGN EZEN SHESHIG TIMES HI	[4FB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AE, 0x0061 };
    uint32_t const ces[9] = { 0x4FB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_027)
{
    // 124AE 0041;	
    // (𒒮) CUNEIFORM SIGN EZEN SHESHIG TIMES HI	[4FB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AE, 0x0041 };
    uint32_t const ces[9] = { 0x4FB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_028)
{
    // 124AE 0062;	
    // (𒒮) CUNEIFORM SIGN EZEN SHESHIG TIMES HI	[4FB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AE, 0x0062 };
    uint32_t const ces[9] = { 0x4FB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_029)
{
    // 124AF 0021;	
    // (𒒯) CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU	[4FB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AF, 0x0021 };
    uint32_t const ces[9] = { 0x4FB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_030)
{
    // 124AF 003F;	
    // (𒒯) CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU	[4FB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AF, 0x003F };
    uint32_t const ces[9] = { 0x4FB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_031)
{
    // 124AF 0061;	
    // (𒒯) CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU	[4FB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AF, 0x0061 };
    uint32_t const ces[9] = { 0x4FB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_032)
{
    // 124AF 0041;	
    // (𒒯) CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU	[4FB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124AF, 0x0041 };
    uint32_t const ces[9] = { 0x4FB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_033)
{
    // 124AF 0062;	
    // (𒒯) CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU	[4FB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124AF, 0x0062 };
    uint32_t const ces[9] = { 0x4FB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_034)
{
    // 124B0 0021;	
    // (𒒰) CUNEIFORM SIGN EZEN SHESHIG TIMES LA	[4FB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B0, 0x0021 };
    uint32_t const ces[9] = { 0x4FB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_035)
{
    // 124B0 003F;	
    // (𒒰) CUNEIFORM SIGN EZEN SHESHIG TIMES LA	[4FB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B0, 0x003F };
    uint32_t const ces[9] = { 0x4FB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_036)
{
    // 124B0 0061;	
    // (𒒰) CUNEIFORM SIGN EZEN SHESHIG TIMES LA	[4FB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B0, 0x0061 };
    uint32_t const ces[9] = { 0x4FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_037)
{
    // 124B0 0041;	
    // (𒒰) CUNEIFORM SIGN EZEN SHESHIG TIMES LA	[4FB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B0, 0x0041 };
    uint32_t const ces[9] = { 0x4FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_038)
{
    // 124B0 0062;	
    // (𒒰) CUNEIFORM SIGN EZEN SHESHIG TIMES LA	[4FB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B0, 0x0062 };
    uint32_t const ces[9] = { 0x4FB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_039)
{
    // 124B1 0021;	
    // (𒒱) CUNEIFORM SIGN EZEN SHESHIG TIMES LAL	[4FB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B1, 0x0021 };
    uint32_t const ces[9] = { 0x4FB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_040)
{
    // 124B1 003F;	
    // (𒒱) CUNEIFORM SIGN EZEN SHESHIG TIMES LAL	[4FB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B1, 0x003F };
    uint32_t const ces[9] = { 0x4FB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_041)
{
    // 124B1 0061;	
    // (𒒱) CUNEIFORM SIGN EZEN SHESHIG TIMES LAL	[4FB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B1, 0x0061 };
    uint32_t const ces[9] = { 0x4FB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_042)
{
    // 124B1 0041;	
    // (𒒱) CUNEIFORM SIGN EZEN SHESHIG TIMES LAL	[4FB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B1, 0x0041 };
    uint32_t const ces[9] = { 0x4FB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_043)
{
    // 124B1 0062;	
    // (𒒱) CUNEIFORM SIGN EZEN SHESHIG TIMES LAL	[4FB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B1, 0x0062 };
    uint32_t const ces[9] = { 0x4FB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_044)
{
    // 124B2 0021;	
    // (𒒲) CUNEIFORM SIGN EZEN SHESHIG TIMES ME	[4FB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B2, 0x0021 };
    uint32_t const ces[9] = { 0x4FB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_045)
{
    // 124B2 003F;	
    // (𒒲) CUNEIFORM SIGN EZEN SHESHIG TIMES ME	[4FB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B2, 0x003F };
    uint32_t const ces[9] = { 0x4FB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_046)
{
    // 124B2 0061;	
    // (𒒲) CUNEIFORM SIGN EZEN SHESHIG TIMES ME	[4FB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B2, 0x0061 };
    uint32_t const ces[9] = { 0x4FB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_047)
{
    // 124B2 0041;	
    // (𒒲) CUNEIFORM SIGN EZEN SHESHIG TIMES ME	[4FB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B2, 0x0041 };
    uint32_t const ces[9] = { 0x4FB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_048)
{
    // 124B2 0062;	
    // (𒒲) CUNEIFORM SIGN EZEN SHESHIG TIMES ME	[4FB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B2, 0x0062 };
    uint32_t const ces[9] = { 0x4FB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_049)
{
    // 124B3 0021;	
    // (𒒳) CUNEIFORM SIGN EZEN SHESHIG TIMES MES	[4FB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B3, 0x0021 };
    uint32_t const ces[9] = { 0x4FB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_050)
{
    // 124B3 003F;	
    // (𒒳) CUNEIFORM SIGN EZEN SHESHIG TIMES MES	[4FB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B3, 0x003F };
    uint32_t const ces[9] = { 0x4FB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_051)
{
    // 124B3 0061;	
    // (𒒳) CUNEIFORM SIGN EZEN SHESHIG TIMES MES	[4FB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B3, 0x0061 };
    uint32_t const ces[9] = { 0x4FB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_052)
{
    // 124B3 0041;	
    // (𒒳) CUNEIFORM SIGN EZEN SHESHIG TIMES MES	[4FB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B3, 0x0041 };
    uint32_t const ces[9] = { 0x4FB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_053)
{
    // 124B3 0062;	
    // (𒒳) CUNEIFORM SIGN EZEN SHESHIG TIMES MES	[4FB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B3, 0x0062 };
    uint32_t const ces[9] = { 0x4FB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_054)
{
    // 124B4 0021;	
    // (𒒴) CUNEIFORM SIGN EZEN SHESHIG TIMES SU	[4FBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B4, 0x0021 };
    uint32_t const ces[9] = { 0x4FBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_055)
{
    // 124B4 003F;	
    // (𒒴) CUNEIFORM SIGN EZEN SHESHIG TIMES SU	[4FBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B4, 0x003F };
    uint32_t const ces[9] = { 0x4FBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_056)
{
    // 124B4 0061;	
    // (𒒴) CUNEIFORM SIGN EZEN SHESHIG TIMES SU	[4FBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B4, 0x0061 };
    uint32_t const ces[9] = { 0x4FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_057)
{
    // 124B4 0041;	
    // (𒒴) CUNEIFORM SIGN EZEN SHESHIG TIMES SU	[4FBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B4, 0x0041 };
    uint32_t const ces[9] = { 0x4FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_058)
{
    // 124B4 0062;	
    // (𒒴) CUNEIFORM SIGN EZEN SHESHIG TIMES SU	[4FBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B4, 0x0062 };
    uint32_t const ces[9] = { 0x4FBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_059)
{
    // 124B5 0021;	
    // (𒒵) CUNEIFORM SIGN EZEN TIMES SU	[4FBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B5, 0x0021 };
    uint32_t const ces[9] = { 0x4FBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_060)
{
    // 124B5 003F;	
    // (𒒵) CUNEIFORM SIGN EZEN TIMES SU	[4FBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B5, 0x003F };
    uint32_t const ces[9] = { 0x4FBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_061)
{
    // 124B5 0061;	
    // (𒒵) CUNEIFORM SIGN EZEN TIMES SU	[4FBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B5, 0x0061 };
    uint32_t const ces[9] = { 0x4FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_062)
{
    // 124B5 0041;	
    // (𒒵) CUNEIFORM SIGN EZEN TIMES SU	[4FBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B5, 0x0041 };
    uint32_t const ces[9] = { 0x4FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_063)
{
    // 124B5 0062;	
    // (𒒵) CUNEIFORM SIGN EZEN TIMES SU	[4FBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B5, 0x0062 };
    uint32_t const ces[9] = { 0x4FBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_064)
{
    // 124B6 0021;	
    // (𒒶) CUNEIFORM SIGN GA2 TIMES BAHAR2	[4FBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B6, 0x0021 };
    uint32_t const ces[9] = { 0x4FBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_065)
{
    // 124B6 003F;	
    // (𒒶) CUNEIFORM SIGN GA2 TIMES BAHAR2	[4FBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B6, 0x003F };
    uint32_t const ces[9] = { 0x4FBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_066)
{
    // 124B6 0061;	
    // (𒒶) CUNEIFORM SIGN GA2 TIMES BAHAR2	[4FBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B6, 0x0061 };
    uint32_t const ces[9] = { 0x4FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_067)
{
    // 124B6 0041;	
    // (𒒶) CUNEIFORM SIGN GA2 TIMES BAHAR2	[4FBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B6, 0x0041 };
    uint32_t const ces[9] = { 0x4FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_068)
{
    // 124B6 0062;	
    // (𒒶) CUNEIFORM SIGN GA2 TIMES BAHAR2	[4FBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B6, 0x0062 };
    uint32_t const ces[9] = { 0x4FBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_069)
{
    // 124B7 0021;	
    // (𒒷) CUNEIFORM SIGN GA2 TIMES DIM GUNU	[4FBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B7, 0x0021 };
    uint32_t const ces[9] = { 0x4FBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_070)
{
    // 124B7 003F;	
    // (𒒷) CUNEIFORM SIGN GA2 TIMES DIM GUNU	[4FBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B7, 0x003F };
    uint32_t const ces[9] = { 0x4FBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_071)
{
    // 124B7 0061;	
    // (𒒷) CUNEIFORM SIGN GA2 TIMES DIM GUNU	[4FBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B7, 0x0061 };
    uint32_t const ces[9] = { 0x4FBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_072)
{
    // 124B7 0041;	
    // (𒒷) CUNEIFORM SIGN GA2 TIMES DIM GUNU	[4FBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B7, 0x0041 };
    uint32_t const ces[9] = { 0x4FBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_073)
{
    // 124B7 0062;	
    // (𒒷) CUNEIFORM SIGN GA2 TIMES DIM GUNU	[4FBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B7, 0x0062 };
    uint32_t const ces[9] = { 0x4FBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_074)
{
    // 124B8 0021;	
    // (𒒸) CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU	[4FBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B8, 0x0021 };
    uint32_t const ces[9] = { 0x4FBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_075)
{
    // 124B8 003F;	
    // (𒒸) CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU	[4FBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B8, 0x003F };
    uint32_t const ces[9] = { 0x4FBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_076)
{
    // 124B8 0061;	
    // (𒒸) CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU	[4FBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B8, 0x0061 };
    uint32_t const ces[9] = { 0x4FBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_077)
{
    // 124B8 0041;	
    // (𒒸) CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU	[4FBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B8, 0x0041 };
    uint32_t const ces[9] = { 0x4FBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_078)
{
    // 124B8 0062;	
    // (𒒸) CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU	[4FBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B8, 0x0062 };
    uint32_t const ces[9] = { 0x4FBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_079)
{
    // 124B9 0021;	
    // (𒒹) CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL	[4FBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B9, 0x0021 };
    uint32_t const ces[9] = { 0x4FBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_080)
{
    // 124B9 003F;	
    // (𒒹) CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL	[4FBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B9, 0x003F };
    uint32_t const ces[9] = { 0x4FBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_081)
{
    // 124B9 0061;	
    // (𒒹) CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL	[4FBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B9, 0x0061 };
    uint32_t const ces[9] = { 0x4FBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_082)
{
    // 124B9 0041;	
    // (𒒹) CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL	[4FBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B9, 0x0041 };
    uint32_t const ces[9] = { 0x4FBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_083)
{
    // 124B9 0062;	
    // (𒒹) CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL	[4FBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B9, 0x0062 };
    uint32_t const ces[9] = { 0x4FBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_084)
{
    // 124BA 0021;	
    // (𒒺) CUNEIFORM SIGN GA2 TIMES EREN	[4FC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BA, 0x0021 };
    uint32_t const ces[9] = { 0x4FC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_085)
{
    // 124BA 003F;	
    // (𒒺) CUNEIFORM SIGN GA2 TIMES EREN	[4FC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BA, 0x003F };
    uint32_t const ces[9] = { 0x4FC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_086)
{
    // 124BA 0061;	
    // (𒒺) CUNEIFORM SIGN GA2 TIMES EREN	[4FC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BA, 0x0061 };
    uint32_t const ces[9] = { 0x4FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_087)
{
    // 124BA 0041;	
    // (𒒺) CUNEIFORM SIGN GA2 TIMES EREN	[4FC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BA, 0x0041 };
    uint32_t const ces[9] = { 0x4FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_088)
{
    // 124BA 0062;	
    // (𒒺) CUNEIFORM SIGN GA2 TIMES EREN	[4FC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BA, 0x0062 };
    uint32_t const ces[9] = { 0x4FC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_089)
{
    // 124BB 0021;	
    // (𒒻) CUNEIFORM SIGN GA2 TIMES GA	[4FC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BB, 0x0021 };
    uint32_t const ces[9] = { 0x4FC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_090)
{
    // 124BB 003F;	
    // (𒒻) CUNEIFORM SIGN GA2 TIMES GA	[4FC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BB, 0x003F };
    uint32_t const ces[9] = { 0x4FC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_091)
{
    // 124BB 0061;	
    // (𒒻) CUNEIFORM SIGN GA2 TIMES GA	[4FC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BB, 0x0061 };
    uint32_t const ces[9] = { 0x4FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_092)
{
    // 124BB 0041;	
    // (𒒻) CUNEIFORM SIGN GA2 TIMES GA	[4FC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BB, 0x0041 };
    uint32_t const ces[9] = { 0x4FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_093)
{
    // 124BB 0062;	
    // (𒒻) CUNEIFORM SIGN GA2 TIMES GA	[4FC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BB, 0x0062 };
    uint32_t const ces[9] = { 0x4FC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_094)
{
    // 124BC 0021;	
    // (𒒼) CUNEIFORM SIGN GA2 TIMES GAR PLUS DI	[4FC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BC, 0x0021 };
    uint32_t const ces[9] = { 0x4FC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_095)
{
    // 124BC 003F;	
    // (𒒼) CUNEIFORM SIGN GA2 TIMES GAR PLUS DI	[4FC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BC, 0x003F };
    uint32_t const ces[9] = { 0x4FC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_096)
{
    // 124BC 0061;	
    // (𒒼) CUNEIFORM SIGN GA2 TIMES GAR PLUS DI	[4FC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BC, 0x0061 };
    uint32_t const ces[9] = { 0x4FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_097)
{
    // 124BC 0041;	
    // (𒒼) CUNEIFORM SIGN GA2 TIMES GAR PLUS DI	[4FC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BC, 0x0041 };
    uint32_t const ces[9] = { 0x4FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_098)
{
    // 124BC 0062;	
    // (𒒼) CUNEIFORM SIGN GA2 TIMES GAR PLUS DI	[4FC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BC, 0x0062 };
    uint32_t const ces[9] = { 0x4FC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_099)
{
    // 124BD 0021;	
    // (𒒽) CUNEIFORM SIGN GA2 TIMES GAR PLUS NE	[4FC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BD, 0x0021 };
    uint32_t const ces[9] = { 0x4FC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_100)
{
    // 124BD 003F;	
    // (𒒽) CUNEIFORM SIGN GA2 TIMES GAR PLUS NE	[4FC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BD, 0x003F };
    uint32_t const ces[9] = { 0x4FC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_101)
{
    // 124BD 0061;	
    // (𒒽) CUNEIFORM SIGN GA2 TIMES GAR PLUS NE	[4FC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BD, 0x0061 };
    uint32_t const ces[9] = { 0x4FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_102)
{
    // 124BD 0041;	
    // (𒒽) CUNEIFORM SIGN GA2 TIMES GAR PLUS NE	[4FC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BD, 0x0041 };
    uint32_t const ces[9] = { 0x4FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_103)
{
    // 124BD 0062;	
    // (𒒽) CUNEIFORM SIGN GA2 TIMES GAR PLUS NE	[4FC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BD, 0x0062 };
    uint32_t const ces[9] = { 0x4FC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_104)
{
    // 124BE 0021;	
    // (𒒾) CUNEIFORM SIGN GA2 TIMES HA PLUS A	[4FC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BE, 0x0021 };
    uint32_t const ces[9] = { 0x4FC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_105)
{
    // 124BE 003F;	
    // (𒒾) CUNEIFORM SIGN GA2 TIMES HA PLUS A	[4FC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BE, 0x003F };
    uint32_t const ces[9] = { 0x4FC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_106)
{
    // 124BE 0061;	
    // (𒒾) CUNEIFORM SIGN GA2 TIMES HA PLUS A	[4FC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BE, 0x0061 };
    uint32_t const ces[9] = { 0x4FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_107)
{
    // 124BE 0041;	
    // (𒒾) CUNEIFORM SIGN GA2 TIMES HA PLUS A	[4FC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BE, 0x0041 };
    uint32_t const ces[9] = { 0x4FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_108)
{
    // 124BE 0062;	
    // (𒒾) CUNEIFORM SIGN GA2 TIMES HA PLUS A	[4FC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BE, 0x0062 };
    uint32_t const ces[9] = { 0x4FC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_109)
{
    // 124BF 0021;	
    // (𒒿) CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL	[4FC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BF, 0x0021 };
    uint32_t const ces[9] = { 0x4FC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_110)
{
    // 124BF 003F;	
    // (𒒿) CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL	[4FC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BF, 0x003F };
    uint32_t const ces[9] = { 0x4FC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_111)
{
    // 124BF 0061;	
    // (𒒿) CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL	[4FC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BF, 0x0061 };
    uint32_t const ces[9] = { 0x4FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_112)
{
    // 124BF 0041;	
    // (𒒿) CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL	[4FC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124BF, 0x0041 };
    uint32_t const ces[9] = { 0x4FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_113)
{
    // 124BF 0062;	
    // (𒒿) CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL	[4FC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124BF, 0x0062 };
    uint32_t const ces[9] = { 0x4FC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_114)
{
    // 124C0 0021;	
    // (𒓀) CUNEIFORM SIGN GA2 TIMES LAM	[4FC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C0, 0x0021 };
    uint32_t const ces[9] = { 0x4FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_115)
{
    // 124C0 003F;	
    // (𒓀) CUNEIFORM SIGN GA2 TIMES LAM	[4FC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C0, 0x003F };
    uint32_t const ces[9] = { 0x4FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_116)
{
    // 124C0 0061;	
    // (𒓀) CUNEIFORM SIGN GA2 TIMES LAM	[4FC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C0, 0x0061 };
    uint32_t const ces[9] = { 0x4FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_117)
{
    // 124C0 0041;	
    // (𒓀) CUNEIFORM SIGN GA2 TIMES LAM	[4FC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C0, 0x0041 };
    uint32_t const ces[9] = { 0x4FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_118)
{
    // 124C0 0062;	
    // (𒓀) CUNEIFORM SIGN GA2 TIMES LAM	[4FC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C0, 0x0062 };
    uint32_t const ces[9] = { 0x4FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_119)
{
    // 124C1 0021;	
    // (𒓁) CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR	[4FC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C1, 0x0021 };
    uint32_t const ces[9] = { 0x4FC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_120)
{
    // 124C1 003F;	
    // (𒓁) CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR	[4FC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C1, 0x003F };
    uint32_t const ces[9] = { 0x4FC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_121)
{
    // 124C1 0061;	
    // (𒓁) CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR	[4FC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C1, 0x0061 };
    uint32_t const ces[9] = { 0x4FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_122)
{
    // 124C1 0041;	
    // (𒓁) CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR	[4FC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C1, 0x0041 };
    uint32_t const ces[9] = { 0x4FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_123)
{
    // 124C1 0062;	
    // (𒓁) CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR	[4FC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C1, 0x0062 };
    uint32_t const ces[9] = { 0x4FC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_124)
{
    // 124C2 0021;	
    // (𒓂) CUNEIFORM SIGN GA2 TIMES LUH	[4FC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C2, 0x0021 };
    uint32_t const ces[9] = { 0x4FC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_125)
{
    // 124C2 003F;	
    // (𒓂) CUNEIFORM SIGN GA2 TIMES LUH	[4FC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C2, 0x003F };
    uint32_t const ces[9] = { 0x4FC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_126)
{
    // 124C2 0061;	
    // (𒓂) CUNEIFORM SIGN GA2 TIMES LUH	[4FC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C2, 0x0061 };
    uint32_t const ces[9] = { 0x4FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_127)
{
    // 124C2 0041;	
    // (𒓂) CUNEIFORM SIGN GA2 TIMES LUH	[4FC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C2, 0x0041 };
    uint32_t const ces[9] = { 0x4FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_128)
{
    // 124C2 0062;	
    // (𒓂) CUNEIFORM SIGN GA2 TIMES LUH	[4FC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C2, 0x0062 };
    uint32_t const ces[9] = { 0x4FC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_129)
{
    // 124C3 0021;	
    // (𒓃) CUNEIFORM SIGN GA2 TIMES MUSH	[4FC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C3, 0x0021 };
    uint32_t const ces[9] = { 0x4FC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_130)
{
    // 124C3 003F;	
    // (𒓃) CUNEIFORM SIGN GA2 TIMES MUSH	[4FC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C3, 0x003F };
    uint32_t const ces[9] = { 0x4FC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_131)
{
    // 124C3 0061;	
    // (𒓃) CUNEIFORM SIGN GA2 TIMES MUSH	[4FC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C3, 0x0061 };
    uint32_t const ces[9] = { 0x4FC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_132)
{
    // 124C3 0041;	
    // (𒓃) CUNEIFORM SIGN GA2 TIMES MUSH	[4FC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C3, 0x0041 };
    uint32_t const ces[9] = { 0x4FC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_133)
{
    // 124C3 0062;	
    // (𒓃) CUNEIFORM SIGN GA2 TIMES MUSH	[4FC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C3, 0x0062 };
    uint32_t const ces[9] = { 0x4FC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_134)
{
    // 124C4 0021;	
    // (𒓄) CUNEIFORM SIGN GA2 TIMES NE	[4FCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C4, 0x0021 };
    uint32_t const ces[9] = { 0x4FCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_135)
{
    // 124C4 003F;	
    // (𒓄) CUNEIFORM SIGN GA2 TIMES NE	[4FCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C4, 0x003F };
    uint32_t const ces[9] = { 0x4FCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_136)
{
    // 124C4 0061;	
    // (𒓄) CUNEIFORM SIGN GA2 TIMES NE	[4FCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C4, 0x0061 };
    uint32_t const ces[9] = { 0x4FCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_137)
{
    // 124C4 0041;	
    // (𒓄) CUNEIFORM SIGN GA2 TIMES NE	[4FCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C4, 0x0041 };
    uint32_t const ces[9] = { 0x4FCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_138)
{
    // 124C4 0062;	
    // (𒓄) CUNEIFORM SIGN GA2 TIMES NE	[4FCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C4, 0x0062 };
    uint32_t const ces[9] = { 0x4FCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_139)
{
    // 124C5 0021;	
    // (𒓅) CUNEIFORM SIGN GA2 TIMES NE PLUS E2	[4FCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C5, 0x0021 };
    uint32_t const ces[9] = { 0x4FCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_140)
{
    // 124C5 003F;	
    // (𒓅) CUNEIFORM SIGN GA2 TIMES NE PLUS E2	[4FCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C5, 0x003F };
    uint32_t const ces[9] = { 0x4FCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_141)
{
    // 124C5 0061;	
    // (𒓅) CUNEIFORM SIGN GA2 TIMES NE PLUS E2	[4FCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C5, 0x0061 };
    uint32_t const ces[9] = { 0x4FCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_142)
{
    // 124C5 0041;	
    // (𒓅) CUNEIFORM SIGN GA2 TIMES NE PLUS E2	[4FCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C5, 0x0041 };
    uint32_t const ces[9] = { 0x4FCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_143)
{
    // 124C5 0062;	
    // (𒓅) CUNEIFORM SIGN GA2 TIMES NE PLUS E2	[4FCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C5, 0x0062 };
    uint32_t const ces[9] = { 0x4FCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_144)
{
    // 124C6 0021;	
    // (𒓆) CUNEIFORM SIGN GA2 TIMES NE PLUS GI	[4FCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C6, 0x0021 };
    uint32_t const ces[9] = { 0x4FCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_145)
{
    // 124C6 003F;	
    // (𒓆) CUNEIFORM SIGN GA2 TIMES NE PLUS GI	[4FCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C6, 0x003F };
    uint32_t const ces[9] = { 0x4FCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_146)
{
    // 124C6 0061;	
    // (𒓆) CUNEIFORM SIGN GA2 TIMES NE PLUS GI	[4FCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C6, 0x0061 };
    uint32_t const ces[9] = { 0x4FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_147)
{
    // 124C6 0041;	
    // (𒓆) CUNEIFORM SIGN GA2 TIMES NE PLUS GI	[4FCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C6, 0x0041 };
    uint32_t const ces[9] = { 0x4FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_148)
{
    // 124C6 0062;	
    // (𒓆) CUNEIFORM SIGN GA2 TIMES NE PLUS GI	[4FCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C6, 0x0062 };
    uint32_t const ces[9] = { 0x4FCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_149)
{
    // 124C7 0021;	
    // (𒓇) CUNEIFORM SIGN GA2 TIMES SHIM	[4FCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C7, 0x0021 };
    uint32_t const ces[9] = { 0x4FCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_150)
{
    // 124C7 003F;	
    // (𒓇) CUNEIFORM SIGN GA2 TIMES SHIM	[4FCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C7, 0x003F };
    uint32_t const ces[9] = { 0x4FCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_151)
{
    // 124C7 0061;	
    // (𒓇) CUNEIFORM SIGN GA2 TIMES SHIM	[4FCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C7, 0x0061 };
    uint32_t const ces[9] = { 0x4FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_152)
{
    // 124C7 0041;	
    // (𒓇) CUNEIFORM SIGN GA2 TIMES SHIM	[4FCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C7, 0x0041 };
    uint32_t const ces[9] = { 0x4FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_153)
{
    // 124C7 0062;	
    // (𒓇) CUNEIFORM SIGN GA2 TIMES SHIM	[4FCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C7, 0x0062 };
    uint32_t const ces[9] = { 0x4FCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_154)
{
    // 124C8 0021;	
    // (𒓈) CUNEIFORM SIGN GA2 TIMES ZIZ2	[4FCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C8, 0x0021 };
    uint32_t const ces[9] = { 0x4FCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_155)
{
    // 124C8 003F;	
    // (𒓈) CUNEIFORM SIGN GA2 TIMES ZIZ2	[4FCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C8, 0x003F };
    uint32_t const ces[9] = { 0x4FCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_156)
{
    // 124C8 0061;	
    // (𒓈) CUNEIFORM SIGN GA2 TIMES ZIZ2	[4FCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C8, 0x0061 };
    uint32_t const ces[9] = { 0x4FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_157)
{
    // 124C8 0041;	
    // (𒓈) CUNEIFORM SIGN GA2 TIMES ZIZ2	[4FCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C8, 0x0041 };
    uint32_t const ces[9] = { 0x4FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_158)
{
    // 124C8 0062;	
    // (𒓈) CUNEIFORM SIGN GA2 TIMES ZIZ2	[4FCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C8, 0x0062 };
    uint32_t const ces[9] = { 0x4FCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_159)
{
    // 124C9 0021;	
    // (𒓉) CUNEIFORM SIGN GABA ROTATED NINETY DEGREES	[4FCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C9, 0x0021 };
    uint32_t const ces[9] = { 0x4FCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_160)
{
    // 124C9 003F;	
    // (𒓉) CUNEIFORM SIGN GABA ROTATED NINETY DEGREES	[4FCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C9, 0x003F };
    uint32_t const ces[9] = { 0x4FCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_161)
{
    // 124C9 0061;	
    // (𒓉) CUNEIFORM SIGN GABA ROTATED NINETY DEGREES	[4FCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C9, 0x0061 };
    uint32_t const ces[9] = { 0x4FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_162)
{
    // 124C9 0041;	
    // (𒓉) CUNEIFORM SIGN GABA ROTATED NINETY DEGREES	[4FCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C9, 0x0041 };
    uint32_t const ces[9] = { 0x4FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_163)
{
    // 124C9 0062;	
    // (𒓉) CUNEIFORM SIGN GABA ROTATED NINETY DEGREES	[4FCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C9, 0x0062 };
    uint32_t const ces[9] = { 0x4FCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_164)
{
    // 124CA 0021;	
    // (𒓊) CUNEIFORM SIGN GESHTIN TIMES U	[4FD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CA, 0x0021 };
    uint32_t const ces[9] = { 0x4FD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_165)
{
    // 124CA 003F;	
    // (𒓊) CUNEIFORM SIGN GESHTIN TIMES U	[4FD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CA, 0x003F };
    uint32_t const ces[9] = { 0x4FD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_166)
{
    // 124CA 0061;	
    // (𒓊) CUNEIFORM SIGN GESHTIN TIMES U	[4FD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CA, 0x0061 };
    uint32_t const ces[9] = { 0x4FD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_167)
{
    // 124CA 0041;	
    // (𒓊) CUNEIFORM SIGN GESHTIN TIMES U	[4FD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CA, 0x0041 };
    uint32_t const ces[9] = { 0x4FD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_168)
{
    // 124CA 0062;	
    // (𒓊) CUNEIFORM SIGN GESHTIN TIMES U	[4FD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CA, 0x0062 };
    uint32_t const ces[9] = { 0x4FD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_169)
{
    // 124CB 0021;	
    // (𒓋) CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH	[4FD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CB, 0x0021 };
    uint32_t const ces[9] = { 0x4FD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_170)
{
    // 124CB 003F;	
    // (𒓋) CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH	[4FD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CB, 0x003F };
    uint32_t const ces[9] = { 0x4FD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_171)
{
    // 124CB 0061;	
    // (𒓋) CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH	[4FD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CB, 0x0061 };
    uint32_t const ces[9] = { 0x4FD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_172)
{
    // 124CB 0041;	
    // (𒓋) CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH	[4FD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CB, 0x0041 };
    uint32_t const ces[9] = { 0x4FD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_173)
{
    // 124CB 0062;	
    // (𒓋) CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH	[4FD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CB, 0x0062 };
    uint32_t const ces[9] = { 0x4FD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_174)
{
    // 124CC 0021;	
    // (𒓌) CUNEIFORM SIGN GU2 TIMES IGI GUNU	[4FD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CC, 0x0021 };
    uint32_t const ces[9] = { 0x4FD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_175)
{
    // 124CC 003F;	
    // (𒓌) CUNEIFORM SIGN GU2 TIMES IGI GUNU	[4FD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CC, 0x003F };
    uint32_t const ces[9] = { 0x4FD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_176)
{
    // 124CC 0061;	
    // (𒓌) CUNEIFORM SIGN GU2 TIMES IGI GUNU	[4FD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CC, 0x0061 };
    uint32_t const ces[9] = { 0x4FD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_177)
{
    // 124CC 0041;	
    // (𒓌) CUNEIFORM SIGN GU2 TIMES IGI GUNU	[4FD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CC, 0x0041 };
    uint32_t const ces[9] = { 0x4FD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_178)
{
    // 124CC 0062;	
    // (𒓌) CUNEIFORM SIGN GU2 TIMES IGI GUNU	[4FD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CC, 0x0062 };
    uint32_t const ces[9] = { 0x4FD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_179)
{
    // 124CD 0021;	
    // (𒓍) CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4	[4FD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CD, 0x0021 };
    uint32_t const ces[9] = { 0x4FD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_180)
{
    // 124CD 003F;	
    // (𒓍) CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4	[4FD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CD, 0x003F };
    uint32_t const ces[9] = { 0x4FD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_181)
{
    // 124CD 0061;	
    // (𒓍) CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4	[4FD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CD, 0x0061 };
    uint32_t const ces[9] = { 0x4FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_182)
{
    // 124CD 0041;	
    // (𒓍) CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4	[4FD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CD, 0x0041 };
    uint32_t const ces[9] = { 0x4FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_183)
{
    // 124CD 0062;	
    // (𒓍) CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4	[4FD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CD, 0x0062 };
    uint32_t const ces[9] = { 0x4FD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_184)
{
    // 124CE 0021;	
    // (𒓎) CUNEIFORM SIGN HA TENU GUNU	[4FD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CE, 0x0021 };
    uint32_t const ces[9] = { 0x4FD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_185)
{
    // 124CE 003F;	
    // (𒓎) CUNEIFORM SIGN HA TENU GUNU	[4FD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CE, 0x003F };
    uint32_t const ces[9] = { 0x4FD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_186)
{
    // 124CE 0061;	
    // (𒓎) CUNEIFORM SIGN HA TENU GUNU	[4FD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CE, 0x0061 };
    uint32_t const ces[9] = { 0x4FD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_187)
{
    // 124CE 0041;	
    // (𒓎) CUNEIFORM SIGN HA TENU GUNU	[4FD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CE, 0x0041 };
    uint32_t const ces[9] = { 0x4FD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_188)
{
    // 124CE 0062;	
    // (𒓎) CUNEIFORM SIGN HA TENU GUNU	[4FD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CE, 0x0062 };
    uint32_t const ces[9] = { 0x4FD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_189)
{
    // 124CF 0021;	
    // (𒓏) CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH	[4FD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CF, 0x0021 };
    uint32_t const ces[9] = { 0x4FD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_190)
{
    // 124CF 003F;	
    // (𒓏) CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH	[4FD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CF, 0x003F };
    uint32_t const ces[9] = { 0x4FD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_191)
{
    // 124CF 0061;	
    // (𒓏) CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH	[4FD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CF, 0x0061 };
    uint32_t const ces[9] = { 0x4FD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_192)
{
    // 124CF 0041;	
    // (𒓏) CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH	[4FD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124CF, 0x0041 };
    uint32_t const ces[9] = { 0x4FD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_193)
{
    // 124CF 0062;	
    // (𒓏) CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH	[4FD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124CF, 0x0062 };
    uint32_t const ces[9] = { 0x4FD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_194)
{
    // 124D0 0021;	
    // (𒓐) CUNEIFORM SIGN KA TIMES BU	[4FD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D0, 0x0021 };
    uint32_t const ces[9] = { 0x4FD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_195)
{
    // 124D0 003F;	
    // (𒓐) CUNEIFORM SIGN KA TIMES BU	[4FD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D0, 0x003F };
    uint32_t const ces[9] = { 0x4FD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_196)
{
    // 124D0 0061;	
    // (𒓐) CUNEIFORM SIGN KA TIMES BU	[4FD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D0, 0x0061 };
    uint32_t const ces[9] = { 0x4FD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_197)
{
    // 124D0 0041;	
    // (𒓐) CUNEIFORM SIGN KA TIMES BU	[4FD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D0, 0x0041 };
    uint32_t const ces[9] = { 0x4FD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_198)
{
    // 124D0 0062;	
    // (𒓐) CUNEIFORM SIGN KA TIMES BU	[4FD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D0, 0x0062 };
    uint32_t const ces[9] = { 0x4FD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_199)
{
    // 124D1 0021;	
    // (𒓑) CUNEIFORM SIGN KA TIMES KA	[4FD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D1, 0x0021 };
    uint32_t const ces[9] = { 0x4FD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_200)
{
    // 124D1 003F;	
    // (𒓑) CUNEIFORM SIGN KA TIMES KA	[4FD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D1, 0x003F };
    uint32_t const ces[9] = { 0x4FD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_201)
{
    // 124D1 0061;	
    // (𒓑) CUNEIFORM SIGN KA TIMES KA	[4FD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D1, 0x0061 };
    uint32_t const ces[9] = { 0x4FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_202)
{
    // 124D1 0041;	
    // (𒓑) CUNEIFORM SIGN KA TIMES KA	[4FD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D1, 0x0041 };
    uint32_t const ces[9] = { 0x4FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_203)
{
    // 124D1 0062;	
    // (𒓑) CUNEIFORM SIGN KA TIMES KA	[4FD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D1, 0x0062 };
    uint32_t const ces[9] = { 0x4FD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_204)
{
    // 124D2 0021;	
    // (𒓒) CUNEIFORM SIGN KA TIMES U U U	[4FD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D2, 0x0021 };
    uint32_t const ces[9] = { 0x4FD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_205)
{
    // 124D2 003F;	
    // (𒓒) CUNEIFORM SIGN KA TIMES U U U	[4FD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D2, 0x003F };
    uint32_t const ces[9] = { 0x4FD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_206)
{
    // 124D2 0061;	
    // (𒓒) CUNEIFORM SIGN KA TIMES U U U	[4FD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D2, 0x0061 };
    uint32_t const ces[9] = { 0x4FD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_207)
{
    // 124D2 0041;	
    // (𒓒) CUNEIFORM SIGN KA TIMES U U U	[4FD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D2, 0x0041 };
    uint32_t const ces[9] = { 0x4FD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_208)
{
    // 124D2 0062;	
    // (𒓒) CUNEIFORM SIGN KA TIMES U U U	[4FD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D2, 0x0062 };
    uint32_t const ces[9] = { 0x4FD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_209)
{
    // 124D3 0021;	
    // (𒓓) CUNEIFORM SIGN KA TIMES UR	[4FD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D3, 0x0021 };
    uint32_t const ces[9] = { 0x4FD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_210)
{
    // 124D3 003F;	
    // (𒓓) CUNEIFORM SIGN KA TIMES UR	[4FD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D3, 0x003F };
    uint32_t const ces[9] = { 0x4FD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_211)
{
    // 124D3 0061;	
    // (𒓓) CUNEIFORM SIGN KA TIMES UR	[4FD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D3, 0x0061 };
    uint32_t const ces[9] = { 0x4FD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_212)
{
    // 124D3 0041;	
    // (𒓓) CUNEIFORM SIGN KA TIMES UR	[4FD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D3, 0x0041 };
    uint32_t const ces[9] = { 0x4FD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_213)
{
    // 124D3 0062;	
    // (𒓓) CUNEIFORM SIGN KA TIMES UR	[4FD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D3, 0x0062 };
    uint32_t const ces[9] = { 0x4FD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_214)
{
    // 124D4 0021;	
    // (𒓔) CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU	[4FDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D4, 0x0021 };
    uint32_t const ces[9] = { 0x4FDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_215)
{
    // 124D4 003F;	
    // (𒓔) CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU	[4FDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D4, 0x003F };
    uint32_t const ces[9] = { 0x4FDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_216)
{
    // 124D4 0061;	
    // (𒓔) CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU	[4FDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D4, 0x0061 };
    uint32_t const ces[9] = { 0x4FDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_217)
{
    // 124D4 0041;	
    // (𒓔) CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU	[4FDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D4, 0x0041 };
    uint32_t const ces[9] = { 0x4FDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_218)
{
    // 124D4 0062;	
    // (𒓔) CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU	[4FDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D4, 0x0062 };
    uint32_t const ces[9] = { 0x4FDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_219)
{
    // 124D5 0021;	
    // (𒓕) CUNEIFORM SIGN LAK-003	[4FDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D5, 0x0021 };
    uint32_t const ces[9] = { 0x4FDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_220)
{
    // 124D5 003F;	
    // (𒓕) CUNEIFORM SIGN LAK-003	[4FDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D5, 0x003F };
    uint32_t const ces[9] = { 0x4FDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_221)
{
    // 124D5 0061;	
    // (𒓕) CUNEIFORM SIGN LAK-003	[4FDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D5, 0x0061 };
    uint32_t const ces[9] = { 0x4FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_222)
{
    // 124D5 0041;	
    // (𒓕) CUNEIFORM SIGN LAK-003	[4FDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D5, 0x0041 };
    uint32_t const ces[9] = { 0x4FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_223)
{
    // 124D5 0062;	
    // (𒓕) CUNEIFORM SIGN LAK-003	[4FDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D5, 0x0062 };
    uint32_t const ces[9] = { 0x4FDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_224)
{
    // 124D6 0021;	
    // (𒓖) CUNEIFORM SIGN LAK-021	[4FDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D6, 0x0021 };
    uint32_t const ces[9] = { 0x4FDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_225)
{
    // 124D6 003F;	
    // (𒓖) CUNEIFORM SIGN LAK-021	[4FDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D6, 0x003F };
    uint32_t const ces[9] = { 0x4FDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_226)
{
    // 124D6 0061;	
    // (𒓖) CUNEIFORM SIGN LAK-021	[4FDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D6, 0x0061 };
    uint32_t const ces[9] = { 0x4FDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_227)
{
    // 124D6 0041;	
    // (𒓖) CUNEIFORM SIGN LAK-021	[4FDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D6, 0x0041 };
    uint32_t const ces[9] = { 0x4FDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_228)
{
    // 124D6 0062;	
    // (𒓖) CUNEIFORM SIGN LAK-021	[4FDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D6, 0x0062 };
    uint32_t const ces[9] = { 0x4FDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_229)
{
    // 124D7 0021;	
    // (𒓗) CUNEIFORM SIGN LAK-025	[4FDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D7, 0x0021 };
    uint32_t const ces[9] = { 0x4FDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_230)
{
    // 124D7 003F;	
    // (𒓗) CUNEIFORM SIGN LAK-025	[4FDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D7, 0x003F };
    uint32_t const ces[9] = { 0x4FDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_231)
{
    // 124D7 0061;	
    // (𒓗) CUNEIFORM SIGN LAK-025	[4FDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D7, 0x0061 };
    uint32_t const ces[9] = { 0x4FDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_232)
{
    // 124D7 0041;	
    // (𒓗) CUNEIFORM SIGN LAK-025	[4FDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D7, 0x0041 };
    uint32_t const ces[9] = { 0x4FDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_233)
{
    // 124D7 0062;	
    // (𒓗) CUNEIFORM SIGN LAK-025	[4FDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D7, 0x0062 };
    uint32_t const ces[9] = { 0x4FDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_234)
{
    // 124D8 0021;	
    // (𒓘) CUNEIFORM SIGN LAK-030	[4FDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D8, 0x0021 };
    uint32_t const ces[9] = { 0x4FDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_235)
{
    // 124D8 003F;	
    // (𒓘) CUNEIFORM SIGN LAK-030	[4FDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D8, 0x003F };
    uint32_t const ces[9] = { 0x4FDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_236)
{
    // 124D8 0061;	
    // (𒓘) CUNEIFORM SIGN LAK-030	[4FDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D8, 0x0061 };
    uint32_t const ces[9] = { 0x4FDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_237)
{
    // 124D8 0041;	
    // (𒓘) CUNEIFORM SIGN LAK-030	[4FDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D8, 0x0041 };
    uint32_t const ces[9] = { 0x4FDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_238)
{
    // 124D8 0062;	
    // (𒓘) CUNEIFORM SIGN LAK-030	[4FDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D8, 0x0062 };
    uint32_t const ces[9] = { 0x4FDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_239)
{
    // 124D9 0021;	
    // (𒓙) CUNEIFORM SIGN LAK-050	[4FDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D9, 0x0021 };
    uint32_t const ces[9] = { 0x4FDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_240)
{
    // 124D9 003F;	
    // (𒓙) CUNEIFORM SIGN LAK-050	[4FDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D9, 0x003F };
    uint32_t const ces[9] = { 0x4FDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_241)
{
    // 124D9 0061;	
    // (𒓙) CUNEIFORM SIGN LAK-050	[4FDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D9, 0x0061 };
    uint32_t const ces[9] = { 0x4FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_242)
{
    // 124D9 0041;	
    // (𒓙) CUNEIFORM SIGN LAK-050	[4FDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D9, 0x0041 };
    uint32_t const ces[9] = { 0x4FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_243)
{
    // 124D9 0062;	
    // (𒓙) CUNEIFORM SIGN LAK-050	[4FDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D9, 0x0062 };
    uint32_t const ces[9] = { 0x4FDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_244)
{
    // 124DA 0021;	
    // (𒓚) CUNEIFORM SIGN LAK-051	[4FE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DA, 0x0021 };
    uint32_t const ces[9] = { 0x4FE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_245)
{
    // 124DA 003F;	
    // (𒓚) CUNEIFORM SIGN LAK-051	[4FE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DA, 0x003F };
    uint32_t const ces[9] = { 0x4FE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_246)
{
    // 124DA 0061;	
    // (𒓚) CUNEIFORM SIGN LAK-051	[4FE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DA, 0x0061 };
    uint32_t const ces[9] = { 0x4FE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_247)
{
    // 124DA 0041;	
    // (𒓚) CUNEIFORM SIGN LAK-051	[4FE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DA, 0x0041 };
    uint32_t const ces[9] = { 0x4FE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_248)
{
    // 124DA 0062;	
    // (𒓚) CUNEIFORM SIGN LAK-051	[4FE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DA, 0x0062 };
    uint32_t const ces[9] = { 0x4FE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_249)
{
    // 124DB 0021;	
    // (𒓛) CUNEIFORM SIGN LAK-062	[4FE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DB, 0x0021 };
    uint32_t const ces[9] = { 0x4FE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_250)
{
    // 124DB 003F;	
    // (𒓛) CUNEIFORM SIGN LAK-062	[4FE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DB, 0x003F };
    uint32_t const ces[9] = { 0x4FE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_251)
{
    // 124DB 0061;	
    // (𒓛) CUNEIFORM SIGN LAK-062	[4FE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DB, 0x0061 };
    uint32_t const ces[9] = { 0x4FE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_252)
{
    // 124DB 0041;	
    // (𒓛) CUNEIFORM SIGN LAK-062	[4FE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DB, 0x0041 };
    uint32_t const ces[9] = { 0x4FE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_253)
{
    // 124DB 0062;	
    // (𒓛) CUNEIFORM SIGN LAK-062	[4FE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DB, 0x0062 };
    uint32_t const ces[9] = { 0x4FE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_254)
{
    // 124DC 0021;	
    // (𒓜) CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU	[4FE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DC, 0x0021 };
    uint32_t const ces[9] = { 0x4FE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_255)
{
    // 124DC 003F;	
    // (𒓜) CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU	[4FE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DC, 0x003F };
    uint32_t const ces[9] = { 0x4FE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_256)
{
    // 124DC 0061;	
    // (𒓜) CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU	[4FE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DC, 0x0061 };
    uint32_t const ces[9] = { 0x4FE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_257)
{
    // 124DC 0041;	
    // (𒓜) CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU	[4FE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DC, 0x0041 };
    uint32_t const ces[9] = { 0x4FE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_258)
{
    // 124DC 0062;	
    // (𒓜) CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU	[4FE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DC, 0x0062 };
    uint32_t const ces[9] = { 0x4FE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_259)
{
    // 124DD 0021;	
    // (𒓝) CUNEIFORM SIGN LAK-080	[4FE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DD, 0x0021 };
    uint32_t const ces[9] = { 0x4FE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_260)
{
    // 124DD 003F;	
    // (𒓝) CUNEIFORM SIGN LAK-080	[4FE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DD, 0x003F };
    uint32_t const ces[9] = { 0x4FE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_261)
{
    // 124DD 0061;	
    // (𒓝) CUNEIFORM SIGN LAK-080	[4FE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DD, 0x0061 };
    uint32_t const ces[9] = { 0x4FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_262)
{
    // 124DD 0041;	
    // (𒓝) CUNEIFORM SIGN LAK-080	[4FE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DD, 0x0041 };
    uint32_t const ces[9] = { 0x4FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_263)
{
    // 124DD 0062;	
    // (𒓝) CUNEIFORM SIGN LAK-080	[4FE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DD, 0x0062 };
    uint32_t const ces[9] = { 0x4FE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_264)
{
    // 124DE 0021;	
    // (𒓞) CUNEIFORM SIGN LAK-081 OVER LAK-081	[4FE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DE, 0x0021 };
    uint32_t const ces[9] = { 0x4FE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_265)
{
    // 124DE 003F;	
    // (𒓞) CUNEIFORM SIGN LAK-081 OVER LAK-081	[4FE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DE, 0x003F };
    uint32_t const ces[9] = { 0x4FE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_266)
{
    // 124DE 0061;	
    // (𒓞) CUNEIFORM SIGN LAK-081 OVER LAK-081	[4FE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DE, 0x0061 };
    uint32_t const ces[9] = { 0x4FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_267)
{
    // 124DE 0041;	
    // (𒓞) CUNEIFORM SIGN LAK-081 OVER LAK-081	[4FE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DE, 0x0041 };
    uint32_t const ces[9] = { 0x4FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_268)
{
    // 124DE 0062;	
    // (𒓞) CUNEIFORM SIGN LAK-081 OVER LAK-081	[4FE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DE, 0x0062 };
    uint32_t const ces[9] = { 0x4FE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_269)
{
    // 124DF 0021;	
    // (𒓟) CUNEIFORM SIGN LAK-092	[4FE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DF, 0x0021 };
    uint32_t const ces[9] = { 0x4FE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_270)
{
    // 124DF 003F;	
    // (𒓟) CUNEIFORM SIGN LAK-092	[4FE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DF, 0x003F };
    uint32_t const ces[9] = { 0x4FE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_271)
{
    // 124DF 0061;	
    // (𒓟) CUNEIFORM SIGN LAK-092	[4FE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DF, 0x0061 };
    uint32_t const ces[9] = { 0x4FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_272)
{
    // 124DF 0041;	
    // (𒓟) CUNEIFORM SIGN LAK-092	[4FE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124DF, 0x0041 };
    uint32_t const ces[9] = { 0x4FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_273)
{
    // 124DF 0062;	
    // (𒓟) CUNEIFORM SIGN LAK-092	[4FE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124DF, 0x0062 };
    uint32_t const ces[9] = { 0x4FE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_274)
{
    // 124E0 0021;	
    // (𒓠) CUNEIFORM SIGN LAK-130	[4FE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E0, 0x0021 };
    uint32_t const ces[9] = { 0x4FE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_275)
{
    // 124E0 003F;	
    // (𒓠) CUNEIFORM SIGN LAK-130	[4FE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E0, 0x003F };
    uint32_t const ces[9] = { 0x4FE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_276)
{
    // 124E0 0061;	
    // (𒓠) CUNEIFORM SIGN LAK-130	[4FE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E0, 0x0061 };
    uint32_t const ces[9] = { 0x4FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_277)
{
    // 124E0 0041;	
    // (𒓠) CUNEIFORM SIGN LAK-130	[4FE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E0, 0x0041 };
    uint32_t const ces[9] = { 0x4FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_278)
{
    // 124E0 0062;	
    // (𒓠) CUNEIFORM SIGN LAK-130	[4FE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E0, 0x0062 };
    uint32_t const ces[9] = { 0x4FE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_279)
{
    // 124E1 0021;	
    // (𒓡) CUNEIFORM SIGN LAK-142	[4FE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E1, 0x0021 };
    uint32_t const ces[9] = { 0x4FE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_280)
{
    // 124E1 003F;	
    // (𒓡) CUNEIFORM SIGN LAK-142	[4FE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E1, 0x003F };
    uint32_t const ces[9] = { 0x4FE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_281)
{
    // 124E1 0061;	
    // (𒓡) CUNEIFORM SIGN LAK-142	[4FE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E1, 0x0061 };
    uint32_t const ces[9] = { 0x4FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_282)
{
    // 124E1 0041;	
    // (𒓡) CUNEIFORM SIGN LAK-142	[4FE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E1, 0x0041 };
    uint32_t const ces[9] = { 0x4FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_283)
{
    // 124E1 0062;	
    // (𒓡) CUNEIFORM SIGN LAK-142	[4FE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E1, 0x0062 };
    uint32_t const ces[9] = { 0x4FE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_284)
{
    // 124E2 0021;	
    // (𒓢) CUNEIFORM SIGN LAK-210	[4FE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E2, 0x0021 };
    uint32_t const ces[9] = { 0x4FE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_285)
{
    // 124E2 003F;	
    // (𒓢) CUNEIFORM SIGN LAK-210	[4FE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E2, 0x003F };
    uint32_t const ces[9] = { 0x4FE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_286)
{
    // 124E2 0061;	
    // (𒓢) CUNEIFORM SIGN LAK-210	[4FE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E2, 0x0061 };
    uint32_t const ces[9] = { 0x4FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_287)
{
    // 124E2 0041;	
    // (𒓢) CUNEIFORM SIGN LAK-210	[4FE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E2, 0x0041 };
    uint32_t const ces[9] = { 0x4FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_288)
{
    // 124E2 0062;	
    // (𒓢) CUNEIFORM SIGN LAK-210	[4FE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E2, 0x0062 };
    uint32_t const ces[9] = { 0x4FE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_289)
{
    // 124E3 0021;	
    // (𒓣) CUNEIFORM SIGN LAK-219	[4FE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E3, 0x0021 };
    uint32_t const ces[9] = { 0x4FE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_290)
{
    // 124E3 003F;	
    // (𒓣) CUNEIFORM SIGN LAK-219	[4FE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E3, 0x003F };
    uint32_t const ces[9] = { 0x4FE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_291)
{
    // 124E3 0061;	
    // (𒓣) CUNEIFORM SIGN LAK-219	[4FE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E3, 0x0061 };
    uint32_t const ces[9] = { 0x4FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_292)
{
    // 124E3 0041;	
    // (𒓣) CUNEIFORM SIGN LAK-219	[4FE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E3, 0x0041 };
    uint32_t const ces[9] = { 0x4FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_293)
{
    // 124E3 0062;	
    // (𒓣) CUNEIFORM SIGN LAK-219	[4FE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E3, 0x0062 };
    uint32_t const ces[9] = { 0x4FE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_294)
{
    // 124E4 0021;	
    // (𒓤) CUNEIFORM SIGN LAK-220	[4FEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E4, 0x0021 };
    uint32_t const ces[9] = { 0x4FEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_295)
{
    // 124E4 003F;	
    // (𒓤) CUNEIFORM SIGN LAK-220	[4FEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E4, 0x003F };
    uint32_t const ces[9] = { 0x4FEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_296)
{
    // 124E4 0061;	
    // (𒓤) CUNEIFORM SIGN LAK-220	[4FEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E4, 0x0061 };
    uint32_t const ces[9] = { 0x4FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_297)
{
    // 124E4 0041;	
    // (𒓤) CUNEIFORM SIGN LAK-220	[4FEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E4, 0x0041 };
    uint32_t const ces[9] = { 0x4FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_298)
{
    // 124E4 0062;	
    // (𒓤) CUNEIFORM SIGN LAK-220	[4FEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E4, 0x0062 };
    uint32_t const ces[9] = { 0x4FEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_299)
{
    // 124E5 0021;	
    // (𒓥) CUNEIFORM SIGN LAK-225	[4FEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E5, 0x0021 };
    uint32_t const ces[9] = { 0x4FEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_300)
{
    // 124E5 003F;	
    // (𒓥) CUNEIFORM SIGN LAK-225	[4FEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E5, 0x003F };
    uint32_t const ces[9] = { 0x4FEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_301)
{
    // 124E5 0061;	
    // (𒓥) CUNEIFORM SIGN LAK-225	[4FEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E5, 0x0061 };
    uint32_t const ces[9] = { 0x4FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_302)
{
    // 124E5 0041;	
    // (𒓥) CUNEIFORM SIGN LAK-225	[4FEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E5, 0x0041 };
    uint32_t const ces[9] = { 0x4FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_303)
{
    // 124E5 0062;	
    // (𒓥) CUNEIFORM SIGN LAK-225	[4FEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E5, 0x0062 };
    uint32_t const ces[9] = { 0x4FEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_304)
{
    // 124E6 0021;	
    // (𒓦) CUNEIFORM SIGN LAK-228	[4FEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E6, 0x0021 };
    uint32_t const ces[9] = { 0x4FEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_305)
{
    // 124E6 003F;	
    // (𒓦) CUNEIFORM SIGN LAK-228	[4FEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E6, 0x003F };
    uint32_t const ces[9] = { 0x4FEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_306)
{
    // 124E6 0061;	
    // (𒓦) CUNEIFORM SIGN LAK-228	[4FEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E6, 0x0061 };
    uint32_t const ces[9] = { 0x4FEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_307)
{
    // 124E6 0041;	
    // (𒓦) CUNEIFORM SIGN LAK-228	[4FEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E6, 0x0041 };
    uint32_t const ces[9] = { 0x4FEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_308)
{
    // 124E6 0062;	
    // (𒓦) CUNEIFORM SIGN LAK-228	[4FEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E6, 0x0062 };
    uint32_t const ces[9] = { 0x4FEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_309)
{
    // 124E7 0021;	
    // (𒓧) CUNEIFORM SIGN LAK-238	[4FED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E7, 0x0021 };
    uint32_t const ces[9] = { 0x4FED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_310)
{
    // 124E7 003F;	
    // (𒓧) CUNEIFORM SIGN LAK-238	[4FED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E7, 0x003F };
    uint32_t const ces[9] = { 0x4FED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_311)
{
    // 124E7 0061;	
    // (𒓧) CUNEIFORM SIGN LAK-238	[4FED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E7, 0x0061 };
    uint32_t const ces[9] = { 0x4FED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_312)
{
    // 124E7 0041;	
    // (𒓧) CUNEIFORM SIGN LAK-238	[4FED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E7, 0x0041 };
    uint32_t const ces[9] = { 0x4FED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_313)
{
    // 124E7 0062;	
    // (𒓧) CUNEIFORM SIGN LAK-238	[4FED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E7, 0x0062 };
    uint32_t const ces[9] = { 0x4FED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_314)
{
    // 124E8 0021;	
    // (𒓨) CUNEIFORM SIGN LAK-265	[4FEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E8, 0x0021 };
    uint32_t const ces[9] = { 0x4FEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_315)
{
    // 124E8 003F;	
    // (𒓨) CUNEIFORM SIGN LAK-265	[4FEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E8, 0x003F };
    uint32_t const ces[9] = { 0x4FEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_316)
{
    // 124E8 0061;	
    // (𒓨) CUNEIFORM SIGN LAK-265	[4FEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E8, 0x0061 };
    uint32_t const ces[9] = { 0x4FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_317)
{
    // 124E8 0041;	
    // (𒓨) CUNEIFORM SIGN LAK-265	[4FEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E8, 0x0041 };
    uint32_t const ces[9] = { 0x4FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_318)
{
    // 124E8 0062;	
    // (𒓨) CUNEIFORM SIGN LAK-265	[4FEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E8, 0x0062 };
    uint32_t const ces[9] = { 0x4FEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_319)
{
    // 124E9 0021;	
    // (𒓩) CUNEIFORM SIGN LAK-266	[4FEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E9, 0x0021 };
    uint32_t const ces[9] = { 0x4FEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_320)
{
    // 124E9 003F;	
    // (𒓩) CUNEIFORM SIGN LAK-266	[4FEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E9, 0x003F };
    uint32_t const ces[9] = { 0x4FEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_321)
{
    // 124E9 0061;	
    // (𒓩) CUNEIFORM SIGN LAK-266	[4FEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E9, 0x0061 };
    uint32_t const ces[9] = { 0x4FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_322)
{
    // 124E9 0041;	
    // (𒓩) CUNEIFORM SIGN LAK-266	[4FEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124E9, 0x0041 };
    uint32_t const ces[9] = { 0x4FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_323)
{
    // 124E9 0062;	
    // (𒓩) CUNEIFORM SIGN LAK-266	[4FEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124E9, 0x0062 };
    uint32_t const ces[9] = { 0x4FEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_324)
{
    // 124EA 0021;	
    // (𒓪) CUNEIFORM SIGN LAK-343	[4FF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EA, 0x0021 };
    uint32_t const ces[9] = { 0x4FF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_325)
{
    // 124EA 003F;	
    // (𒓪) CUNEIFORM SIGN LAK-343	[4FF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EA, 0x003F };
    uint32_t const ces[9] = { 0x4FF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_326)
{
    // 124EA 0061;	
    // (𒓪) CUNEIFORM SIGN LAK-343	[4FF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EA, 0x0061 };
    uint32_t const ces[9] = { 0x4FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_327)
{
    // 124EA 0041;	
    // (𒓪) CUNEIFORM SIGN LAK-343	[4FF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124EA, 0x0041 };
    uint32_t const ces[9] = { 0x4FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_328)
{
    // 124EA 0062;	
    // (𒓪) CUNEIFORM SIGN LAK-343	[4FF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EA, 0x0062 };
    uint32_t const ces[9] = { 0x4FF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_329)
{
    // 124EB 0021;	
    // (𒓫) CUNEIFORM SIGN LAK-347	[4FF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EB, 0x0021 };
    uint32_t const ces[9] = { 0x4FF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_330)
{
    // 124EB 003F;	
    // (𒓫) CUNEIFORM SIGN LAK-347	[4FF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EB, 0x003F };
    uint32_t const ces[9] = { 0x4FF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_331)
{
    // 124EB 0061;	
    // (𒓫) CUNEIFORM SIGN LAK-347	[4FF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EB, 0x0061 };
    uint32_t const ces[9] = { 0x4FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_332)
{
    // 124EB 0041;	
    // (𒓫) CUNEIFORM SIGN LAK-347	[4FF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124EB, 0x0041 };
    uint32_t const ces[9] = { 0x4FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_333)
{
    // 124EB 0062;	
    // (𒓫) CUNEIFORM SIGN LAK-347	[4FF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EB, 0x0062 };
    uint32_t const ces[9] = { 0x4FF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_334)
{
    // 124EC 0021;	
    // (𒓬) CUNEIFORM SIGN LAK-348	[4FF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EC, 0x0021 };
    uint32_t const ces[9] = { 0x4FF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_335)
{
    // 124EC 003F;	
    // (𒓬) CUNEIFORM SIGN LAK-348	[4FF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EC, 0x003F };
    uint32_t const ces[9] = { 0x4FF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_336)
{
    // 124EC 0061;	
    // (𒓬) CUNEIFORM SIGN LAK-348	[4FF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EC, 0x0061 };
    uint32_t const ces[9] = { 0x4FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_337)
{
    // 124EC 0041;	
    // (𒓬) CUNEIFORM SIGN LAK-348	[4FF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124EC, 0x0041 };
    uint32_t const ces[9] = { 0x4FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_338)
{
    // 124EC 0062;	
    // (𒓬) CUNEIFORM SIGN LAK-348	[4FF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EC, 0x0062 };
    uint32_t const ces[9] = { 0x4FF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_339)
{
    // 124ED 0021;	
    // (𒓭) CUNEIFORM SIGN LAK-383	[4FF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124ED, 0x0021 };
    uint32_t const ces[9] = { 0x4FF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_340)
{
    // 124ED 003F;	
    // (𒓭) CUNEIFORM SIGN LAK-383	[4FF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124ED, 0x003F };
    uint32_t const ces[9] = { 0x4FF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_341)
{
    // 124ED 0061;	
    // (𒓭) CUNEIFORM SIGN LAK-383	[4FF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124ED, 0x0061 };
    uint32_t const ces[9] = { 0x4FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_342)
{
    // 124ED 0041;	
    // (𒓭) CUNEIFORM SIGN LAK-383	[4FF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124ED, 0x0041 };
    uint32_t const ces[9] = { 0x4FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_343)
{
    // 124ED 0062;	
    // (𒓭) CUNEIFORM SIGN LAK-383	[4FF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124ED, 0x0062 };
    uint32_t const ces[9] = { 0x4FF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_344)
{
    // 124EE 0021;	
    // (𒓮) CUNEIFORM SIGN LAK-384	[4FF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EE, 0x0021 };
    uint32_t const ces[9] = { 0x4FF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_345)
{
    // 124EE 003F;	
    // (𒓮) CUNEIFORM SIGN LAK-384	[4FF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EE, 0x003F };
    uint32_t const ces[9] = { 0x4FF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_346)
{
    // 124EE 0061;	
    // (𒓮) CUNEIFORM SIGN LAK-384	[4FF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EE, 0x0061 };
    uint32_t const ces[9] = { 0x4FF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_347)
{
    // 124EE 0041;	
    // (𒓮) CUNEIFORM SIGN LAK-384	[4FF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124EE, 0x0041 };
    uint32_t const ces[9] = { 0x4FF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_348)
{
    // 124EE 0062;	
    // (𒓮) CUNEIFORM SIGN LAK-384	[4FF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EE, 0x0062 };
    uint32_t const ces[9] = { 0x4FF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_349)
{
    // 124EF 0021;	
    // (𒓯) CUNEIFORM SIGN LAK-390	[4FF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EF, 0x0021 };
    uint32_t const ces[9] = { 0x4FF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_350)
{
    // 124EF 003F;	
    // (𒓯) CUNEIFORM SIGN LAK-390	[4FF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EF, 0x003F };
    uint32_t const ces[9] = { 0x4FF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_351)
{
    // 124EF 0061;	
    // (𒓯) CUNEIFORM SIGN LAK-390	[4FF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EF, 0x0061 };
    uint32_t const ces[9] = { 0x4FF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_352)
{
    // 124EF 0041;	
    // (𒓯) CUNEIFORM SIGN LAK-390	[4FF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124EF, 0x0041 };
    uint32_t const ces[9] = { 0x4FF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_353)
{
    // 124EF 0062;	
    // (𒓯) CUNEIFORM SIGN LAK-390	[4FF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124EF, 0x0062 };
    uint32_t const ces[9] = { 0x4FF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_354)
{
    // 124F0 0021;	
    // (𒓰) CUNEIFORM SIGN LAK-441	[4FF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F0, 0x0021 };
    uint32_t const ces[9] = { 0x4FF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_355)
{
    // 124F0 003F;	
    // (𒓰) CUNEIFORM SIGN LAK-441	[4FF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F0, 0x003F };
    uint32_t const ces[9] = { 0x4FF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_356)
{
    // 124F0 0061;	
    // (𒓰) CUNEIFORM SIGN LAK-441	[4FF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F0, 0x0061 };
    uint32_t const ces[9] = { 0x4FF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_357)
{
    // 124F0 0041;	
    // (𒓰) CUNEIFORM SIGN LAK-441	[4FF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F0, 0x0041 };
    uint32_t const ces[9] = { 0x4FF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_358)
{
    // 124F0 0062;	
    // (𒓰) CUNEIFORM SIGN LAK-441	[4FF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F0, 0x0062 };
    uint32_t const ces[9] = { 0x4FF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_359)
{
    // 124F1 0021;	
    // (𒓱) CUNEIFORM SIGN LAK-449	[4FF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F1, 0x0021 };
    uint32_t const ces[9] = { 0x4FF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_360)
{
    // 124F1 003F;	
    // (𒓱) CUNEIFORM SIGN LAK-449	[4FF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F1, 0x003F };
    uint32_t const ces[9] = { 0x4FF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_361)
{
    // 124F1 0061;	
    // (𒓱) CUNEIFORM SIGN LAK-449	[4FF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F1, 0x0061 };
    uint32_t const ces[9] = { 0x4FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_362)
{
    // 124F1 0041;	
    // (𒓱) CUNEIFORM SIGN LAK-449	[4FF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F1, 0x0041 };
    uint32_t const ces[9] = { 0x4FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_363)
{
    // 124F1 0062;	
    // (𒓱) CUNEIFORM SIGN LAK-449	[4FF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F1, 0x0062 };
    uint32_t const ces[9] = { 0x4FF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_364)
{
    // 124F2 0021;	
    // (𒓲) CUNEIFORM SIGN LAK-449 TIMES GU	[4FF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F2, 0x0021 };
    uint32_t const ces[9] = { 0x4FF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_365)
{
    // 124F2 003F;	
    // (𒓲) CUNEIFORM SIGN LAK-449 TIMES GU	[4FF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F2, 0x003F };
    uint32_t const ces[9] = { 0x4FF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_366)
{
    // 124F2 0061;	
    // (𒓲) CUNEIFORM SIGN LAK-449 TIMES GU	[4FF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F2, 0x0061 };
    uint32_t const ces[9] = { 0x4FF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_367)
{
    // 124F2 0041;	
    // (𒓲) CUNEIFORM SIGN LAK-449 TIMES GU	[4FF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F2, 0x0041 };
    uint32_t const ces[9] = { 0x4FF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_368)
{
    // 124F2 0062;	
    // (𒓲) CUNEIFORM SIGN LAK-449 TIMES GU	[4FF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F2, 0x0062 };
    uint32_t const ces[9] = { 0x4FF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_369)
{
    // 124F3 0021;	
    // (𒓳) CUNEIFORM SIGN LAK-449 TIMES IGI	[4FF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F3, 0x0021 };
    uint32_t const ces[9] = { 0x4FF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_370)
{
    // 124F3 003F;	
    // (𒓳) CUNEIFORM SIGN LAK-449 TIMES IGI	[4FF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F3, 0x003F };
    uint32_t const ces[9] = { 0x4FF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_371)
{
    // 124F3 0061;	
    // (𒓳) CUNEIFORM SIGN LAK-449 TIMES IGI	[4FF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F3, 0x0061 };
    uint32_t const ces[9] = { 0x4FF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_372)
{
    // 124F3 0041;	
    // (𒓳) CUNEIFORM SIGN LAK-449 TIMES IGI	[4FF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F3, 0x0041 };
    uint32_t const ces[9] = { 0x4FF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_373)
{
    // 124F3 0062;	
    // (𒓳) CUNEIFORM SIGN LAK-449 TIMES IGI	[4FF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F3, 0x0062 };
    uint32_t const ces[9] = { 0x4FF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_374)
{
    // 124F4 0021;	
    // (𒓴) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3	[4FFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F4, 0x0021 };
    uint32_t const ces[9] = { 0x4FFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_375)
{
    // 124F4 003F;	
    // (𒓴) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3	[4FFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F4, 0x003F };
    uint32_t const ces[9] = { 0x4FFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_376)
{
    // 124F4 0061;	
    // (𒓴) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3	[4FFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F4, 0x0061 };
    uint32_t const ces[9] = { 0x4FFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_377)
{
    // 124F4 0041;	
    // (𒓴) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3	[4FFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F4, 0x0041 };
    uint32_t const ces[9] = { 0x4FFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_378)
{
    // 124F4 0062;	
    // (𒓴) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3	[4FFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F4, 0x0062 };
    uint32_t const ces[9] = { 0x4FFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_379)
{
    // 124F5 0021;	
    // (𒓵) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3	[4FFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F5, 0x0021 };
    uint32_t const ces[9] = { 0x4FFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_380)
{
    // 124F5 003F;	
    // (𒓵) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3	[4FFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F5, 0x003F };
    uint32_t const ces[9] = { 0x4FFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_381)
{
    // 124F5 0061;	
    // (𒓵) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3	[4FFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F5, 0x0061 };
    uint32_t const ces[9] = { 0x4FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_382)
{
    // 124F5 0041;	
    // (𒓵) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3	[4FFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F5, 0x0041 };
    uint32_t const ces[9] = { 0x4FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_383)
{
    // 124F5 0062;	
    // (𒓵) CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3	[4FFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F5, 0x0062 };
    uint32_t const ces[9] = { 0x4FFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_384)
{
    // 124F6 0021;	
    // (𒓶) CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA	[4FFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F6, 0x0021 };
    uint32_t const ces[9] = { 0x4FFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_385)
{
    // 124F6 003F;	
    // (𒓶) CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA	[4FFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F6, 0x003F };
    uint32_t const ces[9] = { 0x4FFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_386)
{
    // 124F6 0061;	
    // (𒓶) CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA	[4FFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F6, 0x0061 };
    uint32_t const ces[9] = { 0x4FFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_387)
{
    // 124F6 0041;	
    // (𒓶) CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA	[4FFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F6, 0x0041 };
    uint32_t const ces[9] = { 0x4FFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_388)
{
    // 124F6 0062;	
    // (𒓶) CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA	[4FFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F6, 0x0062 };
    uint32_t const ces[9] = { 0x4FFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_389)
{
    // 124F7 0021;	
    // (𒓷) CUNEIFORM SIGN LAK-450	[4FFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F7, 0x0021 };
    uint32_t const ces[9] = { 0x4FFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_390)
{
    // 124F7 003F;	
    // (𒓷) CUNEIFORM SIGN LAK-450	[4FFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F7, 0x003F };
    uint32_t const ces[9] = { 0x4FFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_391)
{
    // 124F7 0061;	
    // (𒓷) CUNEIFORM SIGN LAK-450	[4FFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F7, 0x0061 };
    uint32_t const ces[9] = { 0x4FFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_392)
{
    // 124F7 0041;	
    // (𒓷) CUNEIFORM SIGN LAK-450	[4FFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F7, 0x0041 };
    uint32_t const ces[9] = { 0x4FFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_393)
{
    // 124F7 0062;	
    // (𒓷) CUNEIFORM SIGN LAK-450	[4FFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F7, 0x0062 };
    uint32_t const ces[9] = { 0x4FFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_394)
{
    // 124F8 0021;	
    // (𒓸) CUNEIFORM SIGN LAK-457	[4FFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F8, 0x0021 };
    uint32_t const ces[9] = { 0x4FFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_395)
{
    // 124F8 003F;	
    // (𒓸) CUNEIFORM SIGN LAK-457	[4FFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F8, 0x003F };
    uint32_t const ces[9] = { 0x4FFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_396)
{
    // 124F8 0061;	
    // (𒓸) CUNEIFORM SIGN LAK-457	[4FFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F8, 0x0061 };
    uint32_t const ces[9] = { 0x4FFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_397)
{
    // 124F8 0041;	
    // (𒓸) CUNEIFORM SIGN LAK-457	[4FFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F8, 0x0041 };
    uint32_t const ces[9] = { 0x4FFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_398)
{
    // 124F8 0062;	
    // (𒓸) CUNEIFORM SIGN LAK-457	[4FFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F8, 0x0062 };
    uint32_t const ces[9] = { 0x4FFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_399)
{
    // 124F9 0021;	
    // (𒓹) CUNEIFORM SIGN LAK-470	[4FFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F9, 0x0021 };
    uint32_t const ces[9] = { 0x4FFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_400)
{
    // 124F9 003F;	
    // (𒓹) CUNEIFORM SIGN LAK-470	[4FFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F9, 0x003F };
    uint32_t const ces[9] = { 0x4FFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_401)
{
    // 124F9 0061;	
    // (𒓹) CUNEIFORM SIGN LAK-470	[4FFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F9, 0x0061 };
    uint32_t const ces[9] = { 0x4FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_402)
{
    // 124F9 0041;	
    // (𒓹) CUNEIFORM SIGN LAK-470	[4FFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124F9, 0x0041 };
    uint32_t const ces[9] = { 0x4FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_403)
{
    // 124F9 0062;	
    // (𒓹) CUNEIFORM SIGN LAK-470	[4FFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124F9, 0x0062 };
    uint32_t const ces[9] = { 0x4FFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_404)
{
    // 124FA 0021;	
    // (𒓺) CUNEIFORM SIGN LAK-483	[5000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FA, 0x0021 };
    uint32_t const ces[9] = { 0x5000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_405)
{
    // 124FA 003F;	
    // (𒓺) CUNEIFORM SIGN LAK-483	[5000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FA, 0x003F };
    uint32_t const ces[9] = { 0x5000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_406)
{
    // 124FA 0061;	
    // (𒓺) CUNEIFORM SIGN LAK-483	[5000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FA, 0x0061 };
    uint32_t const ces[9] = { 0x5000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_407)
{
    // 124FA 0041;	
    // (𒓺) CUNEIFORM SIGN LAK-483	[5000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FA, 0x0041 };
    uint32_t const ces[9] = { 0x5000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_408)
{
    // 124FA 0062;	
    // (𒓺) CUNEIFORM SIGN LAK-483	[5000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FA, 0x0062 };
    uint32_t const ces[9] = { 0x5000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_409)
{
    // 124FB 0021;	
    // (𒓻) CUNEIFORM SIGN LAK-490	[5001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FB, 0x0021 };
    uint32_t const ces[9] = { 0x5001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_410)
{
    // 124FB 003F;	
    // (𒓻) CUNEIFORM SIGN LAK-490	[5001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FB, 0x003F };
    uint32_t const ces[9] = { 0x5001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_411)
{
    // 124FB 0061;	
    // (𒓻) CUNEIFORM SIGN LAK-490	[5001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FB, 0x0061 };
    uint32_t const ces[9] = { 0x5001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_412)
{
    // 124FB 0041;	
    // (𒓻) CUNEIFORM SIGN LAK-490	[5001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FB, 0x0041 };
    uint32_t const ces[9] = { 0x5001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_413)
{
    // 124FB 0062;	
    // (𒓻) CUNEIFORM SIGN LAK-490	[5001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FB, 0x0062 };
    uint32_t const ces[9] = { 0x5001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_414)
{
    // 124FC 0021;	
    // (𒓼) CUNEIFORM SIGN LAK-492	[5002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FC, 0x0021 };
    uint32_t const ces[9] = { 0x5002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_415)
{
    // 124FC 003F;	
    // (𒓼) CUNEIFORM SIGN LAK-492	[5002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FC, 0x003F };
    uint32_t const ces[9] = { 0x5002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_416)
{
    // 124FC 0061;	
    // (𒓼) CUNEIFORM SIGN LAK-492	[5002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FC, 0x0061 };
    uint32_t const ces[9] = { 0x5002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_417)
{
    // 124FC 0041;	
    // (𒓼) CUNEIFORM SIGN LAK-492	[5002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FC, 0x0041 };
    uint32_t const ces[9] = { 0x5002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_418)
{
    // 124FC 0062;	
    // (𒓼) CUNEIFORM SIGN LAK-492	[5002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FC, 0x0062 };
    uint32_t const ces[9] = { 0x5002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_419)
{
    // 124FD 0021;	
    // (𒓽) CUNEIFORM SIGN LAK-493	[5003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FD, 0x0021 };
    uint32_t const ces[9] = { 0x5003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_420)
{
    // 124FD 003F;	
    // (𒓽) CUNEIFORM SIGN LAK-493	[5003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FD, 0x003F };
    uint32_t const ces[9] = { 0x5003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_421)
{
    // 124FD 0061;	
    // (𒓽) CUNEIFORM SIGN LAK-493	[5003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FD, 0x0061 };
    uint32_t const ces[9] = { 0x5003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_422)
{
    // 124FD 0041;	
    // (𒓽) CUNEIFORM SIGN LAK-493	[5003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FD, 0x0041 };
    uint32_t const ces[9] = { 0x5003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_423)
{
    // 124FD 0062;	
    // (𒓽) CUNEIFORM SIGN LAK-493	[5003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FD, 0x0062 };
    uint32_t const ces[9] = { 0x5003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_424)
{
    // 124FE 0021;	
    // (𒓾) CUNEIFORM SIGN LAK-495	[5004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FE, 0x0021 };
    uint32_t const ces[9] = { 0x5004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_425)
{
    // 124FE 003F;	
    // (𒓾) CUNEIFORM SIGN LAK-495	[5004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FE, 0x003F };
    uint32_t const ces[9] = { 0x5004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_426)
{
    // 124FE 0061;	
    // (𒓾) CUNEIFORM SIGN LAK-495	[5004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FE, 0x0061 };
    uint32_t const ces[9] = { 0x5004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_427)
{
    // 124FE 0041;	
    // (𒓾) CUNEIFORM SIGN LAK-495	[5004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FE, 0x0041 };
    uint32_t const ces[9] = { 0x5004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_428)
{
    // 124FE 0062;	
    // (𒓾) CUNEIFORM SIGN LAK-495	[5004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FE, 0x0062 };
    uint32_t const ces[9] = { 0x5004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_429)
{
    // 124FF 0021;	
    // (𒓿) CUNEIFORM SIGN LAK-550	[5005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FF, 0x0021 };
    uint32_t const ces[9] = { 0x5005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_430)
{
    // 124FF 003F;	
    // (𒓿) CUNEIFORM SIGN LAK-550	[5005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FF, 0x003F };
    uint32_t const ces[9] = { 0x5005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_431)
{
    // 124FF 0061;	
    // (𒓿) CUNEIFORM SIGN LAK-550	[5005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FF, 0x0061 };
    uint32_t const ces[9] = { 0x5005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_432)
{
    // 124FF 0041;	
    // (𒓿) CUNEIFORM SIGN LAK-550	[5005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124FF, 0x0041 };
    uint32_t const ces[9] = { 0x5005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_433)
{
    // 124FF 0062;	
    // (𒓿) CUNEIFORM SIGN LAK-550	[5005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124FF, 0x0062 };
    uint32_t const ces[9] = { 0x5005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_434)
{
    // 12500 0021;	
    // (𒔀) CUNEIFORM SIGN LAK-608	[5006 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12500, 0x0021 };
    uint32_t const ces[9] = { 0x5006, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_435)
{
    // 12500 003F;	
    // (𒔀) CUNEIFORM SIGN LAK-608	[5006 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12500, 0x003F };
    uint32_t const ces[9] = { 0x5006, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_436)
{
    // 12500 0061;	
    // (𒔀) CUNEIFORM SIGN LAK-608	[5006 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12500, 0x0061 };
    uint32_t const ces[9] = { 0x5006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_437)
{
    // 12500 0041;	
    // (𒔀) CUNEIFORM SIGN LAK-608	[5006 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12500, 0x0041 };
    uint32_t const ces[9] = { 0x5006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_438)
{
    // 12500 0062;	
    // (𒔀) CUNEIFORM SIGN LAK-608	[5006 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12500, 0x0062 };
    uint32_t const ces[9] = { 0x5006, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_439)
{
    // 12501 0021;	
    // (𒔁) CUNEIFORM SIGN LAK-617	[5007 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12501, 0x0021 };
    uint32_t const ces[9] = { 0x5007, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_440)
{
    // 12501 003F;	
    // (𒔁) CUNEIFORM SIGN LAK-617	[5007 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12501, 0x003F };
    uint32_t const ces[9] = { 0x5007, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_441)
{
    // 12501 0061;	
    // (𒔁) CUNEIFORM SIGN LAK-617	[5007 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12501, 0x0061 };
    uint32_t const ces[9] = { 0x5007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_442)
{
    // 12501 0041;	
    // (𒔁) CUNEIFORM SIGN LAK-617	[5007 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12501, 0x0041 };
    uint32_t const ces[9] = { 0x5007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_443)
{
    // 12501 0062;	
    // (𒔁) CUNEIFORM SIGN LAK-617	[5007 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12501, 0x0062 };
    uint32_t const ces[9] = { 0x5007, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_444)
{
    // 12502 0021;	
    // (𒔂) CUNEIFORM SIGN LAK-617 TIMES ASH	[5008 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12502, 0x0021 };
    uint32_t const ces[9] = { 0x5008, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_445)
{
    // 12502 003F;	
    // (𒔂) CUNEIFORM SIGN LAK-617 TIMES ASH	[5008 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12502, 0x003F };
    uint32_t const ces[9] = { 0x5008, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_446)
{
    // 12502 0061;	
    // (𒔂) CUNEIFORM SIGN LAK-617 TIMES ASH	[5008 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12502, 0x0061 };
    uint32_t const ces[9] = { 0x5008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_447)
{
    // 12502 0041;	
    // (𒔂) CUNEIFORM SIGN LAK-617 TIMES ASH	[5008 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12502, 0x0041 };
    uint32_t const ces[9] = { 0x5008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_448)
{
    // 12502 0062;	
    // (𒔂) CUNEIFORM SIGN LAK-617 TIMES ASH	[5008 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12502, 0x0062 };
    uint32_t const ces[9] = { 0x5008, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_449)
{
    // 12503 0021;	
    // (𒔃) CUNEIFORM SIGN LAK-617 TIMES BAD	[5009 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12503, 0x0021 };
    uint32_t const ces[9] = { 0x5009, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_450)
{
    // 12503 003F;	
    // (𒔃) CUNEIFORM SIGN LAK-617 TIMES BAD	[5009 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12503, 0x003F };
    uint32_t const ces[9] = { 0x5009, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_451)
{
    // 12503 0061;	
    // (𒔃) CUNEIFORM SIGN LAK-617 TIMES BAD	[5009 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12503, 0x0061 };
    uint32_t const ces[9] = { 0x5009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_452)
{
    // 12503 0041;	
    // (𒔃) CUNEIFORM SIGN LAK-617 TIMES BAD	[5009 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12503, 0x0041 };
    uint32_t const ces[9] = { 0x5009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_453)
{
    // 12503 0062;	
    // (𒔃) CUNEIFORM SIGN LAK-617 TIMES BAD	[5009 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12503, 0x0062 };
    uint32_t const ces[9] = { 0x5009, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_454)
{
    // 12504 0021;	
    // (𒔄) CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU	[500A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12504, 0x0021 };
    uint32_t const ces[9] = { 0x500A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_455)
{
    // 12504 003F;	
    // (𒔄) CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU	[500A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12504, 0x003F };
    uint32_t const ces[9] = { 0x500A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_456)
{
    // 12504 0061;	
    // (𒔄) CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU	[500A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12504, 0x0061 };
    uint32_t const ces[9] = { 0x500A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_457)
{
    // 12504 0041;	
    // (𒔄) CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU	[500A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12504, 0x0041 };
    uint32_t const ces[9] = { 0x500A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_458)
{
    // 12504 0062;	
    // (𒔄) CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU	[500A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12504, 0x0062 };
    uint32_t const ces[9] = { 0x500A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_459)
{
    // 12505 0021;	
    // (𒔅) CUNEIFORM SIGN LAK-617 TIMES KU3	[500B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12505, 0x0021 };
    uint32_t const ces[9] = { 0x500B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_460)
{
    // 12505 003F;	
    // (𒔅) CUNEIFORM SIGN LAK-617 TIMES KU3	[500B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12505, 0x003F };
    uint32_t const ces[9] = { 0x500B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_461)
{
    // 12505 0061;	
    // (𒔅) CUNEIFORM SIGN LAK-617 TIMES KU3	[500B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12505, 0x0061 };
    uint32_t const ces[9] = { 0x500B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_462)
{
    // 12505 0041;	
    // (𒔅) CUNEIFORM SIGN LAK-617 TIMES KU3	[500B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12505, 0x0041 };
    uint32_t const ces[9] = { 0x500B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_463)
{
    // 12505 0062;	
    // (𒔅) CUNEIFORM SIGN LAK-617 TIMES KU3	[500B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12505, 0x0062 };
    uint32_t const ces[9] = { 0x500B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_464)
{
    // 12506 0021;	
    // (𒔆) CUNEIFORM SIGN LAK-617 TIMES LA	[500C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12506, 0x0021 };
    uint32_t const ces[9] = { 0x500C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_465)
{
    // 12506 003F;	
    // (𒔆) CUNEIFORM SIGN LAK-617 TIMES LA	[500C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12506, 0x003F };
    uint32_t const ces[9] = { 0x500C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_466)
{
    // 12506 0061;	
    // (𒔆) CUNEIFORM SIGN LAK-617 TIMES LA	[500C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12506, 0x0061 };
    uint32_t const ces[9] = { 0x500C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_467)
{
    // 12506 0041;	
    // (𒔆) CUNEIFORM SIGN LAK-617 TIMES LA	[500C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12506, 0x0041 };
    uint32_t const ces[9] = { 0x500C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_468)
{
    // 12506 0062;	
    // (𒔆) CUNEIFORM SIGN LAK-617 TIMES LA	[500C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12506, 0x0062 };
    uint32_t const ces[9] = { 0x500C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_469)
{
    // 12507 0021;	
    // (𒔇) CUNEIFORM SIGN LAK-617 TIMES TAR	[500D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12507, 0x0021 };
    uint32_t const ces[9] = { 0x500D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_470)
{
    // 12507 003F;	
    // (𒔇) CUNEIFORM SIGN LAK-617 TIMES TAR	[500D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12507, 0x003F };
    uint32_t const ces[9] = { 0x500D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_471)
{
    // 12507 0061;	
    // (𒔇) CUNEIFORM SIGN LAK-617 TIMES TAR	[500D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12507, 0x0061 };
    uint32_t const ces[9] = { 0x500D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_472)
{
    // 12507 0041;	
    // (𒔇) CUNEIFORM SIGN LAK-617 TIMES TAR	[500D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12507, 0x0041 };
    uint32_t const ces[9] = { 0x500D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_473)
{
    // 12507 0062;	
    // (𒔇) CUNEIFORM SIGN LAK-617 TIMES TAR	[500D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12507, 0x0062 };
    uint32_t const ces[9] = { 0x500D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_474)
{
    // 12508 0021;	
    // (𒔈) CUNEIFORM SIGN LAK-617 TIMES TE	[500E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12508, 0x0021 };
    uint32_t const ces[9] = { 0x500E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_475)
{
    // 12508 003F;	
    // (𒔈) CUNEIFORM SIGN LAK-617 TIMES TE	[500E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12508, 0x003F };
    uint32_t const ces[9] = { 0x500E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_476)
{
    // 12508 0061;	
    // (𒔈) CUNEIFORM SIGN LAK-617 TIMES TE	[500E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12508, 0x0061 };
    uint32_t const ces[9] = { 0x500E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_477)
{
    // 12508 0041;	
    // (𒔈) CUNEIFORM SIGN LAK-617 TIMES TE	[500E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12508, 0x0041 };
    uint32_t const ces[9] = { 0x500E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_478)
{
    // 12508 0062;	
    // (𒔈) CUNEIFORM SIGN LAK-617 TIMES TE	[500E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12508, 0x0062 };
    uint32_t const ces[9] = { 0x500E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_479)
{
    // 12509 0021;	
    // (𒔉) CUNEIFORM SIGN LAK-617 TIMES U2	[500F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12509, 0x0021 };
    uint32_t const ces[9] = { 0x500F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_480)
{
    // 12509 003F;	
    // (𒔉) CUNEIFORM SIGN LAK-617 TIMES U2	[500F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12509, 0x003F };
    uint32_t const ces[9] = { 0x500F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_481)
{
    // 12509 0061;	
    // (𒔉) CUNEIFORM SIGN LAK-617 TIMES U2	[500F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12509, 0x0061 };
    uint32_t const ces[9] = { 0x500F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_482)
{
    // 12509 0041;	
    // (𒔉) CUNEIFORM SIGN LAK-617 TIMES U2	[500F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12509, 0x0041 };
    uint32_t const ces[9] = { 0x500F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_483)
{
    // 12509 0062;	
    // (𒔉) CUNEIFORM SIGN LAK-617 TIMES U2	[500F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12509, 0x0062 };
    uint32_t const ces[9] = { 0x500F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_484)
{
    // 1250A 0021;	
    // (𒔊) CUNEIFORM SIGN LAK-617 TIMES UD	[5010 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250A, 0x0021 };
    uint32_t const ces[9] = { 0x5010, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_485)
{
    // 1250A 003F;	
    // (𒔊) CUNEIFORM SIGN LAK-617 TIMES UD	[5010 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250A, 0x003F };
    uint32_t const ces[9] = { 0x5010, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_486)
{
    // 1250A 0061;	
    // (𒔊) CUNEIFORM SIGN LAK-617 TIMES UD	[5010 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250A, 0x0061 };
    uint32_t const ces[9] = { 0x5010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_487)
{
    // 1250A 0041;	
    // (𒔊) CUNEIFORM SIGN LAK-617 TIMES UD	[5010 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1250A, 0x0041 };
    uint32_t const ces[9] = { 0x5010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_488)
{
    // 1250A 0062;	
    // (𒔊) CUNEIFORM SIGN LAK-617 TIMES UD	[5010 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250A, 0x0062 };
    uint32_t const ces[9] = { 0x5010, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_489)
{
    // 1250B 0021;	
    // (𒔋) CUNEIFORM SIGN LAK-617 TIMES URUDA	[5011 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250B, 0x0021 };
    uint32_t const ces[9] = { 0x5011, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_490)
{
    // 1250B 003F;	
    // (𒔋) CUNEIFORM SIGN LAK-617 TIMES URUDA	[5011 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250B, 0x003F };
    uint32_t const ces[9] = { 0x5011, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_491)
{
    // 1250B 0061;	
    // (𒔋) CUNEIFORM SIGN LAK-617 TIMES URUDA	[5011 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250B, 0x0061 };
    uint32_t const ces[9] = { 0x5011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_492)
{
    // 1250B 0041;	
    // (𒔋) CUNEIFORM SIGN LAK-617 TIMES URUDA	[5011 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1250B, 0x0041 };
    uint32_t const ces[9] = { 0x5011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_493)
{
    // 1250B 0062;	
    // (𒔋) CUNEIFORM SIGN LAK-617 TIMES URUDA	[5011 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250B, 0x0062 };
    uint32_t const ces[9] = { 0x5011, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_494)
{
    // 1250C 0021;	
    // (𒔌) CUNEIFORM SIGN LAK-636	[5012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250C, 0x0021 };
    uint32_t const ces[9] = { 0x5012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_495)
{
    // 1250C 003F;	
    // (𒔌) CUNEIFORM SIGN LAK-636	[5012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250C, 0x003F };
    uint32_t const ces[9] = { 0x5012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_496)
{
    // 1250C 0061;	
    // (𒔌) CUNEIFORM SIGN LAK-636	[5012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250C, 0x0061 };
    uint32_t const ces[9] = { 0x5012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_497)
{
    // 1250C 0041;	
    // (𒔌) CUNEIFORM SIGN LAK-636	[5012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1250C, 0x0041 };
    uint32_t const ces[9] = { 0x5012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_498)
{
    // 1250C 0062;	
    // (𒔌) CUNEIFORM SIGN LAK-636	[5012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250C, 0x0062 };
    uint32_t const ces[9] = { 0x5012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_295_499)
{
    // 1250D 0021;	
    // (𒔍) CUNEIFORM SIGN LAK-648	[5013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250D, 0x0021 };
    uint32_t const ces[9] = { 0x5013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

