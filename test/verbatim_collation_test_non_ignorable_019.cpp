// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_019_000)
{
    // FBBA 003F;	
    // (‎‎﮺‎‎) ARABIC SYMBOL FOUR DOTS ABOVE	[0520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBA, 0x003F };
    uint32_t const ces[9] = { 0x0520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_001)
{
    // FBBA 0061;	
    // (‎‎﮺‎‎) ARABIC SYMBOL FOUR DOTS ABOVE	[0520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBA, 0x0061 };
    uint32_t const ces[9] = { 0x0520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_002)
{
    // FBBA 0041;	
    // (‎‎﮺‎‎) ARABIC SYMBOL FOUR DOTS ABOVE	[0520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBA, 0x0041 };
    uint32_t const ces[9] = { 0x0520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_003)
{
    // FBBA 0062;	
    // (‎‎﮺‎‎) ARABIC SYMBOL FOUR DOTS ABOVE	[0520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBA, 0x0062 };
    uint32_t const ces[9] = { 0x0520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_004)
{
    // FBBB 0021;	
    // (‎‎﮻‎‎) ARABIC SYMBOL FOUR DOTS BELOW	[0521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBB, 0x0021 };
    uint32_t const ces[9] = { 0x0521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_005)
{
    // FBBB 003F;	
    // (‎‎﮻‎‎) ARABIC SYMBOL FOUR DOTS BELOW	[0521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBB, 0x003F };
    uint32_t const ces[9] = { 0x0521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_006)
{
    // FBBB 0061;	
    // (‎‎﮻‎‎) ARABIC SYMBOL FOUR DOTS BELOW	[0521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBB, 0x0061 };
    uint32_t const ces[9] = { 0x0521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_007)
{
    // FBBB 0041;	
    // (‎‎﮻‎‎) ARABIC SYMBOL FOUR DOTS BELOW	[0521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBB, 0x0041 };
    uint32_t const ces[9] = { 0x0521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_008)
{
    // FBBB 0062;	
    // (‎‎﮻‎‎) ARABIC SYMBOL FOUR DOTS BELOW	[0521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBB, 0x0062 };
    uint32_t const ces[9] = { 0x0521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_009)
{
    // FBBC 0021;	
    // (‎‎﮼‎‎) ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW	[0522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBC, 0x0021 };
    uint32_t const ces[9] = { 0x0522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_010)
{
    // FBBC 003F;	
    // (‎‎﮼‎‎) ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW	[0522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBC, 0x003F };
    uint32_t const ces[9] = { 0x0522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_011)
{
    // FBBC 0061;	
    // (‎‎﮼‎‎) ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW	[0522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBC, 0x0061 };
    uint32_t const ces[9] = { 0x0522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_012)
{
    // FBBC 0041;	
    // (‎‎﮼‎‎) ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW	[0522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBC, 0x0041 };
    uint32_t const ces[9] = { 0x0522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_013)
{
    // FBBC 0062;	
    // (‎‎﮼‎‎) ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW	[0522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBC, 0x0062 };
    uint32_t const ces[9] = { 0x0522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_014)
{
    // FBBD 0021;	
    // (‎‎﮽‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE	[0523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBD, 0x0021 };
    uint32_t const ces[9] = { 0x0523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_015)
{
    // FBBD 003F;	
    // (‎‎﮽‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE	[0523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBD, 0x003F };
    uint32_t const ces[9] = { 0x0523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_016)
{
    // FBBD 0061;	
    // (‎‎﮽‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE	[0523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBD, 0x0061 };
    uint32_t const ces[9] = { 0x0523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_017)
{
    // FBBD 0041;	
    // (‎‎﮽‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE	[0523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBD, 0x0041 };
    uint32_t const ces[9] = { 0x0523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_018)
{
    // FBBD 0062;	
    // (‎‎﮽‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE	[0523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBD, 0x0062 };
    uint32_t const ces[9] = { 0x0523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_019)
{
    // FBBE 0021;	
    // (‎‎﮾‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY BELOW	[0524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBE, 0x0021 };
    uint32_t const ces[9] = { 0x0524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_020)
{
    // FBBE 003F;	
    // (‎‎﮾‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY BELOW	[0524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBE, 0x003F };
    uint32_t const ces[9] = { 0x0524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_021)
{
    // FBBE 0061;	
    // (‎‎﮾‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY BELOW	[0524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBE, 0x0061 };
    uint32_t const ces[9] = { 0x0524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_022)
{
    // FBBE 0041;	
    // (‎‎﮾‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY BELOW	[0524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBE, 0x0041 };
    uint32_t const ces[9] = { 0x0524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_023)
{
    // FBBE 0062;	
    // (‎‎﮾‎‎) ARABIC SYMBOL TWO DOTS VERTICALLY BELOW	[0524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBE, 0x0062 };
    uint32_t const ces[9] = { 0x0524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_024)
{
    // FBBF 0021;	
    // (‎‎﮿‎‎) ARABIC SYMBOL RING	[0525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBF, 0x0021 };
    uint32_t const ces[9] = { 0x0525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_025)
{
    // FBBF 003F;	
    // (‎‎﮿‎‎) ARABIC SYMBOL RING	[0525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBF, 0x003F };
    uint32_t const ces[9] = { 0x0525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_026)
{
    // FBBF 0061;	
    // (‎‎﮿‎‎) ARABIC SYMBOL RING	[0525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBF, 0x0061 };
    uint32_t const ces[9] = { 0x0525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_027)
{
    // FBBF 0041;	
    // (‎‎﮿‎‎) ARABIC SYMBOL RING	[0525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBBF, 0x0041 };
    uint32_t const ces[9] = { 0x0525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_028)
{
    // FBBF 0062;	
    // (‎‎﮿‎‎) ARABIC SYMBOL RING	[0525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBBF, 0x0062 };
    uint32_t const ces[9] = { 0x0525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_029)
{
    // FBC0 0021;	
    // (‎‎﯀‎‎) ARABIC SYMBOL SMALL TAH ABOVE	[0526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC0, 0x0021 };
    uint32_t const ces[9] = { 0x0526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_030)
{
    // FBC0 003F;	
    // (‎‎﯀‎‎) ARABIC SYMBOL SMALL TAH ABOVE	[0526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC0, 0x003F };
    uint32_t const ces[9] = { 0x0526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_031)
{
    // FBC0 0061;	
    // (‎‎﯀‎‎) ARABIC SYMBOL SMALL TAH ABOVE	[0526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC0, 0x0061 };
    uint32_t const ces[9] = { 0x0526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_032)
{
    // FBC0 0041;	
    // (‎‎﯀‎‎) ARABIC SYMBOL SMALL TAH ABOVE	[0526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBC0, 0x0041 };
    uint32_t const ces[9] = { 0x0526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_033)
{
    // FBC0 0062;	
    // (‎‎﯀‎‎) ARABIC SYMBOL SMALL TAH ABOVE	[0526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC0, 0x0062 };
    uint32_t const ces[9] = { 0x0526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_034)
{
    // FBC1 0021;	
    // (‎‎﯁‎‎) ARABIC SYMBOL SMALL TAH BELOW	[0527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC1, 0x0021 };
    uint32_t const ces[9] = { 0x0527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_035)
{
    // FBC1 003F;	
    // (‎‎﯁‎‎) ARABIC SYMBOL SMALL TAH BELOW	[0527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC1, 0x003F };
    uint32_t const ces[9] = { 0x0527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_036)
{
    // FBC1 0061;	
    // (‎‎﯁‎‎) ARABIC SYMBOL SMALL TAH BELOW	[0527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC1, 0x0061 };
    uint32_t const ces[9] = { 0x0527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_037)
{
    // FBC1 0041;	
    // (‎‎﯁‎‎) ARABIC SYMBOL SMALL TAH BELOW	[0527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFBC1, 0x0041 };
    uint32_t const ces[9] = { 0x0527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_038)
{
    // FBC1 0062;	
    // (‎‎﯁‎‎) ARABIC SYMBOL SMALL TAH BELOW	[0527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFBC1, 0x0062 };
    uint32_t const ces[9] = { 0x0527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_039)
{
    // 07F6 0021;	
    // (߶) NKO SYMBOL OO DENNEN	[0528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F6, 0x0021 };
    uint32_t const ces[9] = { 0x0528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_040)
{
    // 07F6 003F;	
    // (߶) NKO SYMBOL OO DENNEN	[0528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F6, 0x003F };
    uint32_t const ces[9] = { 0x0528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_041)
{
    // 07F6 0061;	
    // (߶) NKO SYMBOL OO DENNEN	[0528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F6, 0x0061 };
    uint32_t const ces[9] = { 0x0528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_042)
{
    // 07F6 0041;	
    // (߶) NKO SYMBOL OO DENNEN	[0528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07F6, 0x0041 };
    uint32_t const ces[9] = { 0x0528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_043)
{
    // 07F6 0062;	
    // (߶) NKO SYMBOL OO DENNEN	[0528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F6, 0x0062 };
    uint32_t const ces[9] = { 0x0528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_044)
{
    // 09FA 0021;	
    // (৺) BENGALI ISSHAR	[0529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FA, 0x0021 };
    uint32_t const ces[9] = { 0x0529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_045)
{
    // 09FA 003F;	
    // (৺) BENGALI ISSHAR	[0529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FA, 0x003F };
    uint32_t const ces[9] = { 0x0529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_046)
{
    // 09FA 0061;	
    // (৺) BENGALI ISSHAR	[0529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FA, 0x0061 };
    uint32_t const ces[9] = { 0x0529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_047)
{
    // 09FA 0041;	
    // (৺) BENGALI ISSHAR	[0529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09FA, 0x0041 };
    uint32_t const ces[9] = { 0x0529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_048)
{
    // 09FA 0062;	
    // (৺) BENGALI ISSHAR	[0529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FA, 0x0062 };
    uint32_t const ces[9] = { 0x0529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_049)
{
    // 0B70 0021;	
    // (୰) ORIYA ISSHAR	[052A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B70, 0x0021 };
    uint32_t const ces[9] = { 0x052A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_050)
{
    // 0B70 003F;	
    // (୰) ORIYA ISSHAR	[052A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B70, 0x003F };
    uint32_t const ces[9] = { 0x052A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_051)
{
    // 0B70 0061;	
    // (୰) ORIYA ISSHAR	[052A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B70, 0x0061 };
    uint32_t const ces[9] = { 0x052A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_052)
{
    // 0B70 0041;	
    // (୰) ORIYA ISSHAR	[052A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B70, 0x0041 };
    uint32_t const ces[9] = { 0x052A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_053)
{
    // 0B70 0062;	
    // (୰) ORIYA ISSHAR	[052A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B70, 0x0062 };
    uint32_t const ces[9] = { 0x052A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_054)
{
    // 0BF3 0021;	
    // (௳) TAMIL DAY SIGN	[052B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF3, 0x0021 };
    uint32_t const ces[9] = { 0x052B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_055)
{
    // 0BF3 003F;	
    // (௳) TAMIL DAY SIGN	[052B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF3, 0x003F };
    uint32_t const ces[9] = { 0x052B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_056)
{
    // 0BF3 0061;	
    // (௳) TAMIL DAY SIGN	[052B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF3, 0x0061 };
    uint32_t const ces[9] = { 0x052B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_057)
{
    // 0BF3 0041;	
    // (௳) TAMIL DAY SIGN	[052B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF3, 0x0041 };
    uint32_t const ces[9] = { 0x052B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_058)
{
    // 0BF3 0062;	
    // (௳) TAMIL DAY SIGN	[052B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF3, 0x0062 };
    uint32_t const ces[9] = { 0x052B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_059)
{
    // 0BF4 0021;	
    // (௴) TAMIL MONTH SIGN	[052C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF4, 0x0021 };
    uint32_t const ces[9] = { 0x052C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_060)
{
    // 0BF4 003F;	
    // (௴) TAMIL MONTH SIGN	[052C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF4, 0x003F };
    uint32_t const ces[9] = { 0x052C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_061)
{
    // 0BF4 0061;	
    // (௴) TAMIL MONTH SIGN	[052C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF4, 0x0061 };
    uint32_t const ces[9] = { 0x052C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_062)
{
    // 0BF4 0041;	
    // (௴) TAMIL MONTH SIGN	[052C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF4, 0x0041 };
    uint32_t const ces[9] = { 0x052C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_063)
{
    // 0BF4 0062;	
    // (௴) TAMIL MONTH SIGN	[052C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF4, 0x0062 };
    uint32_t const ces[9] = { 0x052C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_064)
{
    // 0BF5 0021;	
    // (௵) TAMIL YEAR SIGN	[052D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF5, 0x0021 };
    uint32_t const ces[9] = { 0x052D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_065)
{
    // 0BF5 003F;	
    // (௵) TAMIL YEAR SIGN	[052D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF5, 0x003F };
    uint32_t const ces[9] = { 0x052D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_066)
{
    // 0BF5 0061;	
    // (௵) TAMIL YEAR SIGN	[052D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF5, 0x0061 };
    uint32_t const ces[9] = { 0x052D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_067)
{
    // 0BF5 0041;	
    // (௵) TAMIL YEAR SIGN	[052D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF5, 0x0041 };
    uint32_t const ces[9] = { 0x052D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_068)
{
    // 0BF5 0062;	
    // (௵) TAMIL YEAR SIGN	[052D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF5, 0x0062 };
    uint32_t const ces[9] = { 0x052D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_069)
{
    // 0BF6 0021;	
    // (௶) TAMIL DEBIT SIGN	[052E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF6, 0x0021 };
    uint32_t const ces[9] = { 0x052E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_070)
{
    // 0BF6 003F;	
    // (௶) TAMIL DEBIT SIGN	[052E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF6, 0x003F };
    uint32_t const ces[9] = { 0x052E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_071)
{
    // 0BF6 0061;	
    // (௶) TAMIL DEBIT SIGN	[052E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF6, 0x0061 };
    uint32_t const ces[9] = { 0x052E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_072)
{
    // 0BF6 0041;	
    // (௶) TAMIL DEBIT SIGN	[052E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF6, 0x0041 };
    uint32_t const ces[9] = { 0x052E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_073)
{
    // 0BF6 0062;	
    // (௶) TAMIL DEBIT SIGN	[052E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF6, 0x0062 };
    uint32_t const ces[9] = { 0x052E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_074)
{
    // 0BF7 0021;	
    // (௷) TAMIL CREDIT SIGN	[052F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF7, 0x0021 };
    uint32_t const ces[9] = { 0x052F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_075)
{
    // 0BF7 003F;	
    // (௷) TAMIL CREDIT SIGN	[052F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF7, 0x003F };
    uint32_t const ces[9] = { 0x052F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_076)
{
    // 0BF7 0061;	
    // (௷) TAMIL CREDIT SIGN	[052F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF7, 0x0061 };
    uint32_t const ces[9] = { 0x052F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_077)
{
    // 0BF7 0041;	
    // (௷) TAMIL CREDIT SIGN	[052F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF7, 0x0041 };
    uint32_t const ces[9] = { 0x052F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_078)
{
    // 0BF7 0062;	
    // (௷) TAMIL CREDIT SIGN	[052F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF7, 0x0062 };
    uint32_t const ces[9] = { 0x052F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_079)
{
    // 0BF8 0021;	
    // (௸) TAMIL AS ABOVE SIGN	[0530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF8, 0x0021 };
    uint32_t const ces[9] = { 0x0530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_080)
{
    // 0BF8 003F;	
    // (௸) TAMIL AS ABOVE SIGN	[0530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF8, 0x003F };
    uint32_t const ces[9] = { 0x0530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_081)
{
    // 0BF8 0061;	
    // (௸) TAMIL AS ABOVE SIGN	[0530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF8, 0x0061 };
    uint32_t const ces[9] = { 0x0530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_082)
{
    // 0BF8 0041;	
    // (௸) TAMIL AS ABOVE SIGN	[0530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF8, 0x0041 };
    uint32_t const ces[9] = { 0x0530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_083)
{
    // 0BF8 0062;	
    // (௸) TAMIL AS ABOVE SIGN	[0530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF8, 0x0062 };
    uint32_t const ces[9] = { 0x0530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_084)
{
    // 0BFA 0021;	
    // (௺) TAMIL NUMBER SIGN	[0531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BFA, 0x0021 };
    uint32_t const ces[9] = { 0x0531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_085)
{
    // 0BFA 003F;	
    // (௺) TAMIL NUMBER SIGN	[0531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BFA, 0x003F };
    uint32_t const ces[9] = { 0x0531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_086)
{
    // 0BFA 0061;	
    // (௺) TAMIL NUMBER SIGN	[0531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BFA, 0x0061 };
    uint32_t const ces[9] = { 0x0531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_087)
{
    // 0BFA 0041;	
    // (௺) TAMIL NUMBER SIGN	[0531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BFA, 0x0041 };
    uint32_t const ces[9] = { 0x0531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_088)
{
    // 0BFA 0062;	
    // (௺) TAMIL NUMBER SIGN	[0531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BFA, 0x0062 };
    uint32_t const ces[9] = { 0x0531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_089)
{
    // 0C7F 0021;	
    // (౿) TELUGU SIGN TUUMU	[0532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7F, 0x0021 };
    uint32_t const ces[9] = { 0x0532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_090)
{
    // 0C7F 003F;	
    // (౿) TELUGU SIGN TUUMU	[0532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7F, 0x003F };
    uint32_t const ces[9] = { 0x0532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_091)
{
    // 0C7F 0061;	
    // (౿) TELUGU SIGN TUUMU	[0532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7F, 0x0061 };
    uint32_t const ces[9] = { 0x0532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_092)
{
    // 0C7F 0041;	
    // (౿) TELUGU SIGN TUUMU	[0532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C7F, 0x0041 };
    uint32_t const ces[9] = { 0x0532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_093)
{
    // 0C7F 0062;	
    // (౿) TELUGU SIGN TUUMU	[0532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7F, 0x0062 };
    uint32_t const ces[9] = { 0x0532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_094)
{
    // 0D4F 0021;	
    // (൏) MALAYALAM SIGN PARA	[0533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4F, 0x0021 };
    uint32_t const ces[9] = { 0x0533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_095)
{
    // 0D4F 003F;	
    // (൏) MALAYALAM SIGN PARA	[0533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4F, 0x003F };
    uint32_t const ces[9] = { 0x0533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_096)
{
    // 0D4F 0061;	
    // (൏) MALAYALAM SIGN PARA	[0533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4F, 0x0061 };
    uint32_t const ces[9] = { 0x0533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_097)
{
    // 0D4F 0041;	
    // (൏) MALAYALAM SIGN PARA	[0533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D4F, 0x0041 };
    uint32_t const ces[9] = { 0x0533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_098)
{
    // 0D4F 0062;	
    // (൏) MALAYALAM SIGN PARA	[0533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D4F, 0x0062 };
    uint32_t const ces[9] = { 0x0533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_099)
{
    // 0D79 0021;	
    // (൹) MALAYALAM DATE MARK	[0534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D79, 0x0021 };
    uint32_t const ces[9] = { 0x0534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_100)
{
    // 0D79 003F;	
    // (൹) MALAYALAM DATE MARK	[0534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D79, 0x003F };
    uint32_t const ces[9] = { 0x0534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_101)
{
    // 0D79 0061;	
    // (൹) MALAYALAM DATE MARK	[0534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D79, 0x0061 };
    uint32_t const ces[9] = { 0x0534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_102)
{
    // 0D79 0041;	
    // (൹) MALAYALAM DATE MARK	[0534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D79, 0x0041 };
    uint32_t const ces[9] = { 0x0534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_103)
{
    // 0D79 0062;	
    // (൹) MALAYALAM DATE MARK	[0534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D79, 0x0062 };
    uint32_t const ces[9] = { 0x0534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_104)
{
    // A828 0021;	
    // (꠨) SYLOTI NAGRI POETRY MARK-1	[0535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA828, 0x0021 };
    uint32_t const ces[9] = { 0x0535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_105)
{
    // A828 003F;	
    // (꠨) SYLOTI NAGRI POETRY MARK-1	[0535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA828, 0x003F };
    uint32_t const ces[9] = { 0x0535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_106)
{
    // A828 0061;	
    // (꠨) SYLOTI NAGRI POETRY MARK-1	[0535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA828, 0x0061 };
    uint32_t const ces[9] = { 0x0535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_107)
{
    // A828 0041;	
    // (꠨) SYLOTI NAGRI POETRY MARK-1	[0535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA828, 0x0041 };
    uint32_t const ces[9] = { 0x0535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_108)
{
    // A828 0062;	
    // (꠨) SYLOTI NAGRI POETRY MARK-1	[0535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA828, 0x0062 };
    uint32_t const ces[9] = { 0x0535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_109)
{
    // A829 0021;	
    // (꠩) SYLOTI NAGRI POETRY MARK-2	[0536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA829, 0x0021 };
    uint32_t const ces[9] = { 0x0536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_110)
{
    // A829 003F;	
    // (꠩) SYLOTI NAGRI POETRY MARK-2	[0536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA829, 0x003F };
    uint32_t const ces[9] = { 0x0536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_111)
{
    // A829 0061;	
    // (꠩) SYLOTI NAGRI POETRY MARK-2	[0536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA829, 0x0061 };
    uint32_t const ces[9] = { 0x0536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_112)
{
    // A829 0041;	
    // (꠩) SYLOTI NAGRI POETRY MARK-2	[0536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA829, 0x0041 };
    uint32_t const ces[9] = { 0x0536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_113)
{
    // A829 0062;	
    // (꠩) SYLOTI NAGRI POETRY MARK-2	[0536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA829, 0x0062 };
    uint32_t const ces[9] = { 0x0536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_114)
{
    // A82A 0021;	
    // (꠪) SYLOTI NAGRI POETRY MARK-3	[0537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82A, 0x0021 };
    uint32_t const ces[9] = { 0x0537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_115)
{
    // A82A 003F;	
    // (꠪) SYLOTI NAGRI POETRY MARK-3	[0537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82A, 0x003F };
    uint32_t const ces[9] = { 0x0537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_116)
{
    // A82A 0061;	
    // (꠪) SYLOTI NAGRI POETRY MARK-3	[0537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82A, 0x0061 };
    uint32_t const ces[9] = { 0x0537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_117)
{
    // A82A 0041;	
    // (꠪) SYLOTI NAGRI POETRY MARK-3	[0537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA82A, 0x0041 };
    uint32_t const ces[9] = { 0x0537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_118)
{
    // A82A 0062;	
    // (꠪) SYLOTI NAGRI POETRY MARK-3	[0537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82A, 0x0062 };
    uint32_t const ces[9] = { 0x0537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_119)
{
    // A82B 0021;	
    // (꠫) SYLOTI NAGRI POETRY MARK-4	[0538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82B, 0x0021 };
    uint32_t const ces[9] = { 0x0538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_120)
{
    // A82B 003F;	
    // (꠫) SYLOTI NAGRI POETRY MARK-4	[0538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82B, 0x003F };
    uint32_t const ces[9] = { 0x0538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_121)
{
    // A82B 0061;	
    // (꠫) SYLOTI NAGRI POETRY MARK-4	[0538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82B, 0x0061 };
    uint32_t const ces[9] = { 0x0538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_122)
{
    // A82B 0041;	
    // (꠫) SYLOTI NAGRI POETRY MARK-4	[0538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA82B, 0x0041 };
    uint32_t const ces[9] = { 0x0538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_123)
{
    // A82B 0062;	
    // (꠫) SYLOTI NAGRI POETRY MARK-4	[0538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA82B, 0x0062 };
    uint32_t const ces[9] = { 0x0538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_124)
{
    // A836 0021;	
    // (꠶) NORTH INDIC QUARTER MARK	[0539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA836, 0x0021 };
    uint32_t const ces[9] = { 0x0539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_125)
{
    // A836 003F;	
    // (꠶) NORTH INDIC QUARTER MARK	[0539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA836, 0x003F };
    uint32_t const ces[9] = { 0x0539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_126)
{
    // A836 0061;	
    // (꠶) NORTH INDIC QUARTER MARK	[0539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA836, 0x0061 };
    uint32_t const ces[9] = { 0x0539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_127)
{
    // A836 0041;	
    // (꠶) NORTH INDIC QUARTER MARK	[0539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA836, 0x0041 };
    uint32_t const ces[9] = { 0x0539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_128)
{
    // A836 0062;	
    // (꠶) NORTH INDIC QUARTER MARK	[0539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA836, 0x0062 };
    uint32_t const ces[9] = { 0x0539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_129)
{
    // A837 0021;	
    // (꠷) NORTH INDIC PLACEHOLDER MARK	[053A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA837, 0x0021 };
    uint32_t const ces[9] = { 0x053A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_130)
{
    // A837 003F;	
    // (꠷) NORTH INDIC PLACEHOLDER MARK	[053A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA837, 0x003F };
    uint32_t const ces[9] = { 0x053A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_131)
{
    // A837 0061;	
    // (꠷) NORTH INDIC PLACEHOLDER MARK	[053A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA837, 0x0061 };
    uint32_t const ces[9] = { 0x053A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_132)
{
    // A837 0041;	
    // (꠷) NORTH INDIC PLACEHOLDER MARK	[053A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA837, 0x0041 };
    uint32_t const ces[9] = { 0x053A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_133)
{
    // A837 0062;	
    // (꠷) NORTH INDIC PLACEHOLDER MARK	[053A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA837, 0x0062 };
    uint32_t const ces[9] = { 0x053A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_134)
{
    // A839 0021;	
    // (꠹) NORTH INDIC QUANTITY MARK	[053B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA839, 0x0021 };
    uint32_t const ces[9] = { 0x053B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_135)
{
    // A839 003F;	
    // (꠹) NORTH INDIC QUANTITY MARK	[053B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA839, 0x003F };
    uint32_t const ces[9] = { 0x053B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_136)
{
    // A839 0061;	
    // (꠹) NORTH INDIC QUANTITY MARK	[053B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA839, 0x0061 };
    uint32_t const ces[9] = { 0x053B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_137)
{
    // A839 0041;	
    // (꠹) NORTH INDIC QUANTITY MARK	[053B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA839, 0x0041 };
    uint32_t const ces[9] = { 0x053B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_138)
{
    // A839 0062;	
    // (꠹) NORTH INDIC QUANTITY MARK	[053B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA839, 0x0062 };
    uint32_t const ces[9] = { 0x053B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_139)
{
    // 0F01 0021;	
    // (༁) TIBETAN MARK GTER YIG MGO TRUNCATED A	[053C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F01, 0x0021 };
    uint32_t const ces[9] = { 0x053C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_140)
{
    // 0F01 003F;	
    // (༁) TIBETAN MARK GTER YIG MGO TRUNCATED A	[053C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F01, 0x003F };
    uint32_t const ces[9] = { 0x053C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_141)
{
    // 0F01 0061;	
    // (༁) TIBETAN MARK GTER YIG MGO TRUNCATED A	[053C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F01, 0x0061 };
    uint32_t const ces[9] = { 0x053C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_142)
{
    // 0F01 0041;	
    // (༁) TIBETAN MARK GTER YIG MGO TRUNCATED A	[053C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F01, 0x0041 };
    uint32_t const ces[9] = { 0x053C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_143)
{
    // 0F01 0062;	
    // (༁) TIBETAN MARK GTER YIG MGO TRUNCATED A	[053C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F01, 0x0062 };
    uint32_t const ces[9] = { 0x053C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_144)
{
    // 0F02 0021;	
    // (༂) TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA	[053D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F02, 0x0021 };
    uint32_t const ces[9] = { 0x053D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_145)
{
    // 0F02 003F;	
    // (༂) TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA	[053D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F02, 0x003F };
    uint32_t const ces[9] = { 0x053D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_146)
{
    // 0F02 0061;	
    // (༂) TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA	[053D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F02, 0x0061 };
    uint32_t const ces[9] = { 0x053D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_147)
{
    // 0F02 0041;	
    // (༂) TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA	[053D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F02, 0x0041 };
    uint32_t const ces[9] = { 0x053D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_148)
{
    // 0F02 0062;	
    // (༂) TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA	[053D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F02, 0x0062 };
    uint32_t const ces[9] = { 0x053D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_149)
{
    // 0F03 0021;	
    // (༃) TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA	[053E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F03, 0x0021 };
    uint32_t const ces[9] = { 0x053E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_150)
{
    // 0F03 003F;	
    // (༃) TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA	[053E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F03, 0x003F };
    uint32_t const ces[9] = { 0x053E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_151)
{
    // 0F03 0061;	
    // (༃) TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA	[053E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F03, 0x0061 };
    uint32_t const ces[9] = { 0x053E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_152)
{
    // 0F03 0041;	
    // (༃) TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA	[053E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F03, 0x0041 };
    uint32_t const ces[9] = { 0x053E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_153)
{
    // 0F03 0062;	
    // (༃) TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA	[053E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F03, 0x0062 };
    uint32_t const ces[9] = { 0x053E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_154)
{
    // 0F13 0021;	
    // (༓) TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN	[053F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F13, 0x0021 };
    uint32_t const ces[9] = { 0x053F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_155)
{
    // 0F13 003F;	
    // (༓) TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN	[053F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F13, 0x003F };
    uint32_t const ces[9] = { 0x053F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_156)
{
    // 0F13 0061;	
    // (༓) TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN	[053F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F13, 0x0061 };
    uint32_t const ces[9] = { 0x053F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_157)
{
    // 0F13 0041;	
    // (༓) TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN	[053F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F13, 0x0041 };
    uint32_t const ces[9] = { 0x053F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_158)
{
    // 0F13 0062;	
    // (༓) TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN	[053F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F13, 0x0062 };
    uint32_t const ces[9] = { 0x053F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_159)
{
    // 0F15 0021;	
    // (༕) TIBETAN LOGOTYPE SIGN CHAD RTAGS	[0540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F15, 0x0021 };
    uint32_t const ces[9] = { 0x0540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_160)
{
    // 0F15 003F;	
    // (༕) TIBETAN LOGOTYPE SIGN CHAD RTAGS	[0540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F15, 0x003F };
    uint32_t const ces[9] = { 0x0540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_161)
{
    // 0F15 0061;	
    // (༕) TIBETAN LOGOTYPE SIGN CHAD RTAGS	[0540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F15, 0x0061 };
    uint32_t const ces[9] = { 0x0540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_162)
{
    // 0F15 0041;	
    // (༕) TIBETAN LOGOTYPE SIGN CHAD RTAGS	[0540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F15, 0x0041 };
    uint32_t const ces[9] = { 0x0540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_163)
{
    // 0F15 0062;	
    // (༕) TIBETAN LOGOTYPE SIGN CHAD RTAGS	[0540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F15, 0x0062 };
    uint32_t const ces[9] = { 0x0540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_164)
{
    // 0F16 0021;	
    // (༖) TIBETAN LOGOTYPE SIGN LHAG RTAGS	[0541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F16, 0x0021 };
    uint32_t const ces[9] = { 0x0541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_165)
{
    // 0F16 003F;	
    // (༖) TIBETAN LOGOTYPE SIGN LHAG RTAGS	[0541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F16, 0x003F };
    uint32_t const ces[9] = { 0x0541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_166)
{
    // 0F16 0061;	
    // (༖) TIBETAN LOGOTYPE SIGN LHAG RTAGS	[0541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F16, 0x0061 };
    uint32_t const ces[9] = { 0x0541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_167)
{
    // 0F16 0041;	
    // (༖) TIBETAN LOGOTYPE SIGN LHAG RTAGS	[0541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F16, 0x0041 };
    uint32_t const ces[9] = { 0x0541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_168)
{
    // 0F16 0062;	
    // (༖) TIBETAN LOGOTYPE SIGN LHAG RTAGS	[0541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F16, 0x0062 };
    uint32_t const ces[9] = { 0x0541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_169)
{
    // 0F17 0021;	
    // (༗) TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS	[0542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F17, 0x0021 };
    uint32_t const ces[9] = { 0x0542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_170)
{
    // 0F17 003F;	
    // (༗) TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS	[0542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F17, 0x003F };
    uint32_t const ces[9] = { 0x0542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_171)
{
    // 0F17 0061;	
    // (༗) TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS	[0542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F17, 0x0061 };
    uint32_t const ces[9] = { 0x0542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_172)
{
    // 0F17 0041;	
    // (༗) TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS	[0542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F17, 0x0041 };
    uint32_t const ces[9] = { 0x0542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_173)
{
    // 0F17 0062;	
    // (༗) TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS	[0542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F17, 0x0062 };
    uint32_t const ces[9] = { 0x0542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_174)
{
    // 0F1A 0021;	
    // (༚) TIBETAN SIGN RDEL DKAR GCIG	[0543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1A, 0x0021 };
    uint32_t const ces[9] = { 0x0543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_175)
{
    // 0F1A 003F;	
    // (༚) TIBETAN SIGN RDEL DKAR GCIG	[0543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1A, 0x003F };
    uint32_t const ces[9] = { 0x0543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_176)
{
    // 0F1A 0061;	
    // (༚) TIBETAN SIGN RDEL DKAR GCIG	[0543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1A, 0x0061 };
    uint32_t const ces[9] = { 0x0543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_177)
{
    // 0F1A 0041;	
    // (༚) TIBETAN SIGN RDEL DKAR GCIG	[0543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1A, 0x0041 };
    uint32_t const ces[9] = { 0x0543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_178)
{
    // 0F1A 0062;	
    // (༚) TIBETAN SIGN RDEL DKAR GCIG	[0543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1A, 0x0062 };
    uint32_t const ces[9] = { 0x0543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_179)
{
    // 0F1B 0021;	
    // (༛) TIBETAN SIGN RDEL DKAR GNYIS	[0544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1B, 0x0021 };
    uint32_t const ces[9] = { 0x0544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_180)
{
    // 0F1B 003F;	
    // (༛) TIBETAN SIGN RDEL DKAR GNYIS	[0544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1B, 0x003F };
    uint32_t const ces[9] = { 0x0544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_181)
{
    // 0F1B 0061;	
    // (༛) TIBETAN SIGN RDEL DKAR GNYIS	[0544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1B, 0x0061 };
    uint32_t const ces[9] = { 0x0544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_182)
{
    // 0F1B 0041;	
    // (༛) TIBETAN SIGN RDEL DKAR GNYIS	[0544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1B, 0x0041 };
    uint32_t const ces[9] = { 0x0544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_183)
{
    // 0F1B 0062;	
    // (༛) TIBETAN SIGN RDEL DKAR GNYIS	[0544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1B, 0x0062 };
    uint32_t const ces[9] = { 0x0544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_184)
{
    // 0F1C 0021;	
    // (༜) TIBETAN SIGN RDEL DKAR GSUM	[0545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1C, 0x0021 };
    uint32_t const ces[9] = { 0x0545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_185)
{
    // 0F1C 003F;	
    // (༜) TIBETAN SIGN RDEL DKAR GSUM	[0545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1C, 0x003F };
    uint32_t const ces[9] = { 0x0545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_186)
{
    // 0F1C 0061;	
    // (༜) TIBETAN SIGN RDEL DKAR GSUM	[0545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1C, 0x0061 };
    uint32_t const ces[9] = { 0x0545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_187)
{
    // 0F1C 0041;	
    // (༜) TIBETAN SIGN RDEL DKAR GSUM	[0545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1C, 0x0041 };
    uint32_t const ces[9] = { 0x0545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_188)
{
    // 0F1C 0062;	
    // (༜) TIBETAN SIGN RDEL DKAR GSUM	[0545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1C, 0x0062 };
    uint32_t const ces[9] = { 0x0545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_189)
{
    // 0F1D 0021;	
    // (༝) TIBETAN SIGN RDEL NAG GCIG	[0546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1D, 0x0021 };
    uint32_t const ces[9] = { 0x0546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_190)
{
    // 0F1D 003F;	
    // (༝) TIBETAN SIGN RDEL NAG GCIG	[0546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1D, 0x003F };
    uint32_t const ces[9] = { 0x0546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_191)
{
    // 0F1D 0061;	
    // (༝) TIBETAN SIGN RDEL NAG GCIG	[0546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1D, 0x0061 };
    uint32_t const ces[9] = { 0x0546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_192)
{
    // 0F1D 0041;	
    // (༝) TIBETAN SIGN RDEL NAG GCIG	[0546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1D, 0x0041 };
    uint32_t const ces[9] = { 0x0546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_193)
{
    // 0F1D 0062;	
    // (༝) TIBETAN SIGN RDEL NAG GCIG	[0546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1D, 0x0062 };
    uint32_t const ces[9] = { 0x0546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_194)
{
    // 0F1E 0021;	
    // (༞) TIBETAN SIGN RDEL NAG GNYIS	[0547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1E, 0x0021 };
    uint32_t const ces[9] = { 0x0547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_195)
{
    // 0F1E 003F;	
    // (༞) TIBETAN SIGN RDEL NAG GNYIS	[0547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1E, 0x003F };
    uint32_t const ces[9] = { 0x0547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_196)
{
    // 0F1E 0061;	
    // (༞) TIBETAN SIGN RDEL NAG GNYIS	[0547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1E, 0x0061 };
    uint32_t const ces[9] = { 0x0547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_197)
{
    // 0F1E 0041;	
    // (༞) TIBETAN SIGN RDEL NAG GNYIS	[0547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1E, 0x0041 };
    uint32_t const ces[9] = { 0x0547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_198)
{
    // 0F1E 0062;	
    // (༞) TIBETAN SIGN RDEL NAG GNYIS	[0547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1E, 0x0062 };
    uint32_t const ces[9] = { 0x0547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_199)
{
    // 0F1F 0021;	
    // (༟) TIBETAN SIGN RDEL DKAR RDEL NAG	[0548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1F, 0x0021 };
    uint32_t const ces[9] = { 0x0548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_200)
{
    // 0F1F 003F;	
    // (༟) TIBETAN SIGN RDEL DKAR RDEL NAG	[0548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1F, 0x003F };
    uint32_t const ces[9] = { 0x0548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_201)
{
    // 0F1F 0061;	
    // (༟) TIBETAN SIGN RDEL DKAR RDEL NAG	[0548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1F, 0x0061 };
    uint32_t const ces[9] = { 0x0548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_202)
{
    // 0F1F 0041;	
    // (༟) TIBETAN SIGN RDEL DKAR RDEL NAG	[0548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F1F, 0x0041 };
    uint32_t const ces[9] = { 0x0548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_203)
{
    // 0F1F 0062;	
    // (༟) TIBETAN SIGN RDEL DKAR RDEL NAG	[0548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F1F, 0x0062 };
    uint32_t const ces[9] = { 0x0548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_204)
{
    // 0F34 0021;	
    // (༴) TIBETAN MARK BSDUS RTAGS	[0549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F34, 0x0021 };
    uint32_t const ces[9] = { 0x0549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_205)
{
    // 0F34 003F;	
    // (༴) TIBETAN MARK BSDUS RTAGS	[0549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F34, 0x003F };
    uint32_t const ces[9] = { 0x0549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_206)
{
    // 0F34 0061;	
    // (༴) TIBETAN MARK BSDUS RTAGS	[0549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F34, 0x0061 };
    uint32_t const ces[9] = { 0x0549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_207)
{
    // 0F34 0041;	
    // (༴) TIBETAN MARK BSDUS RTAGS	[0549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F34, 0x0041 };
    uint32_t const ces[9] = { 0x0549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_208)
{
    // 0F34 0062;	
    // (༴) TIBETAN MARK BSDUS RTAGS	[0549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F34, 0x0062 };
    uint32_t const ces[9] = { 0x0549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_209)
{
    // 0F36 0021;	
    // (༶) TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN	[054A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F36, 0x0021 };
    uint32_t const ces[9] = { 0x054A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_210)
{
    // 0F36 003F;	
    // (༶) TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN	[054A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F36, 0x003F };
    uint32_t const ces[9] = { 0x054A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_211)
{
    // 0F36 0061;	
    // (༶) TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN	[054A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F36, 0x0061 };
    uint32_t const ces[9] = { 0x054A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_212)
{
    // 0F36 0041;	
    // (༶) TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN	[054A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F36, 0x0041 };
    uint32_t const ces[9] = { 0x054A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_213)
{
    // 0F36 0062;	
    // (༶) TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN	[054A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F36, 0x0062 };
    uint32_t const ces[9] = { 0x054A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_214)
{
    // 0F38 0021;	
    // (༸) TIBETAN MARK CHE MGO	[054B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F38, 0x0021 };
    uint32_t const ces[9] = { 0x054B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_215)
{
    // 0F38 003F;	
    // (༸) TIBETAN MARK CHE MGO	[054B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F38, 0x003F };
    uint32_t const ces[9] = { 0x054B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_216)
{
    // 0F38 0061;	
    // (༸) TIBETAN MARK CHE MGO	[054B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F38, 0x0061 };
    uint32_t const ces[9] = { 0x054B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_217)
{
    // 0F38 0041;	
    // (༸) TIBETAN MARK CHE MGO	[054B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F38, 0x0041 };
    uint32_t const ces[9] = { 0x054B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_218)
{
    // 0F38 0062;	
    // (༸) TIBETAN MARK CHE MGO	[054B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F38, 0x0062 };
    uint32_t const ces[9] = { 0x054B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_219)
{
    // 0FBE 0021;	
    // (྾) TIBETAN KU RU KHA	[054C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBE, 0x0021 };
    uint32_t const ces[9] = { 0x054C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_220)
{
    // 0FBE 003F;	
    // (྾) TIBETAN KU RU KHA	[054C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBE, 0x003F };
    uint32_t const ces[9] = { 0x054C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_221)
{
    // 0FBE 0061;	
    // (྾) TIBETAN KU RU KHA	[054C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBE, 0x0061 };
    uint32_t const ces[9] = { 0x054C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_222)
{
    // 0FBE 0041;	
    // (྾) TIBETAN KU RU KHA	[054C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FBE, 0x0041 };
    uint32_t const ces[9] = { 0x054C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_223)
{
    // 0FBE 0062;	
    // (྾) TIBETAN KU RU KHA	[054C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBE, 0x0062 };
    uint32_t const ces[9] = { 0x054C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_224)
{
    // 0FBF 0021;	
    // (྿) TIBETAN KU RU KHA BZHI MIG CAN	[054D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBF, 0x0021 };
    uint32_t const ces[9] = { 0x054D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_225)
{
    // 0FBF 003F;	
    // (྿) TIBETAN KU RU KHA BZHI MIG CAN	[054D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBF, 0x003F };
    uint32_t const ces[9] = { 0x054D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_226)
{
    // 0FBF 0061;	
    // (྿) TIBETAN KU RU KHA BZHI MIG CAN	[054D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBF, 0x0061 };
    uint32_t const ces[9] = { 0x054D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_227)
{
    // 0FBF 0041;	
    // (྿) TIBETAN KU RU KHA BZHI MIG CAN	[054D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FBF, 0x0041 };
    uint32_t const ces[9] = { 0x054D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_228)
{
    // 0FBF 0062;	
    // (྿) TIBETAN KU RU KHA BZHI MIG CAN	[054D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FBF, 0x0062 };
    uint32_t const ces[9] = { 0x054D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_229)
{
    // 0FC0 0021;	
    // (࿀) TIBETAN CANTILLATION SIGN HEAVY BEAT	[054E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC0, 0x0021 };
    uint32_t const ces[9] = { 0x054E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_230)
{
    // 0FC0 003F;	
    // (࿀) TIBETAN CANTILLATION SIGN HEAVY BEAT	[054E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC0, 0x003F };
    uint32_t const ces[9] = { 0x054E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_231)
{
    // 0FC0 0061;	
    // (࿀) TIBETAN CANTILLATION SIGN HEAVY BEAT	[054E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC0, 0x0061 };
    uint32_t const ces[9] = { 0x054E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_232)
{
    // 0FC0 0041;	
    // (࿀) TIBETAN CANTILLATION SIGN HEAVY BEAT	[054E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC0, 0x0041 };
    uint32_t const ces[9] = { 0x054E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_233)
{
    // 0FC0 0062;	
    // (࿀) TIBETAN CANTILLATION SIGN HEAVY BEAT	[054E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC0, 0x0062 };
    uint32_t const ces[9] = { 0x054E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_234)
{
    // 0FC1 0021;	
    // (࿁) TIBETAN CANTILLATION SIGN LIGHT BEAT	[054F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC1, 0x0021 };
    uint32_t const ces[9] = { 0x054F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_235)
{
    // 0FC1 003F;	
    // (࿁) TIBETAN CANTILLATION SIGN LIGHT BEAT	[054F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC1, 0x003F };
    uint32_t const ces[9] = { 0x054F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_236)
{
    // 0FC1 0061;	
    // (࿁) TIBETAN CANTILLATION SIGN LIGHT BEAT	[054F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC1, 0x0061 };
    uint32_t const ces[9] = { 0x054F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_237)
{
    // 0FC1 0041;	
    // (࿁) TIBETAN CANTILLATION SIGN LIGHT BEAT	[054F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC1, 0x0041 };
    uint32_t const ces[9] = { 0x054F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_238)
{
    // 0FC1 0062;	
    // (࿁) TIBETAN CANTILLATION SIGN LIGHT BEAT	[054F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC1, 0x0062 };
    uint32_t const ces[9] = { 0x054F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_239)
{
    // 0FC2 0021;	
    // (࿂) TIBETAN CANTILLATION SIGN CANG TE-U	[0550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC2, 0x0021 };
    uint32_t const ces[9] = { 0x0550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_240)
{
    // 0FC2 003F;	
    // (࿂) TIBETAN CANTILLATION SIGN CANG TE-U	[0550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC2, 0x003F };
    uint32_t const ces[9] = { 0x0550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_241)
{
    // 0FC2 0061;	
    // (࿂) TIBETAN CANTILLATION SIGN CANG TE-U	[0550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC2, 0x0061 };
    uint32_t const ces[9] = { 0x0550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_242)
{
    // 0FC2 0041;	
    // (࿂) TIBETAN CANTILLATION SIGN CANG TE-U	[0550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC2, 0x0041 };
    uint32_t const ces[9] = { 0x0550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_243)
{
    // 0FC2 0062;	
    // (࿂) TIBETAN CANTILLATION SIGN CANG TE-U	[0550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC2, 0x0062 };
    uint32_t const ces[9] = { 0x0550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_244)
{
    // 0FC3 0021;	
    // (࿃) TIBETAN CANTILLATION SIGN SBUB -CHAL	[0551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC3, 0x0021 };
    uint32_t const ces[9] = { 0x0551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_245)
{
    // 0FC3 003F;	
    // (࿃) TIBETAN CANTILLATION SIGN SBUB -CHAL	[0551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC3, 0x003F };
    uint32_t const ces[9] = { 0x0551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_246)
{
    // 0FC3 0061;	
    // (࿃) TIBETAN CANTILLATION SIGN SBUB -CHAL	[0551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC3, 0x0061 };
    uint32_t const ces[9] = { 0x0551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_247)
{
    // 0FC3 0041;	
    // (࿃) TIBETAN CANTILLATION SIGN SBUB -CHAL	[0551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC3, 0x0041 };
    uint32_t const ces[9] = { 0x0551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_248)
{
    // 0FC3 0062;	
    // (࿃) TIBETAN CANTILLATION SIGN SBUB -CHAL	[0551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC3, 0x0062 };
    uint32_t const ces[9] = { 0x0551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_249)
{
    // 0FC4 0021;	
    // (࿄) TIBETAN SYMBOL DRIL BU	[0552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC4, 0x0021 };
    uint32_t const ces[9] = { 0x0552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_250)
{
    // 0FC4 003F;	
    // (࿄) TIBETAN SYMBOL DRIL BU	[0552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC4, 0x003F };
    uint32_t const ces[9] = { 0x0552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_251)
{
    // 0FC4 0061;	
    // (࿄) TIBETAN SYMBOL DRIL BU	[0552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC4, 0x0061 };
    uint32_t const ces[9] = { 0x0552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_252)
{
    // 0FC4 0041;	
    // (࿄) TIBETAN SYMBOL DRIL BU	[0552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC4, 0x0041 };
    uint32_t const ces[9] = { 0x0552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_253)
{
    // 0FC4 0062;	
    // (࿄) TIBETAN SYMBOL DRIL BU	[0552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC4, 0x0062 };
    uint32_t const ces[9] = { 0x0552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_254)
{
    // 0FC5 0021;	
    // (࿅) TIBETAN SYMBOL RDO RJE	[0553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC5, 0x0021 };
    uint32_t const ces[9] = { 0x0553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_255)
{
    // 0FC5 003F;	
    // (࿅) TIBETAN SYMBOL RDO RJE	[0553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC5, 0x003F };
    uint32_t const ces[9] = { 0x0553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_256)
{
    // 0FC5 0061;	
    // (࿅) TIBETAN SYMBOL RDO RJE	[0553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC5, 0x0061 };
    uint32_t const ces[9] = { 0x0553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_257)
{
    // 0FC5 0041;	
    // (࿅) TIBETAN SYMBOL RDO RJE	[0553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC5, 0x0041 };
    uint32_t const ces[9] = { 0x0553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_258)
{
    // 0FC5 0062;	
    // (࿅) TIBETAN SYMBOL RDO RJE	[0553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC5, 0x0062 };
    uint32_t const ces[9] = { 0x0553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_259)
{
    // 0FC7 0021;	
    // (࿇) TIBETAN SYMBOL RDO RJE RGYA GRAM	[0554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC7, 0x0021 };
    uint32_t const ces[9] = { 0x0554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_260)
{
    // 0FC7 003F;	
    // (࿇) TIBETAN SYMBOL RDO RJE RGYA GRAM	[0554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC7, 0x003F };
    uint32_t const ces[9] = { 0x0554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_261)
{
    // 0FC7 0061;	
    // (࿇) TIBETAN SYMBOL RDO RJE RGYA GRAM	[0554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC7, 0x0061 };
    uint32_t const ces[9] = { 0x0554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_262)
{
    // 0FC7 0041;	
    // (࿇) TIBETAN SYMBOL RDO RJE RGYA GRAM	[0554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC7, 0x0041 };
    uint32_t const ces[9] = { 0x0554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_263)
{
    // 0FC7 0062;	
    // (࿇) TIBETAN SYMBOL RDO RJE RGYA GRAM	[0554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC7, 0x0062 };
    uint32_t const ces[9] = { 0x0554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_264)
{
    // 0FC8 0021;	
    // (࿈) TIBETAN SYMBOL PHUR PA	[0555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC8, 0x0021 };
    uint32_t const ces[9] = { 0x0555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_265)
{
    // 0FC8 003F;	
    // (࿈) TIBETAN SYMBOL PHUR PA	[0555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC8, 0x003F };
    uint32_t const ces[9] = { 0x0555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_266)
{
    // 0FC8 0061;	
    // (࿈) TIBETAN SYMBOL PHUR PA	[0555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC8, 0x0061 };
    uint32_t const ces[9] = { 0x0555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_267)
{
    // 0FC8 0041;	
    // (࿈) TIBETAN SYMBOL PHUR PA	[0555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC8, 0x0041 };
    uint32_t const ces[9] = { 0x0555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_268)
{
    // 0FC8 0062;	
    // (࿈) TIBETAN SYMBOL PHUR PA	[0555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC8, 0x0062 };
    uint32_t const ces[9] = { 0x0555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_269)
{
    // 0FC9 0021;	
    // (࿉) TIBETAN SYMBOL NOR BU	[0556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC9, 0x0021 };
    uint32_t const ces[9] = { 0x0556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_270)
{
    // 0FC9 003F;	
    // (࿉) TIBETAN SYMBOL NOR BU	[0556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC9, 0x003F };
    uint32_t const ces[9] = { 0x0556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_271)
{
    // 0FC9 0061;	
    // (࿉) TIBETAN SYMBOL NOR BU	[0556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC9, 0x0061 };
    uint32_t const ces[9] = { 0x0556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_272)
{
    // 0FC9 0041;	
    // (࿉) TIBETAN SYMBOL NOR BU	[0556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FC9, 0x0041 };
    uint32_t const ces[9] = { 0x0556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_273)
{
    // 0FC9 0062;	
    // (࿉) TIBETAN SYMBOL NOR BU	[0556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FC9, 0x0062 };
    uint32_t const ces[9] = { 0x0556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_274)
{
    // 0FCA 0021;	
    // (࿊) TIBETAN SYMBOL NOR BU NYIS -KHYIL	[0557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCA, 0x0021 };
    uint32_t const ces[9] = { 0x0557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_275)
{
    // 0FCA 003F;	
    // (࿊) TIBETAN SYMBOL NOR BU NYIS -KHYIL	[0557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCA, 0x003F };
    uint32_t const ces[9] = { 0x0557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_276)
{
    // 0FCA 0061;	
    // (࿊) TIBETAN SYMBOL NOR BU NYIS -KHYIL	[0557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCA, 0x0061 };
    uint32_t const ces[9] = { 0x0557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_277)
{
    // 0FCA 0041;	
    // (࿊) TIBETAN SYMBOL NOR BU NYIS -KHYIL	[0557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FCA, 0x0041 };
    uint32_t const ces[9] = { 0x0557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_278)
{
    // 0FCA 0062;	
    // (࿊) TIBETAN SYMBOL NOR BU NYIS -KHYIL	[0557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCA, 0x0062 };
    uint32_t const ces[9] = { 0x0557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_279)
{
    // 0FCB 0021;	
    // (࿋) TIBETAN SYMBOL NOR BU GSUM -KHYIL	[0558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCB, 0x0021 };
    uint32_t const ces[9] = { 0x0558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_280)
{
    // 0FCB 003F;	
    // (࿋) TIBETAN SYMBOL NOR BU GSUM -KHYIL	[0558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCB, 0x003F };
    uint32_t const ces[9] = { 0x0558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_281)
{
    // 0FCB 0061;	
    // (࿋) TIBETAN SYMBOL NOR BU GSUM -KHYIL	[0558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCB, 0x0061 };
    uint32_t const ces[9] = { 0x0558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_282)
{
    // 0FCB 0041;	
    // (࿋) TIBETAN SYMBOL NOR BU GSUM -KHYIL	[0558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FCB, 0x0041 };
    uint32_t const ces[9] = { 0x0558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_283)
{
    // 0FCB 0062;	
    // (࿋) TIBETAN SYMBOL NOR BU GSUM -KHYIL	[0558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCB, 0x0062 };
    uint32_t const ces[9] = { 0x0558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_284)
{
    // 0FCC 0021;	
    // (࿌) TIBETAN SYMBOL NOR BU BZHI -KHYIL	[0559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCC, 0x0021 };
    uint32_t const ces[9] = { 0x0559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_285)
{
    // 0FCC 003F;	
    // (࿌) TIBETAN SYMBOL NOR BU BZHI -KHYIL	[0559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCC, 0x003F };
    uint32_t const ces[9] = { 0x0559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_286)
{
    // 0FCC 0061;	
    // (࿌) TIBETAN SYMBOL NOR BU BZHI -KHYIL	[0559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCC, 0x0061 };
    uint32_t const ces[9] = { 0x0559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_287)
{
    // 0FCC 0041;	
    // (࿌) TIBETAN SYMBOL NOR BU BZHI -KHYIL	[0559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FCC, 0x0041 };
    uint32_t const ces[9] = { 0x0559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_288)
{
    // 0FCC 0062;	
    // (࿌) TIBETAN SYMBOL NOR BU BZHI -KHYIL	[0559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCC, 0x0062 };
    uint32_t const ces[9] = { 0x0559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_289)
{
    // 0FCE 0021;	
    // (࿎) TIBETAN SIGN RDEL NAG RDEL DKAR	[055A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCE, 0x0021 };
    uint32_t const ces[9] = { 0x055A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_290)
{
    // 0FCE 003F;	
    // (࿎) TIBETAN SIGN RDEL NAG RDEL DKAR	[055A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCE, 0x003F };
    uint32_t const ces[9] = { 0x055A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_291)
{
    // 0FCE 0061;	
    // (࿎) TIBETAN SIGN RDEL NAG RDEL DKAR	[055A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCE, 0x0061 };
    uint32_t const ces[9] = { 0x055A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_292)
{
    // 0FCE 0041;	
    // (࿎) TIBETAN SIGN RDEL NAG RDEL DKAR	[055A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FCE, 0x0041 };
    uint32_t const ces[9] = { 0x055A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_293)
{
    // 0FCE 0062;	
    // (࿎) TIBETAN SIGN RDEL NAG RDEL DKAR	[055A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCE, 0x0062 };
    uint32_t const ces[9] = { 0x055A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_294)
{
    // 0FCF 0021;	
    // (࿏) TIBETAN SIGN RDEL NAG GSUM	[055B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCF, 0x0021 };
    uint32_t const ces[9] = { 0x055B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_295)
{
    // 0FCF 003F;	
    // (࿏) TIBETAN SIGN RDEL NAG GSUM	[055B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCF, 0x003F };
    uint32_t const ces[9] = { 0x055B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_296)
{
    // 0FCF 0061;	
    // (࿏) TIBETAN SIGN RDEL NAG GSUM	[055B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCF, 0x0061 };
    uint32_t const ces[9] = { 0x055B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_297)
{
    // 0FCF 0041;	
    // (࿏) TIBETAN SIGN RDEL NAG GSUM	[055B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FCF, 0x0041 };
    uint32_t const ces[9] = { 0x055B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_298)
{
    // 0FCF 0062;	
    // (࿏) TIBETAN SIGN RDEL NAG GSUM	[055B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FCF, 0x0062 };
    uint32_t const ces[9] = { 0x055B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_299)
{
    // 0FD5 0021;	
    // (࿕) RIGHT-FACING SVASTI SIGN	[055C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD5, 0x0021 };
    uint32_t const ces[9] = { 0x055C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_300)
{
    // 0FD5 003F;	
    // (࿕) RIGHT-FACING SVASTI SIGN	[055C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD5, 0x003F };
    uint32_t const ces[9] = { 0x055C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_301)
{
    // 0FD5 0061;	
    // (࿕) RIGHT-FACING SVASTI SIGN	[055C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD5, 0x0061 };
    uint32_t const ces[9] = { 0x055C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_302)
{
    // 0FD5 0041;	
    // (࿕) RIGHT-FACING SVASTI SIGN	[055C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD5, 0x0041 };
    uint32_t const ces[9] = { 0x055C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_303)
{
    // 0FD5 0062;	
    // (࿕) RIGHT-FACING SVASTI SIGN	[055C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD5, 0x0062 };
    uint32_t const ces[9] = { 0x055C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_304)
{
    // 0FD6 0021;	
    // (࿖) LEFT-FACING SVASTI SIGN	[055D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD6, 0x0021 };
    uint32_t const ces[9] = { 0x055D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_305)
{
    // 0FD6 003F;	
    // (࿖) LEFT-FACING SVASTI SIGN	[055D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD6, 0x003F };
    uint32_t const ces[9] = { 0x055D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_306)
{
    // 0FD6 0061;	
    // (࿖) LEFT-FACING SVASTI SIGN	[055D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD6, 0x0061 };
    uint32_t const ces[9] = { 0x055D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_307)
{
    // 0FD6 0041;	
    // (࿖) LEFT-FACING SVASTI SIGN	[055D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD6, 0x0041 };
    uint32_t const ces[9] = { 0x055D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_308)
{
    // 0FD6 0062;	
    // (࿖) LEFT-FACING SVASTI SIGN	[055D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD6, 0x0062 };
    uint32_t const ces[9] = { 0x055D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_309)
{
    // 0FD7 0021;	
    // (࿗) RIGHT-FACING SVASTI SIGN WITH DOTS	[055E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD7, 0x0021 };
    uint32_t const ces[9] = { 0x055E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_310)
{
    // 0FD7 003F;	
    // (࿗) RIGHT-FACING SVASTI SIGN WITH DOTS	[055E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD7, 0x003F };
    uint32_t const ces[9] = { 0x055E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_311)
{
    // 0FD7 0061;	
    // (࿗) RIGHT-FACING SVASTI SIGN WITH DOTS	[055E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD7, 0x0061 };
    uint32_t const ces[9] = { 0x055E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_312)
{
    // 0FD7 0041;	
    // (࿗) RIGHT-FACING SVASTI SIGN WITH DOTS	[055E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD7, 0x0041 };
    uint32_t const ces[9] = { 0x055E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_313)
{
    // 0FD7 0062;	
    // (࿗) RIGHT-FACING SVASTI SIGN WITH DOTS	[055E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD7, 0x0062 };
    uint32_t const ces[9] = { 0x055E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_314)
{
    // 0FD8 0021;	
    // (࿘) LEFT-FACING SVASTI SIGN WITH DOTS	[055F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD8, 0x0021 };
    uint32_t const ces[9] = { 0x055F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_315)
{
    // 0FD8 003F;	
    // (࿘) LEFT-FACING SVASTI SIGN WITH DOTS	[055F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD8, 0x003F };
    uint32_t const ces[9] = { 0x055F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_316)
{
    // 0FD8 0061;	
    // (࿘) LEFT-FACING SVASTI SIGN WITH DOTS	[055F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD8, 0x0061 };
    uint32_t const ces[9] = { 0x055F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_317)
{
    // 0FD8 0041;	
    // (࿘) LEFT-FACING SVASTI SIGN WITH DOTS	[055F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD8, 0x0041 };
    uint32_t const ces[9] = { 0x055F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_318)
{
    // 0FD8 0062;	
    // (࿘) LEFT-FACING SVASTI SIGN WITH DOTS	[055F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD8, 0x0062 };
    uint32_t const ces[9] = { 0x055F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_319)
{
    // 1940 0021;	
    // (᥀) LIMBU SIGN LOO	[0560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1940, 0x0021 };
    uint32_t const ces[9] = { 0x0560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_320)
{
    // 1940 003F;	
    // (᥀) LIMBU SIGN LOO	[0560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1940, 0x003F };
    uint32_t const ces[9] = { 0x0560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_321)
{
    // 1940 0061;	
    // (᥀) LIMBU SIGN LOO	[0560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1940, 0x0061 };
    uint32_t const ces[9] = { 0x0560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_322)
{
    // 1940 0041;	
    // (᥀) LIMBU SIGN LOO	[0560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1940, 0x0041 };
    uint32_t const ces[9] = { 0x0560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_323)
{
    // 1940 0062;	
    // (᥀) LIMBU SIGN LOO	[0560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1940, 0x0062 };
    uint32_t const ces[9] = { 0x0560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_324)
{
    // 109E 0021;	
    // (႞) MYANMAR SYMBOL SHAN ONE	[0561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E, 0x0021 };
    uint32_t const ces[9] = { 0x0561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_325)
{
    // 109E 003F;	
    // (႞) MYANMAR SYMBOL SHAN ONE	[0561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E, 0x003F };
    uint32_t const ces[9] = { 0x0561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_326)
{
    // 109E 0061;	
    // (႞) MYANMAR SYMBOL SHAN ONE	[0561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E, 0x0061 };
    uint32_t const ces[9] = { 0x0561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_327)
{
    // 109E 0041;	
    // (႞) MYANMAR SYMBOL SHAN ONE	[0561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109E, 0x0041 };
    uint32_t const ces[9] = { 0x0561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_328)
{
    // 109E 0062;	
    // (႞) MYANMAR SYMBOL SHAN ONE	[0561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109E, 0x0062 };
    uint32_t const ces[9] = { 0x0561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_329)
{
    // 109F 0021;	
    // (႟) MYANMAR SYMBOL SHAN EXCLAMATION	[0562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F, 0x0021 };
    uint32_t const ces[9] = { 0x0562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_330)
{
    // 109F 003F;	
    // (႟) MYANMAR SYMBOL SHAN EXCLAMATION	[0562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F, 0x003F };
    uint32_t const ces[9] = { 0x0562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_331)
{
    // 109F 0061;	
    // (႟) MYANMAR SYMBOL SHAN EXCLAMATION	[0562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F, 0x0061 };
    uint32_t const ces[9] = { 0x0562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_332)
{
    // 109F 0041;	
    // (႟) MYANMAR SYMBOL SHAN EXCLAMATION	[0562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109F, 0x0041 };
    uint32_t const ces[9] = { 0x0562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_333)
{
    // 109F 0062;	
    // (႟) MYANMAR SYMBOL SHAN EXCLAMATION	[0562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109F, 0x0062 };
    uint32_t const ces[9] = { 0x0562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_334)
{
    // AA77 0021;	
    // (꩷) MYANMAR SYMBOL AITON EXCLAMATION	[0563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA77, 0x0021 };
    uint32_t const ces[9] = { 0x0563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_335)
{
    // AA77 003F;	
    // (꩷) MYANMAR SYMBOL AITON EXCLAMATION	[0563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA77, 0x003F };
    uint32_t const ces[9] = { 0x0563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_336)
{
    // AA77 0061;	
    // (꩷) MYANMAR SYMBOL AITON EXCLAMATION	[0563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA77, 0x0061 };
    uint32_t const ces[9] = { 0x0563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_337)
{
    // AA77 0041;	
    // (꩷) MYANMAR SYMBOL AITON EXCLAMATION	[0563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA77, 0x0041 };
    uint32_t const ces[9] = { 0x0563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_338)
{
    // AA77 0062;	
    // (꩷) MYANMAR SYMBOL AITON EXCLAMATION	[0563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA77, 0x0062 };
    uint32_t const ces[9] = { 0x0563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_339)
{
    // AA78 0021;	
    // (꩸) MYANMAR SYMBOL AITON ONE	[0564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA78, 0x0021 };
    uint32_t const ces[9] = { 0x0564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_340)
{
    // AA78 003F;	
    // (꩸) MYANMAR SYMBOL AITON ONE	[0564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA78, 0x003F };
    uint32_t const ces[9] = { 0x0564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_341)
{
    // AA78 0061;	
    // (꩸) MYANMAR SYMBOL AITON ONE	[0564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA78, 0x0061 };
    uint32_t const ces[9] = { 0x0564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_342)
{
    // AA78 0041;	
    // (꩸) MYANMAR SYMBOL AITON ONE	[0564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA78, 0x0041 };
    uint32_t const ces[9] = { 0x0564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_343)
{
    // AA78 0062;	
    // (꩸) MYANMAR SYMBOL AITON ONE	[0564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA78, 0x0062 };
    uint32_t const ces[9] = { 0x0564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_344)
{
    // AA79 0021;	
    // (꩹) MYANMAR SYMBOL AITON TWO	[0565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA79, 0x0021 };
    uint32_t const ces[9] = { 0x0565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_345)
{
    // AA79 003F;	
    // (꩹) MYANMAR SYMBOL AITON TWO	[0565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA79, 0x003F };
    uint32_t const ces[9] = { 0x0565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_346)
{
    // AA79 0061;	
    // (꩹) MYANMAR SYMBOL AITON TWO	[0565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA79, 0x0061 };
    uint32_t const ces[9] = { 0x0565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_347)
{
    // AA79 0041;	
    // (꩹) MYANMAR SYMBOL AITON TWO	[0565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA79, 0x0041 };
    uint32_t const ces[9] = { 0x0565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_348)
{
    // AA79 0062;	
    // (꩹) MYANMAR SYMBOL AITON TWO	[0565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA79, 0x0062 };
    uint32_t const ces[9] = { 0x0565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_349)
{
    // 1173F 0021;	
    // (𑜿) AHOM SYMBOL VI	[0566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1173F, 0x0021 };
    uint32_t const ces[9] = { 0x0566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_350)
{
    // 1173F 003F;	
    // (𑜿) AHOM SYMBOL VI	[0566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1173F, 0x003F };
    uint32_t const ces[9] = { 0x0566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_351)
{
    // 1173F 0061;	
    // (𑜿) AHOM SYMBOL VI	[0566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1173F, 0x0061 };
    uint32_t const ces[9] = { 0x0566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_352)
{
    // 1173F 0041;	
    // (𑜿) AHOM SYMBOL VI	[0566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1173F, 0x0041 };
    uint32_t const ces[9] = { 0x0566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_353)
{
    // 1173F 0062;	
    // (𑜿) AHOM SYMBOL VI	[0566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1173F, 0x0062 };
    uint32_t const ces[9] = { 0x0566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_354)
{
    // 19E0 0021;	
    // (᧠) KHMER SYMBOL PATHAMASAT	[0567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E0, 0x0021 };
    uint32_t const ces[9] = { 0x0567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_355)
{
    // 19E0 003F;	
    // (᧠) KHMER SYMBOL PATHAMASAT	[0567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E0, 0x003F };
    uint32_t const ces[9] = { 0x0567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_356)
{
    // 19E0 0061;	
    // (᧠) KHMER SYMBOL PATHAMASAT	[0567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E0, 0x0061 };
    uint32_t const ces[9] = { 0x0567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_357)
{
    // 19E0 0041;	
    // (᧠) KHMER SYMBOL PATHAMASAT	[0567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E0, 0x0041 };
    uint32_t const ces[9] = { 0x0567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_358)
{
    // 19E0 0062;	
    // (᧠) KHMER SYMBOL PATHAMASAT	[0567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E0, 0x0062 };
    uint32_t const ces[9] = { 0x0567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_359)
{
    // 19E1 0021;	
    // (᧡) KHMER SYMBOL MUOY KOET	[0568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E1, 0x0021 };
    uint32_t const ces[9] = { 0x0568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_360)
{
    // 19E1 003F;	
    // (᧡) KHMER SYMBOL MUOY KOET	[0568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E1, 0x003F };
    uint32_t const ces[9] = { 0x0568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_361)
{
    // 19E1 0061;	
    // (᧡) KHMER SYMBOL MUOY KOET	[0568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E1, 0x0061 };
    uint32_t const ces[9] = { 0x0568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_362)
{
    // 19E1 0041;	
    // (᧡) KHMER SYMBOL MUOY KOET	[0568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E1, 0x0041 };
    uint32_t const ces[9] = { 0x0568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_363)
{
    // 19E1 0062;	
    // (᧡) KHMER SYMBOL MUOY KOET	[0568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E1, 0x0062 };
    uint32_t const ces[9] = { 0x0568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_364)
{
    // 19E2 0021;	
    // (᧢) KHMER SYMBOL PII KOET	[0569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E2, 0x0021 };
    uint32_t const ces[9] = { 0x0569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_365)
{
    // 19E2 003F;	
    // (᧢) KHMER SYMBOL PII KOET	[0569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E2, 0x003F };
    uint32_t const ces[9] = { 0x0569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_366)
{
    // 19E2 0061;	
    // (᧢) KHMER SYMBOL PII KOET	[0569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E2, 0x0061 };
    uint32_t const ces[9] = { 0x0569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_367)
{
    // 19E2 0041;	
    // (᧢) KHMER SYMBOL PII KOET	[0569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E2, 0x0041 };
    uint32_t const ces[9] = { 0x0569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_368)
{
    // 19E2 0062;	
    // (᧢) KHMER SYMBOL PII KOET	[0569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E2, 0x0062 };
    uint32_t const ces[9] = { 0x0569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_369)
{
    // 19E3 0021;	
    // (᧣) KHMER SYMBOL BEI KOET	[056A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E3, 0x0021 };
    uint32_t const ces[9] = { 0x056A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_370)
{
    // 19E3 003F;	
    // (᧣) KHMER SYMBOL BEI KOET	[056A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E3, 0x003F };
    uint32_t const ces[9] = { 0x056A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_371)
{
    // 19E3 0061;	
    // (᧣) KHMER SYMBOL BEI KOET	[056A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E3, 0x0061 };
    uint32_t const ces[9] = { 0x056A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_372)
{
    // 19E3 0041;	
    // (᧣) KHMER SYMBOL BEI KOET	[056A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E3, 0x0041 };
    uint32_t const ces[9] = { 0x056A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_373)
{
    // 19E3 0062;	
    // (᧣) KHMER SYMBOL BEI KOET	[056A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E3, 0x0062 };
    uint32_t const ces[9] = { 0x056A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_374)
{
    // 19E4 0021;	
    // (᧤) KHMER SYMBOL BUON KOET	[056B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E4, 0x0021 };
    uint32_t const ces[9] = { 0x056B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_375)
{
    // 19E4 003F;	
    // (᧤) KHMER SYMBOL BUON KOET	[056B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E4, 0x003F };
    uint32_t const ces[9] = { 0x056B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_376)
{
    // 19E4 0061;	
    // (᧤) KHMER SYMBOL BUON KOET	[056B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E4, 0x0061 };
    uint32_t const ces[9] = { 0x056B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_377)
{
    // 19E4 0041;	
    // (᧤) KHMER SYMBOL BUON KOET	[056B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E4, 0x0041 };
    uint32_t const ces[9] = { 0x056B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_378)
{
    // 19E4 0062;	
    // (᧤) KHMER SYMBOL BUON KOET	[056B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E4, 0x0062 };
    uint32_t const ces[9] = { 0x056B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_379)
{
    // 19E5 0021;	
    // (᧥) KHMER SYMBOL PRAM KOET	[056C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E5, 0x0021 };
    uint32_t const ces[9] = { 0x056C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_380)
{
    // 19E5 003F;	
    // (᧥) KHMER SYMBOL PRAM KOET	[056C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E5, 0x003F };
    uint32_t const ces[9] = { 0x056C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_381)
{
    // 19E5 0061;	
    // (᧥) KHMER SYMBOL PRAM KOET	[056C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E5, 0x0061 };
    uint32_t const ces[9] = { 0x056C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_382)
{
    // 19E5 0041;	
    // (᧥) KHMER SYMBOL PRAM KOET	[056C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E5, 0x0041 };
    uint32_t const ces[9] = { 0x056C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_383)
{
    // 19E5 0062;	
    // (᧥) KHMER SYMBOL PRAM KOET	[056C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E5, 0x0062 };
    uint32_t const ces[9] = { 0x056C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_384)
{
    // 19E6 0021;	
    // (᧦) KHMER SYMBOL PRAM-MUOY KOET	[056D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E6, 0x0021 };
    uint32_t const ces[9] = { 0x056D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_385)
{
    // 19E6 003F;	
    // (᧦) KHMER SYMBOL PRAM-MUOY KOET	[056D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E6, 0x003F };
    uint32_t const ces[9] = { 0x056D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_386)
{
    // 19E6 0061;	
    // (᧦) KHMER SYMBOL PRAM-MUOY KOET	[056D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E6, 0x0061 };
    uint32_t const ces[9] = { 0x056D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_387)
{
    // 19E6 0041;	
    // (᧦) KHMER SYMBOL PRAM-MUOY KOET	[056D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E6, 0x0041 };
    uint32_t const ces[9] = { 0x056D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_388)
{
    // 19E6 0062;	
    // (᧦) KHMER SYMBOL PRAM-MUOY KOET	[056D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E6, 0x0062 };
    uint32_t const ces[9] = { 0x056D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_389)
{
    // 19E7 0021;	
    // (᧧) KHMER SYMBOL PRAM-PII KOET	[056E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E7, 0x0021 };
    uint32_t const ces[9] = { 0x056E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_390)
{
    // 19E7 003F;	
    // (᧧) KHMER SYMBOL PRAM-PII KOET	[056E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E7, 0x003F };
    uint32_t const ces[9] = { 0x056E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_391)
{
    // 19E7 0061;	
    // (᧧) KHMER SYMBOL PRAM-PII KOET	[056E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E7, 0x0061 };
    uint32_t const ces[9] = { 0x056E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_392)
{
    // 19E7 0041;	
    // (᧧) KHMER SYMBOL PRAM-PII KOET	[056E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E7, 0x0041 };
    uint32_t const ces[9] = { 0x056E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_393)
{
    // 19E7 0062;	
    // (᧧) KHMER SYMBOL PRAM-PII KOET	[056E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E7, 0x0062 };
    uint32_t const ces[9] = { 0x056E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_394)
{
    // 19E8 0021;	
    // (᧨) KHMER SYMBOL PRAM-BEI KOET	[056F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E8, 0x0021 };
    uint32_t const ces[9] = { 0x056F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_395)
{
    // 19E8 003F;	
    // (᧨) KHMER SYMBOL PRAM-BEI KOET	[056F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E8, 0x003F };
    uint32_t const ces[9] = { 0x056F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_396)
{
    // 19E8 0061;	
    // (᧨) KHMER SYMBOL PRAM-BEI KOET	[056F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E8, 0x0061 };
    uint32_t const ces[9] = { 0x056F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_397)
{
    // 19E8 0041;	
    // (᧨) KHMER SYMBOL PRAM-BEI KOET	[056F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E8, 0x0041 };
    uint32_t const ces[9] = { 0x056F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_398)
{
    // 19E8 0062;	
    // (᧨) KHMER SYMBOL PRAM-BEI KOET	[056F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E8, 0x0062 };
    uint32_t const ces[9] = { 0x056F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_399)
{
    // 19E9 0021;	
    // (᧩) KHMER SYMBOL PRAM-BUON KOET	[0570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E9, 0x0021 };
    uint32_t const ces[9] = { 0x0570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_400)
{
    // 19E9 003F;	
    // (᧩) KHMER SYMBOL PRAM-BUON KOET	[0570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E9, 0x003F };
    uint32_t const ces[9] = { 0x0570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_401)
{
    // 19E9 0061;	
    // (᧩) KHMER SYMBOL PRAM-BUON KOET	[0570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E9, 0x0061 };
    uint32_t const ces[9] = { 0x0570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_402)
{
    // 19E9 0041;	
    // (᧩) KHMER SYMBOL PRAM-BUON KOET	[0570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19E9, 0x0041 };
    uint32_t const ces[9] = { 0x0570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_403)
{
    // 19E9 0062;	
    // (᧩) KHMER SYMBOL PRAM-BUON KOET	[0570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19E9, 0x0062 };
    uint32_t const ces[9] = { 0x0570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_404)
{
    // 19EA 0021;	
    // (᧪) KHMER SYMBOL DAP KOET	[0571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EA, 0x0021 };
    uint32_t const ces[9] = { 0x0571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_405)
{
    // 19EA 003F;	
    // (᧪) KHMER SYMBOL DAP KOET	[0571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EA, 0x003F };
    uint32_t const ces[9] = { 0x0571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_406)
{
    // 19EA 0061;	
    // (᧪) KHMER SYMBOL DAP KOET	[0571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EA, 0x0061 };
    uint32_t const ces[9] = { 0x0571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_407)
{
    // 19EA 0041;	
    // (᧪) KHMER SYMBOL DAP KOET	[0571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19EA, 0x0041 };
    uint32_t const ces[9] = { 0x0571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_408)
{
    // 19EA 0062;	
    // (᧪) KHMER SYMBOL DAP KOET	[0571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EA, 0x0062 };
    uint32_t const ces[9] = { 0x0571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_409)
{
    // 19EB 0021;	
    // (᧫) KHMER SYMBOL DAP-MUOY KOET	[0572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EB, 0x0021 };
    uint32_t const ces[9] = { 0x0572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_410)
{
    // 19EB 003F;	
    // (᧫) KHMER SYMBOL DAP-MUOY KOET	[0572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EB, 0x003F };
    uint32_t const ces[9] = { 0x0572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_411)
{
    // 19EB 0061;	
    // (᧫) KHMER SYMBOL DAP-MUOY KOET	[0572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EB, 0x0061 };
    uint32_t const ces[9] = { 0x0572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_412)
{
    // 19EB 0041;	
    // (᧫) KHMER SYMBOL DAP-MUOY KOET	[0572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19EB, 0x0041 };
    uint32_t const ces[9] = { 0x0572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_413)
{
    // 19EB 0062;	
    // (᧫) KHMER SYMBOL DAP-MUOY KOET	[0572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EB, 0x0062 };
    uint32_t const ces[9] = { 0x0572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_414)
{
    // 19EC 0021;	
    // (᧬) KHMER SYMBOL DAP-PII KOET	[0573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EC, 0x0021 };
    uint32_t const ces[9] = { 0x0573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_415)
{
    // 19EC 003F;	
    // (᧬) KHMER SYMBOL DAP-PII KOET	[0573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EC, 0x003F };
    uint32_t const ces[9] = { 0x0573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_416)
{
    // 19EC 0061;	
    // (᧬) KHMER SYMBOL DAP-PII KOET	[0573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EC, 0x0061 };
    uint32_t const ces[9] = { 0x0573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_417)
{
    // 19EC 0041;	
    // (᧬) KHMER SYMBOL DAP-PII KOET	[0573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19EC, 0x0041 };
    uint32_t const ces[9] = { 0x0573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_418)
{
    // 19EC 0062;	
    // (᧬) KHMER SYMBOL DAP-PII KOET	[0573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EC, 0x0062 };
    uint32_t const ces[9] = { 0x0573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_419)
{
    // 19ED 0021;	
    // (᧭) KHMER SYMBOL DAP-BEI KOET	[0574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19ED, 0x0021 };
    uint32_t const ces[9] = { 0x0574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_420)
{
    // 19ED 003F;	
    // (᧭) KHMER SYMBOL DAP-BEI KOET	[0574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19ED, 0x003F };
    uint32_t const ces[9] = { 0x0574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_421)
{
    // 19ED 0061;	
    // (᧭) KHMER SYMBOL DAP-BEI KOET	[0574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19ED, 0x0061 };
    uint32_t const ces[9] = { 0x0574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_422)
{
    // 19ED 0041;	
    // (᧭) KHMER SYMBOL DAP-BEI KOET	[0574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19ED, 0x0041 };
    uint32_t const ces[9] = { 0x0574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_423)
{
    // 19ED 0062;	
    // (᧭) KHMER SYMBOL DAP-BEI KOET	[0574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19ED, 0x0062 };
    uint32_t const ces[9] = { 0x0574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_424)
{
    // 19EE 0021;	
    // (᧮) KHMER SYMBOL DAP-BUON KOET	[0575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EE, 0x0021 };
    uint32_t const ces[9] = { 0x0575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_425)
{
    // 19EE 003F;	
    // (᧮) KHMER SYMBOL DAP-BUON KOET	[0575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EE, 0x003F };
    uint32_t const ces[9] = { 0x0575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_426)
{
    // 19EE 0061;	
    // (᧮) KHMER SYMBOL DAP-BUON KOET	[0575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EE, 0x0061 };
    uint32_t const ces[9] = { 0x0575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_427)
{
    // 19EE 0041;	
    // (᧮) KHMER SYMBOL DAP-BUON KOET	[0575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19EE, 0x0041 };
    uint32_t const ces[9] = { 0x0575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_428)
{
    // 19EE 0062;	
    // (᧮) KHMER SYMBOL DAP-BUON KOET	[0575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EE, 0x0062 };
    uint32_t const ces[9] = { 0x0575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_429)
{
    // 19EF 0021;	
    // (᧯) KHMER SYMBOL DAP-PRAM KOET	[0576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EF, 0x0021 };
    uint32_t const ces[9] = { 0x0576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_430)
{
    // 19EF 003F;	
    // (᧯) KHMER SYMBOL DAP-PRAM KOET	[0576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EF, 0x003F };
    uint32_t const ces[9] = { 0x0576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_431)
{
    // 19EF 0061;	
    // (᧯) KHMER SYMBOL DAP-PRAM KOET	[0576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EF, 0x0061 };
    uint32_t const ces[9] = { 0x0576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_432)
{
    // 19EF 0041;	
    // (᧯) KHMER SYMBOL DAP-PRAM KOET	[0576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19EF, 0x0041 };
    uint32_t const ces[9] = { 0x0576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_433)
{
    // 19EF 0062;	
    // (᧯) KHMER SYMBOL DAP-PRAM KOET	[0576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19EF, 0x0062 };
    uint32_t const ces[9] = { 0x0576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_434)
{
    // 19F0 0021;	
    // (᧰) KHMER SYMBOL TUTEYASAT	[0577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F0, 0x0021 };
    uint32_t const ces[9] = { 0x0577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_435)
{
    // 19F0 003F;	
    // (᧰) KHMER SYMBOL TUTEYASAT	[0577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F0, 0x003F };
    uint32_t const ces[9] = { 0x0577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_436)
{
    // 19F0 0061;	
    // (᧰) KHMER SYMBOL TUTEYASAT	[0577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F0, 0x0061 };
    uint32_t const ces[9] = { 0x0577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_437)
{
    // 19F0 0041;	
    // (᧰) KHMER SYMBOL TUTEYASAT	[0577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F0, 0x0041 };
    uint32_t const ces[9] = { 0x0577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_438)
{
    // 19F0 0062;	
    // (᧰) KHMER SYMBOL TUTEYASAT	[0577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F0, 0x0062 };
    uint32_t const ces[9] = { 0x0577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_439)
{
    // 19F1 0021;	
    // (᧱) KHMER SYMBOL MUOY ROC	[0578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F1, 0x0021 };
    uint32_t const ces[9] = { 0x0578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_440)
{
    // 19F1 003F;	
    // (᧱) KHMER SYMBOL MUOY ROC	[0578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F1, 0x003F };
    uint32_t const ces[9] = { 0x0578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_441)
{
    // 19F1 0061;	
    // (᧱) KHMER SYMBOL MUOY ROC	[0578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F1, 0x0061 };
    uint32_t const ces[9] = { 0x0578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_442)
{
    // 19F1 0041;	
    // (᧱) KHMER SYMBOL MUOY ROC	[0578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F1, 0x0041 };
    uint32_t const ces[9] = { 0x0578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_443)
{
    // 19F1 0062;	
    // (᧱) KHMER SYMBOL MUOY ROC	[0578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F1, 0x0062 };
    uint32_t const ces[9] = { 0x0578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_444)
{
    // 19F2 0021;	
    // (᧲) KHMER SYMBOL PII ROC	[0579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F2, 0x0021 };
    uint32_t const ces[9] = { 0x0579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_445)
{
    // 19F2 003F;	
    // (᧲) KHMER SYMBOL PII ROC	[0579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F2, 0x003F };
    uint32_t const ces[9] = { 0x0579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_446)
{
    // 19F2 0061;	
    // (᧲) KHMER SYMBOL PII ROC	[0579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F2, 0x0061 };
    uint32_t const ces[9] = { 0x0579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_447)
{
    // 19F2 0041;	
    // (᧲) KHMER SYMBOL PII ROC	[0579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F2, 0x0041 };
    uint32_t const ces[9] = { 0x0579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_448)
{
    // 19F2 0062;	
    // (᧲) KHMER SYMBOL PII ROC	[0579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F2, 0x0062 };
    uint32_t const ces[9] = { 0x0579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_449)
{
    // 19F3 0021;	
    // (᧳) KHMER SYMBOL BEI ROC	[057A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F3, 0x0021 };
    uint32_t const ces[9] = { 0x057A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_450)
{
    // 19F3 003F;	
    // (᧳) KHMER SYMBOL BEI ROC	[057A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F3, 0x003F };
    uint32_t const ces[9] = { 0x057A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_451)
{
    // 19F3 0061;	
    // (᧳) KHMER SYMBOL BEI ROC	[057A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F3, 0x0061 };
    uint32_t const ces[9] = { 0x057A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_452)
{
    // 19F3 0041;	
    // (᧳) KHMER SYMBOL BEI ROC	[057A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F3, 0x0041 };
    uint32_t const ces[9] = { 0x057A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_453)
{
    // 19F3 0062;	
    // (᧳) KHMER SYMBOL BEI ROC	[057A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F3, 0x0062 };
    uint32_t const ces[9] = { 0x057A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_454)
{
    // 19F4 0021;	
    // (᧴) KHMER SYMBOL BUON ROC	[057B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F4, 0x0021 };
    uint32_t const ces[9] = { 0x057B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_455)
{
    // 19F4 003F;	
    // (᧴) KHMER SYMBOL BUON ROC	[057B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F4, 0x003F };
    uint32_t const ces[9] = { 0x057B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_456)
{
    // 19F4 0061;	
    // (᧴) KHMER SYMBOL BUON ROC	[057B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F4, 0x0061 };
    uint32_t const ces[9] = { 0x057B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_457)
{
    // 19F4 0041;	
    // (᧴) KHMER SYMBOL BUON ROC	[057B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F4, 0x0041 };
    uint32_t const ces[9] = { 0x057B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_458)
{
    // 19F4 0062;	
    // (᧴) KHMER SYMBOL BUON ROC	[057B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F4, 0x0062 };
    uint32_t const ces[9] = { 0x057B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_459)
{
    // 19F5 0021;	
    // (᧵) KHMER SYMBOL PRAM ROC	[057C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F5, 0x0021 };
    uint32_t const ces[9] = { 0x057C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_460)
{
    // 19F5 003F;	
    // (᧵) KHMER SYMBOL PRAM ROC	[057C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F5, 0x003F };
    uint32_t const ces[9] = { 0x057C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_461)
{
    // 19F5 0061;	
    // (᧵) KHMER SYMBOL PRAM ROC	[057C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F5, 0x0061 };
    uint32_t const ces[9] = { 0x057C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_462)
{
    // 19F5 0041;	
    // (᧵) KHMER SYMBOL PRAM ROC	[057C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F5, 0x0041 };
    uint32_t const ces[9] = { 0x057C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_463)
{
    // 19F5 0062;	
    // (᧵) KHMER SYMBOL PRAM ROC	[057C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F5, 0x0062 };
    uint32_t const ces[9] = { 0x057C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_464)
{
    // 19F6 0021;	
    // (᧶) KHMER SYMBOL PRAM-MUOY ROC	[057D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F6, 0x0021 };
    uint32_t const ces[9] = { 0x057D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_465)
{
    // 19F6 003F;	
    // (᧶) KHMER SYMBOL PRAM-MUOY ROC	[057D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F6, 0x003F };
    uint32_t const ces[9] = { 0x057D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_466)
{
    // 19F6 0061;	
    // (᧶) KHMER SYMBOL PRAM-MUOY ROC	[057D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F6, 0x0061 };
    uint32_t const ces[9] = { 0x057D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_467)
{
    // 19F6 0041;	
    // (᧶) KHMER SYMBOL PRAM-MUOY ROC	[057D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F6, 0x0041 };
    uint32_t const ces[9] = { 0x057D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_468)
{
    // 19F6 0062;	
    // (᧶) KHMER SYMBOL PRAM-MUOY ROC	[057D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F6, 0x0062 };
    uint32_t const ces[9] = { 0x057D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_469)
{
    // 19F7 0021;	
    // (᧷) KHMER SYMBOL PRAM-PII ROC	[057E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F7, 0x0021 };
    uint32_t const ces[9] = { 0x057E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_470)
{
    // 19F7 003F;	
    // (᧷) KHMER SYMBOL PRAM-PII ROC	[057E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F7, 0x003F };
    uint32_t const ces[9] = { 0x057E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_471)
{
    // 19F7 0061;	
    // (᧷) KHMER SYMBOL PRAM-PII ROC	[057E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F7, 0x0061 };
    uint32_t const ces[9] = { 0x057E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_472)
{
    // 19F7 0041;	
    // (᧷) KHMER SYMBOL PRAM-PII ROC	[057E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F7, 0x0041 };
    uint32_t const ces[9] = { 0x057E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_473)
{
    // 19F7 0062;	
    // (᧷) KHMER SYMBOL PRAM-PII ROC	[057E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F7, 0x0062 };
    uint32_t const ces[9] = { 0x057E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_474)
{
    // 19F8 0021;	
    // (᧸) KHMER SYMBOL PRAM-BEI ROC	[057F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F8, 0x0021 };
    uint32_t const ces[9] = { 0x057F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_475)
{
    // 19F8 003F;	
    // (᧸) KHMER SYMBOL PRAM-BEI ROC	[057F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F8, 0x003F };
    uint32_t const ces[9] = { 0x057F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_476)
{
    // 19F8 0061;	
    // (᧸) KHMER SYMBOL PRAM-BEI ROC	[057F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F8, 0x0061 };
    uint32_t const ces[9] = { 0x057F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_477)
{
    // 19F8 0041;	
    // (᧸) KHMER SYMBOL PRAM-BEI ROC	[057F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F8, 0x0041 };
    uint32_t const ces[9] = { 0x057F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_478)
{
    // 19F8 0062;	
    // (᧸) KHMER SYMBOL PRAM-BEI ROC	[057F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F8, 0x0062 };
    uint32_t const ces[9] = { 0x057F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_479)
{
    // 19F9 0021;	
    // (᧹) KHMER SYMBOL PRAM-BUON ROC	[0580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F9, 0x0021 };
    uint32_t const ces[9] = { 0x0580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_480)
{
    // 19F9 003F;	
    // (᧹) KHMER SYMBOL PRAM-BUON ROC	[0580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F9, 0x003F };
    uint32_t const ces[9] = { 0x0580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_481)
{
    // 19F9 0061;	
    // (᧹) KHMER SYMBOL PRAM-BUON ROC	[0580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F9, 0x0061 };
    uint32_t const ces[9] = { 0x0580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_482)
{
    // 19F9 0041;	
    // (᧹) KHMER SYMBOL PRAM-BUON ROC	[0580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19F9, 0x0041 };
    uint32_t const ces[9] = { 0x0580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_483)
{
    // 19F9 0062;	
    // (᧹) KHMER SYMBOL PRAM-BUON ROC	[0580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19F9, 0x0062 };
    uint32_t const ces[9] = { 0x0580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_484)
{
    // 19FA 0021;	
    // (᧺) KHMER SYMBOL DAP ROC	[0581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FA, 0x0021 };
    uint32_t const ces[9] = { 0x0581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_485)
{
    // 19FA 003F;	
    // (᧺) KHMER SYMBOL DAP ROC	[0581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FA, 0x003F };
    uint32_t const ces[9] = { 0x0581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_486)
{
    // 19FA 0061;	
    // (᧺) KHMER SYMBOL DAP ROC	[0581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FA, 0x0061 };
    uint32_t const ces[9] = { 0x0581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_487)
{
    // 19FA 0041;	
    // (᧺) KHMER SYMBOL DAP ROC	[0581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FA, 0x0041 };
    uint32_t const ces[9] = { 0x0581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_488)
{
    // 19FA 0062;	
    // (᧺) KHMER SYMBOL DAP ROC	[0581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FA, 0x0062 };
    uint32_t const ces[9] = { 0x0581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_489)
{
    // 19FB 0021;	
    // (᧻) KHMER SYMBOL DAP-MUOY ROC	[0582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FB, 0x0021 };
    uint32_t const ces[9] = { 0x0582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_490)
{
    // 19FB 003F;	
    // (᧻) KHMER SYMBOL DAP-MUOY ROC	[0582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FB, 0x003F };
    uint32_t const ces[9] = { 0x0582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_491)
{
    // 19FB 0061;	
    // (᧻) KHMER SYMBOL DAP-MUOY ROC	[0582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FB, 0x0061 };
    uint32_t const ces[9] = { 0x0582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_492)
{
    // 19FB 0041;	
    // (᧻) KHMER SYMBOL DAP-MUOY ROC	[0582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FB, 0x0041 };
    uint32_t const ces[9] = { 0x0582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_493)
{
    // 19FB 0062;	
    // (᧻) KHMER SYMBOL DAP-MUOY ROC	[0582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FB, 0x0062 };
    uint32_t const ces[9] = { 0x0582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_494)
{
    // 19FC 0021;	
    // (᧼) KHMER SYMBOL DAP-PII ROC	[0583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FC, 0x0021 };
    uint32_t const ces[9] = { 0x0583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_495)
{
    // 19FC 003F;	
    // (᧼) KHMER SYMBOL DAP-PII ROC	[0583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FC, 0x003F };
    uint32_t const ces[9] = { 0x0583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_496)
{
    // 19FC 0061;	
    // (᧼) KHMER SYMBOL DAP-PII ROC	[0583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FC, 0x0061 };
    uint32_t const ces[9] = { 0x0583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_497)
{
    // 19FC 0041;	
    // (᧼) KHMER SYMBOL DAP-PII ROC	[0583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FC, 0x0041 };
    uint32_t const ces[9] = { 0x0583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_498)
{
    // 19FC 0062;	
    // (᧼) KHMER SYMBOL DAP-PII ROC	[0583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FC, 0x0062 };
    uint32_t const ces[9] = { 0x0583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_019_499)
{
    // 19FD 0021;	
    // (᧽) KHMER SYMBOL DAP-BEI ROC	[0584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FD, 0x0021 };
    uint32_t const ces[9] = { 0x0584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

